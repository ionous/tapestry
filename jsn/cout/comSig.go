package cout

import (
	"strings"
	"unicode"
)

// Sig helps build the "lede" used the compact format
// ex. "Else if:from:and:do:else:"
type Sig struct {
	out    strings.Builder
	labels int
}

func (b *Sig) String() string {
	return b.out.String()
}

// lede is in break_case
func (b *Sig) WriteLede(s string) {
	// change autogenerated break_case into PascalCase
	writeBreak(&b.out, s, true)
}

// label is in break_case
func (b *Sig) WriteLabel(s string) {
	// write non-anonymous labels
	if len(s) > 0 {
		// add space between the lede and the first non-anonymous label
		if b.labels == 0 {
			b.out.WriteRune(' ')
		}
		// change autogenerated break_case into camelCase
		writeBreak(&b.out, s, false)
	}
	// all labels ( even anonymous ones ) are terminated by colons
	b.out.WriteRune(':')
	b.labels++
}

func writeBreak(out *strings.Builder, s string, cap bool) {
	for _, r := range s {
		if r == '_' {
			cap = true
		} else {
			if cap {
				r = unicode.ToUpper(r)
				cap = false
			}
			out.WriteRune(r)
		}
	}
}
