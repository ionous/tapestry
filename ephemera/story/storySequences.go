package story

import (
	"git.sr.ht/~ionous/iffy/dl/core"
	"git.sr.ht/~ionous/iffy/ephemera/reader"
)

func (op *CycleText) ImportStub(k *Importer) (ret interface{}, err error) {
	seq := core.Sequence{Parts: op.Parts, Seq: k.newCounter("seq", op.At)}
	ret = &core.CycleText{Sequence: seq}
	return
}

func (op *ShuffleText) ImportStub(k *Importer) (ret interface{}, err error) {
	seq := core.Sequence{Parts: op.Parts, Seq: k.newCounter("seq", op.At)}
	ret = &core.ShuffleText{Sequence: seq}
	return
}

func (op *StoppingText) ImportStub(k *Importer) (ret interface{}, err error) {
	seq := core.Sequence{Parts: op.Parts, Seq: k.newCounter("seq", op.At)}
	ret = &core.StoppingText{Sequence: seq}
	return
}

func (op *CountOf) ImportStub(k *Importer) (ret interface{}, err error) {
	seq := core.CountOf{Pos: op.At, Num: op.Num, Trigger: op.Trigger}
	if !seq.Pos.IsValid() {
		seq.Pos = reader.Position{Source: "countOf", Offset: k.autoCounter.Next("seq")}
	}
	ret = &seq
	return
}

// generate a unique name for the counter --
// for stability's sake, preferring an existing id in the source to an autogenerated id.
func (k *Importer) newCounter(name string, at reader.Position) (ret string) {
	if at.IsValid() {
		ret = name + "_" + at.String() // COUNTER:#
	} else {
		ret = k.autoCounter.Next(name)
	}
	return
}
