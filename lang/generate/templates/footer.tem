{{- range .Types }}{{ if and (eq .Type "flow") .List }}
// init the terms of all flows in init 
// so that they can refer to each other when needed.
func init() {
{{- range .List }}
	Zt_{{Pascal .Name}} = typeinfo.Flow{
		Name: "{{.Name}}",
		Lede: "{{.Lede}}",
		Terms: []typeinfo.Term{
	{{- range $i, $t := .Terms -}}{{if $i}},{{end}}{
			Name: "{{$t.Name}}",{{if $t.SimpleLabel}}
			Label: "{{$t.SimpleLabel}}",{{end}}{{if $t.Private}}
			Private: true,{{end}}{{if $t.Optional}}
			Optional: true,{{end}}{{if $t.Repeats}}
			Repeats: true,{{end}}{{if not $t.Private}}
			{{- template "markup.tem" .}}
			Type: &{{PackageDot $t.Type}}Zt_{{Pascal $t.Type}},{{end}}
		}
	{{- end -}}
	{{/**/}}		},
		{{- if .Slots }} 
		Slots: []*typeinfo.Slot{ 
		{{- range $i, $s := .Slots }}
			&{{PackageDot $s}}Zt_{{Pascal $s}},
		{{- end }}
		},
		{{- end }}
		{{- template "markup.tem" .}}
	}
{{- end }}
}
{{- end }}{{- end }}

// package listing of type data
var Z_Types = typeinfo.TypeSet{
	Name:  "{{.Name}}",
{{- if .Comment }}
	Comment: []string{ 
	{{- range .Comment }}
	{{printf "%q" .}},
	{{- end }}
	},
{{ end }}
{{- range .Types }}{{ if .List }}
	{{Pascal .Type}}:  z_{{.Type}}_list,
{{- end }}{{ end }}
{{- if .Signatures }}
	Signatures: z_signatures,
{{- end }}
}
{{- range .Types }}{{ if .List }}
{{ template "types.tem" . }}
{{- end }}{{ end }}

// gob like registration
func Register(reg func(any)) {
{{- range .Types }}{{ if and (eq .Type "flow") .List }}
{{- range .List }}
	reg((*{{Pascal .Name}})(nil))
{{- end }}
{{- end }}{{- end }}
}

{{- if .Signatures }}
// a list of all command signatures
// ( for processing and verifying story files )
var z_signatures = map[uint64]typeinfo.Instance{
{{- range .Signatures }}
  {{.Hash}}: (*{{Pascal .Type}})(nil), /* {{.Sig}} */
{{- end }}
}
{{- end }}
