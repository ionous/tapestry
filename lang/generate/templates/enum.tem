{{- if .Markup.comment }}
{{- range CommentLines .Markup }}
// {{ . }}
{{- end }}
{{- else }}
// {{Pascal .Name}}, a type of str enum.
{{- end }}
type {{Pascal .Name}} int

// The enumerated values of {{Pascal .Name}}.
const (
{{- range $i, $opt := .Options }}
  C_{{Pascal $.Name}}_{{Pascal $opt}} {{if not $i}}{{Pascal $.Name}} = iota{{end}}
{{- end }}
)

func Make{{Pascal .Name}}(str string) (ret {{Pascal .Name}}, okay bool) {
	if i:= Zt_{{Pascal .Name}}.FindOption(str); i >= 0 {
		ret, okay = {{Pascal .Name}}(i), true
	}
	return 
}

func (op {{Pascal .Name}}) String() (ret string) {
	if i, opts := int(op), Zt_{{Pascal .Name}}.Options; i >= 0 && i < len(opts) {
		ret = opts[i]
	} else {
		ret = "Invalid {{Pascal .Name}}(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return 
}

// {{.Name}}, a type of str enum.
var Zt_{{Pascal .Name}} = typeinfo.Str{
	Name: "{{.Name}}",
	Options: []string{
	{{- range $i, $opt := .Options }}
		"{{$opt}}",
	{{- end }}
	},
	{{- if .OptionComments }}
	OptionComments: []string{
	{{- range $i, $opt := .OptionComments }}
		"{{$opt}}",
	{{- end }}
	},
	{{- end }}
	{{- template "markup.tmpl" .}}
}
