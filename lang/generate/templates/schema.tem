{{/* ------------------------------------------ 
  expects text.
  names are prefixed with tilde so that they don't match in autocomplete.
   ------------------------------------------ */}}
{{- define "ref" }}
"$ref": "#/$defs/~{{ . }}"
{{- end }}

{{/* ------------------------------------------ 
  expects sigTerm,
  sublime and vscode hovers look better without title.
  we already know what we're hovering.
  golsp seems not to use the title either.
   ------------------------------------------ */}}
{{- define "titledesc" -}}
  "description": "{{ .SchemaComment }}",
  "markdownDescription": "{{ .SchemaComment }}"
{{- end }}

{{/* ------------------------------------------ 
  expects sigTerm
   ------------------------------------------ */}}
{{- define "typedesc" -}}
{{- with $sigTerm := . -}}
\n\n---\n{{ 
  .Signature }}\n{{/* */ -}}
```yaml\n{{
  range .Terms 
  }}- {{ if .SimpleLabel }}{{ 
      .SimpleLabel }}{{ else 
  }}{{ $sigTerm.Lede }}{{ end
  }}: {{ Pascal .Type }}{{ 
    if .Repeats 
  }}...{{ end }}\n{{ 
end -}}
```\n{{/* */ -}}
{{- end -}}
{{- end -}}

{{/* ------------------------------------------ 
  expects slice of TypeLink
   ------------------------------------------ */}}
{{- define "typelinks" -}}
Types: {{ range $idx, $t := . -}}
{{- if $idx }}, {{ end -}}
[{{ Pascal .Type }}]({{ .Link }})
{{- end -}}
{{- end -}}

{{/* ------------------------------------------ */}}
{
  {{/* redhat yaml-language-server and vscode idxelf use draft 7 */}}
  "$schema": "https://json-schema.org/draft-07/schema",
  "$id": "{{ .SchemaId }}",
  {{ template "titledesc" . }}, 
  {{- /* the top level is an array of story statements*/}}
  "oneOf": [{
  		{{ template "ref" "story.story_statement" }}
  	},{
  	"type": "array",
  	"items": {
		    {{ template "ref" "story.story_statement" }}
		  }
  	}],
   "$defs": {
   	{{/* ------------------------------------------ 
      slots.
     ------------------------------------------  */}}
    {{ range $op := .Slot }} {{/* a map containing slotCommand(s) */}}      
    "~{{ .Idl }}.{{ .Name }}": {
        {{ template "titledesc" . }},
        "anyOf": [ {{/* technically should be oneOf, but this behaves better */}}
          {{/* 
          		handle shortcuts for dot variables and objects
          */}}
          {{ if ( Contains .Name "bool_eval" "number_eval" "text_eval"
            "num_list_eval" "text_list_eval" "record_eval" "record_list_eval"
            "address" ) }}
          {
          	"type": "string",
          	{{- /* start with an at sign */}}
            "pattern": "^@",
            "description": "A {{ if .ChopEval 
            	}}{{ Title .ChopEval }} {{end -}} variable.",
            "markdownDescription": "A {{ if .ChopEval 
            	}}[{{ Title .ChopEval }}]({{ .Link }}) {{end -}} variable."
          },
          {
          	"type": "string",
          	{{- /* start with hash and has a dot somewhere */}}
            "pattern": "^#\\w+\\.", 
            "description": "An object {{ if .ChopEval 
            	}}{{ Title .ChopEval }} {{end -}} field.",
            "markdownDescription": "An object {{ if .ChopEval 
            	}}[{{ Title .ChopEval }}]({{ .Link }}) {{end -}} field."
          },
          {{ end }}
          {{/* 
          		handle literal.DecodeLiteral 
          */}}
          {{ if eq .Name "bool_eval" }}
	          {
	            "type": "boolean",
	            "description": "The specified true/false value."
	          },
	          {
	          	{{- /* an object name without a dot */}}
	            "type": "string",
	          	"pattern": "^#[^\\.]+$", 
	            "description": "True if the object exists."
	          },
          {{ else if eq .Name "number_eval" }}
	          {
	            "type": "number",
	            "description": "The specified number."
	          },
          {{ else if eq .Name "text_eval" }}
	          {
	            "type": "string",
	            "description": "The specified text."
	          },
	          {
	          	{{- /* an object name without a dot */}}
	            "type": "string",
	            "pattern": "^#[^\\.]+$",
	            "description": "The object's full name."
	          },
          {{ else if eq .Name "num_list_eval" }}
	          {
	            "type": "array",
	            "items": { "type": "number", "description": "The specified number." },
	            "description": "A list of numbers."
	          },
	          {{ else if eq .Name "text_list_eval" }}
	          {
	            "type": "array",
	            "items": { "type": "string", "description": "The specified text." },
	            "description": "A list of text."
	          },
          {{ end }}
          {{/* 
          		all of the commands used by this slot
          */}}
          {{- range $idx, $t := .Types -}}
            {{- if $idx }},{{ end }}
            { {{ template "ref" .TypeScope -}} }
          {{ end }}
        ]
      },
    {{- end }}{{/* slot */}}
    {{/* ------------------------------------------ 
      strings and enums
     ------------------------------------------  */}}
    {{ range  .Str }}
    "~{{ .Idl }}.{{ .Name }}": {
      {{ template "titledesc" . }},
      {{ if eq .Name "lines" }}
	   	 	"type": ["string", "array"],
        "description": "One or more lines of text.",
        "items": { 
        	"type": "string", 
          "description": "One or more lines of text."
        }
        {{ else }}
        	"type": "string"
	        {{- if .Options }},
		        "enum": [
		        {{- range $idx, $opt := .Options -}}
		          {{- if $idx }},{{ end }} "{{ . }}"
		        {{- end }} ]
		        {{ end }}
		        {{- if .OptionComments }},
		        "enumDescriptions": [
		        {{- range $idx, $opt := .OptionComments -}}
		          {{- if $idx }},{{ end }} "{{ . }}"
		        {{- end }} ]
	        {{ end }}{{/* options */}}
        {{ end }}{{/* lines */}}
      },
    {{ end }}{{/* str */}}
    {{/* ------------------------------------------ 
      numbers
     ------------------------------------------  */}}
    {{ range .Num }}
    "~{{ .Idl }}.{{ .Name }}":{
        {{ template "titledesc" . }},
        "type": "number"
      },
    {{ end }}{{/* num */}}
   {{/* ------------------------------------------ 
      individual commands
     ------------------------------------------  */}}
    {{ range $op := .Flow }}
    "~{{ .Idl }}.{{ .Name }}": {
        "type": "object",
        "anyOf": [ {{/* technically should be oneOf, but this behaves better */}}
        {{- range $idx, $sigTerm := .Signatures -}}
          {{- if $idx }},{{ end }}
            {
            "required": [
              "{{ .TrimmedSignature }}"
            ],
            "properties": {
              "{{ .TrimmedSignature }}": {
                "description": "{{ $op.SchemaComment }}",
                "markdownDescription": 
                "{{ $op.SchemaComment }}{{ 
                  template "typedesc" . }}{{
                  template "typelinks" .TypeLinks }}",
              {{- if not .Terms }}
                 "type": "null"
              {{- else if (not (eq 1 (len .Terms))) }}
								"type": "array",
								"additionalItems": false,
								"items": [
								{{- range $it, $term:= .Terms -}}
								  {{- if $it }},{{ end }}
								  { {{ template "ref" (print $op.Idl "." $op.Name "." .Name) }} }
								{{ end }}
								]
							{{ else }}
								{{- with index .Terms 0 -}}
				        	"oneOf": [{
				        		{{/* allow a single object */}}
				        		{{ template "ref" (print $op.Idl "." $op.Name "." .Name) }}
				        	},{ 
				        		{{/* or an array containing this one term */}}
				        		"type": "array",
										"additionalItems": false,
										"items": [
										  { {{ template "ref" (print $op.Idl "." $op.Name "." .Name) }} }
										]
				        	}]
				        {{- end }}{{/* range of one */}}
              {{- end }}{{/* if not/len terms */}}
              } {{/* signature */}}
            }{{/* properties */}}
          }
        {{ end }}{{/* range Signatures */}}
        ]
      },
      {{/*  ------------------------------------------ 
         terms ( per command )
        ------------------------------------------  */}}
      {{- range .Terms -}}
      {{ if not .Private }}
      "~{{ $op.Idl }}.{{ $op.Name }}.{{ .Name }}":
        {
        	{{- if not .Repeats }}
        		{{ template "ref" .TypeScope }}
        	{{ else }}
        	"oneOf": [{
        		{{/* also allow a single object */}}
        		{{ template "ref" .TypeScope }}
        	},{
        		"type": "array",
        		{{- /* the docs are confusing, but: in draft 7
         	   the value of "items" indicates the array type.
         	   a json object means repeating items;
         	   a json array, a tuple. */}}
        		"items": { 	{{ template "ref" .TypeScope }} },
	         	"description": "{{ .SchemaComment }}",
	         	"markdownDescription": "{{ 
	         		.SchemaComment 
	          }}\n\nType: [{{ Pascal .Type }}]({{ .Link }})"
        	}]
      		{{- end }}{{/* if  repeats */}}
        },
      {{ end }}
      {{ end }}{{/* range terms */}}
    {{ end }}{{/* flow */}}
    "xxx_eat_the_trailing_comma": {}
  }{{/* defs */}}
}
