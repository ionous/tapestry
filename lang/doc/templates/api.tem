<h1>API Reference</h1>

<p>
You've found the documentation for the commands used in <i>.tell</i> story files. For the Go language reference, see <a href="{{ .SourceUrl }}">pkg.go.dev</a>. For more descriptive documentation, see the <a href="/">Tapestry guide.</a>

<section>
<h2>Slots</h2>
<h3>Overview</h3>
<p>
Tapestry story files contain a list of Story Statement slots. Various commands can fit into those slots, the complete list of which can be found on the <a href="{{ LinkByName "story_statement"}}">Story Statement</a> page. Taken together, those commands allow an author to model a complete game world.
</p>
<p>
In order to branch from world modeling into changing how a game behaves at runtime, some commands have parameters which specify other types of slots. And those slots allow other types of commands. For instance, to change how a player's input is processed, the story command <a href="{{ LinkByName "define_leading_grammar"}}"><i>Interpret:with:</i></a> accepts a <a href="{{ LinkByName "scanner_maker"}}">Scanner Maker</a>, and scanner maker commands <a href="{{ LinkByIdl "grammar"}}">customize the parser.</a>
</p>
<h3>Index</h3>

<p>This is the list of all known slots:

	<ul class="indexList">
		{{ range .Slots }}{{ if not .Markup.internal }}
		<li>
			<a href="{{ LinkByType . }}">{{ Title .Name }}</a>: {{ Snippet .Markup }}
		</li>
		{{ end }}{{ end }}
	</ul>
</section>

<section>
<h2>Definition Files</h2>
<h3>Overview</h3>

Tapestry uses a custom interface description language for defining slots and commands. And the various idl files are separated by functionality.

<h3>Index</h3>

<p>This is the list of all known idl files:

<ul class="indexList">
{{- range .AllTypes }}
<li><a href="{{ LinkByIdl .Name }}">{{ Title .Name}}</a>: {{ Snippet .Comment }}</li>
{{- end }}
</ul>
</section>