{{/* --------------------------------------	*/}}
{{ define "primindex" }}
<ul class="indexList">
	{{ range . }}
		<li>
			<a class="code" href="{{ LinkByName .TypeName }}">{{ Title .TypeName }}</a>: {{ Snippet .TypeMarkup }}
		</li>
	{{ end }}
	</ul>
{{ end }}
{{/* --------------------------------------	*/}}
<h1>Alphabetical Index</h1>

<p>
This is the complete list of numeric and string types, and slots and commands used by Tapestry. 
<p> The numeric and string types listed here are different than what's used by objects and variables at runtime. Runtime types are defined by the <a href="{{ LinkByIdl "rtti" }}">rtti</a> slots ( and by the game model. )

{{/* ----------  num -----------------------	*/}}
<section>
<h2>
	Numeric Types
</h2>
<h3>Overview</h3>
<p>These are the numeric types used to define commands. For runtime types, see the <a href="{{ LinkByIdl "rtti" }}">rtti</a> slots.
<h3>Index</h3>
{{ template "primindex" .Num }}
</section>
{{/* ---------- str  -----------------------	*/}}
<section>
<h2>
	String Types
</h2>
<h3>Overview</h3>
<p>These are the string types used to define commands. For runtime types, see the <a href="{{ LinkByIdl "rtti" }}">rtti</a> slots.
<h3>Index</h3>
{{ template "primindex" .Str }}
</section>

{{/* ---------- slots -----------------------	*/}}
<section>
<h2>Slots</h2>
<h3>Overview</h3>
<p>
Slots are at the heart of Tapestry. They define what kinds of scripting commands are permissible when. Every story file ( .tell ) contains a list of <a href="{{ LinkByName "story_statement"}}">Story Statement</a> slots, and branches out from there.
</p>
<h3>Index</h3>
	<ul class="indexList">
		{{ range .Slots }}{{ if not .Markup.internal }}
		<li>
			<a href="{{ LinkByType . }}">{{ Title .Name }}</a>: {{ Snippet .Markup }}
		</li>
		{{ end }}{{ end }}
	</ul>
</section>

{{/* ---------- commands -----------------------	*/}}
<section>
<h2>
	Commands
</h2>
<h3>Overview</h3>
<p>
Tapestry commands fit into slots. Commands can be composed of string and number types, as well as slots and specific commands. Some commands help to model the game world, some work at runtime to ask questions about the world or to change it, some parse player input or other game scripts, while still others exist to communicate between different pieces of a running game.
<p> Basically, everything in Tapestry starts with a command.

<h3>Index</h3>
	<ul class="indexList">
	{{ range  .Commands }}{{ if not .Markup.internal }}
		<li>
			<a class="code" href="{{ LinkByName .Name }}">{{ .Spec }}</a> {{ Snippet .Markup }}
		</li>
	{{ end }}{{ end }}
	</ul>
</section>