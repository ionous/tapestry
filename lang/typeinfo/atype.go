package typeinfo

// A of an interface that might used as a slot
// for some autogenerated type
type ASlot interface {
	Method() ASlot
}

// prototype of an auto-generated command
// that implements ASlot ( and contains some ASlots too )
type ACommand struct {
	Slot    ASlot
	Bool    bool
	Enum    string
	String  string
	Numbers []float64
	Slots   []ASlot
	Markup  map[string]any
}

// validate the command implements the aslot interface
var _ ASlot = (*ACommand)(nil)

// manually implemented slot method
// ( this wouldnt be auto-generated )
func (op *ACommand) Method() ASlot {
	return op
}

// auto-generated for tapestry commands
func (op *ACommand) Inspect() T {
	return &ACommand_Info
}

// auto-generated for tapestry commands
func (op *ACommand) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// points to a slice variable
// provides a hook for walking slices of slots.
type ACommand_Slice struct{ Slice *[]ACommand }

func (*ACommand_Slice) Inspect() T {
	return &ACommand_Info
}

// points to a slot variable
// provides a hook for walking bare slots.
type ASlot_Slot struct{ Slot *ASlot }

func (*ASlot_Slot) Inspect() T {
	return &ASlot_Info
}

// points to a slice variable
// provides a hook for walking slices of slots.
type ASlot_Slice struct{ Slice *[]ASlot }

func (*ASlot_Slice) Inspect() T {
	return &ASlot_Info
}

var ACommand_Info = Flow{
	Name: "a_command",
	Lede: "opamine",
	Terms: []Term{{
		Name: "slot",
		Type: &ASlot_Info,
	}, {
		Name: "bool",
		Type: &AEnum_Info,
	}, {
		Name: "enum",
		Type: &ABool_Info,
	}, {
		Name:     "str",
		Type:     &AStr_Info,
		Optional: true,
	}, {
		Name:     "num",
		Optional: true,
		Repeats:  true,
		Type:     &ANum_Info,
	}, {
		Name:    "slots",
		Repeats: true,
		Type:    &ASlot_Info,
	}},
	Slots: []*Slot{
		&ASlot_Info,
	},
}

var ASlot_Info = Slot{
	Name: "a_slot",
}

var ABool_Info = Str{
	Name:    "a_bool",
	Options: []string{"false", "true"},
}

var AEnum_Info = Str{
	Name:    "a_bool",
	Options: []string{"yes", "no", "maybe"},
}

var AStr_Info = Str{
	Name: "a_str",
}

var ANum_Info = Num{
	Name: "a_num",
}
