package pattern

import (
	"git.sr.ht/~ionous/iffy/affine"
	"git.sr.ht/~ionous/iffy/rt"
	g "git.sr.ht/~ionous/iffy/rt/generic"
	"git.sr.ht/~ionous/iffy/rt/safe"
	"github.com/ionous/errutil"
)

// track the number of times a particular field gets successfully written to.
type Results struct {
	rt.Scope
	resultField          string
	resultAff            affine.Affinity
	resultSets, ranCount int
	ranFlags             rt.Flags
}

func NewResults(rec *g.Record, res string, aff affine.Affinity) *Results {
	return &Results{
		Scope:       g.RecordOf(rec),
		resultField: res,
		resultAff:   aff,
	}
}

func (rw *Results) SetFieldByName(field string, val g.Value) (err error) {
	if e := rw.Scope.SetFieldByName(field, val); e != nil {
		err = e
	} else if field == rw.resultField {
		rw.resultSets++
		// we could also store the last value set,
		// and use that for our result --
		// but if nothing is set, it feels better to use the default record value production
		// generated by record.GetNamedField
	}
	return
}

// ComputedResult returns whether an explicit result was set.
func (rw *Results) ComputedResult() bool {
	return rw.resultSets > 0
}

// GetResult returns a default value if none was computed.
func (rw *Results) GetResult() (ret g.Value, err error) {
	field, aff := rw.resultField, rw.resultAff
	if len(field) == 0 {
		// no result field, but we still might be checking for whether it had any matching rules.
		if aff == affine.Bool {
			// should it be any rule? just the infix rule?
			// probably always using a return flag would be best.
			ret = g.BoolOf(rw.ranFlags&rt.Infix != 0)
		} else if len(aff) != 0 {
			err = errutil.New("caller expected", aff, "returned nothing")
		}
	} else {
		// get the value and check its result
		rec := rw.Scope.(g.Value).Record()
		if v, e := rec.GetNamedField(field); e != nil {
			err = errutil.New("error trying to get return value", e)
		} else if e := safe.Check(v, aff); e != nil {
			err = errutil.New("error trying to get return value", e)
		} else {
			ret = v
			// the caller expects nothing but we have a return value.
			// other than passing data back to templates in a hack...
			// we dont treat this as an error --
			// a) we allow patterns to be run for side effects, and:
			// b) "trying" doesnt know the affinity of the value at the time of the call.
			if len(aff) == 0 && v.Affinity() == affine.Text {
				safe.HackTillTemplatesCanEvaluatePatternTypes = v.String()
			}
		}
	}
	return
}

// RunWithScope - note: assumes whatever scope is needed to run the pattern has already been setup.
func (rw *Results) ApplyRules(run rt.Runtime, rules []rt.Rule, allFlags rt.Flags) (err error) {
	resultSets := rw.resultSets
	for i, cnt := 0, len(rules); i < cnt && allFlags != 0; i++ {
		rule := rules[i]
		if ranFlag, e := ApplyRule(run, rule, allFlags); e != nil {
			err = errutil.New(e, "while applying", rule.Name)
		} else if ranFlag != 0 {
			rw.ranCount++
			rw.ranFlags |= ranFlag
			didSomething := (rw.resultSets > resultSets)
			resultSets = rw.resultSets
			// if we ran a prefix or a post fix rule and it did something, we are done.
			if didSomething && ranFlag != rt.Infix {
				break
			}
			// if an infix rule did something allow post-fix rules to run.
			// ( ditto if we dont expect the pattern to return anything:
			// in that case we just want to do the first of each rule type. )
			if didSomething || len(rw.resultField) == 0 {
				allFlags = allFlags &^ ranFlag
			}
		}
	}
	return
}

func ApplyRule(run rt.Runtime, rule rt.Rule, allow rt.Flags) (ret rt.Flags, err error) {
	if flags := rule.GetFlags(); allow&flags != 0 {
		if ok, e := safe.GetOptionalBool(run, rule.Filter, true); e != nil {
			err = e
		} else if ok.Bool() { // the rule returns false if it didnt apply
			if e := safe.Run(run, rule.Execute); e != nil {
				err = e
			} else {
				ret = flags
			}
		}
	}
	return
}
