// Code generated by "makeops"; edit at your own risk.
package rt

import (
	"git.sr.ht/~ionous/iffy/jsn"
)

const Assignment_Type = "assignment"

var Assignment_Optional_Marshal = Assignment_Marshal

type Assignment_Slot struct{ ptr *Assignment }

func (at Assignment_Slot) GetType() string              { return Assignment_Type }
func (at Assignment_Slot) GetSlot() (interface{}, bool) { return *at.ptr, *at.ptr != nil }
func (at Assignment_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(Assignment)
	return
}

func Assignment_Marshal(m jsn.Marshaler, ptr *Assignment) (err error) {
	if fn, exists := m.CustomizedMarshal(Assignment_Type); exists {
		err = fn(m, ptr)
	} else {
		err = Assignment_DefaultMarshal(m, ptr)
	}
	return
}
func Assignment_DefaultMarshal(m jsn.Marshaler, ptr *Assignment) (err error) {
	slot := Assignment_Slot{ptr}
	if err = m.MarshalBlock(slot); err == nil {
		if a, ok := slot.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type Assignment_Slice []Assignment

func (op *Assignment_Slice) GetType() string {
	return Assignment_Type
}

func (op *Assignment_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Assignment_Slice) SetSize(cnt int) {
	var els []Assignment
	if cnt >= 0 {
		els = make(Assignment_Slice, cnt)
	}
	(*op) = els
}

func (op *Assignment_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Assignment_Marshal(m, &(*op)[i])
}

func Assignment_Repeats_Marshal(m jsn.Marshaler, vals *[]Assignment) error {
	return jsn.RepeatBlock(m, (*Assignment_Slice)(vals))
}

func Assignment_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Assignment) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Assignment_Repeats_Marshal(m, pv)
	}
	return
}

const BoolEval_Type = "bool_eval"

var BoolEval_Optional_Marshal = BoolEval_Marshal

type BoolEval_Slot struct{ ptr *BoolEval }

func (at BoolEval_Slot) GetType() string              { return BoolEval_Type }
func (at BoolEval_Slot) GetSlot() (interface{}, bool) { return *at.ptr, *at.ptr != nil }
func (at BoolEval_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(BoolEval)
	return
}

func BoolEval_Marshal(m jsn.Marshaler, ptr *BoolEval) (err error) {
	if fn, exists := m.CustomizedMarshal(BoolEval_Type); exists {
		err = fn(m, ptr)
	} else {
		err = BoolEval_DefaultMarshal(m, ptr)
	}
	return
}
func BoolEval_DefaultMarshal(m jsn.Marshaler, ptr *BoolEval) (err error) {
	slot := BoolEval_Slot{ptr}
	if err = m.MarshalBlock(slot); err == nil {
		if a, ok := slot.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type BoolEval_Slice []BoolEval

func (op *BoolEval_Slice) GetType() string {
	return BoolEval_Type
}

func (op *BoolEval_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *BoolEval_Slice) SetSize(cnt int) {
	var els []BoolEval
	if cnt >= 0 {
		els = make(BoolEval_Slice, cnt)
	}
	(*op) = els
}

func (op *BoolEval_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return BoolEval_Marshal(m, &(*op)[i])
}

func BoolEval_Repeats_Marshal(m jsn.Marshaler, vals *[]BoolEval) error {
	return jsn.RepeatBlock(m, (*BoolEval_Slice)(vals))
}

func BoolEval_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]BoolEval) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = BoolEval_Repeats_Marshal(m, pv)
	}
	return
}

const Execute_Type = "execute"

var Execute_Optional_Marshal = Execute_Marshal

type Execute_Slot struct{ ptr *Execute }

func (at Execute_Slot) GetType() string              { return Execute_Type }
func (at Execute_Slot) GetSlot() (interface{}, bool) { return *at.ptr, *at.ptr != nil }
func (at Execute_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(Execute)
	return
}

func Execute_Marshal(m jsn.Marshaler, ptr *Execute) (err error) {
	slot := Execute_Slot{ptr}
	if err = m.MarshalBlock(slot); err == nil {
		if a, ok := slot.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type Execute_Slice []Execute

func (op *Execute_Slice) GetType() string {
	return Execute_Type
}

func (op *Execute_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Execute_Slice) SetSize(cnt int) {
	var els []Execute
	if cnt >= 0 {
		els = make(Execute_Slice, cnt)
	}
	(*op) = els
}

func (op *Execute_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Execute_Marshal(m, &(*op)[i])
}

func Execute_Repeats_Marshal(m jsn.Marshaler, vals *[]Execute) error {
	return jsn.RepeatBlock(m, (*Execute_Slice)(vals))
}

func Execute_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Execute) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Execute_Repeats_Marshal(m, pv)
	}
	return
}

const NumListEval_Type = "num_list_eval"

var NumListEval_Optional_Marshal = NumListEval_Marshal

type NumListEval_Slot struct{ ptr *NumListEval }

func (at NumListEval_Slot) GetType() string              { return NumListEval_Type }
func (at NumListEval_Slot) GetSlot() (interface{}, bool) { return *at.ptr, *at.ptr != nil }
func (at NumListEval_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(NumListEval)
	return
}

func NumListEval_Marshal(m jsn.Marshaler, ptr *NumListEval) (err error) {
	if fn, exists := m.CustomizedMarshal(NumListEval_Type); exists {
		err = fn(m, ptr)
	} else {
		err = NumListEval_DefaultMarshal(m, ptr)
	}
	return
}
func NumListEval_DefaultMarshal(m jsn.Marshaler, ptr *NumListEval) (err error) {
	slot := NumListEval_Slot{ptr}
	if err = m.MarshalBlock(slot); err == nil {
		if a, ok := slot.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type NumListEval_Slice []NumListEval

func (op *NumListEval_Slice) GetType() string {
	return NumListEval_Type
}

func (op *NumListEval_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NumListEval_Slice) SetSize(cnt int) {
	var els []NumListEval
	if cnt >= 0 {
		els = make(NumListEval_Slice, cnt)
	}
	(*op) = els
}

func (op *NumListEval_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NumListEval_Marshal(m, &(*op)[i])
}

func NumListEval_Repeats_Marshal(m jsn.Marshaler, vals *[]NumListEval) error {
	return jsn.RepeatBlock(m, (*NumListEval_Slice)(vals))
}

func NumListEval_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NumListEval) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NumListEval_Repeats_Marshal(m, pv)
	}
	return
}

const NumberEval_Type = "number_eval"

var NumberEval_Optional_Marshal = NumberEval_Marshal

type NumberEval_Slot struct{ ptr *NumberEval }

func (at NumberEval_Slot) GetType() string              { return NumberEval_Type }
func (at NumberEval_Slot) GetSlot() (interface{}, bool) { return *at.ptr, *at.ptr != nil }
func (at NumberEval_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(NumberEval)
	return
}

func NumberEval_Marshal(m jsn.Marshaler, ptr *NumberEval) (err error) {
	if fn, exists := m.CustomizedMarshal(NumberEval_Type); exists {
		err = fn(m, ptr)
	} else {
		err = NumberEval_DefaultMarshal(m, ptr)
	}
	return
}
func NumberEval_DefaultMarshal(m jsn.Marshaler, ptr *NumberEval) (err error) {
	slot := NumberEval_Slot{ptr}
	if err = m.MarshalBlock(slot); err == nil {
		if a, ok := slot.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type NumberEval_Slice []NumberEval

func (op *NumberEval_Slice) GetType() string {
	return NumberEval_Type
}

func (op *NumberEval_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NumberEval_Slice) SetSize(cnt int) {
	var els []NumberEval
	if cnt >= 0 {
		els = make(NumberEval_Slice, cnt)
	}
	(*op) = els
}

func (op *NumberEval_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NumberEval_Marshal(m, &(*op)[i])
}

func NumberEval_Repeats_Marshal(m jsn.Marshaler, vals *[]NumberEval) error {
	return jsn.RepeatBlock(m, (*NumberEval_Slice)(vals))
}

func NumberEval_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NumberEval) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NumberEval_Repeats_Marshal(m, pv)
	}
	return
}

const RecordEval_Type = "record_eval"

var RecordEval_Optional_Marshal = RecordEval_Marshal

type RecordEval_Slot struct{ ptr *RecordEval }

func (at RecordEval_Slot) GetType() string              { return RecordEval_Type }
func (at RecordEval_Slot) GetSlot() (interface{}, bool) { return *at.ptr, *at.ptr != nil }
func (at RecordEval_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(RecordEval)
	return
}

func RecordEval_Marshal(m jsn.Marshaler, ptr *RecordEval) (err error) {
	if fn, exists := m.CustomizedMarshal(RecordEval_Type); exists {
		err = fn(m, ptr)
	} else {
		err = RecordEval_DefaultMarshal(m, ptr)
	}
	return
}
func RecordEval_DefaultMarshal(m jsn.Marshaler, ptr *RecordEval) (err error) {
	slot := RecordEval_Slot{ptr}
	if err = m.MarshalBlock(slot); err == nil {
		if a, ok := slot.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type RecordEval_Slice []RecordEval

func (op *RecordEval_Slice) GetType() string {
	return RecordEval_Type
}

func (op *RecordEval_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RecordEval_Slice) SetSize(cnt int) {
	var els []RecordEval
	if cnt >= 0 {
		els = make(RecordEval_Slice, cnt)
	}
	(*op) = els
}

func (op *RecordEval_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RecordEval_Marshal(m, &(*op)[i])
}

func RecordEval_Repeats_Marshal(m jsn.Marshaler, vals *[]RecordEval) error {
	return jsn.RepeatBlock(m, (*RecordEval_Slice)(vals))
}

func RecordEval_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RecordEval) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = RecordEval_Repeats_Marshal(m, pv)
	}
	return
}

const RecordListEval_Type = "record_list_eval"

var RecordListEval_Optional_Marshal = RecordListEval_Marshal

type RecordListEval_Slot struct{ ptr *RecordListEval }

func (at RecordListEval_Slot) GetType() string              { return RecordListEval_Type }
func (at RecordListEval_Slot) GetSlot() (interface{}, bool) { return *at.ptr, *at.ptr != nil }
func (at RecordListEval_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(RecordListEval)
	return
}

func RecordListEval_Marshal(m jsn.Marshaler, ptr *RecordListEval) (err error) {
	if fn, exists := m.CustomizedMarshal(RecordListEval_Type); exists {
		err = fn(m, ptr)
	} else {
		err = RecordListEval_DefaultMarshal(m, ptr)
	}
	return
}
func RecordListEval_DefaultMarshal(m jsn.Marshaler, ptr *RecordListEval) (err error) {
	slot := RecordListEval_Slot{ptr}
	if err = m.MarshalBlock(slot); err == nil {
		if a, ok := slot.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type RecordListEval_Slice []RecordListEval

func (op *RecordListEval_Slice) GetType() string {
	return RecordListEval_Type
}

func (op *RecordListEval_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RecordListEval_Slice) SetSize(cnt int) {
	var els []RecordListEval
	if cnt >= 0 {
		els = make(RecordListEval_Slice, cnt)
	}
	(*op) = els
}

func (op *RecordListEval_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RecordListEval_Marshal(m, &(*op)[i])
}

func RecordListEval_Repeats_Marshal(m jsn.Marshaler, vals *[]RecordListEval) error {
	return jsn.RepeatBlock(m, (*RecordListEval_Slice)(vals))
}

func RecordListEval_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RecordListEval) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = RecordListEval_Repeats_Marshal(m, pv)
	}
	return
}

const TextEval_Type = "text_eval"

var TextEval_Optional_Marshal = TextEval_Marshal

type TextEval_Slot struct{ ptr *TextEval }

func (at TextEval_Slot) GetType() string              { return TextEval_Type }
func (at TextEval_Slot) GetSlot() (interface{}, bool) { return *at.ptr, *at.ptr != nil }
func (at TextEval_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(TextEval)
	return
}

func TextEval_Marshal(m jsn.Marshaler, ptr *TextEval) (err error) {
	if fn, exists := m.CustomizedMarshal(TextEval_Type); exists {
		err = fn(m, ptr)
	} else {
		err = TextEval_DefaultMarshal(m, ptr)
	}
	return
}
func TextEval_DefaultMarshal(m jsn.Marshaler, ptr *TextEval) (err error) {
	slot := TextEval_Slot{ptr}
	if err = m.MarshalBlock(slot); err == nil {
		if a, ok := slot.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type TextEval_Slice []TextEval

func (op *TextEval_Slice) GetType() string {
	return TextEval_Type
}

func (op *TextEval_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TextEval_Slice) SetSize(cnt int) {
	var els []TextEval
	if cnt >= 0 {
		els = make(TextEval_Slice, cnt)
	}
	(*op) = els
}

func (op *TextEval_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TextEval_Marshal(m, &(*op)[i])
}

func TextEval_Repeats_Marshal(m jsn.Marshaler, vals *[]TextEval) error {
	return jsn.RepeatBlock(m, (*TextEval_Slice)(vals))
}

func TextEval_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TextEval) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TextEval_Repeats_Marshal(m, pv)
	}
	return
}

const TextListEval_Type = "text_list_eval"

var TextListEval_Optional_Marshal = TextListEval_Marshal

type TextListEval_Slot struct{ ptr *TextListEval }

func (at TextListEval_Slot) GetType() string              { return TextListEval_Type }
func (at TextListEval_Slot) GetSlot() (interface{}, bool) { return *at.ptr, *at.ptr != nil }
func (at TextListEval_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(TextListEval)
	return
}

func TextListEval_Marshal(m jsn.Marshaler, ptr *TextListEval) (err error) {
	if fn, exists := m.CustomizedMarshal(TextListEval_Type); exists {
		err = fn(m, ptr)
	} else {
		err = TextListEval_DefaultMarshal(m, ptr)
	}
	return
}
func TextListEval_DefaultMarshal(m jsn.Marshaler, ptr *TextListEval) (err error) {
	slot := TextListEval_Slot{ptr}
	if err = m.MarshalBlock(slot); err == nil {
		if a, ok := slot.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type TextListEval_Slice []TextListEval

func (op *TextListEval_Slice) GetType() string {
	return TextListEval_Type
}

func (op *TextListEval_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TextListEval_Slice) SetSize(cnt int) {
	var els []TextListEval
	if cnt >= 0 {
		els = make(TextListEval_Slice, cnt)
	}
	(*op) = els
}

func (op *TextListEval_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TextListEval_Marshal(m, &(*op)[i])
}

func TextListEval_Repeats_Marshal(m jsn.Marshaler, vals *[]TextListEval) error {
	return jsn.RepeatBlock(m, (*TextListEval_Slice)(vals))
}

func TextListEval_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TextListEval) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TextListEval_Repeats_Marshal(m, pv)
	}
	return
}

var Slots = []interface{}{
	(*Assignment)(nil),
	(*BoolEval)(nil),
	(*Execute)(nil),
	(*NumListEval)(nil),
	(*NumberEval)(nil),
	(*RecordEval)(nil),
	(*RecordListEval)(nil),
	(*TextEval)(nil),
	(*TextListEval)(nil),
}

var Signatures = map[uint64]interface{}{}
