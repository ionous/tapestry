// Code generated by "makeops"; edit at your own risk.
package rt

import (
	"git.sr.ht/~ionous/iffy/jsn"
)

const Assignment_Type = "assignment"

var Assignment_Optional_Marshal = Assignment_Marshal

func Assignment_Marshal(n jsn.Marshaler, ptr *Assignment) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

type Assignment_Slice []Assignment

func (op *Assignment_Slice) GetSize() int    { return len(*op) }
func (op *Assignment_Slice) SetSize(cnt int) { (*op) = make(Assignment_Slice, cnt) }

func Assignment_Repeats_Marshal(n jsn.Marshaler, vals *[]Assignment) {
	if n.RepeatValues(Assignment_Type, (*Assignment_Slice)(vals)) {
		for _, el := range *vals {
			Assignment_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

const BoolEval_Type = "bool_eval"

var BoolEval_Optional_Marshal = BoolEval_Marshal

func BoolEval_Marshal(n jsn.Marshaler, ptr *BoolEval) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

type BoolEval_Slice []BoolEval

func (op *BoolEval_Slice) GetSize() int    { return len(*op) }
func (op *BoolEval_Slice) SetSize(cnt int) { (*op) = make(BoolEval_Slice, cnt) }

func BoolEval_Repeats_Marshal(n jsn.Marshaler, vals *[]BoolEval) {
	if n.RepeatValues(BoolEval_Type, (*BoolEval_Slice)(vals)) {
		for _, el := range *vals {
			BoolEval_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

const Execute_Type = "execute"

var Execute_Optional_Marshal = Execute_Marshal

func Execute_Marshal(n jsn.Marshaler, ptr *Execute) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

type Execute_Slice []Execute

func (op *Execute_Slice) GetSize() int    { return len(*op) }
func (op *Execute_Slice) SetSize(cnt int) { (*op) = make(Execute_Slice, cnt) }

func Execute_Repeats_Marshal(n jsn.Marshaler, vals *[]Execute) {
	if n.RepeatValues(Execute_Type, (*Execute_Slice)(vals)) {
		for _, el := range *vals {
			Execute_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

const NumListEval_Type = "num_list_eval"

var NumListEval_Optional_Marshal = NumListEval_Marshal

func NumListEval_Marshal(n jsn.Marshaler, ptr *NumListEval) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

type NumListEval_Slice []NumListEval

func (op *NumListEval_Slice) GetSize() int    { return len(*op) }
func (op *NumListEval_Slice) SetSize(cnt int) { (*op) = make(NumListEval_Slice, cnt) }

func NumListEval_Repeats_Marshal(n jsn.Marshaler, vals *[]NumListEval) {
	if n.RepeatValues(NumListEval_Type, (*NumListEval_Slice)(vals)) {
		for _, el := range *vals {
			NumListEval_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

const NumberEval_Type = "number_eval"

var NumberEval_Optional_Marshal = NumberEval_Marshal

func NumberEval_Marshal(n jsn.Marshaler, ptr *NumberEval) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

type NumberEval_Slice []NumberEval

func (op *NumberEval_Slice) GetSize() int    { return len(*op) }
func (op *NumberEval_Slice) SetSize(cnt int) { (*op) = make(NumberEval_Slice, cnt) }

func NumberEval_Repeats_Marshal(n jsn.Marshaler, vals *[]NumberEval) {
	if n.RepeatValues(NumberEval_Type, (*NumberEval_Slice)(vals)) {
		for _, el := range *vals {
			NumberEval_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

const RecordEval_Type = "record_eval"

var RecordEval_Optional_Marshal = RecordEval_Marshal

func RecordEval_Marshal(n jsn.Marshaler, ptr *RecordEval) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

type RecordEval_Slice []RecordEval

func (op *RecordEval_Slice) GetSize() int    { return len(*op) }
func (op *RecordEval_Slice) SetSize(cnt int) { (*op) = make(RecordEval_Slice, cnt) }

func RecordEval_Repeats_Marshal(n jsn.Marshaler, vals *[]RecordEval) {
	if n.RepeatValues(RecordEval_Type, (*RecordEval_Slice)(vals)) {
		for _, el := range *vals {
			RecordEval_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

const RecordListEval_Type = "record_list_eval"

var RecordListEval_Optional_Marshal = RecordListEval_Marshal

func RecordListEval_Marshal(n jsn.Marshaler, ptr *RecordListEval) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

type RecordListEval_Slice []RecordListEval

func (op *RecordListEval_Slice) GetSize() int    { return len(*op) }
func (op *RecordListEval_Slice) SetSize(cnt int) { (*op) = make(RecordListEval_Slice, cnt) }

func RecordListEval_Repeats_Marshal(n jsn.Marshaler, vals *[]RecordListEval) {
	if n.RepeatValues(RecordListEval_Type, (*RecordListEval_Slice)(vals)) {
		for _, el := range *vals {
			RecordListEval_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

const TextEval_Type = "text_eval"

var TextEval_Optional_Marshal = TextEval_Marshal

func TextEval_Marshal(n jsn.Marshaler, ptr *TextEval) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

type TextEval_Slice []TextEval

func (op *TextEval_Slice) GetSize() int    { return len(*op) }
func (op *TextEval_Slice) SetSize(cnt int) { (*op) = make(TextEval_Slice, cnt) }

func TextEval_Repeats_Marshal(n jsn.Marshaler, vals *[]TextEval) {
	if n.RepeatValues(TextEval_Type, (*TextEval_Slice)(vals)) {
		for _, el := range *vals {
			TextEval_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

const TextListEval_Type = "text_list_eval"

var TextListEval_Optional_Marshal = TextListEval_Marshal

func TextListEval_Marshal(n jsn.Marshaler, ptr *TextListEval) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

type TextListEval_Slice []TextListEval

func (op *TextListEval_Slice) GetSize() int    { return len(*op) }
func (op *TextListEval_Slice) SetSize(cnt int) { (*op) = make(TextListEval_Slice, cnt) }

func TextListEval_Repeats_Marshal(n jsn.Marshaler, vals *[]TextListEval) {
	if n.RepeatValues(TextListEval_Type, (*TextListEval_Slice)(vals)) {
		for _, el := range *vals {
			TextListEval_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

var Slots = []interface{}{
	(*Assignment)(nil),
	(*BoolEval)(nil),
	(*Execute)(nil),
	(*NumListEval)(nil),
	(*NumberEval)(nil),
	(*RecordEval)(nil),
	(*RecordListEval)(nil),
	(*TextEval)(nil),
	(*TextListEval)(nil),
}
