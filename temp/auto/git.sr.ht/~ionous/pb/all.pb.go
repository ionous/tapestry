// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: all.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// position in original script
type Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Offset string `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Pos) Reset() {
	*x = Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{0}
}

func (x *Pos) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Pos) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*Assignment_FromBool
	//	*Assignment_FromNum
	//	*Assignment_FromNumbers
	//	*Assignment_FromRecord
	//	*Assignment_FromRecords
	//	*Assignment_FromText
	//	*Assignment_FromTexts
	//	*Assignment_GetAtField
	//	*Assignment_GetVar
	//	*Assignment_RenderPattern
	//	*Assignment_RenderRef
	Eval isAssignment_Eval `protobuf_oneof:"eval"`
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{1}
}

func (m *Assignment) GetEval() isAssignment_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *Assignment) GetFromBool() *FromBool {
	if x, ok := x.GetEval().(*Assignment_FromBool); ok {
		return x.FromBool
	}
	return nil
}

func (x *Assignment) GetFromNum() *FromNum {
	if x, ok := x.GetEval().(*Assignment_FromNum); ok {
		return x.FromNum
	}
	return nil
}

func (x *Assignment) GetFromNumbers() *FromNumbers {
	if x, ok := x.GetEval().(*Assignment_FromNumbers); ok {
		return x.FromNumbers
	}
	return nil
}

func (x *Assignment) GetFromRecord() *FromRecord {
	if x, ok := x.GetEval().(*Assignment_FromRecord); ok {
		return x.FromRecord
	}
	return nil
}

func (x *Assignment) GetFromRecords() *FromRecords {
	if x, ok := x.GetEval().(*Assignment_FromRecords); ok {
		return x.FromRecords
	}
	return nil
}

func (x *Assignment) GetFromText() *FromText {
	if x, ok := x.GetEval().(*Assignment_FromText); ok {
		return x.FromText
	}
	return nil
}

func (x *Assignment) GetFromTexts() *FromTexts {
	if x, ok := x.GetEval().(*Assignment_FromTexts); ok {
		return x.FromTexts
	}
	return nil
}

func (x *Assignment) GetGetAtField() *GetAtField {
	if x, ok := x.GetEval().(*Assignment_GetAtField); ok {
		return x.GetAtField
	}
	return nil
}

func (x *Assignment) GetGetVar() *Var {
	if x, ok := x.GetEval().(*Assignment_GetVar); ok {
		return x.GetVar
	}
	return nil
}

func (x *Assignment) GetRenderPattern() *RenderPattern {
	if x, ok := x.GetEval().(*Assignment_RenderPattern); ok {
		return x.RenderPattern
	}
	return nil
}

func (x *Assignment) GetRenderRef() *RenderRef {
	if x, ok := x.GetEval().(*Assignment_RenderRef); ok {
		return x.RenderRef
	}
	return nil
}

type isAssignment_Eval interface {
	isAssignment_Eval()
}

type Assignment_FromBool struct {
	FromBool *FromBool `protobuf:"bytes,5,opt,name=from_bool,json=fromBool,proto3,oneof"`
}

type Assignment_FromNum struct {
	FromNum *FromNum `protobuf:"bytes,10,opt,name=from_num,json=fromNum,proto3,oneof"`
}

type Assignment_FromNumbers struct {
	FromNumbers *FromNumbers `protobuf:"bytes,15,opt,name=from_numbers,json=fromNumbers,proto3,oneof"`
}

type Assignment_FromRecord struct {
	FromRecord *FromRecord `protobuf:"bytes,20,opt,name=from_record,json=fromRecord,proto3,oneof"`
}

type Assignment_FromRecords struct {
	FromRecords *FromRecords `protobuf:"bytes,25,opt,name=from_records,json=fromRecords,proto3,oneof"`
}

type Assignment_FromText struct {
	FromText *FromText `protobuf:"bytes,30,opt,name=from_text,json=fromText,proto3,oneof"`
}

type Assignment_FromTexts struct {
	FromTexts *FromTexts `protobuf:"bytes,35,opt,name=from_texts,json=fromTexts,proto3,oneof"`
}

type Assignment_GetAtField struct {
	GetAtField *GetAtField `protobuf:"bytes,40,opt,name=get_at_field,json=getAtField,proto3,oneof"`
}

type Assignment_GetVar struct {
	GetVar *Var `protobuf:"bytes,45,opt,name=get_var,json=getVar,proto3,oneof"`
}

type Assignment_RenderPattern struct {
	RenderPattern *RenderPattern `protobuf:"bytes,50,opt,name=render_pattern,json=renderPattern,proto3,oneof"`
}

type Assignment_RenderRef struct {
	RenderRef *RenderRef `protobuf:"bytes,55,opt,name=render_ref,json=renderRef,proto3,oneof"`
}

func (*Assignment_FromBool) isAssignment_Eval() {}

func (*Assignment_FromNum) isAssignment_Eval() {}

func (*Assignment_FromNumbers) isAssignment_Eval() {}

func (*Assignment_FromRecord) isAssignment_Eval() {}

func (*Assignment_FromRecords) isAssignment_Eval() {}

func (*Assignment_FromText) isAssignment_Eval() {}

func (*Assignment_FromTexts) isAssignment_Eval() {}

func (*Assignment_GetAtField) isAssignment_Eval() {}

func (*Assignment_GetVar) isAssignment_Eval() {}

func (*Assignment_RenderPattern) isAssignment_Eval() {}

func (*Assignment_RenderRef) isAssignment_Eval() {}

type BoolEval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*BoolEval_AllTrue
	//	*BoolEval_Always
	//	*BoolEval_AnyTrue
	//	*BoolEval_BoolValue
	//	*BoolEval_CompareNum
	//	*BoolEval_CompareText
	//	*BoolEval_CountOf
	//	*BoolEval_Determine
	//	*BoolEval_During
	//	*BoolEval_GetAtField
	//	*BoolEval_GetVar
	//	*BoolEval_HasDominion
	//	*BoolEval_HasTrait
	//	*BoolEval_Includes
	//	*BoolEval_IsEmpty
	//	*BoolEval_IsExactKindOf
	//	*BoolEval_IsKindOf
	//	*BoolEval_ListFind
	//	*BoolEval_Matches
	//	*BoolEval_Not
	//	*BoolEval_ObjectExists
	//	*BoolEval_RenderPattern
	//	*BoolEval_RenderRef
	//	*BoolEval_Send
	Eval isBoolEval_Eval `protobuf_oneof:"eval"`
}

func (x *BoolEval) Reset() {
	*x = BoolEval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolEval) ProtoMessage() {}

func (x *BoolEval) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolEval.ProtoReflect.Descriptor instead.
func (*BoolEval) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{2}
}

func (m *BoolEval) GetEval() isBoolEval_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *BoolEval) GetAllTrue() *AllTrue {
	if x, ok := x.GetEval().(*BoolEval_AllTrue); ok {
		return x.AllTrue
	}
	return nil
}

func (x *BoolEval) GetAlways() *Always {
	if x, ok := x.GetEval().(*BoolEval_Always); ok {
		return x.Always
	}
	return nil
}

func (x *BoolEval) GetAnyTrue() *AnyTrue {
	if x, ok := x.GetEval().(*BoolEval_AnyTrue); ok {
		return x.AnyTrue
	}
	return nil
}

func (x *BoolEval) GetBoolValue() *Bool {
	if x, ok := x.GetEval().(*BoolEval_BoolValue); ok {
		return x.BoolValue
	}
	return nil
}

func (x *BoolEval) GetCompareNum() *CompareNum {
	if x, ok := x.GetEval().(*BoolEval_CompareNum); ok {
		return x.CompareNum
	}
	return nil
}

func (x *BoolEval) GetCompareText() *CompareText {
	if x, ok := x.GetEval().(*BoolEval_CompareText); ok {
		return x.CompareText
	}
	return nil
}

func (x *BoolEval) GetCountOf() *CountOf {
	if x, ok := x.GetEval().(*BoolEval_CountOf); ok {
		return x.CountOf
	}
	return nil
}

func (x *BoolEval) GetDetermine() *Determine {
	if x, ok := x.GetEval().(*BoolEval_Determine); ok {
		return x.Determine
	}
	return nil
}

func (x *BoolEval) GetDuring() *During {
	if x, ok := x.GetEval().(*BoolEval_During); ok {
		return x.During
	}
	return nil
}

func (x *BoolEval) GetGetAtField() *GetAtField {
	if x, ok := x.GetEval().(*BoolEval_GetAtField); ok {
		return x.GetAtField
	}
	return nil
}

func (x *BoolEval) GetGetVar() *Var {
	if x, ok := x.GetEval().(*BoolEval_GetVar); ok {
		return x.GetVar
	}
	return nil
}

func (x *BoolEval) GetHasDominion() *HasDominion {
	if x, ok := x.GetEval().(*BoolEval_HasDominion); ok {
		return x.HasDominion
	}
	return nil
}

func (x *BoolEval) GetHasTrait() *HasTrait {
	if x, ok := x.GetEval().(*BoolEval_HasTrait); ok {
		return x.HasTrait
	}
	return nil
}

func (x *BoolEval) GetIncludes() *Includes {
	if x, ok := x.GetEval().(*BoolEval_Includes); ok {
		return x.Includes
	}
	return nil
}

func (x *BoolEval) GetIsEmpty() *IsEmpty {
	if x, ok := x.GetEval().(*BoolEval_IsEmpty); ok {
		return x.IsEmpty
	}
	return nil
}

func (x *BoolEval) GetIsExactKindOf() *IsExactKindOf {
	if x, ok := x.GetEval().(*BoolEval_IsExactKindOf); ok {
		return x.IsExactKindOf
	}
	return nil
}

func (x *BoolEval) GetIsKindOf() *IsKindOf {
	if x, ok := x.GetEval().(*BoolEval_IsKindOf); ok {
		return x.IsKindOf
	}
	return nil
}

func (x *BoolEval) GetListFind() *Find {
	if x, ok := x.GetEval().(*BoolEval_ListFind); ok {
		return x.ListFind
	}
	return nil
}

func (x *BoolEval) GetMatches() *Matches {
	if x, ok := x.GetEval().(*BoolEval_Matches); ok {
		return x.Matches
	}
	return nil
}

func (x *BoolEval) GetNot() *IsNotTrue {
	if x, ok := x.GetEval().(*BoolEval_Not); ok {
		return x.Not
	}
	return nil
}

func (x *BoolEval) GetObjectExists() *ObjectExists {
	if x, ok := x.GetEval().(*BoolEval_ObjectExists); ok {
		return x.ObjectExists
	}
	return nil
}

func (x *BoolEval) GetRenderPattern() *RenderPattern {
	if x, ok := x.GetEval().(*BoolEval_RenderPattern); ok {
		return x.RenderPattern
	}
	return nil
}

func (x *BoolEval) GetRenderRef() *RenderRef {
	if x, ok := x.GetEval().(*BoolEval_RenderRef); ok {
		return x.RenderRef
	}
	return nil
}

func (x *BoolEval) GetSend() *Send {
	if x, ok := x.GetEval().(*BoolEval_Send); ok {
		return x.Send
	}
	return nil
}

type isBoolEval_Eval interface {
	isBoolEval_Eval()
}

type BoolEval_AllTrue struct {
	AllTrue *AllTrue `protobuf:"bytes,5,opt,name=all_true,json=allTrue,proto3,oneof"`
}

type BoolEval_Always struct {
	Always *Always `protobuf:"bytes,10,opt,name=always,proto3,oneof"`
}

type BoolEval_AnyTrue struct {
	AnyTrue *AnyTrue `protobuf:"bytes,15,opt,name=any_true,json=anyTrue,proto3,oneof"`
}

type BoolEval_BoolValue struct {
	BoolValue *Bool `protobuf:"bytes,20,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type BoolEval_CompareNum struct {
	CompareNum *CompareNum `protobuf:"bytes,25,opt,name=compare_num,json=compareNum,proto3,oneof"`
}

type BoolEval_CompareText struct {
	CompareText *CompareText `protobuf:"bytes,30,opt,name=compare_text,json=compareText,proto3,oneof"`
}

type BoolEval_CountOf struct {
	CountOf *CountOf `protobuf:"bytes,35,opt,name=count_of,json=countOf,proto3,oneof"`
}

type BoolEval_Determine struct {
	Determine *Determine `protobuf:"bytes,40,opt,name=determine,proto3,oneof"`
}

type BoolEval_During struct {
	During *During `protobuf:"bytes,45,opt,name=during,proto3,oneof"`
}

type BoolEval_GetAtField struct {
	GetAtField *GetAtField `protobuf:"bytes,50,opt,name=get_at_field,json=getAtField,proto3,oneof"`
}

type BoolEval_GetVar struct {
	GetVar *Var `protobuf:"bytes,55,opt,name=get_var,json=getVar,proto3,oneof"`
}

type BoolEval_HasDominion struct {
	HasDominion *HasDominion `protobuf:"bytes,60,opt,name=has_dominion,json=hasDominion,proto3,oneof"`
}

type BoolEval_HasTrait struct {
	HasTrait *HasTrait `protobuf:"bytes,65,opt,name=has_trait,json=hasTrait,proto3,oneof"`
}

type BoolEval_Includes struct {
	Includes *Includes `protobuf:"bytes,70,opt,name=includes,proto3,oneof"`
}

type BoolEval_IsEmpty struct {
	IsEmpty *IsEmpty `protobuf:"bytes,75,opt,name=is_empty,json=isEmpty,proto3,oneof"`
}

type BoolEval_IsExactKindOf struct {
	IsExactKindOf *IsExactKindOf `protobuf:"bytes,80,opt,name=is_exact_kind_of,json=isExactKindOf,proto3,oneof"`
}

type BoolEval_IsKindOf struct {
	IsKindOf *IsKindOf `protobuf:"bytes,85,opt,name=is_kind_of,json=isKindOf,proto3,oneof"`
}

type BoolEval_ListFind struct {
	ListFind *Find `protobuf:"bytes,90,opt,name=list_find,json=listFind,proto3,oneof"`
}

type BoolEval_Matches struct {
	Matches *Matches `protobuf:"bytes,95,opt,name=matches,proto3,oneof"`
}

type BoolEval_Not struct {
	Not *IsNotTrue `protobuf:"bytes,100,opt,name=not,proto3,oneof"`
}

type BoolEval_ObjectExists struct {
	ObjectExists *ObjectExists `protobuf:"bytes,105,opt,name=object_exists,json=objectExists,proto3,oneof"`
}

type BoolEval_RenderPattern struct {
	RenderPattern *RenderPattern `protobuf:"bytes,110,opt,name=render_pattern,json=renderPattern,proto3,oneof"`
}

type BoolEval_RenderRef struct {
	RenderRef *RenderRef `protobuf:"bytes,115,opt,name=render_ref,json=renderRef,proto3,oneof"`
}

type BoolEval_Send struct {
	Send *Send `protobuf:"bytes,120,opt,name=send,proto3,oneof"`
}

func (*BoolEval_AllTrue) isBoolEval_Eval() {}

func (*BoolEval_Always) isBoolEval_Eval() {}

func (*BoolEval_AnyTrue) isBoolEval_Eval() {}

func (*BoolEval_BoolValue) isBoolEval_Eval() {}

func (*BoolEval_CompareNum) isBoolEval_Eval() {}

func (*BoolEval_CompareText) isBoolEval_Eval() {}

func (*BoolEval_CountOf) isBoolEval_Eval() {}

func (*BoolEval_Determine) isBoolEval_Eval() {}

func (*BoolEval_During) isBoolEval_Eval() {}

func (*BoolEval_GetAtField) isBoolEval_Eval() {}

func (*BoolEval_GetVar) isBoolEval_Eval() {}

func (*BoolEval_HasDominion) isBoolEval_Eval() {}

func (*BoolEval_HasTrait) isBoolEval_Eval() {}

func (*BoolEval_Includes) isBoolEval_Eval() {}

func (*BoolEval_IsEmpty) isBoolEval_Eval() {}

func (*BoolEval_IsExactKindOf) isBoolEval_Eval() {}

func (*BoolEval_IsKindOf) isBoolEval_Eval() {}

func (*BoolEval_ListFind) isBoolEval_Eval() {}

func (*BoolEval_Matches) isBoolEval_Eval() {}

func (*BoolEval_Not) isBoolEval_Eval() {}

func (*BoolEval_ObjectExists) isBoolEval_Eval() {}

func (*BoolEval_RenderPattern) isBoolEval_Eval() {}

func (*BoolEval_RenderRef) isBoolEval_Eval() {}

func (*BoolEval_Send) isBoolEval_Eval() {}

type Brancher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*Brancher_ChooseMore
	//	*Brancher_ChooseMoreValue
	//	*Brancher_ChooseNothingElse
	Eval isBrancher_Eval `protobuf_oneof:"eval"`
}

func (x *Brancher) Reset() {
	*x = Brancher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brancher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brancher) ProtoMessage() {}

func (x *Brancher) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brancher.ProtoReflect.Descriptor instead.
func (*Brancher) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{3}
}

func (m *Brancher) GetEval() isBrancher_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *Brancher) GetChooseMore() *ChooseMore {
	if x, ok := x.GetEval().(*Brancher_ChooseMore); ok {
		return x.ChooseMore
	}
	return nil
}

func (x *Brancher) GetChooseMoreValue() *ChooseMoreValue {
	if x, ok := x.GetEval().(*Brancher_ChooseMoreValue); ok {
		return x.ChooseMoreValue
	}
	return nil
}

func (x *Brancher) GetChooseNothingElse() *ChooseNothingElse {
	if x, ok := x.GetEval().(*Brancher_ChooseNothingElse); ok {
		return x.ChooseNothingElse
	}
	return nil
}

type isBrancher_Eval interface {
	isBrancher_Eval()
}

type Brancher_ChooseMore struct {
	ChooseMore *ChooseMore `protobuf:"bytes,5,opt,name=choose_more,json=chooseMore,proto3,oneof"`
}

type Brancher_ChooseMoreValue struct {
	ChooseMoreValue *ChooseMoreValue `protobuf:"bytes,10,opt,name=choose_more_value,json=chooseMoreValue,proto3,oneof"`
}

type Brancher_ChooseNothingElse struct {
	ChooseNothingElse *ChooseNothingElse `protobuf:"bytes,15,opt,name=choose_nothing_else,json=chooseNothingElse,proto3,oneof"`
}

func (*Brancher_ChooseMore) isBrancher_Eval() {}

func (*Brancher_ChooseMoreValue) isBrancher_Eval() {}

func (*Brancher_ChooseNothingElse) isBrancher_Eval() {}

type Comparator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*Comparator_AtLeast
	//	*Comparator_AtMost
	//	*Comparator_Equal
	//	*Comparator_GreaterThan
	//	*Comparator_LessThan
	//	*Comparator_Unequal
	Eval isComparator_Eval `protobuf_oneof:"eval"`
}

func (x *Comparator) Reset() {
	*x = Comparator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comparator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comparator) ProtoMessage() {}

func (x *Comparator) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comparator.ProtoReflect.Descriptor instead.
func (*Comparator) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{4}
}

func (m *Comparator) GetEval() isComparator_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *Comparator) GetAtLeast() *GreaterOrEqual {
	if x, ok := x.GetEval().(*Comparator_AtLeast); ok {
		return x.AtLeast
	}
	return nil
}

func (x *Comparator) GetAtMost() *LessOrEqual {
	if x, ok := x.GetEval().(*Comparator_AtMost); ok {
		return x.AtMost
	}
	return nil
}

func (x *Comparator) GetEqual() *EqualTo {
	if x, ok := x.GetEval().(*Comparator_Equal); ok {
		return x.Equal
	}
	return nil
}

func (x *Comparator) GetGreaterThan() *GreaterThan {
	if x, ok := x.GetEval().(*Comparator_GreaterThan); ok {
		return x.GreaterThan
	}
	return nil
}

func (x *Comparator) GetLessThan() *LessThan {
	if x, ok := x.GetEval().(*Comparator_LessThan); ok {
		return x.LessThan
	}
	return nil
}

func (x *Comparator) GetUnequal() *NotEqualTo {
	if x, ok := x.GetEval().(*Comparator_Unequal); ok {
		return x.Unequal
	}
	return nil
}

type isComparator_Eval interface {
	isComparator_Eval()
}

type Comparator_AtLeast struct {
	AtLeast *GreaterOrEqual `protobuf:"bytes,5,opt,name=at_least,json=atLeast,proto3,oneof"`
}

type Comparator_AtMost struct {
	AtMost *LessOrEqual `protobuf:"bytes,10,opt,name=at_most,json=atMost,proto3,oneof"`
}

type Comparator_Equal struct {
	Equal *EqualTo `protobuf:"bytes,15,opt,name=equal,proto3,oneof"`
}

type Comparator_GreaterThan struct {
	GreaterThan *GreaterThan `protobuf:"bytes,20,opt,name=greater_than,json=greaterThan,proto3,oneof"`
}

type Comparator_LessThan struct {
	LessThan *LessThan `protobuf:"bytes,25,opt,name=less_than,json=lessThan,proto3,oneof"`
}

type Comparator_Unequal struct {
	Unequal *NotEqualTo `protobuf:"bytes,30,opt,name=unequal,proto3,oneof"`
}

func (*Comparator_AtLeast) isComparator_Eval() {}

func (*Comparator_AtMost) isComparator_Eval() {}

func (*Comparator_Equal) isComparator_Eval() {}

func (*Comparator_GreaterThan) isComparator_Eval() {}

func (*Comparator_LessThan) isComparator_Eval() {}

func (*Comparator_Unequal) isComparator_Eval() {}

type Execute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*Execute_Activity
	//	*Execute_Assign
	//	*Execute_Br
	//	*Execute_Break
	//	*Execute_ChooseAction
	//	*Execute_ChooseValue
	//	*Execute_DebugLog
	//	*Execute_Determine
	//	*Execute_DoNothing
	//	*Execute_EraseEdge
	//	*Execute_EraseIndex
	//	*Execute_Erasing
	//	*Execute_ErasingEdge
	//	*Execute_ListEach
	//	*Execute_ListMap
	//	*Execute_ListReduce
	//	*Execute_ListReverse
	//	*Execute_ListSet
	//	*Execute_ListSortNumbers
	//	*Execute_ListSortText
	//	*Execute_ListSortUsing
	//	*Execute_ListSplice
	//	*Execute_Next
	//	*Execute_P
	//	*Execute_PutAtField
	//	*Execute_PutEdge
	//	*Execute_PutIndex
	//	*Execute_Relate
	//	*Execute_RenderPattern
	//	*Execute_SayText
	//	*Execute_Send
	//	*Execute_SetTrait
	//	*Execute_Wbr
	//	*Execute_While
	Eval isExecute_Eval `protobuf_oneof:"eval"`
}

func (x *Execute) Reset() {
	*x = Execute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execute) ProtoMessage() {}

func (x *Execute) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execute.ProtoReflect.Descriptor instead.
func (*Execute) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{5}
}

func (m *Execute) GetEval() isExecute_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *Execute) GetActivity() *Activity {
	if x, ok := x.GetEval().(*Execute_Activity); ok {
		return x.Activity
	}
	return nil
}

func (x *Execute) GetAssign() *Assign {
	if x, ok := x.GetEval().(*Execute_Assign); ok {
		return x.Assign
	}
	return nil
}

func (x *Execute) GetBr() *Newline {
	if x, ok := x.GetEval().(*Execute_Br); ok {
		return x.Br
	}
	return nil
}

func (x *Execute) GetBreak() *Break {
	if x, ok := x.GetEval().(*Execute_Break); ok {
		return x.Break
	}
	return nil
}

func (x *Execute) GetChooseAction() *ChooseAction {
	if x, ok := x.GetEval().(*Execute_ChooseAction); ok {
		return x.ChooseAction
	}
	return nil
}

func (x *Execute) GetChooseValue() *ChooseValue {
	if x, ok := x.GetEval().(*Execute_ChooseValue); ok {
		return x.ChooseValue
	}
	return nil
}

func (x *Execute) GetDebugLog() *Log {
	if x, ok := x.GetEval().(*Execute_DebugLog); ok {
		return x.DebugLog
	}
	return nil
}

func (x *Execute) GetDetermine() *Determine {
	if x, ok := x.GetEval().(*Execute_Determine); ok {
		return x.Determine
	}
	return nil
}

func (x *Execute) GetDoNothing() *DoNothing {
	if x, ok := x.GetEval().(*Execute_DoNothing); ok {
		return x.DoNothing
	}
	return nil
}

func (x *Execute) GetEraseEdge() *EraseEdge {
	if x, ok := x.GetEval().(*Execute_EraseEdge); ok {
		return x.EraseEdge
	}
	return nil
}

func (x *Execute) GetEraseIndex() *EraseIndex {
	if x, ok := x.GetEval().(*Execute_EraseIndex); ok {
		return x.EraseIndex
	}
	return nil
}

func (x *Execute) GetErasing() *Erasing {
	if x, ok := x.GetEval().(*Execute_Erasing); ok {
		return x.Erasing
	}
	return nil
}

func (x *Execute) GetErasingEdge() *ErasingEdge {
	if x, ok := x.GetEval().(*Execute_ErasingEdge); ok {
		return x.ErasingEdge
	}
	return nil
}

func (x *Execute) GetListEach() *Each {
	if x, ok := x.GetEval().(*Execute_ListEach); ok {
		return x.ListEach
	}
	return nil
}

func (x *Execute) GetListMap() *Map {
	if x, ok := x.GetEval().(*Execute_ListMap); ok {
		return x.ListMap
	}
	return nil
}

func (x *Execute) GetListReduce() *Reduce {
	if x, ok := x.GetEval().(*Execute_ListReduce); ok {
		return x.ListReduce
	}
	return nil
}

func (x *Execute) GetListReverse() *ReverseList {
	if x, ok := x.GetEval().(*Execute_ListReverse); ok {
		return x.ListReverse
	}
	return nil
}

func (x *Execute) GetListSet() *Set {
	if x, ok := x.GetEval().(*Execute_ListSet); ok {
		return x.ListSet
	}
	return nil
}

func (x *Execute) GetListSortNumbers() *SortNumbers {
	if x, ok := x.GetEval().(*Execute_ListSortNumbers); ok {
		return x.ListSortNumbers
	}
	return nil
}

func (x *Execute) GetListSortText() *SortText {
	if x, ok := x.GetEval().(*Execute_ListSortText); ok {
		return x.ListSortText
	}
	return nil
}

func (x *Execute) GetListSortUsing() *SortRecords {
	if x, ok := x.GetEval().(*Execute_ListSortUsing); ok {
		return x.ListSortUsing
	}
	return nil
}

func (x *Execute) GetListSplice() *Splice {
	if x, ok := x.GetEval().(*Execute_ListSplice); ok {
		return x.ListSplice
	}
	return nil
}

func (x *Execute) GetNext() *Next {
	if x, ok := x.GetEval().(*Execute_Next); ok {
		return x.Next
	}
	return nil
}

func (x *Execute) GetP() *Paragraph {
	if x, ok := x.GetEval().(*Execute_P); ok {
		return x.P
	}
	return nil
}

func (x *Execute) GetPutAtField() *PutAtField {
	if x, ok := x.GetEval().(*Execute_PutAtField); ok {
		return x.PutAtField
	}
	return nil
}

func (x *Execute) GetPutEdge() *PutEdge {
	if x, ok := x.GetEval().(*Execute_PutEdge); ok {
		return x.PutEdge
	}
	return nil
}

func (x *Execute) GetPutIndex() *PutIndex {
	if x, ok := x.GetEval().(*Execute_PutIndex); ok {
		return x.PutIndex
	}
	return nil
}

func (x *Execute) GetRelate() *Relate {
	if x, ok := x.GetEval().(*Execute_Relate); ok {
		return x.Relate
	}
	return nil
}

func (x *Execute) GetRenderPattern() *RenderPattern {
	if x, ok := x.GetEval().(*Execute_RenderPattern); ok {
		return x.RenderPattern
	}
	return nil
}

func (x *Execute) GetSayText() *Say {
	if x, ok := x.GetEval().(*Execute_SayText); ok {
		return x.SayText
	}
	return nil
}

func (x *Execute) GetSend() *Send {
	if x, ok := x.GetEval().(*Execute_Send); ok {
		return x.Send
	}
	return nil
}

func (x *Execute) GetSetTrait() *SetTrait {
	if x, ok := x.GetEval().(*Execute_SetTrait); ok {
		return x.SetTrait
	}
	return nil
}

func (x *Execute) GetWbr() *Softline {
	if x, ok := x.GetEval().(*Execute_Wbr); ok {
		return x.Wbr
	}
	return nil
}

func (x *Execute) GetWhile() *While {
	if x, ok := x.GetEval().(*Execute_While); ok {
		return x.While
	}
	return nil
}

type isExecute_Eval interface {
	isExecute_Eval()
}

type Execute_Activity struct {
	Activity *Activity `protobuf:"bytes,5,opt,name=activity,proto3,oneof"`
}

type Execute_Assign struct {
	Assign *Assign `protobuf:"bytes,10,opt,name=assign,proto3,oneof"`
}

type Execute_Br struct {
	Br *Newline `protobuf:"bytes,15,opt,name=br,proto3,oneof"`
}

type Execute_Break struct {
	Break *Break `protobuf:"bytes,20,opt,name=break,proto3,oneof"`
}

type Execute_ChooseAction struct {
	ChooseAction *ChooseAction `protobuf:"bytes,25,opt,name=choose_action,json=chooseAction,proto3,oneof"`
}

type Execute_ChooseValue struct {
	ChooseValue *ChooseValue `protobuf:"bytes,30,opt,name=choose_value,json=chooseValue,proto3,oneof"`
}

type Execute_DebugLog struct {
	DebugLog *Log `protobuf:"bytes,35,opt,name=debug_log,json=debugLog,proto3,oneof"`
}

type Execute_Determine struct {
	Determine *Determine `protobuf:"bytes,40,opt,name=determine,proto3,oneof"`
}

type Execute_DoNothing struct {
	DoNothing *DoNothing `protobuf:"bytes,45,opt,name=do_nothing,json=doNothing,proto3,oneof"`
}

type Execute_EraseEdge struct {
	EraseEdge *EraseEdge `protobuf:"bytes,50,opt,name=erase_edge,json=eraseEdge,proto3,oneof"`
}

type Execute_EraseIndex struct {
	EraseIndex *EraseIndex `protobuf:"bytes,55,opt,name=erase_index,json=eraseIndex,proto3,oneof"`
}

type Execute_Erasing struct {
	Erasing *Erasing `protobuf:"bytes,60,opt,name=erasing,proto3,oneof"`
}

type Execute_ErasingEdge struct {
	ErasingEdge *ErasingEdge `protobuf:"bytes,65,opt,name=erasing_edge,json=erasingEdge,proto3,oneof"`
}

type Execute_ListEach struct {
	ListEach *Each `protobuf:"bytes,70,opt,name=list_each,json=listEach,proto3,oneof"`
}

type Execute_ListMap struct {
	ListMap *Map `protobuf:"bytes,75,opt,name=list_map,json=listMap,proto3,oneof"`
}

type Execute_ListReduce struct {
	ListReduce *Reduce `protobuf:"bytes,80,opt,name=list_reduce,json=listReduce,proto3,oneof"`
}

type Execute_ListReverse struct {
	ListReverse *ReverseList `protobuf:"bytes,85,opt,name=list_reverse,json=listReverse,proto3,oneof"`
}

type Execute_ListSet struct {
	ListSet *Set `protobuf:"bytes,90,opt,name=list_set,json=listSet,proto3,oneof"`
}

type Execute_ListSortNumbers struct {
	ListSortNumbers *SortNumbers `protobuf:"bytes,95,opt,name=list_sort_numbers,json=listSortNumbers,proto3,oneof"`
}

type Execute_ListSortText struct {
	ListSortText *SortText `protobuf:"bytes,100,opt,name=list_sort_text,json=listSortText,proto3,oneof"`
}

type Execute_ListSortUsing struct {
	ListSortUsing *SortRecords `protobuf:"bytes,105,opt,name=list_sort_using,json=listSortUsing,proto3,oneof"`
}

type Execute_ListSplice struct {
	ListSplice *Splice `protobuf:"bytes,110,opt,name=list_splice,json=listSplice,proto3,oneof"`
}

type Execute_Next struct {
	Next *Next `protobuf:"bytes,115,opt,name=next,proto3,oneof"`
}

type Execute_P struct {
	P *Paragraph `protobuf:"bytes,120,opt,name=p,proto3,oneof"`
}

type Execute_PutAtField struct {
	PutAtField *PutAtField `protobuf:"bytes,125,opt,name=put_at_field,json=putAtField,proto3,oneof"`
}

type Execute_PutEdge struct {
	PutEdge *PutEdge `protobuf:"bytes,130,opt,name=put_edge,json=putEdge,proto3,oneof"`
}

type Execute_PutIndex struct {
	PutIndex *PutIndex `protobuf:"bytes,135,opt,name=put_index,json=putIndex,proto3,oneof"`
}

type Execute_Relate struct {
	Relate *Relate `protobuf:"bytes,140,opt,name=relate,proto3,oneof"`
}

type Execute_RenderPattern struct {
	RenderPattern *RenderPattern `protobuf:"bytes,145,opt,name=render_pattern,json=renderPattern,proto3,oneof"`
}

type Execute_SayText struct {
	SayText *Say `protobuf:"bytes,150,opt,name=say_text,json=sayText,proto3,oneof"`
}

type Execute_Send struct {
	Send *Send `protobuf:"bytes,155,opt,name=send,proto3,oneof"`
}

type Execute_SetTrait struct {
	SetTrait *SetTrait `protobuf:"bytes,160,opt,name=set_trait,json=setTrait,proto3,oneof"`
}

type Execute_Wbr struct {
	Wbr *Softline `protobuf:"bytes,165,opt,name=wbr,proto3,oneof"`
}

type Execute_While struct {
	While *While `protobuf:"bytes,170,opt,name=while,proto3,oneof"`
}

func (*Execute_Activity) isExecute_Eval() {}

func (*Execute_Assign) isExecute_Eval() {}

func (*Execute_Br) isExecute_Eval() {}

func (*Execute_Break) isExecute_Eval() {}

func (*Execute_ChooseAction) isExecute_Eval() {}

func (*Execute_ChooseValue) isExecute_Eval() {}

func (*Execute_DebugLog) isExecute_Eval() {}

func (*Execute_Determine) isExecute_Eval() {}

func (*Execute_DoNothing) isExecute_Eval() {}

func (*Execute_EraseEdge) isExecute_Eval() {}

func (*Execute_EraseIndex) isExecute_Eval() {}

func (*Execute_Erasing) isExecute_Eval() {}

func (*Execute_ErasingEdge) isExecute_Eval() {}

func (*Execute_ListEach) isExecute_Eval() {}

func (*Execute_ListMap) isExecute_Eval() {}

func (*Execute_ListReduce) isExecute_Eval() {}

func (*Execute_ListReverse) isExecute_Eval() {}

func (*Execute_ListSet) isExecute_Eval() {}

func (*Execute_ListSortNumbers) isExecute_Eval() {}

func (*Execute_ListSortText) isExecute_Eval() {}

func (*Execute_ListSortUsing) isExecute_Eval() {}

func (*Execute_ListSplice) isExecute_Eval() {}

func (*Execute_Next) isExecute_Eval() {}

func (*Execute_P) isExecute_Eval() {}

func (*Execute_PutAtField) isExecute_Eval() {}

func (*Execute_PutEdge) isExecute_Eval() {}

func (*Execute_PutIndex) isExecute_Eval() {}

func (*Execute_Relate) isExecute_Eval() {}

func (*Execute_RenderPattern) isExecute_Eval() {}

func (*Execute_SayText) isExecute_Eval() {}

func (*Execute_Send) isExecute_Eval() {}

func (*Execute_SetTrait) isExecute_Eval() {}

func (*Execute_Wbr) isExecute_Eval() {}

func (*Execute_While) isExecute_Eval() {}

type FromSourceFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*FromSourceFields_FromObj
	//	*FromSourceFields_FromRec
	//	*FromSourceFields_FromVar
	//	*FromSourceFields_RenderField
	Eval isFromSourceFields_Eval `protobuf_oneof:"eval"`
}

func (x *FromSourceFields) Reset() {
	*x = FromSourceFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromSourceFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromSourceFields) ProtoMessage() {}

func (x *FromSourceFields) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromSourceFields.ProtoReflect.Descriptor instead.
func (*FromSourceFields) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{6}
}

func (m *FromSourceFields) GetEval() isFromSourceFields_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *FromSourceFields) GetFromObj() *FromObj {
	if x, ok := x.GetEval().(*FromSourceFields_FromObj); ok {
		return x.FromObj
	}
	return nil
}

func (x *FromSourceFields) GetFromRec() *FromRec {
	if x, ok := x.GetEval().(*FromSourceFields_FromRec); ok {
		return x.FromRec
	}
	return nil
}

func (x *FromSourceFields) GetFromVar() *FromVar {
	if x, ok := x.GetEval().(*FromSourceFields_FromVar); ok {
		return x.FromVar
	}
	return nil
}

func (x *FromSourceFields) GetRenderField() *RenderField {
	if x, ok := x.GetEval().(*FromSourceFields_RenderField); ok {
		return x.RenderField
	}
	return nil
}

type isFromSourceFields_Eval interface {
	isFromSourceFields_Eval()
}

type FromSourceFields_FromObj struct {
	FromObj *FromObj `protobuf:"bytes,5,opt,name=from_obj,json=fromObj,proto3,oneof"`
}

type FromSourceFields_FromRec struct {
	FromRec *FromRec `protobuf:"bytes,10,opt,name=from_rec,json=fromRec,proto3,oneof"`
}

type FromSourceFields_FromVar struct {
	FromVar *FromVar `protobuf:"bytes,15,opt,name=from_var,json=fromVar,proto3,oneof"`
}

type FromSourceFields_RenderField struct {
	RenderField *RenderField `protobuf:"bytes,20,opt,name=render_field,json=renderField,proto3,oneof"`
}

func (*FromSourceFields_FromObj) isFromSourceFields_Eval() {}

func (*FromSourceFields_FromRec) isFromSourceFields_Eval() {}

func (*FromSourceFields_FromVar) isFromSourceFields_Eval() {}

func (*FromSourceFields_RenderField) isFromSourceFields_Eval() {}

type GrammarMaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*GrammarMaker_Alias
	//	*GrammarMaker_Directive
	Eval isGrammarMaker_Eval `protobuf_oneof:"eval"`
}

func (x *GrammarMaker) Reset() {
	*x = GrammarMaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrammarMaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrammarMaker) ProtoMessage() {}

func (x *GrammarMaker) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrammarMaker.ProtoReflect.Descriptor instead.
func (*GrammarMaker) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{7}
}

func (m *GrammarMaker) GetEval() isGrammarMaker_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *GrammarMaker) GetAlias() *Alias {
	if x, ok := x.GetEval().(*GrammarMaker_Alias); ok {
		return x.Alias
	}
	return nil
}

func (x *GrammarMaker) GetDirective() *Directive {
	if x, ok := x.GetEval().(*GrammarMaker_Directive); ok {
		return x.Directive
	}
	return nil
}

type isGrammarMaker_Eval interface {
	isGrammarMaker_Eval()
}

type GrammarMaker_Alias struct {
	Alias *Alias `protobuf:"bytes,5,opt,name=alias,proto3,oneof"`
}

type GrammarMaker_Directive struct {
	Directive *Directive `protobuf:"bytes,10,opt,name=directive,proto3,oneof"`
}

func (*GrammarMaker_Alias) isGrammarMaker_Eval() {}

func (*GrammarMaker_Directive) isGrammarMaker_Eval() {}

type IntoTargetFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*IntoTargetFields_IntoObj
	//	*IntoTargetFields_IntoVar
	Eval isIntoTargetFields_Eval `protobuf_oneof:"eval"`
}

func (x *IntoTargetFields) Reset() {
	*x = IntoTargetFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntoTargetFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntoTargetFields) ProtoMessage() {}

func (x *IntoTargetFields) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntoTargetFields.ProtoReflect.Descriptor instead.
func (*IntoTargetFields) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{8}
}

func (m *IntoTargetFields) GetEval() isIntoTargetFields_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *IntoTargetFields) GetIntoObj() *IntoObj {
	if x, ok := x.GetEval().(*IntoTargetFields_IntoObj); ok {
		return x.IntoObj
	}
	return nil
}

func (x *IntoTargetFields) GetIntoVar() *IntoVar {
	if x, ok := x.GetEval().(*IntoTargetFields_IntoVar); ok {
		return x.IntoVar
	}
	return nil
}

type isIntoTargetFields_Eval interface {
	isIntoTargetFields_Eval()
}

type IntoTargetFields_IntoObj struct {
	IntoObj *IntoObj `protobuf:"bytes,5,opt,name=into_obj,json=intoObj,proto3,oneof"`
}

type IntoTargetFields_IntoVar struct {
	IntoVar *IntoVar `protobuf:"bytes,10,opt,name=into_var,json=intoVar,proto3,oneof"`
}

func (*IntoTargetFields_IntoObj) isIntoTargetFields_Eval() {}

func (*IntoTargetFields_IntoVar) isIntoTargetFields_Eval() {}

type ListIterator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*ListIterator_AsNum
	//	*ListIterator_AsRec
	//	*ListIterator_AsTxt
	Eval isListIterator_Eval `protobuf_oneof:"eval"`
}

func (x *ListIterator) Reset() {
	*x = ListIterator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIterator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIterator) ProtoMessage() {}

func (x *ListIterator) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIterator.ProtoReflect.Descriptor instead.
func (*ListIterator) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{9}
}

func (m *ListIterator) GetEval() isListIterator_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *ListIterator) GetAsNum() *AsNum {
	if x, ok := x.GetEval().(*ListIterator_AsNum); ok {
		return x.AsNum
	}
	return nil
}

func (x *ListIterator) GetAsRec() *AsRec {
	if x, ok := x.GetEval().(*ListIterator_AsRec); ok {
		return x.AsRec
	}
	return nil
}

func (x *ListIterator) GetAsTxt() *AsTxt {
	if x, ok := x.GetEval().(*ListIterator_AsTxt); ok {
		return x.AsTxt
	}
	return nil
}

type isListIterator_Eval interface {
	isListIterator_Eval()
}

type ListIterator_AsNum struct {
	AsNum *AsNum `protobuf:"bytes,5,opt,name=as_num,json=asNum,proto3,oneof"`
}

type ListIterator_AsRec struct {
	AsRec *AsRec `protobuf:"bytes,10,opt,name=as_rec,json=asRec,proto3,oneof"`
}

type ListIterator_AsTxt struct {
	AsTxt *AsTxt `protobuf:"bytes,15,opt,name=as_txt,json=asTxt,proto3,oneof"`
}

func (*ListIterator_AsNum) isListIterator_Eval() {}

func (*ListIterator_AsRec) isListIterator_Eval() {}

func (*ListIterator_AsTxt) isListIterator_Eval() {}

type ListSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*ListSource_FromNumList
	//	*ListSource_FromRecList
	//	*ListSource_FromTxtList
	Eval isListSource_Eval `protobuf_oneof:"eval"`
}

func (x *ListSource) Reset() {
	*x = ListSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSource) ProtoMessage() {}

func (x *ListSource) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSource.ProtoReflect.Descriptor instead.
func (*ListSource) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{10}
}

func (m *ListSource) GetEval() isListSource_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *ListSource) GetFromNumList() *FromNumList {
	if x, ok := x.GetEval().(*ListSource_FromNumList); ok {
		return x.FromNumList
	}
	return nil
}

func (x *ListSource) GetFromRecList() *FromRecList {
	if x, ok := x.GetEval().(*ListSource_FromRecList); ok {
		return x.FromRecList
	}
	return nil
}

func (x *ListSource) GetFromTxtList() *FromTxtList {
	if x, ok := x.GetEval().(*ListSource_FromTxtList); ok {
		return x.FromTxtList
	}
	return nil
}

type isListSource_Eval interface {
	isListSource_Eval()
}

type ListSource_FromNumList struct {
	FromNumList *FromNumList `protobuf:"bytes,5,opt,name=from_num_list,json=fromNumList,proto3,oneof"`
}

type ListSource_FromRecList struct {
	FromRecList *FromRecList `protobuf:"bytes,10,opt,name=from_rec_list,json=fromRecList,proto3,oneof"`
}

type ListSource_FromTxtList struct {
	FromTxtList *FromTxtList `protobuf:"bytes,15,opt,name=from_txt_list,json=fromTxtList,proto3,oneof"`
}

func (*ListSource_FromNumList) isListSource_Eval() {}

func (*ListSource_FromRecList) isListSource_Eval() {}

func (*ListSource_FromTxtList) isListSource_Eval() {}

type ListTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*ListTarget_IntoNumList
	//	*ListTarget_IntoRecList
	//	*ListTarget_IntoTxtList
	Eval isListTarget_Eval `protobuf_oneof:"eval"`
}

func (x *ListTarget) Reset() {
	*x = ListTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTarget) ProtoMessage() {}

func (x *ListTarget) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTarget.ProtoReflect.Descriptor instead.
func (*ListTarget) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{11}
}

func (m *ListTarget) GetEval() isListTarget_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *ListTarget) GetIntoNumList() *IntoNumList {
	if x, ok := x.GetEval().(*ListTarget_IntoNumList); ok {
		return x.IntoNumList
	}
	return nil
}

func (x *ListTarget) GetIntoRecList() *IntoRecList {
	if x, ok := x.GetEval().(*ListTarget_IntoRecList); ok {
		return x.IntoRecList
	}
	return nil
}

func (x *ListTarget) GetIntoTxtList() *IntoTxtList {
	if x, ok := x.GetEval().(*ListTarget_IntoTxtList); ok {
		return x.IntoTxtList
	}
	return nil
}

type isListTarget_Eval interface {
	isListTarget_Eval()
}

type ListTarget_IntoNumList struct {
	IntoNumList *IntoNumList `protobuf:"bytes,5,opt,name=into_num_list,json=intoNumList,proto3,oneof"`
}

type ListTarget_IntoRecList struct {
	IntoRecList *IntoRecList `protobuf:"bytes,10,opt,name=into_rec_list,json=intoRecList,proto3,oneof"`
}

type ListTarget_IntoTxtList struct {
	IntoTxtList *IntoTxtList `protobuf:"bytes,15,opt,name=into_txt_list,json=intoTxtList,proto3,oneof"`
}

func (*ListTarget_IntoNumList) isListTarget_Eval() {}

func (*ListTarget_IntoRecList) isListTarget_Eval() {}

func (*ListTarget_IntoTxtList) isListTarget_Eval() {}

type NumListEval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*NumListEval_Determine
	//	*NumListEval_GetAtField
	//	*NumListEval_GetVar
	//	*NumListEval_ListSlice
	//	*NumListEval_ListSplice
	//	*NumListEval_Numbers
	//	*NumListEval_Range
	//	*NumListEval_RenderPattern
	//	*NumListEval_RenderRef
	Eval isNumListEval_Eval `protobuf_oneof:"eval"`
}

func (x *NumListEval) Reset() {
	*x = NumListEval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumListEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumListEval) ProtoMessage() {}

func (x *NumListEval) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumListEval.ProtoReflect.Descriptor instead.
func (*NumListEval) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{12}
}

func (m *NumListEval) GetEval() isNumListEval_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *NumListEval) GetDetermine() *Determine {
	if x, ok := x.GetEval().(*NumListEval_Determine); ok {
		return x.Determine
	}
	return nil
}

func (x *NumListEval) GetGetAtField() *GetAtField {
	if x, ok := x.GetEval().(*NumListEval_GetAtField); ok {
		return x.GetAtField
	}
	return nil
}

func (x *NumListEval) GetGetVar() *Var {
	if x, ok := x.GetEval().(*NumListEval_GetVar); ok {
		return x.GetVar
	}
	return nil
}

func (x *NumListEval) GetListSlice() *Slice {
	if x, ok := x.GetEval().(*NumListEval_ListSlice); ok {
		return x.ListSlice
	}
	return nil
}

func (x *NumListEval) GetListSplice() *Splice {
	if x, ok := x.GetEval().(*NumListEval_ListSplice); ok {
		return x.ListSplice
	}
	return nil
}

func (x *NumListEval) GetNumbers() *Numbers {
	if x, ok := x.GetEval().(*NumListEval_Numbers); ok {
		return x.Numbers
	}
	return nil
}

func (x *NumListEval) GetRange() *Range {
	if x, ok := x.GetEval().(*NumListEval_Range); ok {
		return x.Range
	}
	return nil
}

func (x *NumListEval) GetRenderPattern() *RenderPattern {
	if x, ok := x.GetEval().(*NumListEval_RenderPattern); ok {
		return x.RenderPattern
	}
	return nil
}

func (x *NumListEval) GetRenderRef() *RenderRef {
	if x, ok := x.GetEval().(*NumListEval_RenderRef); ok {
		return x.RenderRef
	}
	return nil
}

type isNumListEval_Eval interface {
	isNumListEval_Eval()
}

type NumListEval_Determine struct {
	Determine *Determine `protobuf:"bytes,5,opt,name=determine,proto3,oneof"`
}

type NumListEval_GetAtField struct {
	GetAtField *GetAtField `protobuf:"bytes,10,opt,name=get_at_field,json=getAtField,proto3,oneof"`
}

type NumListEval_GetVar struct {
	GetVar *Var `protobuf:"bytes,15,opt,name=get_var,json=getVar,proto3,oneof"`
}

type NumListEval_ListSlice struct {
	ListSlice *Slice `protobuf:"bytes,20,opt,name=list_slice,json=listSlice,proto3,oneof"`
}

type NumListEval_ListSplice struct {
	ListSplice *Splice `protobuf:"bytes,25,opt,name=list_splice,json=listSplice,proto3,oneof"`
}

type NumListEval_Numbers struct {
	Numbers *Numbers `protobuf:"bytes,30,opt,name=numbers,proto3,oneof"`
}

type NumListEval_Range struct {
	Range *Range `protobuf:"bytes,35,opt,name=range,proto3,oneof"`
}

type NumListEval_RenderPattern struct {
	RenderPattern *RenderPattern `protobuf:"bytes,40,opt,name=render_pattern,json=renderPattern,proto3,oneof"`
}

type NumListEval_RenderRef struct {
	RenderRef *RenderRef `protobuf:"bytes,45,opt,name=render_ref,json=renderRef,proto3,oneof"`
}

func (*NumListEval_Determine) isNumListEval_Eval() {}

func (*NumListEval_GetAtField) isNumListEval_Eval() {}

func (*NumListEval_GetVar) isNumListEval_Eval() {}

func (*NumListEval_ListSlice) isNumListEval_Eval() {}

func (*NumListEval_ListSplice) isNumListEval_Eval() {}

func (*NumListEval_Numbers) isNumListEval_Eval() {}

func (*NumListEval_Range) isNumListEval_Eval() {}

func (*NumListEval_RenderPattern) isNumListEval_Eval() {}

func (*NumListEval_RenderRef) isNumListEval_Eval() {}

type NumberEval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*NumberEval_ChooseNum
	//	*NumberEval_Determine
	//	*NumberEval_DiffOf
	//	*NumberEval_During
	//	*NumberEval_GetAtField
	//	*NumberEval_GetVar
	//	*NumberEval_ListAt
	//	*NumberEval_ListFind
	//	*NumberEval_ListLen
	//	*NumberEval_NumValue
	//	*NumberEval_ProductOf
	//	*NumberEval_QuotientOf
	//	*NumberEval_RemainderOf
	//	*NumberEval_RenderPattern
	//	*NumberEval_RenderRef
	//	*NumberEval_SumOf
	Eval isNumberEval_Eval `protobuf_oneof:"eval"`
}

func (x *NumberEval) Reset() {
	*x = NumberEval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberEval) ProtoMessage() {}

func (x *NumberEval) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberEval.ProtoReflect.Descriptor instead.
func (*NumberEval) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{13}
}

func (m *NumberEval) GetEval() isNumberEval_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *NumberEval) GetChooseNum() *ChooseNum {
	if x, ok := x.GetEval().(*NumberEval_ChooseNum); ok {
		return x.ChooseNum
	}
	return nil
}

func (x *NumberEval) GetDetermine() *Determine {
	if x, ok := x.GetEval().(*NumberEval_Determine); ok {
		return x.Determine
	}
	return nil
}

func (x *NumberEval) GetDiffOf() *DiffOf {
	if x, ok := x.GetEval().(*NumberEval_DiffOf); ok {
		return x.DiffOf
	}
	return nil
}

func (x *NumberEval) GetDuring() *During {
	if x, ok := x.GetEval().(*NumberEval_During); ok {
		return x.During
	}
	return nil
}

func (x *NumberEval) GetGetAtField() *GetAtField {
	if x, ok := x.GetEval().(*NumberEval_GetAtField); ok {
		return x.GetAtField
	}
	return nil
}

func (x *NumberEval) GetGetVar() *Var {
	if x, ok := x.GetEval().(*NumberEval_GetVar); ok {
		return x.GetVar
	}
	return nil
}

func (x *NumberEval) GetListAt() *At {
	if x, ok := x.GetEval().(*NumberEval_ListAt); ok {
		return x.ListAt
	}
	return nil
}

func (x *NumberEval) GetListFind() *Find {
	if x, ok := x.GetEval().(*NumberEval_ListFind); ok {
		return x.ListFind
	}
	return nil
}

func (x *NumberEval) GetListLen() *Len {
	if x, ok := x.GetEval().(*NumberEval_ListLen); ok {
		return x.ListLen
	}
	return nil
}

func (x *NumberEval) GetNumValue() *Number {
	if x, ok := x.GetEval().(*NumberEval_NumValue); ok {
		return x.NumValue
	}
	return nil
}

func (x *NumberEval) GetProductOf() *ProductOf {
	if x, ok := x.GetEval().(*NumberEval_ProductOf); ok {
		return x.ProductOf
	}
	return nil
}

func (x *NumberEval) GetQuotientOf() *QuotientOf {
	if x, ok := x.GetEval().(*NumberEval_QuotientOf); ok {
		return x.QuotientOf
	}
	return nil
}

func (x *NumberEval) GetRemainderOf() *RemainderOf {
	if x, ok := x.GetEval().(*NumberEval_RemainderOf); ok {
		return x.RemainderOf
	}
	return nil
}

func (x *NumberEval) GetRenderPattern() *RenderPattern {
	if x, ok := x.GetEval().(*NumberEval_RenderPattern); ok {
		return x.RenderPattern
	}
	return nil
}

func (x *NumberEval) GetRenderRef() *RenderRef {
	if x, ok := x.GetEval().(*NumberEval_RenderRef); ok {
		return x.RenderRef
	}
	return nil
}

func (x *NumberEval) GetSumOf() *SumOf {
	if x, ok := x.GetEval().(*NumberEval_SumOf); ok {
		return x.SumOf
	}
	return nil
}

type isNumberEval_Eval interface {
	isNumberEval_Eval()
}

type NumberEval_ChooseNum struct {
	ChooseNum *ChooseNum `protobuf:"bytes,5,opt,name=choose_num,json=chooseNum,proto3,oneof"`
}

type NumberEval_Determine struct {
	Determine *Determine `protobuf:"bytes,10,opt,name=determine,proto3,oneof"`
}

type NumberEval_DiffOf struct {
	DiffOf *DiffOf `protobuf:"bytes,15,opt,name=diff_of,json=diffOf,proto3,oneof"`
}

type NumberEval_During struct {
	During *During `protobuf:"bytes,20,opt,name=during,proto3,oneof"`
}

type NumberEval_GetAtField struct {
	GetAtField *GetAtField `protobuf:"bytes,25,opt,name=get_at_field,json=getAtField,proto3,oneof"`
}

type NumberEval_GetVar struct {
	GetVar *Var `protobuf:"bytes,30,opt,name=get_var,json=getVar,proto3,oneof"`
}

type NumberEval_ListAt struct {
	ListAt *At `protobuf:"bytes,35,opt,name=list_at,json=listAt,proto3,oneof"`
}

type NumberEval_ListFind struct {
	ListFind *Find `protobuf:"bytes,40,opt,name=list_find,json=listFind,proto3,oneof"`
}

type NumberEval_ListLen struct {
	ListLen *Len `protobuf:"bytes,45,opt,name=list_len,json=listLen,proto3,oneof"`
}

type NumberEval_NumValue struct {
	NumValue *Number `protobuf:"bytes,50,opt,name=num_value,json=numValue,proto3,oneof"`
}

type NumberEval_ProductOf struct {
	ProductOf *ProductOf `protobuf:"bytes,55,opt,name=product_of,json=productOf,proto3,oneof"`
}

type NumberEval_QuotientOf struct {
	QuotientOf *QuotientOf `protobuf:"bytes,60,opt,name=quotient_of,json=quotientOf,proto3,oneof"`
}

type NumberEval_RemainderOf struct {
	RemainderOf *RemainderOf `protobuf:"bytes,65,opt,name=remainder_of,json=remainderOf,proto3,oneof"`
}

type NumberEval_RenderPattern struct {
	RenderPattern *RenderPattern `protobuf:"bytes,70,opt,name=render_pattern,json=renderPattern,proto3,oneof"`
}

type NumberEval_RenderRef struct {
	RenderRef *RenderRef `protobuf:"bytes,75,opt,name=render_ref,json=renderRef,proto3,oneof"`
}

type NumberEval_SumOf struct {
	SumOf *SumOf `protobuf:"bytes,80,opt,name=sum_of,json=sumOf,proto3,oneof"`
}

func (*NumberEval_ChooseNum) isNumberEval_Eval() {}

func (*NumberEval_Determine) isNumberEval_Eval() {}

func (*NumberEval_DiffOf) isNumberEval_Eval() {}

func (*NumberEval_During) isNumberEval_Eval() {}

func (*NumberEval_GetAtField) isNumberEval_Eval() {}

func (*NumberEval_GetVar) isNumberEval_Eval() {}

func (*NumberEval_ListAt) isNumberEval_Eval() {}

func (*NumberEval_ListFind) isNumberEval_Eval() {}

func (*NumberEval_ListLen) isNumberEval_Eval() {}

func (*NumberEval_NumValue) isNumberEval_Eval() {}

func (*NumberEval_ProductOf) isNumberEval_Eval() {}

func (*NumberEval_QuotientOf) isNumberEval_Eval() {}

func (*NumberEval_RemainderOf) isNumberEval_Eval() {}

func (*NumberEval_RenderPattern) isNumberEval_Eval() {}

func (*NumberEval_RenderRef) isNumberEval_Eval() {}

func (*NumberEval_SumOf) isNumberEval_Eval() {}

type RecordEval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*RecordEval_Determine
	//	*RecordEval_GetAtField
	//	*RecordEval_GetVar
	//	*RecordEval_ListAt
	//	*RecordEval_Make
	//	*RecordEval_RenderPattern
	//	*RecordEval_RenderRef
	Eval isRecordEval_Eval `protobuf_oneof:"eval"`
}

func (x *RecordEval) Reset() {
	*x = RecordEval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEval) ProtoMessage() {}

func (x *RecordEval) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEval.ProtoReflect.Descriptor instead.
func (*RecordEval) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{14}
}

func (m *RecordEval) GetEval() isRecordEval_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *RecordEval) GetDetermine() *Determine {
	if x, ok := x.GetEval().(*RecordEval_Determine); ok {
		return x.Determine
	}
	return nil
}

func (x *RecordEval) GetGetAtField() *GetAtField {
	if x, ok := x.GetEval().(*RecordEval_GetAtField); ok {
		return x.GetAtField
	}
	return nil
}

func (x *RecordEval) GetGetVar() *Var {
	if x, ok := x.GetEval().(*RecordEval_GetVar); ok {
		return x.GetVar
	}
	return nil
}

func (x *RecordEval) GetListAt() *At {
	if x, ok := x.GetEval().(*RecordEval_ListAt); ok {
		return x.ListAt
	}
	return nil
}

func (x *RecordEval) GetMake() *Make {
	if x, ok := x.GetEval().(*RecordEval_Make); ok {
		return x.Make
	}
	return nil
}

func (x *RecordEval) GetRenderPattern() *RenderPattern {
	if x, ok := x.GetEval().(*RecordEval_RenderPattern); ok {
		return x.RenderPattern
	}
	return nil
}

func (x *RecordEval) GetRenderRef() *RenderRef {
	if x, ok := x.GetEval().(*RecordEval_RenderRef); ok {
		return x.RenderRef
	}
	return nil
}

type isRecordEval_Eval interface {
	isRecordEval_Eval()
}

type RecordEval_Determine struct {
	Determine *Determine `protobuf:"bytes,5,opt,name=determine,proto3,oneof"`
}

type RecordEval_GetAtField struct {
	GetAtField *GetAtField `protobuf:"bytes,10,opt,name=get_at_field,json=getAtField,proto3,oneof"`
}

type RecordEval_GetVar struct {
	GetVar *Var `protobuf:"bytes,15,opt,name=get_var,json=getVar,proto3,oneof"`
}

type RecordEval_ListAt struct {
	ListAt *At `protobuf:"bytes,20,opt,name=list_at,json=listAt,proto3,oneof"`
}

type RecordEval_Make struct {
	Make *Make `protobuf:"bytes,25,opt,name=make,proto3,oneof"`
}

type RecordEval_RenderPattern struct {
	RenderPattern *RenderPattern `protobuf:"bytes,30,opt,name=render_pattern,json=renderPattern,proto3,oneof"`
}

type RecordEval_RenderRef struct {
	RenderRef *RenderRef `protobuf:"bytes,35,opt,name=render_ref,json=renderRef,proto3,oneof"`
}

func (*RecordEval_Determine) isRecordEval_Eval() {}

func (*RecordEval_GetAtField) isRecordEval_Eval() {}

func (*RecordEval_GetVar) isRecordEval_Eval() {}

func (*RecordEval_ListAt) isRecordEval_Eval() {}

func (*RecordEval_Make) isRecordEval_Eval() {}

func (*RecordEval_RenderPattern) isRecordEval_Eval() {}

func (*RecordEval_RenderRef) isRecordEval_Eval() {}

type RecordListEval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*RecordListEval_Determine
	//	*RecordListEval_GetAtField
	//	*RecordListEval_GetVar
	//	*RecordListEval_ListSlice
	//	*RecordListEval_ListSplice
	//	*RecordListEval_RenderPattern
	//	*RecordListEval_RenderRef
	Eval isRecordListEval_Eval `protobuf_oneof:"eval"`
}

func (x *RecordListEval) Reset() {
	*x = RecordListEval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordListEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordListEval) ProtoMessage() {}

func (x *RecordListEval) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordListEval.ProtoReflect.Descriptor instead.
func (*RecordListEval) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{15}
}

func (m *RecordListEval) GetEval() isRecordListEval_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *RecordListEval) GetDetermine() *Determine {
	if x, ok := x.GetEval().(*RecordListEval_Determine); ok {
		return x.Determine
	}
	return nil
}

func (x *RecordListEval) GetGetAtField() *GetAtField {
	if x, ok := x.GetEval().(*RecordListEval_GetAtField); ok {
		return x.GetAtField
	}
	return nil
}

func (x *RecordListEval) GetGetVar() *Var {
	if x, ok := x.GetEval().(*RecordListEval_GetVar); ok {
		return x.GetVar
	}
	return nil
}

func (x *RecordListEval) GetListSlice() *Slice {
	if x, ok := x.GetEval().(*RecordListEval_ListSlice); ok {
		return x.ListSlice
	}
	return nil
}

func (x *RecordListEval) GetListSplice() *Splice {
	if x, ok := x.GetEval().(*RecordListEval_ListSplice); ok {
		return x.ListSplice
	}
	return nil
}

func (x *RecordListEval) GetRenderPattern() *RenderPattern {
	if x, ok := x.GetEval().(*RecordListEval_RenderPattern); ok {
		return x.RenderPattern
	}
	return nil
}

func (x *RecordListEval) GetRenderRef() *RenderRef {
	if x, ok := x.GetEval().(*RecordListEval_RenderRef); ok {
		return x.RenderRef
	}
	return nil
}

type isRecordListEval_Eval interface {
	isRecordListEval_Eval()
}

type RecordListEval_Determine struct {
	Determine *Determine `protobuf:"bytes,5,opt,name=determine,proto3,oneof"`
}

type RecordListEval_GetAtField struct {
	GetAtField *GetAtField `protobuf:"bytes,10,opt,name=get_at_field,json=getAtField,proto3,oneof"`
}

type RecordListEval_GetVar struct {
	GetVar *Var `protobuf:"bytes,15,opt,name=get_var,json=getVar,proto3,oneof"`
}

type RecordListEval_ListSlice struct {
	ListSlice *Slice `protobuf:"bytes,20,opt,name=list_slice,json=listSlice,proto3,oneof"`
}

type RecordListEval_ListSplice struct {
	ListSplice *Splice `protobuf:"bytes,25,opt,name=list_splice,json=listSplice,proto3,oneof"`
}

type RecordListEval_RenderPattern struct {
	RenderPattern *RenderPattern `protobuf:"bytes,30,opt,name=render_pattern,json=renderPattern,proto3,oneof"`
}

type RecordListEval_RenderRef struct {
	RenderRef *RenderRef `protobuf:"bytes,35,opt,name=render_ref,json=renderRef,proto3,oneof"`
}

func (*RecordListEval_Determine) isRecordListEval_Eval() {}

func (*RecordListEval_GetAtField) isRecordListEval_Eval() {}

func (*RecordListEval_GetVar) isRecordListEval_Eval() {}

func (*RecordListEval_ListSlice) isRecordListEval_Eval() {}

func (*RecordListEval_ListSplice) isRecordListEval_Eval() {}

func (*RecordListEval_RenderPattern) isRecordListEval_Eval() {}

func (*RecordListEval_RenderRef) isRecordListEval_Eval() {}

type ScannerMaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*ScannerMaker_Action
	//	*ScannerMaker_AllOf
	//	*ScannerMaker_AnyOf
	//	*ScannerMaker_Noun
	//	*ScannerMaker_Retarget
	//	*ScannerMaker_Reverse
	//	*ScannerMaker_Self
	//	*ScannerMaker_Words
	Eval isScannerMaker_Eval `protobuf_oneof:"eval"`
}

func (x *ScannerMaker) Reset() {
	*x = ScannerMaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScannerMaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerMaker) ProtoMessage() {}

func (x *ScannerMaker) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerMaker.ProtoReflect.Descriptor instead.
func (*ScannerMaker) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{16}
}

func (m *ScannerMaker) GetEval() isScannerMaker_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *ScannerMaker) GetAction() *Action {
	if x, ok := x.GetEval().(*ScannerMaker_Action); ok {
		return x.Action
	}
	return nil
}

func (x *ScannerMaker) GetAllOf() *AllOf {
	if x, ok := x.GetEval().(*ScannerMaker_AllOf); ok {
		return x.AllOf
	}
	return nil
}

func (x *ScannerMaker) GetAnyOf() *AnyOf {
	if x, ok := x.GetEval().(*ScannerMaker_AnyOf); ok {
		return x.AnyOf
	}
	return nil
}

func (x *ScannerMaker) GetNoun() *Noun {
	if x, ok := x.GetEval().(*ScannerMaker_Noun); ok {
		return x.Noun
	}
	return nil
}

func (x *ScannerMaker) GetRetarget() *Retarget {
	if x, ok := x.GetEval().(*ScannerMaker_Retarget); ok {
		return x.Retarget
	}
	return nil
}

func (x *ScannerMaker) GetReverse() *Reverse {
	if x, ok := x.GetEval().(*ScannerMaker_Reverse); ok {
		return x.Reverse
	}
	return nil
}

func (x *ScannerMaker) GetSelf() *Self {
	if x, ok := x.GetEval().(*ScannerMaker_Self); ok {
		return x.Self
	}
	return nil
}

func (x *ScannerMaker) GetWords() *Words {
	if x, ok := x.GetEval().(*ScannerMaker_Words); ok {
		return x.Words
	}
	return nil
}

type isScannerMaker_Eval interface {
	isScannerMaker_Eval()
}

type ScannerMaker_Action struct {
	Action *Action `protobuf:"bytes,5,opt,name=action,proto3,oneof"`
}

type ScannerMaker_AllOf struct {
	AllOf *AllOf `protobuf:"bytes,10,opt,name=all_of,json=allOf,proto3,oneof"`
}

type ScannerMaker_AnyOf struct {
	AnyOf *AnyOf `protobuf:"bytes,15,opt,name=any_of,json=anyOf,proto3,oneof"`
}

type ScannerMaker_Noun struct {
	Noun *Noun `protobuf:"bytes,20,opt,name=noun,proto3,oneof"`
}

type ScannerMaker_Retarget struct {
	Retarget *Retarget `protobuf:"bytes,25,opt,name=retarget,proto3,oneof"`
}

type ScannerMaker_Reverse struct {
	Reverse *Reverse `protobuf:"bytes,30,opt,name=reverse,proto3,oneof"`
}

type ScannerMaker_Self struct {
	Self *Self `protobuf:"bytes,35,opt,name=self,proto3,oneof"`
}

type ScannerMaker_Words struct {
	Words *Words `protobuf:"bytes,40,opt,name=words,proto3,oneof"`
}

func (*ScannerMaker_Action) isScannerMaker_Eval() {}

func (*ScannerMaker_AllOf) isScannerMaker_Eval() {}

func (*ScannerMaker_AnyOf) isScannerMaker_Eval() {}

func (*ScannerMaker_Noun) isScannerMaker_Eval() {}

func (*ScannerMaker_Retarget) isScannerMaker_Eval() {}

func (*ScannerMaker_Reverse) isScannerMaker_Eval() {}

func (*ScannerMaker_Self) isScannerMaker_Eval() {}

func (*ScannerMaker_Words) isScannerMaker_Eval() {}

type TextEval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*TextEval_BracketText
	//	*TextEval_BufferText
	//	*TextEval_Capitalize
	//	*TextEval_ChooseText
	//	*TextEval_CommaText
	//	*TextEval_CycleText
	//	*TextEval_Determine
	//	*TextEval_GetAtField
	//	*TextEval_GetVar
	//	*TextEval_IdOf
	//	*TextEval_Join
	//	*TextEval_KindOf
	//	*TextEval_ListAt
	//	*TextEval_MakeLowercase
	//	*TextEval_MakeReversed
	//	*TextEval_MakeSentenceCase
	//	*TextEval_MakeTitleCase
	//	*TextEval_MakeUppercase
	//	*TextEval_NameOf
	//	*TextEval_Pluralize
	//	*TextEval_PrintNum
	//	*TextEval_PrintNumWord
	//	*TextEval_ReciprocalOf
	//	*TextEval_RelativeOf
	//	*TextEval_RenderName
	//	*TextEval_RenderPattern
	//	*TextEval_RenderRef
	//	*TextEval_RenderTemplate
	//	*TextEval_Response
	//	*TextEval_Row
	//	*TextEval_Rows
	//	*TextEval_ShuffleText
	//	*TextEval_Singularize
	//	*TextEval_SlashText
	//	*TextEval_SpanText
	//	*TextEval_StoppingText
	//	*TextEval_TextValue
	Eval isTextEval_Eval `protobuf_oneof:"eval"`
}

func (x *TextEval) Reset() {
	*x = TextEval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextEval) ProtoMessage() {}

func (x *TextEval) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextEval.ProtoReflect.Descriptor instead.
func (*TextEval) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{17}
}

func (m *TextEval) GetEval() isTextEval_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *TextEval) GetBracketText() *Bracket {
	if x, ok := x.GetEval().(*TextEval_BracketText); ok {
		return x.BracketText
	}
	return nil
}

func (x *TextEval) GetBufferText() *Buffer {
	if x, ok := x.GetEval().(*TextEval_BufferText); ok {
		return x.BufferText
	}
	return nil
}

func (x *TextEval) GetCapitalize() *Capitalize {
	if x, ok := x.GetEval().(*TextEval_Capitalize); ok {
		return x.Capitalize
	}
	return nil
}

func (x *TextEval) GetChooseText() *ChooseText {
	if x, ok := x.GetEval().(*TextEval_ChooseText); ok {
		return x.ChooseText
	}
	return nil
}

func (x *TextEval) GetCommaText() *Commas {
	if x, ok := x.GetEval().(*TextEval_CommaText); ok {
		return x.CommaText
	}
	return nil
}

func (x *TextEval) GetCycleText() *CycleText {
	if x, ok := x.GetEval().(*TextEval_CycleText); ok {
		return x.CycleText
	}
	return nil
}

func (x *TextEval) GetDetermine() *Determine {
	if x, ok := x.GetEval().(*TextEval_Determine); ok {
		return x.Determine
	}
	return nil
}

func (x *TextEval) GetGetAtField() *GetAtField {
	if x, ok := x.GetEval().(*TextEval_GetAtField); ok {
		return x.GetAtField
	}
	return nil
}

func (x *TextEval) GetGetVar() *Var {
	if x, ok := x.GetEval().(*TextEval_GetVar); ok {
		return x.GetVar
	}
	return nil
}

func (x *TextEval) GetIdOf() *IdOf {
	if x, ok := x.GetEval().(*TextEval_IdOf); ok {
		return x.IdOf
	}
	return nil
}

func (x *TextEval) GetJoin() *Join {
	if x, ok := x.GetEval().(*TextEval_Join); ok {
		return x.Join
	}
	return nil
}

func (x *TextEval) GetKindOf() *KindOf {
	if x, ok := x.GetEval().(*TextEval_KindOf); ok {
		return x.KindOf
	}
	return nil
}

func (x *TextEval) GetListAt() *At {
	if x, ok := x.GetEval().(*TextEval_ListAt); ok {
		return x.ListAt
	}
	return nil
}

func (x *TextEval) GetMakeLowercase() *MakeLowercase {
	if x, ok := x.GetEval().(*TextEval_MakeLowercase); ok {
		return x.MakeLowercase
	}
	return nil
}

func (x *TextEval) GetMakeReversed() *MakeReversed {
	if x, ok := x.GetEval().(*TextEval_MakeReversed); ok {
		return x.MakeReversed
	}
	return nil
}

func (x *TextEval) GetMakeSentenceCase() *MakeSentenceCase {
	if x, ok := x.GetEval().(*TextEval_MakeSentenceCase); ok {
		return x.MakeSentenceCase
	}
	return nil
}

func (x *TextEval) GetMakeTitleCase() *MakeTitleCase {
	if x, ok := x.GetEval().(*TextEval_MakeTitleCase); ok {
		return x.MakeTitleCase
	}
	return nil
}

func (x *TextEval) GetMakeUppercase() *MakeUppercase {
	if x, ok := x.GetEval().(*TextEval_MakeUppercase); ok {
		return x.MakeUppercase
	}
	return nil
}

func (x *TextEval) GetNameOf() *NameOf {
	if x, ok := x.GetEval().(*TextEval_NameOf); ok {
		return x.NameOf
	}
	return nil
}

func (x *TextEval) GetPluralize() *MakePlural {
	if x, ok := x.GetEval().(*TextEval_Pluralize); ok {
		return x.Pluralize
	}
	return nil
}

func (x *TextEval) GetPrintNum() *PrintNum {
	if x, ok := x.GetEval().(*TextEval_PrintNum); ok {
		return x.PrintNum
	}
	return nil
}

func (x *TextEval) GetPrintNumWord() *PrintNumWord {
	if x, ok := x.GetEval().(*TextEval_PrintNumWord); ok {
		return x.PrintNumWord
	}
	return nil
}

func (x *TextEval) GetReciprocalOf() *ReciprocalOf {
	if x, ok := x.GetEval().(*TextEval_ReciprocalOf); ok {
		return x.ReciprocalOf
	}
	return nil
}

func (x *TextEval) GetRelativeOf() *RelativeOf {
	if x, ok := x.GetEval().(*TextEval_RelativeOf); ok {
		return x.RelativeOf
	}
	return nil
}

func (x *TextEval) GetRenderName() *RenderName {
	if x, ok := x.GetEval().(*TextEval_RenderName); ok {
		return x.RenderName
	}
	return nil
}

func (x *TextEval) GetRenderPattern() *RenderPattern {
	if x, ok := x.GetEval().(*TextEval_RenderPattern); ok {
		return x.RenderPattern
	}
	return nil
}

func (x *TextEval) GetRenderRef() *RenderRef {
	if x, ok := x.GetEval().(*TextEval_RenderRef); ok {
		return x.RenderRef
	}
	return nil
}

func (x *TextEval) GetRenderTemplate() *RenderTemplate {
	if x, ok := x.GetEval().(*TextEval_RenderTemplate); ok {
		return x.RenderTemplate
	}
	return nil
}

func (x *TextEval) GetResponse() *Response {
	if x, ok := x.GetEval().(*TextEval_Response); ok {
		return x.Response
	}
	return nil
}

func (x *TextEval) GetRow() *Row {
	if x, ok := x.GetEval().(*TextEval_Row); ok {
		return x.Row
	}
	return nil
}

func (x *TextEval) GetRows() *Rows {
	if x, ok := x.GetEval().(*TextEval_Rows); ok {
		return x.Rows
	}
	return nil
}

func (x *TextEval) GetShuffleText() *ShuffleText {
	if x, ok := x.GetEval().(*TextEval_ShuffleText); ok {
		return x.ShuffleText
	}
	return nil
}

func (x *TextEval) GetSingularize() *MakeSingular {
	if x, ok := x.GetEval().(*TextEval_Singularize); ok {
		return x.Singularize
	}
	return nil
}

func (x *TextEval) GetSlashText() *Slash {
	if x, ok := x.GetEval().(*TextEval_SlashText); ok {
		return x.SlashText
	}
	return nil
}

func (x *TextEval) GetSpanText() *Span {
	if x, ok := x.GetEval().(*TextEval_SpanText); ok {
		return x.SpanText
	}
	return nil
}

func (x *TextEval) GetStoppingText() *StoppingText {
	if x, ok := x.GetEval().(*TextEval_StoppingText); ok {
		return x.StoppingText
	}
	return nil
}

func (x *TextEval) GetTextValue() *Text {
	if x, ok := x.GetEval().(*TextEval_TextValue); ok {
		return x.TextValue
	}
	return nil
}

type isTextEval_Eval interface {
	isTextEval_Eval()
}

type TextEval_BracketText struct {
	BracketText *Bracket `protobuf:"bytes,5,opt,name=bracket_text,json=bracketText,proto3,oneof"`
}

type TextEval_BufferText struct {
	BufferText *Buffer `protobuf:"bytes,10,opt,name=buffer_text,json=bufferText,proto3,oneof"`
}

type TextEval_Capitalize struct {
	Capitalize *Capitalize `protobuf:"bytes,15,opt,name=capitalize,proto3,oneof"`
}

type TextEval_ChooseText struct {
	ChooseText *ChooseText `protobuf:"bytes,20,opt,name=choose_text,json=chooseText,proto3,oneof"`
}

type TextEval_CommaText struct {
	CommaText *Commas `protobuf:"bytes,25,opt,name=comma_text,json=commaText,proto3,oneof"`
}

type TextEval_CycleText struct {
	CycleText *CycleText `protobuf:"bytes,30,opt,name=cycle_text,json=cycleText,proto3,oneof"`
}

type TextEval_Determine struct {
	Determine *Determine `protobuf:"bytes,35,opt,name=determine,proto3,oneof"`
}

type TextEval_GetAtField struct {
	GetAtField *GetAtField `protobuf:"bytes,40,opt,name=get_at_field,json=getAtField,proto3,oneof"`
}

type TextEval_GetVar struct {
	GetVar *Var `protobuf:"bytes,45,opt,name=get_var,json=getVar,proto3,oneof"`
}

type TextEval_IdOf struct {
	IdOf *IdOf `protobuf:"bytes,50,opt,name=id_of,json=idOf,proto3,oneof"`
}

type TextEval_Join struct {
	Join *Join `protobuf:"bytes,55,opt,name=join,proto3,oneof"`
}

type TextEval_KindOf struct {
	KindOf *KindOf `protobuf:"bytes,60,opt,name=kind_of,json=kindOf,proto3,oneof"`
}

type TextEval_ListAt struct {
	ListAt *At `protobuf:"bytes,65,opt,name=list_at,json=listAt,proto3,oneof"`
}

type TextEval_MakeLowercase struct {
	MakeLowercase *MakeLowercase `protobuf:"bytes,70,opt,name=make_lowercase,json=makeLowercase,proto3,oneof"`
}

type TextEval_MakeReversed struct {
	MakeReversed *MakeReversed `protobuf:"bytes,75,opt,name=make_reversed,json=makeReversed,proto3,oneof"`
}

type TextEval_MakeSentenceCase struct {
	MakeSentenceCase *MakeSentenceCase `protobuf:"bytes,80,opt,name=make_sentence_case,json=makeSentenceCase,proto3,oneof"`
}

type TextEval_MakeTitleCase struct {
	MakeTitleCase *MakeTitleCase `protobuf:"bytes,85,opt,name=make_title_case,json=makeTitleCase,proto3,oneof"`
}

type TextEval_MakeUppercase struct {
	MakeUppercase *MakeUppercase `protobuf:"bytes,90,opt,name=make_uppercase,json=makeUppercase,proto3,oneof"`
}

type TextEval_NameOf struct {
	NameOf *NameOf `protobuf:"bytes,95,opt,name=name_of,json=nameOf,proto3,oneof"`
}

type TextEval_Pluralize struct {
	Pluralize *MakePlural `protobuf:"bytes,100,opt,name=pluralize,proto3,oneof"`
}

type TextEval_PrintNum struct {
	PrintNum *PrintNum `protobuf:"bytes,105,opt,name=print_num,json=printNum,proto3,oneof"`
}

type TextEval_PrintNumWord struct {
	PrintNumWord *PrintNumWord `protobuf:"bytes,110,opt,name=print_num_word,json=printNumWord,proto3,oneof"`
}

type TextEval_ReciprocalOf struct {
	ReciprocalOf *ReciprocalOf `protobuf:"bytes,115,opt,name=reciprocal_of,json=reciprocalOf,proto3,oneof"`
}

type TextEval_RelativeOf struct {
	RelativeOf *RelativeOf `protobuf:"bytes,120,opt,name=relative_of,json=relativeOf,proto3,oneof"`
}

type TextEval_RenderName struct {
	RenderName *RenderName `protobuf:"bytes,125,opt,name=render_name,json=renderName,proto3,oneof"`
}

type TextEval_RenderPattern struct {
	RenderPattern *RenderPattern `protobuf:"bytes,130,opt,name=render_pattern,json=renderPattern,proto3,oneof"`
}

type TextEval_RenderRef struct {
	RenderRef *RenderRef `protobuf:"bytes,135,opt,name=render_ref,json=renderRef,proto3,oneof"`
}

type TextEval_RenderTemplate struct {
	RenderTemplate *RenderTemplate `protobuf:"bytes,140,opt,name=render_template,json=renderTemplate,proto3,oneof"`
}

type TextEval_Response struct {
	Response *Response `protobuf:"bytes,145,opt,name=response,proto3,oneof"`
}

type TextEval_Row struct {
	Row *Row `protobuf:"bytes,150,opt,name=row,proto3,oneof"`
}

type TextEval_Rows struct {
	Rows *Rows `protobuf:"bytes,155,opt,name=rows,proto3,oneof"`
}

type TextEval_ShuffleText struct {
	ShuffleText *ShuffleText `protobuf:"bytes,160,opt,name=shuffle_text,json=shuffleText,proto3,oneof"`
}

type TextEval_Singularize struct {
	Singularize *MakeSingular `protobuf:"bytes,165,opt,name=singularize,proto3,oneof"`
}

type TextEval_SlashText struct {
	SlashText *Slash `protobuf:"bytes,170,opt,name=slash_text,json=slashText,proto3,oneof"`
}

type TextEval_SpanText struct {
	SpanText *Span `protobuf:"bytes,175,opt,name=span_text,json=spanText,proto3,oneof"`
}

type TextEval_StoppingText struct {
	StoppingText *StoppingText `protobuf:"bytes,180,opt,name=stopping_text,json=stoppingText,proto3,oneof"`
}

type TextEval_TextValue struct {
	TextValue *Text `protobuf:"bytes,185,opt,name=text_value,json=textValue,proto3,oneof"`
}

func (*TextEval_BracketText) isTextEval_Eval() {}

func (*TextEval_BufferText) isTextEval_Eval() {}

func (*TextEval_Capitalize) isTextEval_Eval() {}

func (*TextEval_ChooseText) isTextEval_Eval() {}

func (*TextEval_CommaText) isTextEval_Eval() {}

func (*TextEval_CycleText) isTextEval_Eval() {}

func (*TextEval_Determine) isTextEval_Eval() {}

func (*TextEval_GetAtField) isTextEval_Eval() {}

func (*TextEval_GetVar) isTextEval_Eval() {}

func (*TextEval_IdOf) isTextEval_Eval() {}

func (*TextEval_Join) isTextEval_Eval() {}

func (*TextEval_KindOf) isTextEval_Eval() {}

func (*TextEval_ListAt) isTextEval_Eval() {}

func (*TextEval_MakeLowercase) isTextEval_Eval() {}

func (*TextEval_MakeReversed) isTextEval_Eval() {}

func (*TextEval_MakeSentenceCase) isTextEval_Eval() {}

func (*TextEval_MakeTitleCase) isTextEval_Eval() {}

func (*TextEval_MakeUppercase) isTextEval_Eval() {}

func (*TextEval_NameOf) isTextEval_Eval() {}

func (*TextEval_Pluralize) isTextEval_Eval() {}

func (*TextEval_PrintNum) isTextEval_Eval() {}

func (*TextEval_PrintNumWord) isTextEval_Eval() {}

func (*TextEval_ReciprocalOf) isTextEval_Eval() {}

func (*TextEval_RelativeOf) isTextEval_Eval() {}

func (*TextEval_RenderName) isTextEval_Eval() {}

func (*TextEval_RenderPattern) isTextEval_Eval() {}

func (*TextEval_RenderRef) isTextEval_Eval() {}

func (*TextEval_RenderTemplate) isTextEval_Eval() {}

func (*TextEval_Response) isTextEval_Eval() {}

func (*TextEval_Row) isTextEval_Eval() {}

func (*TextEval_Rows) isTextEval_Eval() {}

func (*TextEval_ShuffleText) isTextEval_Eval() {}

func (*TextEval_Singularize) isTextEval_Eval() {}

func (*TextEval_SlashText) isTextEval_Eval() {}

func (*TextEval_SpanText) isTextEval_Eval() {}

func (*TextEval_StoppingText) isTextEval_Eval() {}

func (*TextEval_TextValue) isTextEval_Eval() {}

type TextListEval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*TextListEval_Determine
	//	*TextListEval_GetAtField
	//	*TextListEval_GetVar
	//	*TextListEval_KindsOf
	//	*TextListEval_ListSlice
	//	*TextListEval_ListSplice
	//	*TextListEval_ReciprocalsOf
	//	*TextListEval_RelativesOf
	//	*TextListEval_RenderPattern
	//	*TextListEval_RenderRef
	//	*TextListEval_Texts
	Eval isTextListEval_Eval `protobuf_oneof:"eval"`
}

func (x *TextListEval) Reset() {
	*x = TextListEval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextListEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextListEval) ProtoMessage() {}

func (x *TextListEval) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextListEval.ProtoReflect.Descriptor instead.
func (*TextListEval) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{18}
}

func (m *TextListEval) GetEval() isTextListEval_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *TextListEval) GetDetermine() *Determine {
	if x, ok := x.GetEval().(*TextListEval_Determine); ok {
		return x.Determine
	}
	return nil
}

func (x *TextListEval) GetGetAtField() *GetAtField {
	if x, ok := x.GetEval().(*TextListEval_GetAtField); ok {
		return x.GetAtField
	}
	return nil
}

func (x *TextListEval) GetGetVar() *Var {
	if x, ok := x.GetEval().(*TextListEval_GetVar); ok {
		return x.GetVar
	}
	return nil
}

func (x *TextListEval) GetKindsOf() *KindsOf {
	if x, ok := x.GetEval().(*TextListEval_KindsOf); ok {
		return x.KindsOf
	}
	return nil
}

func (x *TextListEval) GetListSlice() *Slice {
	if x, ok := x.GetEval().(*TextListEval_ListSlice); ok {
		return x.ListSlice
	}
	return nil
}

func (x *TextListEval) GetListSplice() *Splice {
	if x, ok := x.GetEval().(*TextListEval_ListSplice); ok {
		return x.ListSplice
	}
	return nil
}

func (x *TextListEval) GetReciprocalsOf() *ReciprocalsOf {
	if x, ok := x.GetEval().(*TextListEval_ReciprocalsOf); ok {
		return x.ReciprocalsOf
	}
	return nil
}

func (x *TextListEval) GetRelativesOf() *RelativesOf {
	if x, ok := x.GetEval().(*TextListEval_RelativesOf); ok {
		return x.RelativesOf
	}
	return nil
}

func (x *TextListEval) GetRenderPattern() *RenderPattern {
	if x, ok := x.GetEval().(*TextListEval_RenderPattern); ok {
		return x.RenderPattern
	}
	return nil
}

func (x *TextListEval) GetRenderRef() *RenderRef {
	if x, ok := x.GetEval().(*TextListEval_RenderRef); ok {
		return x.RenderRef
	}
	return nil
}

func (x *TextListEval) GetTexts() *Texts {
	if x, ok := x.GetEval().(*TextListEval_Texts); ok {
		return x.Texts
	}
	return nil
}

type isTextListEval_Eval interface {
	isTextListEval_Eval()
}

type TextListEval_Determine struct {
	Determine *Determine `protobuf:"bytes,5,opt,name=determine,proto3,oneof"`
}

type TextListEval_GetAtField struct {
	GetAtField *GetAtField `protobuf:"bytes,10,opt,name=get_at_field,json=getAtField,proto3,oneof"`
}

type TextListEval_GetVar struct {
	GetVar *Var `protobuf:"bytes,15,opt,name=get_var,json=getVar,proto3,oneof"`
}

type TextListEval_KindsOf struct {
	KindsOf *KindsOf `protobuf:"bytes,20,opt,name=kinds_of,json=kindsOf,proto3,oneof"`
}

type TextListEval_ListSlice struct {
	ListSlice *Slice `protobuf:"bytes,25,opt,name=list_slice,json=listSlice,proto3,oneof"`
}

type TextListEval_ListSplice struct {
	ListSplice *Splice `protobuf:"bytes,30,opt,name=list_splice,json=listSplice,proto3,oneof"`
}

type TextListEval_ReciprocalsOf struct {
	ReciprocalsOf *ReciprocalsOf `protobuf:"bytes,35,opt,name=reciprocals_of,json=reciprocalsOf,proto3,oneof"`
}

type TextListEval_RelativesOf struct {
	RelativesOf *RelativesOf `protobuf:"bytes,40,opt,name=relatives_of,json=relativesOf,proto3,oneof"`
}

type TextListEval_RenderPattern struct {
	RenderPattern *RenderPattern `protobuf:"bytes,45,opt,name=render_pattern,json=renderPattern,proto3,oneof"`
}

type TextListEval_RenderRef struct {
	RenderRef *RenderRef `protobuf:"bytes,50,opt,name=render_ref,json=renderRef,proto3,oneof"`
}

type TextListEval_Texts struct {
	Texts *Texts `protobuf:"bytes,55,opt,name=texts,proto3,oneof"`
}

func (*TextListEval_Determine) isTextListEval_Eval() {}

func (*TextListEval_GetAtField) isTextListEval_Eval() {}

func (*TextListEval_GetVar) isTextListEval_Eval() {}

func (*TextListEval_KindsOf) isTextListEval_Eval() {}

func (*TextListEval_ListSlice) isTextListEval_Eval() {}

func (*TextListEval_ListSplice) isTextListEval_Eval() {}

func (*TextListEval_ReciprocalsOf) isTextListEval_Eval() {}

func (*TextListEval_RelativesOf) isTextListEval_Eval() {}

func (*TextListEval_RenderPattern) isTextListEval_Eval() {}

func (*TextListEval_RenderRef) isTextListEval_Eval() {}

func (*TextListEval_Texts) isTextListEval_Eval() {}

type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Eval:
	//	*Trigger_TriggerCycle
	//	*Trigger_TriggerOnce
	//	*Trigger_TriggerSwitch
	Eval isTrigger_Eval `protobuf_oneof:"eval"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{19}
}

func (m *Trigger) GetEval() isTrigger_Eval {
	if m != nil {
		return m.Eval
	}
	return nil
}

func (x *Trigger) GetTriggerCycle() *TriggerCycle {
	if x, ok := x.GetEval().(*Trigger_TriggerCycle); ok {
		return x.TriggerCycle
	}
	return nil
}

func (x *Trigger) GetTriggerOnce() *TriggerOnce {
	if x, ok := x.GetEval().(*Trigger_TriggerOnce); ok {
		return x.TriggerOnce
	}
	return nil
}

func (x *Trigger) GetTriggerSwitch() *TriggerSwitch {
	if x, ok := x.GetEval().(*Trigger_TriggerSwitch); ok {
		return x.TriggerSwitch
	}
	return nil
}

type isTrigger_Eval interface {
	isTrigger_Eval()
}

type Trigger_TriggerCycle struct {
	TriggerCycle *TriggerCycle `protobuf:"bytes,5,opt,name=trigger_cycle,json=triggerCycle,proto3,oneof"`
}

type Trigger_TriggerOnce struct {
	TriggerOnce *TriggerOnce `protobuf:"bytes,10,opt,name=trigger_once,json=triggerOnce,proto3,oneof"`
}

type Trigger_TriggerSwitch struct {
	TriggerSwitch *TriggerSwitch `protobuf:"bytes,15,opt,name=trigger_switch,json=triggerSwitch,proto3,oneof"`
}

func (*Trigger_TriggerCycle) isTrigger_Eval() {}

func (*Trigger_TriggerOnce) isTrigger_Eval() {}

func (*Trigger_TriggerSwitch) isTrigger_Eval() {}

type At struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  *Assignment `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
	Index *NumberEval `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *At) Reset() {
	*x = At{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *At) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*At) ProtoMessage() {}

func (x *At) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use At.ProtoReflect.Descriptor instead.
func (*At) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{20}
}

func (x *At) GetList() *Assignment {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *At) GetIndex() *NumberEval {
	if x != nil {
		return x.Index
	}
	return nil
}

type Each struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List *Assignment   `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
	As   *ListIterator `protobuf:"bytes,2,opt,name=as,proto3" json:"as,omitempty"`
	Do   *Activity     `protobuf:"bytes,3,opt,name=do,proto3" json:"do,omitempty"`
	Else *ElseIfEmpty  `protobuf:"bytes,4,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *Each) Reset() {
	*x = Each{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Each) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Each) ProtoMessage() {}

func (x *Each) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Each.ProtoReflect.Descriptor instead.
func (*Each) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{21}
}

func (x *Each) GetList() *Assignment {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *Each) GetAs() *ListIterator {
	if x != nil {
		return x.As
	}
	return nil
}

func (x *Each) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *Each) GetElse() *ElseIfEmpty {
	if x != nil {
		return x.Else
	}
	return nil
}

type Erasing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   *NumberEval `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	From    *ListSource `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	AtIndex *NumberEval `protobuf:"bytes,3,opt,name=at_index,json=atIndex,proto3" json:"at_index,omitempty"`
	As      string      `protobuf:"bytes,4,opt,name=as,proto3" json:"as,omitempty"`
	Do      *Activity   `protobuf:"bytes,5,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *Erasing) Reset() {
	*x = Erasing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erasing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erasing) ProtoMessage() {}

func (x *Erasing) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erasing.ProtoReflect.Descriptor instead.
func (*Erasing) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{22}
}

func (x *Erasing) GetCount() *NumberEval {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *Erasing) GetFrom() *ListSource {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Erasing) GetAtIndex() *NumberEval {
	if x != nil {
		return x.AtIndex
	}
	return nil
}

func (x *Erasing) GetAs() string {
	if x != nil {
		return x.As
	}
	return ""
}

func (x *Erasing) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type ErasingEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   *ListSource `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	AtEdge bool        `protobuf:"varint,2,opt,name=at_edge,json=atEdge,proto3" json:"at_edge,omitempty"`
	As     string      `protobuf:"bytes,3,opt,name=as,proto3" json:"as,omitempty"`
	Do     *Activity   `protobuf:"bytes,4,opt,name=do,proto3" json:"do,omitempty"`
	Else   *Activity   `protobuf:"bytes,5,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *ErasingEdge) Reset() {
	*x = ErasingEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErasingEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErasingEdge) ProtoMessage() {}

func (x *ErasingEdge) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErasingEdge.ProtoReflect.Descriptor instead.
func (*ErasingEdge) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{23}
}

func (x *ErasingEdge) GetFrom() *ListSource {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ErasingEdge) GetAtEdge() bool {
	if x != nil {
		return x.AtEdge
	}
	return false
}

func (x *ErasingEdge) GetAs() string {
	if x != nil {
		return x.As
	}
	return ""
}

func (x *ErasingEdge) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *ErasingEdge) GetElse() *Activity {
	if x != nil {
		return x.Else
	}
	return nil
}

type Find struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Assignment `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	List  *Assignment `protobuf:"bytes,2,opt,name=list,proto3" json:"list,omitempty"`
}

func (x *Find) Reset() {
	*x = Find{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Find) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Find) ProtoMessage() {}

func (x *Find) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Find.ProtoReflect.Descriptor instead.
func (*Find) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{24}
}

func (x *Find) GetValue() *Assignment {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Find) GetList() *Assignment {
	if x != nil {
		return x.List
	}
	return nil
}

type Len struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List *Assignment `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
}

func (x *Len) Reset() {
	*x = Len{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Len) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Len) ProtoMessage() {}

func (x *Len) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Len.ProtoReflect.Descriptor instead.
func (*Len) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{25}
}

func (x *Len) GetList() *Assignment {
	if x != nil {
		return x.List
	}
	return nil
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToList       string      `protobuf:"bytes,1,opt,name=to_list,json=toList,proto3" json:"to_list,omitempty"`
	FromList     *Assignment `protobuf:"bytes,2,opt,name=from_list,json=fromList,proto3" json:"from_list,omitempty"`
	UsingPattern string      `protobuf:"bytes,3,opt,name=using_pattern,json=usingPattern,proto3" json:"using_pattern,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{26}
}

func (x *Map) GetToList() string {
	if x != nil {
		return x.ToList
	}
	return ""
}

func (x *Map) GetFromList() *Assignment {
	if x != nil {
		return x.FromList
	}
	return nil
}

func (x *Map) GetUsingPattern() string {
	if x != nil {
		return x.UsingPattern
	}
	return ""
}

type Reduce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntoValue    string      `protobuf:"bytes,1,opt,name=into_value,json=intoValue,proto3" json:"into_value,omitempty"`
	FromList     *Assignment `protobuf:"bytes,2,opt,name=from_list,json=fromList,proto3" json:"from_list,omitempty"`
	UsingPattern string      `protobuf:"bytes,3,opt,name=using_pattern,json=usingPattern,proto3" json:"using_pattern,omitempty"`
}

func (x *Reduce) Reset() {
	*x = Reduce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reduce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reduce) ProtoMessage() {}

func (x *Reduce) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reduce.ProtoReflect.Descriptor instead.
func (*Reduce) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{27}
}

func (x *Reduce) GetIntoValue() string {
	if x != nil {
		return x.IntoValue
	}
	return ""
}

func (x *Reduce) GetFromList() *Assignment {
	if x != nil {
		return x.FromList
	}
	return nil
}

func (x *Reduce) GetUsingPattern() string {
	if x != nil {
		return x.UsingPattern
	}
	return ""
}

type ReverseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List *ListSource `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
}

func (x *ReverseList) Reset() {
	*x = ReverseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseList) ProtoMessage() {}

func (x *ReverseList) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseList.ProtoReflect.Descriptor instead.
func (*ReverseList) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{28}
}

func (x *ReverseList) GetList() *ListSource {
	if x != nil {
		return x.List
	}
	return nil
}

type Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  string      `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
	Index *NumberEval `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	From  *Assignment `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *Set) Reset() {
	*x = Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Set) ProtoMessage() {}

func (x *Set) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Set.ProtoReflect.Descriptor instead.
func (*Set) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{29}
}

func (x *Set) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *Set) GetIndex() *NumberEval {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Set) GetFrom() *Assignment {
	if x != nil {
		return x.From
	}
	return nil
}

type Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  *Assignment `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
	Start *NumberEval `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End   *NumberEval `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Slice) Reset() {
	*x = Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slice) ProtoMessage() {}

func (x *Slice) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slice.ProtoReflect.Descriptor instead.
func (*Slice) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{30}
}

func (x *Slice) GetList() *Assignment {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *Slice) GetStart() *NumberEval {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Slice) GetEnd() *NumberEval {
	if x != nil {
		return x.End
	}
	return nil
}

type SortNumbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var     *Variable    `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
	ByField *SortByField `protobuf:"bytes,2,opt,name=by_field,json=byField,proto3" json:"by_field,omitempty"`
	Order   bool         `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SortNumbers) Reset() {
	*x = SortNumbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortNumbers) ProtoMessage() {}

func (x *SortNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortNumbers.ProtoReflect.Descriptor instead.
func (*SortNumbers) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{31}
}

func (x *SortNumbers) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *SortNumbers) GetByField() *SortByField {
	if x != nil {
		return x.ByField
	}
	return nil
}

func (x *SortNumbers) GetOrder() bool {
	if x != nil {
		return x.Order
	}
	return false
}

type SortRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var   *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
	Using string    `protobuf:"bytes,2,opt,name=using,proto3" json:"using,omitempty"`
}

func (x *SortRecords) Reset() {
	*x = SortRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortRecords) ProtoMessage() {}

func (x *SortRecords) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortRecords.ProtoReflect.Descriptor instead.
func (*SortRecords) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{32}
}

func (x *SortRecords) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *SortRecords) GetUsing() string {
	if x != nil {
		return x.Using
	}
	return ""
}

type SortText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var     *Variable    `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
	ByField *SortByField `protobuf:"bytes,2,opt,name=by_field,json=byField,proto3" json:"by_field,omitempty"`
	Order   bool         `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Case    bool         `protobuf:"varint,4,opt,name=case,proto3" json:"case,omitempty"`
}

func (x *SortText) Reset() {
	*x = SortText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortText) ProtoMessage() {}

func (x *SortText) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortText.ProtoReflect.Descriptor instead.
func (*SortText) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{33}
}

func (x *SortText) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *SortText) GetByField() *SortByField {
	if x != nil {
		return x.ByField
	}
	return nil
}

func (x *SortText) GetOrder() bool {
	if x != nil {
		return x.Order
	}
	return false
}

func (x *SortText) GetCase() bool {
	if x != nil {
		return x.Case
	}
	return false
}

type Splice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var    *Variable   `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
	Start  *NumberEval `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	Remove *NumberEval `protobuf:"bytes,3,opt,name=remove,proto3" json:"remove,omitempty"`
	Insert *Assignment `protobuf:"bytes,4,opt,name=insert,proto3" json:"insert,omitempty"`
}

func (x *Splice) Reset() {
	*x = Splice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Splice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Splice) ProtoMessage() {}

func (x *Splice) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Splice.ProtoReflect.Descriptor instead.
func (*Splice) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{34}
}

func (x *Splice) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *Splice) GetStart() *NumberEval {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Splice) GetRemove() *NumberEval {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *Splice) GetInsert() *Assignment {
	if x != nil {
		return x.Insert
	}
	return nil
}

type ReciprocalOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Via    *Relation `protobuf:"bytes,1,opt,name=via,proto3" json:"via,omitempty"`
	Object *TextEval `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *ReciprocalOf) Reset() {
	*x = ReciprocalOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReciprocalOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReciprocalOf) ProtoMessage() {}

func (x *ReciprocalOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReciprocalOf.ProtoReflect.Descriptor instead.
func (*ReciprocalOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{35}
}

func (x *ReciprocalOf) GetVia() *Relation {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *ReciprocalOf) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type ReciprocalsOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Via    *Relation `protobuf:"bytes,1,opt,name=via,proto3" json:"via,omitempty"`
	Object *TextEval `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *ReciprocalsOf) Reset() {
	*x = ReciprocalsOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReciprocalsOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReciprocalsOf) ProtoMessage() {}

func (x *ReciprocalsOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReciprocalsOf.ProtoReflect.Descriptor instead.
func (*ReciprocalsOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{36}
}

func (x *ReciprocalsOf) GetVia() *Relation {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *ReciprocalsOf) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type Relate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object   *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	ToObject *TextEval `protobuf:"bytes,2,opt,name=to_object,json=toObject,proto3" json:"to_object,omitempty"`
	Via      *Relation `protobuf:"bytes,3,opt,name=via,proto3" json:"via,omitempty"`
}

func (x *Relate) Reset() {
	*x = Relate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relate) ProtoMessage() {}

func (x *Relate) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relate.ProtoReflect.Descriptor instead.
func (*Relate) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{37}
}

func (x *Relate) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Relate) GetToObject() *TextEval {
	if x != nil {
		return x.ToObject
	}
	return nil
}

func (x *Relate) GetVia() *Relation {
	if x != nil {
		return x.Via
	}
	return nil
}

type RelativeOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Via    *Relation `protobuf:"bytes,1,opt,name=via,proto3" json:"via,omitempty"`
	Object *TextEval `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *RelativeOf) Reset() {
	*x = RelativeOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeOf) ProtoMessage() {}

func (x *RelativeOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeOf.ProtoReflect.Descriptor instead.
func (*RelativeOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{38}
}

func (x *RelativeOf) GetVia() *Relation {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *RelativeOf) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type RelativesOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Via    *Relation `protobuf:"bytes,1,opt,name=via,proto3" json:"via,omitempty"`
	Object *TextEval `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *RelativesOf) Reset() {
	*x = RelativesOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativesOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativesOf) ProtoMessage() {}

func (x *RelativesOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativesOf.ProtoReflect.Descriptor instead.
func (*RelativesOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{39}
}

func (x *RelativesOf) GetVia() *Relation {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *RelativesOf) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type Capitalize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Capitalize) Reset() {
	*x = Capitalize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capitalize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capitalize) ProtoMessage() {}

func (x *Capitalize) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capitalize.ProtoReflect.Descriptor instead.
func (*Capitalize) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{40}
}

func (x *Capitalize) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type ChooseText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If    *BoolEval `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	True  *TextEval `protobuf:"bytes,2,opt,name=true,proto3" json:"true,omitempty"`
	False *TextEval `protobuf:"bytes,3,opt,name=false,proto3" json:"false,omitempty"`
}

func (x *ChooseText) Reset() {
	*x = ChooseText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseText) ProtoMessage() {}

func (x *ChooseText) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseText.ProtoReflect.Descriptor instead.
func (*ChooseText) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{41}
}

func (x *ChooseText) GetIf() *BoolEval {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *ChooseText) GetTrue() *TextEval {
	if x != nil {
		return x.True
	}
	return nil
}

func (x *ChooseText) GetFalse() *TextEval {
	if x != nil {
		return x.False
	}
	return nil
}

type MakeLowercase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MakeLowercase) Reset() {
	*x = MakeLowercase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeLowercase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeLowercase) ProtoMessage() {}

func (x *MakeLowercase) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeLowercase.ProtoReflect.Descriptor instead.
func (*MakeLowercase) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{42}
}

func (x *MakeLowercase) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type MakePlural struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MakePlural) Reset() {
	*x = MakePlural{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakePlural) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakePlural) ProtoMessage() {}

func (x *MakePlural) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakePlural.ProtoReflect.Descriptor instead.
func (*MakePlural) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{43}
}

func (x *MakePlural) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type MakeReversed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MakeReversed) Reset() {
	*x = MakeReversed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeReversed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeReversed) ProtoMessage() {}

func (x *MakeReversed) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeReversed.ProtoReflect.Descriptor instead.
func (*MakeReversed) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{44}
}

func (x *MakeReversed) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type MakeSentenceCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MakeSentenceCase) Reset() {
	*x = MakeSentenceCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeSentenceCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeSentenceCase) ProtoMessage() {}

func (x *MakeSentenceCase) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeSentenceCase.ProtoReflect.Descriptor instead.
func (*MakeSentenceCase) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{45}
}

func (x *MakeSentenceCase) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type MakeSingular struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MakeSingular) Reset() {
	*x = MakeSingular{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeSingular) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeSingular) ProtoMessage() {}

func (x *MakeSingular) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeSingular.ProtoReflect.Descriptor instead.
func (*MakeSingular) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{46}
}

func (x *MakeSingular) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type MakeTitleCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MakeTitleCase) Reset() {
	*x = MakeTitleCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeTitleCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeTitleCase) ProtoMessage() {}

func (x *MakeTitleCase) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeTitleCase.ProtoReflect.Descriptor instead.
func (*MakeTitleCase) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{47}
}

func (x *MakeTitleCase) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type MakeUppercase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MakeUppercase) Reset() {
	*x = MakeUppercase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeUppercase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeUppercase) ProtoMessage() {}

func (x *MakeUppercase) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeUppercase.ProtoReflect.Descriptor instead.
func (*MakeUppercase) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{48}
}

func (x *MakeUppercase) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type RenderTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *TextEval `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *RenderTemplate) Reset() {
	*x = RenderTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderTemplate) ProtoMessage() {}

func (x *RenderTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderTemplate.ProtoReflect.Descriptor instead.
func (*RenderTemplate) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{49}
}

func (x *RenderTemplate) GetExpression() *TextEval {
	if x != nil {
		return x.Expression
	}
	return nil
}

type EqualTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EqualTo) Reset() {
	*x = EqualTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EqualTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EqualTo) ProtoMessage() {}

func (x *EqualTo) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EqualTo.ProtoReflect.Descriptor instead.
func (*EqualTo) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{50}
}

type GreaterOrEqual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GreaterOrEqual) Reset() {
	*x = GreaterOrEqual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreaterOrEqual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreaterOrEqual) ProtoMessage() {}

func (x *GreaterOrEqual) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreaterOrEqual.ProtoReflect.Descriptor instead.
func (*GreaterOrEqual) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{51}
}

type GreaterThan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GreaterThan) Reset() {
	*x = GreaterThan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreaterThan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreaterThan) ProtoMessage() {}

func (x *GreaterThan) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreaterThan.ProtoReflect.Descriptor instead.
func (*GreaterThan) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{52}
}

type LessOrEqual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LessOrEqual) Reset() {
	*x = LessOrEqual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LessOrEqual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LessOrEqual) ProtoMessage() {}

func (x *LessOrEqual) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LessOrEqual.ProtoReflect.Descriptor instead.
func (*LessOrEqual) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{53}
}

type LessThan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LessThan) Reset() {
	*x = LessThan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LessThan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LessThan) ProtoMessage() {}

func (x *LessThan) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LessThan.ProtoReflect.Descriptor instead.
func (*LessThan) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{54}
}

type NotEqualTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotEqualTo) Reset() {
	*x = NotEqualTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotEqualTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotEqualTo) ProtoMessage() {}

func (x *NotEqualTo) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotEqualTo.ProtoReflect.Descriptor instead.
func (*NotEqualTo) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{55}
}

type TriggerCycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerCycle) Reset() {
	*x = TriggerCycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerCycle) ProtoMessage() {}

func (x *TriggerCycle) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerCycle.ProtoReflect.Descriptor instead.
func (*TriggerCycle) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{56}
}

type TriggerOnce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerOnce) Reset() {
	*x = TriggerOnce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerOnce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerOnce) ProtoMessage() {}

func (x *TriggerOnce) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerOnce.ProtoReflect.Descriptor instead.
func (*TriggerOnce) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{57}
}

type TriggerSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerSwitch) Reset() {
	*x = TriggerSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSwitch) ProtoMessage() {}

func (x *TriggerSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSwitch.ProtoReflect.Descriptor instead.
func (*TriggerSwitch) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{58}
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{59}
}

func (x *Action) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type Alias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names  []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	AsNoun string   `protobuf:"bytes,2,opt,name=as_noun,json=asNoun,proto3" json:"as_noun,omitempty"`
}

func (x *Alias) Reset() {
	*x = Alias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alias) ProtoMessage() {}

func (x *Alias) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alias.ProtoReflect.Descriptor instead.
func (*Alias) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{60}
}

func (x *Alias) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Alias) GetAsNoun() string {
	if x != nil {
		return x.AsNoun
	}
	return ""
}

type AllOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*ScannerMaker `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *AllOf) Reset() {
	*x = AllOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllOf) ProtoMessage() {}

func (x *AllOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllOf.ProtoReflect.Descriptor instead.
func (*AllOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{61}
}

func (x *AllOf) GetSeries() []*ScannerMaker {
	if x != nil {
		return x.Series
	}
	return nil
}

type AnyOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*ScannerMaker `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AnyOf) Reset() {
	*x = AnyOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyOf) ProtoMessage() {}

func (x *AnyOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyOf.ProtoReflect.Descriptor instead.
func (*AnyOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{62}
}

func (x *AnyOf) GetOptions() []*ScannerMaker {
	if x != nil {
		return x.Options
	}
	return nil
}

type Directive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ledes []string        `protobuf:"bytes,1,rep,name=ledes,proto3" json:"ledes,omitempty"`
	Scans []*ScannerMaker `protobuf:"bytes,2,rep,name=scans,proto3" json:"scans,omitempty"`
}

func (x *Directive) Reset() {
	*x = Directive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Directive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Directive) ProtoMessage() {}

func (x *Directive) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Directive.ProtoReflect.Descriptor instead.
func (*Directive) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{63}
}

func (x *Directive) GetLedes() []string {
	if x != nil {
		return x.Ledes
	}
	return nil
}

func (x *Directive) GetScans() []*ScannerMaker {
	if x != nil {
		return x.Scans
	}
	return nil
}

type Noun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *Noun) Reset() {
	*x = Noun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Noun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Noun) ProtoMessage() {}

func (x *Noun) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Noun.ProtoReflect.Descriptor instead.
func (*Noun) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{64}
}

func (x *Noun) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type Retarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spans []*ScannerMaker `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (x *Retarget) Reset() {
	*x = Retarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Retarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retarget) ProtoMessage() {}

func (x *Retarget) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retarget.ProtoReflect.Descriptor instead.
func (*Retarget) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{65}
}

func (x *Retarget) GetSpans() []*ScannerMaker {
	if x != nil {
		return x.Spans
	}
	return nil
}

type Reverse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reverses []*ScannerMaker `protobuf:"bytes,1,rep,name=reverses,proto3" json:"reverses,omitempty"`
}

func (x *Reverse) Reset() {
	*x = Reverse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reverse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reverse) ProtoMessage() {}

func (x *Reverse) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reverse.ProtoReflect.Descriptor instead.
func (*Reverse) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{66}
}

func (x *Reverse) GetReverses() []*ScannerMaker {
	if x != nil {
		return x.Reverses
	}
	return nil
}

type Self struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player string `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *Self) Reset() {
	*x = Self{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Self) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Self) ProtoMessage() {}

func (x *Self) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Self.ProtoReflect.Descriptor instead.
func (*Self) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{67}
}

func (x *Self) GetPlayer() string {
	if x != nil {
		return x.Player
	}
	return ""
}

type Words struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Words []string `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
}

func (x *Words) Reset() {
	*x = Words{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Words) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Words) ProtoMessage() {}

func (x *Words) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Words.ProtoReflect.Descriptor instead.
func (*Words) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{68}
}

func (x *Words) GetWords() []string {
	if x != nil {
		return x.Words
	}
	return nil
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exes []*Execute `protobuf:"bytes,1,rep,name=exes,proto3" json:"exes,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{69}
}

func (x *Activity) GetExes() []*Execute {
	if x != nil {
		return x.Exes
	}
	return nil
}

type Determine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern   string     `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Arguments *Arguments `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Determine) Reset() {
	*x = Determine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Determine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Determine) ProtoMessage() {}

func (x *Determine) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Determine.ProtoReflect.Descriptor instead.
func (*Determine) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{70}
}

func (x *Determine) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *Determine) GetArguments() *Arguments {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type During struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *During) Reset() {
	*x = During{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *During) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*During) ProtoMessage() {}

func (x *During) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use During.ProtoReflect.Descriptor instead.
func (*During) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{71}
}

func (x *During) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32       `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Value *Assignment `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{72}
}

func (x *Log) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Log) GetValue() *Assignment {
	if x != nil {
		return x.Value
	}
	return nil
}

type Send struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event     string        `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Path      *TextListEval `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Arguments *Arguments    `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Send) Reset() {
	*x = Send{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Send) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Send) ProtoMessage() {}

func (x *Send) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Send.ProtoReflect.Descriptor instead.
func (*Send) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{73}
}

func (x *Send) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *Send) GetPath() *TextListEval {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Send) GetArguments() *Arguments {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool bool `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
}

func (x *Bool) Reset() {
	*x = Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{74}
}

func (x *Bool) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

type Number struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num float64 `protobuf:"fixed64,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *Number) Reset() {
	*x = Number{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Number) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Number) ProtoMessage() {}

func (x *Number) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Number.ProtoReflect.Descriptor instead.
func (*Number) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{75}
}

func (x *Number) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type Numbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Numbers) Reset() {
	*x = Numbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Numbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Numbers) ProtoMessage() {}

func (x *Numbers) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Numbers.ProtoReflect.Descriptor instead.
func (*Numbers) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{76}
}

func (x *Numbers) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{77}
}

func (x *Text) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Texts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Texts) Reset() {
	*x = Texts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Texts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Texts) ProtoMessage() {}

func (x *Texts) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Texts.ProtoReflect.Descriptor instead.
func (*Texts) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{78}
}

func (x *Texts) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Assign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var  *Variable   `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
	From *Assignment `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *Assign) Reset() {
	*x = Assign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assign) ProtoMessage() {}

func (x *Assign) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assign.ProtoReflect.Descriptor instead.
func (*Assign) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{79}
}

func (x *Assign) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *Assign) GetFrom() *Assignment {
	if x != nil {
		return x.From
	}
	return nil
}

type FromBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val *BoolEval `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *FromBool) Reset() {
	*x = FromBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromBool) ProtoMessage() {}

func (x *FromBool) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromBool.ProtoReflect.Descriptor instead.
func (*FromBool) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{80}
}

func (x *FromBool) GetVal() *BoolEval {
	if x != nil {
		return x.Val
	}
	return nil
}

type FromNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val *NumberEval `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *FromNum) Reset() {
	*x = FromNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromNum) ProtoMessage() {}

func (x *FromNum) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromNum.ProtoReflect.Descriptor instead.
func (*FromNum) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{81}
}

func (x *FromNum) GetVal() *NumberEval {
	if x != nil {
		return x.Val
	}
	return nil
}

type FromNumbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals *NumListEval `protobuf:"bytes,1,opt,name=vals,proto3" json:"vals,omitempty"`
}

func (x *FromNumbers) Reset() {
	*x = FromNumbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromNumbers) ProtoMessage() {}

func (x *FromNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromNumbers.ProtoReflect.Descriptor instead.
func (*FromNumbers) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{82}
}

func (x *FromNumbers) GetVals() *NumListEval {
	if x != nil {
		return x.Vals
	}
	return nil
}

type FromRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val *RecordEval `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *FromRecord) Reset() {
	*x = FromRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromRecord) ProtoMessage() {}

func (x *FromRecord) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromRecord.ProtoReflect.Descriptor instead.
func (*FromRecord) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{83}
}

func (x *FromRecord) GetVal() *RecordEval {
	if x != nil {
		return x.Val
	}
	return nil
}

type FromRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals *RecordListEval `protobuf:"bytes,1,opt,name=vals,proto3" json:"vals,omitempty"`
}

func (x *FromRecords) Reset() {
	*x = FromRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromRecords) ProtoMessage() {}

func (x *FromRecords) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromRecords.ProtoReflect.Descriptor instead.
func (*FromRecords) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{84}
}

func (x *FromRecords) GetVals() *RecordListEval {
	if x != nil {
		return x.Vals
	}
	return nil
}

type FromText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val *TextEval `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *FromText) Reset() {
	*x = FromText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromText) ProtoMessage() {}

func (x *FromText) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromText.ProtoReflect.Descriptor instead.
func (*FromText) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{85}
}

func (x *FromText) GetVal() *TextEval {
	if x != nil {
		return x.Val
	}
	return nil
}

type FromTexts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals *TextListEval `protobuf:"bytes,1,opt,name=vals,proto3" json:"vals,omitempty"`
}

func (x *FromTexts) Reset() {
	*x = FromTexts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromTexts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromTexts) ProtoMessage() {}

func (x *FromTexts) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromTexts.ProtoReflect.Descriptor instead.
func (*FromTexts) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{86}
}

func (x *FromTexts) GetVals() *TextListEval {
	if x != nil {
		return x.Vals
	}
	return nil
}

type GetAtField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string            `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	From  *FromSourceFields `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *GetAtField) Reset() {
	*x = GetAtField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAtField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAtField) ProtoMessage() {}

func (x *GetAtField) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAtField.ProtoReflect.Descriptor instead.
func (*GetAtField) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{87}
}

func (x *GetAtField) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *GetAtField) GetFrom() *FromSourceFields {
	if x != nil {
		return x.From
	}
	return nil
}

type PutAtField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    *Assignment       `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Into    *IntoTargetFields `protobuf:"bytes,2,opt,name=into,proto3" json:"into,omitempty"`
	AtField string            `protobuf:"bytes,3,opt,name=at_field,json=atField,proto3" json:"at_field,omitempty"`
}

func (x *PutAtField) Reset() {
	*x = PutAtField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAtField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAtField) ProtoMessage() {}

func (x *PutAtField) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAtField.ProtoReflect.Descriptor instead.
func (*PutAtField) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{88}
}

func (x *PutAtField) GetFrom() *Assignment {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PutAtField) GetInto() *IntoTargetFields {
	if x != nil {
		return x.Into
	}
	return nil
}

func (x *PutAtField) GetAtField() string {
	if x != nil {
		return x.AtField
	}
	return ""
}

type Var struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Var) Reset() {
	*x = Var{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Var) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Var) ProtoMessage() {}

func (x *Var) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Var.ProtoReflect.Descriptor instead.
func (*Var) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{89}
}

func (x *Var) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Break struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Break) Reset() {
	*x = Break{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Break) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Break) ProtoMessage() {}

func (x *Break) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Break.ProtoReflect.Descriptor instead.
func (*Break) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{90}
}

type DoNothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DoNothing) Reset() {
	*x = DoNothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoNothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoNothing) ProtoMessage() {}

func (x *DoNothing) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoNothing.ProtoReflect.Descriptor instead.
func (*DoNothing) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{91}
}

func (x *DoNothing) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Next struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Next) Reset() {
	*x = Next{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Next) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Next) ProtoMessage() {}

func (x *Next) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Next.ProtoReflect.Descriptor instead.
func (*Next) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{92}
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To     *NumberEval `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	From   *NumberEval `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	ByStep *NumberEval `protobuf:"bytes,3,opt,name=by_step,json=byStep,proto3" json:"by_step,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{93}
}

func (x *Range) GetTo() *NumberEval {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Range) GetFrom() *NumberEval {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Range) GetByStep() *NumberEval {
	if x != nil {
		return x.ByStep
	}
	return nil
}

type While struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	True *BoolEval `protobuf:"bytes,1,opt,name=true,proto3" json:"true,omitempty"`
	Do   *Activity `protobuf:"bytes,2,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *While) Reset() {
	*x = While{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *While) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*While) ProtoMessage() {}

func (x *While) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use While.ProtoReflect.Descriptor instead.
func (*While) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{94}
}

func (x *While) GetTrue() *BoolEval {
	if x != nil {
		return x.True
	}
	return nil
}

func (x *While) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type Bracket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Do *Activity `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *Bracket) Reset() {
	*x = Bracket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bracket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bracket) ProtoMessage() {}

func (x *Bracket) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bracket.ProtoReflect.Descriptor instead.
func (*Bracket) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{95}
}

func (x *Bracket) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type Buffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Do *Activity `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *Buffer) Reset() {
	*x = Buffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buffer) ProtoMessage() {}

func (x *Buffer) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buffer.ProtoReflect.Descriptor instead.
func (*Buffer) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{96}
}

func (x *Buffer) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type Commas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Do *Activity `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *Commas) Reset() {
	*x = Commas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commas) ProtoMessage() {}

func (x *Commas) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commas.ProtoReflect.Descriptor instead.
func (*Commas) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{97}
}

func (x *Commas) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type Newline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Newline) Reset() {
	*x = Newline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Newline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Newline) ProtoMessage() {}

func (x *Newline) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Newline.ProtoReflect.Descriptor instead.
func (*Newline) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{98}
}

type Paragraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Paragraph) Reset() {
	*x = Paragraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paragraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paragraph) ProtoMessage() {}

func (x *Paragraph) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paragraph.ProtoReflect.Descriptor instead.
func (*Paragraph) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{99}
}

type PrintNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num *NumberEval `protobuf:"bytes,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *PrintNum) Reset() {
	*x = PrintNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintNum) ProtoMessage() {}

func (x *PrintNum) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintNum.ProtoReflect.Descriptor instead.
func (*PrintNum) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{100}
}

func (x *PrintNum) GetNum() *NumberEval {
	if x != nil {
		return x.Num
	}
	return nil
}

type PrintNumWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num *NumberEval `protobuf:"bytes,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *PrintNumWord) Reset() {
	*x = PrintNumWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintNumWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintNumWord) ProtoMessage() {}

func (x *PrintNumWord) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintNumWord.ProtoReflect.Descriptor instead.
func (*PrintNumWord) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{101}
}

func (x *PrintNumWord) GetNum() *NumberEval {
	if x != nil {
		return x.Num
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Do *Activity `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{102}
}

func (x *Row) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type Rows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Do *Activity `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *Rows) Reset() {
	*x = Rows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rows) ProtoMessage() {}

func (x *Rows) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rows.ProtoReflect.Descriptor instead.
func (*Rows) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{103}
}

func (x *Rows) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type Say struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Say) Reset() {
	*x = Say{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Say) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Say) ProtoMessage() {}

func (x *Say) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Say.ProtoReflect.Descriptor instead.
func (*Say) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{104}
}

func (x *Say) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type Slash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Do *Activity `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *Slash) Reset() {
	*x = Slash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slash) ProtoMessage() {}

func (x *Slash) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slash.ProtoReflect.Descriptor instead.
func (*Slash) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{105}
}

func (x *Slash) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type Softline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Softline) Reset() {
	*x = Softline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Softline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Softline) ProtoMessage() {}

func (x *Softline) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Softline.ProtoReflect.Descriptor instead.
func (*Softline) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{106}
}

type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Do *Activity `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{107}
}

func (x *Span) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type Includes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Part *TextEval `protobuf:"bytes,2,opt,name=part,proto3" json:"part,omitempty"`
}

func (x *Includes) Reset() {
	*x = Includes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Includes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Includes) ProtoMessage() {}

func (x *Includes) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Includes.ProtoReflect.Descriptor instead.
func (*Includes) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{108}
}

func (x *Includes) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Includes) GetPart() *TextEval {
	if x != nil {
		return x.Part
	}
	return nil
}

type IsEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *IsEmpty) Reset() {
	*x = IsEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsEmpty) ProtoMessage() {}

func (x *IsEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsEmpty.ProtoReflect.Descriptor instead.
func (*IsEmpty) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{109}
}

func (x *IsEmpty) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sep   *TextEval   `protobuf:"bytes,1,opt,name=sep,proto3" json:"sep,omitempty"`
	Parts []*TextEval `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *Join) Reset() {
	*x = Join{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{110}
}

func (x *Join) GetSep() *TextEval {
	if x != nil {
		return x.Sep
	}
	return nil
}

func (x *Join) GetParts() []*TextEval {
	if x != nil {
		return x.Parts
	}
	return nil
}

type Matches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    *TextEval `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Pattern string    `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *Matches) Reset() {
	*x = Matches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matches) ProtoMessage() {}

func (x *Matches) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matches.ProtoReflect.Descriptor instead.
func (*Matches) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{111}
}

func (x *Matches) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Matches) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type ChooseNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If    *BoolEval   `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	True  *NumberEval `protobuf:"bytes,2,opt,name=true,proto3" json:"true,omitempty"`
	False *NumberEval `protobuf:"bytes,3,opt,name=false,proto3" json:"false,omitempty"`
}

func (x *ChooseNum) Reset() {
	*x = ChooseNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseNum) ProtoMessage() {}

func (x *ChooseNum) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseNum.ProtoReflect.Descriptor instead.
func (*ChooseNum) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{112}
}

func (x *ChooseNum) GetIf() *BoolEval {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *ChooseNum) GetTrue() *NumberEval {
	if x != nil {
		return x.True
	}
	return nil
}

func (x *ChooseNum) GetFalse() *NumberEval {
	if x != nil {
		return x.False
	}
	return nil
}

type DiffOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *NumberEval `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B *NumberEval `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *DiffOf) Reset() {
	*x = DiffOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffOf) ProtoMessage() {}

func (x *DiffOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffOf.ProtoReflect.Descriptor instead.
func (*DiffOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{113}
}

func (x *DiffOf) GetA() *NumberEval {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *DiffOf) GetB() *NumberEval {
	if x != nil {
		return x.B
	}
	return nil
}

type ProductOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *NumberEval `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B *NumberEval `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *ProductOf) Reset() {
	*x = ProductOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOf) ProtoMessage() {}

func (x *ProductOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOf.ProtoReflect.Descriptor instead.
func (*ProductOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{114}
}

func (x *ProductOf) GetA() *NumberEval {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *ProductOf) GetB() *NumberEval {
	if x != nil {
		return x.B
	}
	return nil
}

type QuotientOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *NumberEval `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B *NumberEval `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *QuotientOf) Reset() {
	*x = QuotientOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotientOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotientOf) ProtoMessage() {}

func (x *QuotientOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotientOf.ProtoReflect.Descriptor instead.
func (*QuotientOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{115}
}

func (x *QuotientOf) GetA() *NumberEval {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *QuotientOf) GetB() *NumberEval {
	if x != nil {
		return x.B
	}
	return nil
}

type RemainderOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *NumberEval `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B *NumberEval `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *RemainderOf) Reset() {
	*x = RemainderOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemainderOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemainderOf) ProtoMessage() {}

func (x *RemainderOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemainderOf.ProtoReflect.Descriptor instead.
func (*RemainderOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{116}
}

func (x *RemainderOf) GetA() *NumberEval {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *RemainderOf) GetB() *NumberEval {
	if x != nil {
		return x.B
	}
	return nil
}

type SumOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *NumberEval `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B *NumberEval `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *SumOf) Reset() {
	*x = SumOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumOf) ProtoMessage() {}

func (x *SumOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumOf.ProtoReflect.Descriptor instead.
func (*SumOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{117}
}

func (x *SumOf) GetA() *NumberEval {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *SumOf) GetB() *NumberEval {
	if x != nil {
		return x.B
	}
	return nil
}

type AsNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *AsNum) Reset() {
	*x = AsNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsNum) ProtoMessage() {}

func (x *AsNum) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsNum.ProtoReflect.Descriptor instead.
func (*AsNum) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{118}
}

func (x *AsNum) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type AsRec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *AsRec) Reset() {
	*x = AsRec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsRec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsRec) ProtoMessage() {}

func (x *AsRec) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsRec.ProtoReflect.Descriptor instead.
func (*AsRec) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{119}
}

func (x *AsRec) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type AsTxt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *AsTxt) Reset() {
	*x = AsTxt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsTxt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsTxt) ProtoMessage() {}

func (x *AsTxt) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsTxt.ProtoReflect.Descriptor instead.
func (*AsTxt) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{120}
}

func (x *AsTxt) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type ChooseAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If   *BoolEval `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	Do   *Activity `protobuf:"bytes,2,opt,name=do,proto3" json:"do,omitempty"`
	Else *Brancher `protobuf:"bytes,3,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *ChooseAction) Reset() {
	*x = ChooseAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseAction) ProtoMessage() {}

func (x *ChooseAction) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseAction.ProtoReflect.Descriptor instead.
func (*ChooseAction) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{121}
}

func (x *ChooseAction) GetIf() *BoolEval {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *ChooseAction) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *ChooseAction) GetElse() *Brancher {
	if x != nil {
		return x.Else
	}
	return nil
}

type ChooseMore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If   *BoolEval `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	Do   *Activity `protobuf:"bytes,2,opt,name=do,proto3" json:"do,omitempty"`
	Else *Brancher `protobuf:"bytes,3,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *ChooseMore) Reset() {
	*x = ChooseMore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseMore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseMore) ProtoMessage() {}

func (x *ChooseMore) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseMore.ProtoReflect.Descriptor instead.
func (*ChooseMore) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{122}
}

func (x *ChooseMore) GetIf() *BoolEval {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *ChooseMore) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *ChooseMore) GetElse() *Brancher {
	if x != nil {
		return x.Else
	}
	return nil
}

type ChooseMoreValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assign string      `protobuf:"bytes,1,opt,name=assign,proto3" json:"assign,omitempty"`
	From   *Assignment `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Filter *BoolEval   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Do     *Activity   `protobuf:"bytes,4,opt,name=do,proto3" json:"do,omitempty"`
	Else   *Brancher   `protobuf:"bytes,5,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *ChooseMoreValue) Reset() {
	*x = ChooseMoreValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseMoreValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseMoreValue) ProtoMessage() {}

func (x *ChooseMoreValue) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseMoreValue.ProtoReflect.Descriptor instead.
func (*ChooseMoreValue) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{123}
}

func (x *ChooseMoreValue) GetAssign() string {
	if x != nil {
		return x.Assign
	}
	return ""
}

func (x *ChooseMoreValue) GetFrom() *Assignment {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ChooseMoreValue) GetFilter() *BoolEval {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ChooseMoreValue) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *ChooseMoreValue) GetElse() *Brancher {
	if x != nil {
		return x.Else
	}
	return nil
}

type ChooseNothingElse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Do *Activity `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *ChooseNothingElse) Reset() {
	*x = ChooseNothingElse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseNothingElse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseNothingElse) ProtoMessage() {}

func (x *ChooseNothingElse) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseNothingElse.ProtoReflect.Descriptor instead.
func (*ChooseNothingElse) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{124}
}

func (x *ChooseNothingElse) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type ChooseValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assign string      `protobuf:"bytes,1,opt,name=assign,proto3" json:"assign,omitempty"`
	From   *Assignment `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Filter *BoolEval   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Do     *Activity   `protobuf:"bytes,4,opt,name=do,proto3" json:"do,omitempty"`
	Else   *Brancher   `protobuf:"bytes,5,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *ChooseValue) Reset() {
	*x = ChooseValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseValue) ProtoMessage() {}

func (x *ChooseValue) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseValue.ProtoReflect.Descriptor instead.
func (*ChooseValue) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{125}
}

func (x *ChooseValue) GetAssign() string {
	if x != nil {
		return x.Assign
	}
	return ""
}

func (x *ChooseValue) GetFrom() *Assignment {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ChooseValue) GetFilter() *BoolEval {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ChooseValue) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *ChooseValue) GetElse() *Brancher {
	if x != nil {
		return x.Else
	}
	return nil
}

type EraseEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   *ListSource `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	AtEdge bool        `protobuf:"varint,2,opt,name=at_edge,json=atEdge,proto3" json:"at_edge,omitempty"`
}

func (x *EraseEdge) Reset() {
	*x = EraseEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EraseEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EraseEdge) ProtoMessage() {}

func (x *EraseEdge) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EraseEdge.ProtoReflect.Descriptor instead.
func (*EraseEdge) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{126}
}

func (x *EraseEdge) GetFrom() *ListSource {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EraseEdge) GetAtEdge() bool {
	if x != nil {
		return x.AtEdge
	}
	return false
}

type EraseIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   *NumberEval `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	From    *ListSource `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	AtIndex *NumberEval `protobuf:"bytes,3,opt,name=at_index,json=atIndex,proto3" json:"at_index,omitempty"`
}

func (x *EraseIndex) Reset() {
	*x = EraseIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EraseIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EraseIndex) ProtoMessage() {}

func (x *EraseIndex) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EraseIndex.ProtoReflect.Descriptor instead.
func (*EraseIndex) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{127}
}

func (x *EraseIndex) GetCount() *NumberEval {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *EraseIndex) GetFrom() *ListSource {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EraseIndex) GetAtIndex() *NumberEval {
	if x != nil {
		return x.AtIndex
	}
	return nil
}

type FromNumList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *FromNumList) Reset() {
	*x = FromNumList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromNumList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromNumList) ProtoMessage() {}

func (x *FromNumList) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromNumList.ProtoReflect.Descriptor instead.
func (*FromNumList) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{128}
}

func (x *FromNumList) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type FromObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *FromObj) Reset() {
	*x = FromObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromObj) ProtoMessage() {}

func (x *FromObj) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromObj.ProtoReflect.Descriptor instead.
func (*FromObj) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{129}
}

func (x *FromObj) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type FromRec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rec *RecordEval `protobuf:"bytes,1,opt,name=rec,proto3" json:"rec,omitempty"`
}

func (x *FromRec) Reset() {
	*x = FromRec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromRec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromRec) ProtoMessage() {}

func (x *FromRec) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromRec.ProtoReflect.Descriptor instead.
func (*FromRec) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{130}
}

func (x *FromRec) GetRec() *RecordEval {
	if x != nil {
		return x.Rec
	}
	return nil
}

type FromRecList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *FromRecList) Reset() {
	*x = FromRecList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromRecList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromRecList) ProtoMessage() {}

func (x *FromRecList) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromRecList.ProtoReflect.Descriptor instead.
func (*FromRecList) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{131}
}

func (x *FromRecList) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type FromTxtList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *FromTxtList) Reset() {
	*x = FromTxtList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromTxtList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromTxtList) ProtoMessage() {}

func (x *FromTxtList) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromTxtList.ProtoReflect.Descriptor instead.
func (*FromTxtList) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{132}
}

func (x *FromTxtList) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type FromVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *FromVar) Reset() {
	*x = FromVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromVar) ProtoMessage() {}

func (x *FromVar) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromVar.ProtoReflect.Descriptor instead.
func (*FromVar) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{133}
}

func (x *FromVar) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type IntoNumList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *IntoNumList) Reset() {
	*x = IntoNumList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntoNumList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntoNumList) ProtoMessage() {}

func (x *IntoNumList) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntoNumList.ProtoReflect.Descriptor instead.
func (*IntoNumList) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{134}
}

func (x *IntoNumList) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type IntoObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *IntoObj) Reset() {
	*x = IntoObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntoObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntoObj) ProtoMessage() {}

func (x *IntoObj) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntoObj.ProtoReflect.Descriptor instead.
func (*IntoObj) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{135}
}

func (x *IntoObj) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type IntoRecList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *IntoRecList) Reset() {
	*x = IntoRecList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntoRecList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntoRecList) ProtoMessage() {}

func (x *IntoRecList) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntoRecList.ProtoReflect.Descriptor instead.
func (*IntoRecList) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{136}
}

func (x *IntoRecList) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type IntoTxtList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *IntoTxtList) Reset() {
	*x = IntoTxtList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntoTxtList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntoTxtList) ProtoMessage() {}

func (x *IntoTxtList) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntoTxtList.ProtoReflect.Descriptor instead.
func (*IntoTxtList) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{137}
}

func (x *IntoTxtList) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type IntoVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var *Variable `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
}

func (x *IntoVar) Reset() {
	*x = IntoVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntoVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntoVar) ProtoMessage() {}

func (x *IntoVar) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntoVar.ProtoReflect.Descriptor instead.
func (*IntoVar) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{138}
}

func (x *IntoVar) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

type Make struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments *Arguments `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Make) Reset() {
	*x = Make{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Make) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Make) ProtoMessage() {}

func (x *Make) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Make.ProtoReflect.Descriptor instead.
func (*Make) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{139}
}

func (x *Make) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Make) GetArguments() *Arguments {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type PutEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   *Assignment `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Into   *ListTarget `protobuf:"bytes,2,opt,name=into,proto3" json:"into,omitempty"`
	AtEdge bool        `protobuf:"varint,3,opt,name=at_edge,json=atEdge,proto3" json:"at_edge,omitempty"`
}

func (x *PutEdge) Reset() {
	*x = PutEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutEdge) ProtoMessage() {}

func (x *PutEdge) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutEdge.ProtoReflect.Descriptor instead.
func (*PutEdge) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{140}
}

func (x *PutEdge) GetFrom() *Assignment {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PutEdge) GetInto() *ListTarget {
	if x != nil {
		return x.Into
	}
	return nil
}

func (x *PutEdge) GetAtEdge() bool {
	if x != nil {
		return x.AtEdge
	}
	return false
}

type PutIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    *Assignment `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Into    *ListTarget `protobuf:"bytes,2,opt,name=into,proto3" json:"into,omitempty"`
	AtIndex *NumberEval `protobuf:"bytes,3,opt,name=at_index,json=atIndex,proto3" json:"at_index,omitempty"`
}

func (x *PutIndex) Reset() {
	*x = PutIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutIndex) ProtoMessage() {}

func (x *PutIndex) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutIndex.ProtoReflect.Descriptor instead.
func (*PutIndex) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{141}
}

func (x *PutIndex) GetFrom() *Assignment {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PutIndex) GetInto() *ListTarget {
	if x != nil {
		return x.Into
	}
	return nil
}

func (x *PutIndex) GetAtIndex() *NumberEval {
	if x != nil {
		return x.AtIndex
	}
	return nil
}

type HasTrait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Trait  *TextEval `protobuf:"bytes,2,opt,name=trait,proto3" json:"trait,omitempty"`
}

func (x *HasTrait) Reset() {
	*x = HasTrait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasTrait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasTrait) ProtoMessage() {}

func (x *HasTrait) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasTrait.ProtoReflect.Descriptor instead.
func (*HasTrait) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{142}
}

func (x *HasTrait) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *HasTrait) GetTrait() *TextEval {
	if x != nil {
		return x.Trait
	}
	return nil
}

type IdOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *IdOf) Reset() {
	*x = IdOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdOf) ProtoMessage() {}

func (x *IdOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdOf.ProtoReflect.Descriptor instead.
func (*IdOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{143}
}

func (x *IdOf) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type IsExactKindOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Kind   string    `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *IsExactKindOf) Reset() {
	*x = IsExactKindOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsExactKindOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsExactKindOf) ProtoMessage() {}

func (x *IsExactKindOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsExactKindOf.ProtoReflect.Descriptor instead.
func (*IsExactKindOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{144}
}

func (x *IsExactKindOf) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *IsExactKindOf) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type IsKindOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Kind   string    `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *IsKindOf) Reset() {
	*x = IsKindOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsKindOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsKindOf) ProtoMessage() {}

func (x *IsKindOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsKindOf.ProtoReflect.Descriptor instead.
func (*IsKindOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{145}
}

func (x *IsKindOf) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *IsKindOf) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type KindOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *KindOf) Reset() {
	*x = KindOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KindOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KindOf) ProtoMessage() {}

func (x *KindOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KindOf.ProtoReflect.Descriptor instead.
func (*KindOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{146}
}

func (x *KindOf) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type KindsOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *KindsOf) Reset() {
	*x = KindsOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KindsOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KindsOf) ProtoMessage() {}

func (x *KindsOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KindsOf.ProtoReflect.Descriptor instead.
func (*KindsOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{147}
}

func (x *KindsOf) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type NameOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *NameOf) Reset() {
	*x = NameOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameOf) ProtoMessage() {}

func (x *NameOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameOf.ProtoReflect.Descriptor instead.
func (*NameOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{148}
}

func (x *NameOf) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type ObjectExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *ObjectExists) Reset() {
	*x = ObjectExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectExists) ProtoMessage() {}

func (x *ObjectExists) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectExists.ProtoReflect.Descriptor instead.
func (*ObjectExists) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{149}
}

func (x *ObjectExists) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

type SetTrait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *TextEval `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Trait  *TextEval `protobuf:"bytes,2,opt,name=trait,proto3" json:"trait,omitempty"`
}

func (x *SetTrait) Reset() {
	*x = SetTrait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrait) ProtoMessage() {}

func (x *SetTrait) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrait.ProtoReflect.Descriptor instead.
func (*SetTrait) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{150}
}

func (x *SetTrait) GetObject() *TextEval {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *SetTrait) GetTrait() *TextEval {
	if x != nil {
		return x.Trait
	}
	return nil
}

type AllTrue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests []*BoolEval `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *AllTrue) Reset() {
	*x = AllTrue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTrue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTrue) ProtoMessage() {}

func (x *AllTrue) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTrue.ProtoReflect.Descriptor instead.
func (*AllTrue) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{151}
}

func (x *AllTrue) GetTests() []*BoolEval {
	if x != nil {
		return x.Tests
	}
	return nil
}

type Always struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Always) Reset() {
	*x = Always{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Always) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Always) ProtoMessage() {}

func (x *Always) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Always.ProtoReflect.Descriptor instead.
func (*Always) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{152}
}

type AnyTrue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests []*BoolEval `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *AnyTrue) Reset() {
	*x = AnyTrue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyTrue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyTrue) ProtoMessage() {}

func (x *AnyTrue) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyTrue.ProtoReflect.Descriptor instead.
func (*AnyTrue) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{153}
}

func (x *AnyTrue) GetTests() []*BoolEval {
	if x != nil {
		return x.Tests
	}
	return nil
}

type CompareNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A  *NumberEval `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	Is *Comparator `protobuf:"bytes,2,opt,name=is,proto3" json:"is,omitempty"`
	B  *NumberEval `protobuf:"bytes,3,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *CompareNum) Reset() {
	*x = CompareNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareNum) ProtoMessage() {}

func (x *CompareNum) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareNum.ProtoReflect.Descriptor instead.
func (*CompareNum) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{154}
}

func (x *CompareNum) GetA() *NumberEval {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *CompareNum) GetIs() *Comparator {
	if x != nil {
		return x.Is
	}
	return nil
}

func (x *CompareNum) GetB() *NumberEval {
	if x != nil {
		return x.B
	}
	return nil
}

type CompareText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A  *TextEval   `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	Is *Comparator `protobuf:"bytes,2,opt,name=is,proto3" json:"is,omitempty"`
	B  *TextEval   `protobuf:"bytes,3,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *CompareText) Reset() {
	*x = CompareText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareText) ProtoMessage() {}

func (x *CompareText) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareText.ProtoReflect.Descriptor instead.
func (*CompareText) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{155}
}

func (x *CompareText) GetA() *TextEval {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *CompareText) GetIs() *Comparator {
	if x != nil {
		return x.Is
	}
	return nil
}

func (x *CompareText) GetB() *TextEval {
	if x != nil {
		return x.B
	}
	return nil
}

type CountOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num     *NumberEval `protobuf:"bytes,1,opt,name=num,proto3" json:"num,omitempty"`
	Trigger *Trigger    `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Pos     *Pos        `protobuf:"bytes,12,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *CountOf) Reset() {
	*x = CountOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOf) ProtoMessage() {}

func (x *CountOf) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOf.ProtoReflect.Descriptor instead.
func (*CountOf) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{156}
}

func (x *CountOf) GetNum() *NumberEval {
	if x != nil {
		return x.Num
	}
	return nil
}

func (x *CountOf) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *CountOf) GetPos() *Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type HasDominion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HasDominion) Reset() {
	*x = HasDominion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasDominion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasDominion) ProtoMessage() {}

func (x *HasDominion) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasDominion.ProtoReflect.Descriptor instead.
func (*HasDominion) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{157}
}

func (x *HasDominion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IsNotTrue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *BoolEval `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *IsNotTrue) Reset() {
	*x = IsNotTrue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsNotTrue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsNotTrue) ProtoMessage() {}

func (x *IsNotTrue) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsNotTrue.ProtoReflect.Descriptor instead.
func (*IsNotTrue) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{158}
}

func (x *IsNotTrue) GetTest() *BoolEval {
	if x != nil {
		return x.Test
	}
	return nil
}

type RenderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *TextEval `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RenderField) Reset() {
	*x = RenderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderField) ProtoMessage() {}

func (x *RenderField) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderField.ProtoReflect.Descriptor instead.
func (*RenderField) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{159}
}

func (x *RenderField) GetName() *TextEval {
	if x != nil {
		return x.Name
	}
	return nil
}

type RenderName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RenderName) Reset() {
	*x = RenderName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderName) ProtoMessage() {}

func (x *RenderName) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderName.ProtoReflect.Descriptor instead.
func (*RenderName) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{160}
}

func (x *RenderName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RenderPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern   string     `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Arguments *Arguments `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *RenderPattern) Reset() {
	*x = RenderPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderPattern) ProtoMessage() {}

func (x *RenderPattern) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderPattern.ProtoReflect.Descriptor instead.
func (*RenderPattern) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{161}
}

func (x *RenderPattern) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *RenderPattern) GetArguments() *Arguments {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type RenderRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Flags int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *RenderRef) Reset() {
	*x = RenderRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderRef) ProtoMessage() {}

func (x *RenderRef) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderRef.ProtoReflect.Descriptor instead.
func (*RenderRef) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{162}
}

func (x *RenderRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenderRef) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type CycleText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq   string      `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Parts []*TextEval `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *CycleText) Reset() {
	*x = CycleText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleText) ProtoMessage() {}

func (x *CycleText) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleText.ProtoReflect.Descriptor instead.
func (*CycleText) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{163}
}

func (x *CycleText) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *CycleText) GetParts() []*TextEval {
	if x != nil {
		return x.Parts
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Text *TextEval `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{164}
}

func (x *Response) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Response) GetText() *TextEval {
	if x != nil {
		return x.Text
	}
	return nil
}

type ShuffleText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq   string      `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Parts []*TextEval `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *ShuffleText) Reset() {
	*x = ShuffleText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShuffleText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuffleText) ProtoMessage() {}

func (x *ShuffleText) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuffleText.ProtoReflect.Descriptor instead.
func (*ShuffleText) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{165}
}

func (x *ShuffleText) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *ShuffleText) GetParts() []*TextEval {
	if x != nil {
		return x.Parts
	}
	return nil
}

type StoppingText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq   string      `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Parts []*TextEval `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *StoppingText) Reset() {
	*x = StoppingText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoppingText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoppingText) ProtoMessage() {}

func (x *StoppingText) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoppingText.ProtoReflect.Descriptor instead.
func (*StoppingText) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{166}
}

func (x *StoppingText) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *StoppingText) GetParts() []*TextEval {
	if x != nil {
		return x.Parts
	}
	return nil
}

type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	From *Assignment `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{167}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetFrom() *Assignment {
	if x != nil {
		return x.From
	}
	return nil
}

type Arguments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args []*Argument `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Arguments) Reset() {
	*x = Arguments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Arguments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arguments) ProtoMessage() {}

func (x *Arguments) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arguments.ProtoReflect.Descriptor instead.
func (*Arguments) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{168}
}

func (x *Arguments) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

type ElseIfEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Do *Activity `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
}

func (x *ElseIfEmpty) Reset() {
	*x = ElseIfEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElseIfEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElseIfEmpty) ProtoMessage() {}

func (x *ElseIfEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElseIfEmpty.ProtoReflect.Descriptor instead.
func (*ElseIfEmpty) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{169}
}

func (x *ElseIfEmpty) GetDo() *Activity {
	if x != nil {
		return x.Do
	}
	return nil
}

type Gather struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var   *Variable   `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
	From  *ListSource `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Using string      `protobuf:"bytes,3,opt,name=using,proto3" json:"using,omitempty"`
}

func (x *Gather) Reset() {
	*x = Gather{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gather) ProtoMessage() {}

func (x *Gather) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gather.ProtoReflect.Descriptor instead.
func (*Gather) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{170}
}

func (x *Gather) GetVar() *Variable {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *Gather) GetFrom() *ListSource {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Gather) GetUsing() string {
	if x != nil {
		return x.Using
	}
	return ""
}

type GrammarDecl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grammar *GrammarMaker `protobuf:"bytes,1,opt,name=grammar,proto3" json:"grammar,omitempty"`
}

func (x *GrammarDecl) Reset() {
	*x = GrammarDecl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrammarDecl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrammarDecl) ProtoMessage() {}

func (x *GrammarDecl) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrammarDecl.ProtoReflect.Descriptor instead.
func (*GrammarDecl) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{171}
}

func (x *GrammarDecl) GetGrammar() *GrammarMaker {
	if x != nil {
		return x.Grammar
	}
	return nil
}

type Lines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines string `protobuf:"bytes,1,opt,name=lines,proto3" json:"lines,omitempty"`
}

func (x *Lines) Reset() {
	*x = Lines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lines) ProtoMessage() {}

func (x *Lines) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lines.ProtoReflect.Descriptor instead.
func (*Lines) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{172}
}

func (x *Lines) GetLines() string {
	if x != nil {
		return x.Lines
	}
	return ""
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	At  *Pos   `protobuf:"bytes,12,opt,name=at,proto3" json:"at,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{173}
}

func (x *Relation) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *Relation) GetAt() *Pos {
	if x != nil {
		return x.At
	}
	return nil
}

type SortByField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XEvent string `protobuf:"bytes,1,opt,name=__event,json=Event,proto3" json:"__event,omitempty"`
}

func (x *SortByField) Reset() {
	*x = SortByField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortByField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortByField) ProtoMessage() {}

func (x *SortByField) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortByField.ProtoReflect.Descriptor instead.
func (*SortByField) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{174}
}

func (x *SortByField) GetXEvent() string {
	if x != nil {
		return x.XEvent
	}
	return ""
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	At  *Pos   `protobuf:"bytes,12,opt,name=at,proto3" json:"at,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{175}
}

func (x *Variable) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *Variable) GetAt() *Pos {
	if x != nil {
		return x.At
	}
	return nil
}

var File_all_proto protoreflect.FileDescriptor

var file_all_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a,
	0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35,
	0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xd0, 0x04, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x28, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x31, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52,
	0x0a, 0x67, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x67,
	0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x56, 0x61, 0x72, 0x12,
	0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x3a, 0x23, 0x92, 0x82, 0x19,
	0x1f, 0x0a, 0x1d, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e,
	0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0x88, 0x09, 0x0a, 0x08, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c,
	0x54, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x54, 0x72, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x72, 0x75,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x79,
	0x54, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x6e, 0x79, 0x54, 0x72, 0x75, 0x65, 0x12,
	0x29, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x66, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x12, 0x2d, 0x0a,
	0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x06,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x64, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x41,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x56, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x68, 0x61,
	0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x54, 0x72, 0x61, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x69, 0x74, 0x12, 0x2a, 0x0a,
	0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x73, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x4f, 0x66,
	0x48, 0x00, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x4f,
	0x66, 0x12, 0x2c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4b, 0x69, 0x6e,
	0x64, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x08, 0x69, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x4f, 0x66, 0x12,
	0x27, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x54, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x6e, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x65, 0x6e,
	0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x3a, 0x30, 0x92, 0x82, 0x19, 0x2c, 0x0a,
	0x2a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63,
	0x68, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2f, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65,
	0x76, 0x61, 0x6c, 0x22, 0xf2, 0x01, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x4d, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d,
	0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x6f,
	0x72, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x6f, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x73, 0x65, 0x3a,
	0x1f, 0x92, 0x82, 0x19, 0x1b, 0x0a, 0x19, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0xc9, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x6c, 0x65,
	0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x6d,
	0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x65, 0x73, 0x73, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x61, 0x74,
	0x4d, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x54, 0x6f,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x67, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12,
	0x2b, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x07,
	0x75, 0x6e, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x54, 0x6f, 0x48, 0x00, 0x52,
	0x07, 0x75, 0x6e, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x3a, 0x22, 0x92, 0x82, 0x19, 0x1e, 0x0a, 0x1c,
	0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04,
	0x65, 0x76, 0x61, 0x6c, 0x22, 0xa6, 0x0c, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x12, 0x1d, 0x0a, 0x02, 0x62, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x02, 0x62,
	0x72, 0x12, 0x21, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x0c, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x12, 0x2d, 0x0a, 0x09, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x6f,
	0x5f, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x0a, 0x65, 0x72,
	0x61, 0x73, 0x65, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x45, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x65, 0x72, 0x61, 0x73, 0x65, 0x45, 0x64, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x65, 0x72,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48,
	0x00, 0x52, 0x0a, 0x65, 0x72, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a,
	0x07, 0x65, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x65,
	0x72, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0c, 0x65, 0x72, 0x61, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x65, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x64, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x61, 0x63, 0x68, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x61, 0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x45, 0x61, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x2d, 0x0a, 0x0b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x72,
	0x74, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x70, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x73, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x01, 0x70, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x48,
	0x00, 0x52, 0x01, 0x70, 0x12, 0x32, 0x0a, 0x0c, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x75, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x75,
	0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x75, 0x74, 0x5f,
	0x65, 0x64, 0x67, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x75, 0x74, 0x45, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x75, 0x74, 0x45,
	0x64, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x08, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x61,
	0x79, 0x48, 0x00, 0x52, 0x07, 0x73, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x04,
	0x73, 0x65, 0x6e, 0x64, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x2c, 0x0a,
	0x09, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x77,
	0x62, 0x72, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x03, 0x77, 0x62, 0x72, 0x12, 0x22,
	0x0a, 0x05, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x77, 0x68, 0x69,
	0x6c, 0x65, 0x3a, 0x21, 0x92, 0x82, 0x19, 0x1d, 0x0a, 0x1b, 0x52, 0x75, 0x6e, 0x20, 0x61, 0x20,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0xf0, 0x01,
	0x0a, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x62,
	0x6a, 0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x12, 0x28, 0x0a, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x48, 0x00, 0x52, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76,
	0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72,
	0x6f, 0x6d, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x72,
	0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x20, 0x92, 0x82, 0x19, 0x1c, 0x0a, 0x1a, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c,
	0x22, 0x94, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x3a, 0x2a, 0x92, 0x82, 0x19, 0x26, 0x0a, 0x24, 0x48, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x20, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x73, 0x2e, 0x42,
	0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x6f,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x6f, 0x4f, 0x62, 0x6a, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x74, 0x6f, 0x4f, 0x62, 0x6a, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x76,
	0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e,
	0x74, 0x6f, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x6f, 0x56, 0x61, 0x72,
	0x3a, 0x20, 0x92, 0x82, 0x19, 0x1c, 0x0a, 0x1a, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x06, 0x61,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x73, 0x4e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x05, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x12,
	0x22, 0x0a, 0x06, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x52, 0x65, 0x63, 0x48, 0x00, 0x52, 0x05, 0x61, 0x73,
	0x52, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x73, 0x5f, 0x74, 0x78, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x54, 0x78, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x73, 0x54, 0x78, 0x74, 0x3a, 0x21, 0x92, 0x82, 0x19, 0x1d, 0x0a, 0x1b, 0x48,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76,
	0x61, 0x6c, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72,
	0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x72, 0x65, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x21, 0x92, 0x82, 0x19, 0x1d, 0x0a, 0x1b, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61,
	0x6c, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x35, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74,
	0x6f, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x6f,
	0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x74, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x6f, 0x54,
	0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x6f, 0x54, 0x78,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x21, 0x92, 0x82, 0x19, 0x1d, 0x0a, 0x1b, 0x48, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c,
	0x22, 0xe1, 0x03, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c,
	0x12, 0x2d, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x12,
	0x32, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x67, 0x65, 0x74, 0x56, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69,
	0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70,
	0x6c, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x3a, 0x30, 0x92, 0x82, 0x19, 0x2c,
	0x0a, 0x2a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04,
	0x65, 0x76, 0x61, 0x6c, 0x22, 0x87, 0x06, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45,
	0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x66, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x69, 0x66, 0x66, 0x4f, 0x66, 0x12, 0x24, 0x0a, 0x06, 0x64, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x32, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x67, 0x65, 0x74, 0x56, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6f, 0x66, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4f, 0x66, 0x12, 0x31, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x66, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x0a, 0x71, 0x75, 0x6f,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x48, 0x00,
	0x52, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x12, 0x3a, 0x0a,
	0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x75, 0x6d,
	0x5f, 0x6f, 0x66, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x75, 0x6d, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x05, 0x73, 0x75, 0x6d, 0x4f, 0x66, 0x3a, 0x27, 0x92,
	0x82, 0x19, 0x23, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0xf3,
	0x02, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x2d, 0x0a,
	0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0c,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x22, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65,
	0x74, 0x56, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x3a, 0x27, 0x92, 0x82, 0x19, 0x23, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x61, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x42, 0x06, 0x0a, 0x04,
	0x65, 0x76, 0x61, 0x6c, 0x22, 0x98, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x67, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x67, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62,
	0x2e, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x56, 0x61, 0x72, 0x12, 0x2a,
	0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x3a, 0x30, 0x92, 0x82, 0x19, 0x2c, 0x0a, 0x2a, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22,
	0xe7, 0x02, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x4f,
	0x66, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x4f, 0x66, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x6e,
	0x79, 0x5f, 0x6f, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x6e, 0x79, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x1e,
	0x0a, 0x04, 0x6e, 0x6f, 0x75, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x6f, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x75, 0x6e, 0x12, 0x2a,
	0x0a, 0x08, 0x72, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x65, 0x6c, 0x66, 0x12, 0x21, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52,
	0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x3a, 0x29, 0x92, 0x82, 0x19, 0x25, 0x0a, 0x23, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0xc2, 0x0e, 0x0a, 0x08, 0x54, 0x65,
	0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00,
	0x52, 0x0a, 0x67, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x07,
	0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x56, 0x61, 0x72,
	0x12, 0x1f, 0x0a, 0x05, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x04, 0x69, 0x64, 0x4f,
	0x66, 0x12, 0x1e, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x69,
	0x6e, 0x12, 0x25, 0x0a, 0x07, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x4f, 0x66, 0x48, 0x00,
	0x52, 0x06, 0x6b, 0x69, 0x6e, 0x64, 0x4f, 0x66, 0x12, 0x21, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x6d,
	0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x6b, 0x65, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x6b, 0x65, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x12, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x6d, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x72, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x6b, 0x65, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x75,
	0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x57, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x37, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x72,
	0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x72,
	0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0e,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x3e, 0x0a, 0x0f, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x77, 0x48, 0x00,
	0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x9b, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a,
	0x0b, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x18, 0xa5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x53, 0x69, 0x6e,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0xaf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0xb4, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x23, 0x92, 0x82, 0x19, 0x1f, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0xd2,
	0x04, 0x0a, 0x0c, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x12,
	0x2d, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x32,
	0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x67, 0x65, 0x74, 0x56, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x5f,
	0x6f, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x73, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x4f, 0x66,
	0x12, 0x2a, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x5f, 0x6f, 0x66, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x72, 0x6f,
	0x63, 0x61, 0x6c, 0x73, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x72,
	0x6f, 0x63, 0x61, 0x6c, 0x73, 0x4f, 0x66, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x4f, 0x66, 0x48, 0x00,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x4f, 0x66, 0x12, 0x3a, 0x0a,
	0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x73, 0x48, 0x00, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x3a, 0x2d, 0x92, 0x82,
	0x19, 0x29, 0x0a, 0x27, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x42, 0x06, 0x0a, 0x04, 0x65,
	0x76, 0x61, 0x6c, 0x22, 0xdf, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x3a, 0x21, 0x92, 0x82, 0x19, 0x1d,
	0x0a, 0x1b, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x06, 0x0a,
	0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0x8f, 0x01, 0x0a, 0x02, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x3f, 0x92, 0x82, 0x19, 0x3b, 0x0a, 0x39, 0x47, 0x65,
	0x74, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x20, 0x31, 0x2e, 0x22, 0xe8, 0x01, 0x0a, 0x04, 0x45, 0x61, 0x63, 0x68,
	0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x02, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x02, 0x64, 0x6f, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6c, 0x73, 0x65, 0x49, 0x66, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x3a, 0x57, 0x92, 0x82, 0x19, 0x53, 0x0a,
	0x51, 0x4c, 0x6f, 0x6f, 0x70, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x20,
	0x72, 0x75, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x65, 0x6c, 0x73, 0x65, 0x27, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x69, 0x66, 0x20, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x22, 0xcf, 0x02, 0x0a, 0x07, 0x45, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x07, 0x61, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64,
	0x6f, 0x3a, 0xa0, 0x01, 0x92, 0x82, 0x19, 0x9b, 0x01, 0x0a, 0x98, 0x01, 0x45, 0x72, 0x61, 0x73,
	0x65, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x61, 0x63,
	0x6b, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x20, 0x52, 0x75, 0x6e,
	0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x72, 0x61, 0x73, 0x65, 0x64, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3b, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x69, 0x66,
	0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x61, 0x73, 0x20, 0x65, 0x72, 0x61,
	0x73, 0x65, 0x64, 0x2e, 0x22, 0xc0, 0x02, 0x0a, 0x0b, 0x45, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x67,
	0x45, 0x64, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x65,
	0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x74, 0x45, 0x64, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61,
	0x73, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f, 0x12,
	0x20, 0x0a, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x65, 0x6c, 0x73,
	0x65, 0x3a, 0xa3, 0x01, 0x92, 0x82, 0x19, 0x9e, 0x01, 0x0a, 0x9b, 0x01, 0x45, 0x72, 0x61, 0x73,
	0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20,
	0x62, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x20,
	0x52, 0x75, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x72, 0x61, 0x73,
	0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3b, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x61, 0x73, 0x20,
	0x65, 0x72, 0x61, 0x73, 0x65, 0x64, 0x2e, 0x22, 0x7b, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x29, 0x92, 0x82, 0x19, 0x25, 0x0a,
	0x23, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x22, 0x5b, 0x0a, 0x03, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x3a,
	0x30, 0x92, 0x82, 0x19, 0x2c, 0x0a, 0x2a, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x22, 0xa0, 0x02, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x3a, 0xad, 0x01, 0x92, 0x82, 0x19, 0xa8, 0x01, 0x0a, 0xa5, 0x01, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20,
	0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x65,
	0x61, 0x63, 0x68, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x27, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x27, 0x2c, 0x20,
	0x6f, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x22, 0xbc, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x3a, 0xc0, 0x01, 0x92, 0x82, 0x19, 0xbb, 0x01, 0x0a, 0xb8, 0x01, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x62, 0x79,
	0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x20,
	0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x27, 0x69, 0x6e, 0x27, 0x20, 0x28, 0x20, 0x65, 0x61, 0x63,
	0x68, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x27, 0x6f, 0x75, 0x74,
	0x27, 0x20, 0x28, 0x20, 0x65, 0x78, 0x2e, 0x20, 0x61, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x20, 0x29, 0x2e, 0x22, 0x48, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x15, 0x92, 0x82, 0x19, 0x11, 0x0a, 0x0f, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x22, 0x91, 0x01,
	0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x3a, 0x2c, 0x92, 0x82, 0x19, 0x28, 0x0a, 0x26, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x22, 0xac, 0x01, 0x0a, 0x05, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x3a, 0x37, 0x92, 0x82, 0x19, 0x33, 0x0a, 0x31, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x22, 0x6f, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12,
	0x2a, 0x0a, 0x08, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x07, 0x62, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0xae, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x3a, 0x69, 0x92, 0x82, 0x19, 0x65, 0x0a, 0x63, 0x52,
	0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x22, 0xeb, 0x01, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12,
	0x2a, 0x0a, 0x08, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x07, 0x62, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x63, 0x61, 0x73, 0x65, 0x3a, 0x69, 0x92, 0x82, 0x19, 0x65, 0x0a, 0x63, 0x52, 0x65, 0x61,
	0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x22, 0xa1, 0x05, 0x0a, 0x06, 0x53, 0x70, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x76,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x3a, 0x80, 0x04, 0x92, 0x82, 0x19, 0xfb, 0x03, 0x0a, 0xf8, 0x03, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x62, 0x79, 0x20, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67,
	0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x3a,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x65, 0x78, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2c, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d,
	0x61, 0x6e, 0x79, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x27,
	0x73, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x2b, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x6e, 0x20, 0x30, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x30, 0x2e,
	0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2c,
	0x20, 0x69, 0x74, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x6e, 0x64, 0x3b, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x30, 0x20, 0x6f,
	0x72, 0x20, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x2e, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x72, 0x6f,
	0x63, 0x61, 0x6c, 0x4f, 0x66, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x76, 0x69, 0x61, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x58, 0x92, 0x82, 0x19,
	0x54, 0x0a, 0x52, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x75, 0x6e, 0x20, 0x28, 0x65, 0x78, 0x2e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6f,
	0x6e, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x29, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x72,
	0x6f, 0x63, 0x61, 0x6c, 0x73, 0x4f, 0x66, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x76, 0x69, 0x61, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x5a, 0x92,
	0x82, 0x19, 0x56, 0x0a, 0x54, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x75, 0x6e, 0x20, 0x28, 0x65, 0x78, 0x2e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x2d, 0x74, 0x6f, 0x2d, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x29, 0x22, 0x92, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x6f,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x74, 0x6f, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x76, 0x69, 0x61, 0x3a, 0x17, 0x92, 0x82, 0x19, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x2e, 0x22, 0xa3,
	0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x12, 0x1e, 0x0a,
	0x03, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x76, 0x69, 0x61, 0x12, 0x24, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x3a, 0x4f, 0x92, 0x82, 0x19, 0x4b, 0x0a, 0x49, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x75, 0x6e, 0x20, 0x28, 0x65, 0x78, 0x2e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6f,
	0x6e, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x6f, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x29, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x4f, 0x66, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x76, 0x69, 0x61, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x63, 0x92, 0x82, 0x19, 0x5f,
	0x0a, 0x5d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x75,
	0x6e, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x20, 0x28, 0x65, 0x78, 0x2e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6e, 0x65, 0x2d, 0x74, 0x6f, 0x2d,
	0x6d, 0x61, 0x6e, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x2e, 0x22,
	0x74, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a,
	0x44, 0x92, 0x82, 0x19, 0x40, 0x0a, 0x3e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x02,
	0x69, 0x66, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3a, 0x36, 0x92, 0x82, 0x19, 0x32, 0x0a, 0x30,
	0x50, 0x69, 0x63, 0x6b, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x77, 0x6f, 0x20,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e,
	0x20, 0x61, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x22, 0x96, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x3a, 0x63, 0x92, 0x82, 0x19, 0x5f, 0x0a, 0x5d, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2c, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2c, 0x20, 0x27, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x27, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x27, 0x53, 0x48, 0x4f, 0x55, 0x54, 0x27, 0x2e, 0x22, 0x7a, 0x0a, 0x0a, 0x4d, 0x61, 0x6b,
	0x65, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x4a, 0x92, 0x82, 0x19, 0x46, 0x0a,
	0x44, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x75,
	0x72, 0x61, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x28, 0x65, 0x78,
	0x2e, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x20, 0x29, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x67, 0x92, 0x82, 0x19, 0x63, 0x0a, 0x61,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x65, 0x78, 0x74,
	0x20, 0x66, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f,
	0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2c, 0x20, 0x27, 0x65, 0x6c, 0x70, 0x70, 0x41, 0x27, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x27, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x27, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x6e,
	0x6f, 0x6f, 0x6e, 0x27, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x27, 0x6e, 0x6f, 0x6f, 0x6e, 0x27,
	0x2e, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x75, 0x92, 0x82, 0x19, 0x71, 0x0a, 0x6f,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x65, 0x78, 0x74,
	0x2c, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x63, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x46, 0x6f, 0x72,
	0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x27, 0x45, 0x6d, 0x70, 0x69, 0x72,
	0x65, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x27, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x27,
	0x45, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x27, 0x2e, 0x22,
	0x7b, 0x0a, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x12,
	0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x3a, 0x49, 0x92, 0x82, 0x19, 0x45, 0x0a, 0x43, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x70, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x20, 0x77,
	0x6f, 0x72, 0x64, 0x2e, 0x20, 0x28, 0x65, 0x78, 0x2e, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x29, 0x22, 0xa5, 0x01, 0x0a,
	0x0d, 0x4d, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x3a, 0x72, 0x92, 0x82, 0x19, 0x6e, 0x0a, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2c, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x61, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x20, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c,
	0x20, 0x27, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x27, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x27, 0x65, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x27, 0x2e, 0x22, 0x96, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x63, 0x92, 0x82, 0x19, 0x5f, 0x0a, 0x5d,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x65, 0x78, 0x74,
	0x2c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x27, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x27, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x27, 0x2e, 0x22, 0x99, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x59,
	0x92, 0x82, 0x19, 0x55, 0x0a, 0x53, 0x50, 0x61, 0x72, 0x73, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74,
	0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x66, 0x66, 0x79, 0x20, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x2f, 0x69, 0x66, 0x66, 0x79, 0x2f, 0x77, 0x69, 0x6b, 0x69, 0x2f,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x07, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x54, 0x6f, 0x3a, 0x1f, 0x92, 0x82, 0x19, 0x1b, 0x0a, 0x19, 0x54, 0x77, 0x6f, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x22, 0x48, 0x0a, 0x0e, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x3a, 0x36, 0x92, 0x82, 0x19, 0x32, 0x0a, 0x30, 0x54,
	0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x22,
	0x45, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x3a, 0x36,
	0x92, 0x82, 0x19, 0x32, 0x0a, 0x30, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20,
	0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x22, 0x45, 0x0a, 0x0b, 0x4c, 0x65, 0x73, 0x73, 0x4f, 0x72,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x3a, 0x36, 0x92, 0x82, 0x19, 0x32, 0x0a, 0x30, 0x54, 0x68, 0x65,
	0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x22, 0x40, 0x0a,
	0x08, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x3a, 0x34, 0x92, 0x82, 0x19, 0x30, 0x0a,
	0x2e, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x22,
	0x33, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x54, 0x6f, 0x3a, 0x25, 0x92,
	0x82, 0x19, 0x21, 0x0a, 0x1f, 0x54, 0x77, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20,
	0x64, 0x6f, 0x6e, 0x27, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x6c, 0x79, 0x2e, 0x22, 0x0e, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f,
	0x6e, 0x63, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x22, 0x20, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x75, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x4e, 0x6f, 0x75, 0x6e, 0x22, 0x31,
	0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x4f, 0x66, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x33, 0x0a, 0x05, 0x41, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x2a, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6e,
	0x73, 0x22, 0x1a, 0x0a, 0x04, 0x4e, 0x6f, 0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x32, 0x0a,
	0x08, 0x52, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x70, 0x61,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e,
	0x73, 0x22, 0x37, 0x0a, 0x07, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x04, 0x53, 0x65,
	0x6c, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x1d, 0x0a, 0x05, 0x57, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x08, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x52, 0x04, 0x65, 0x78, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2b,
	0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x36, 0x92, 0x82, 0x19,
	0x32, 0x0a, 0x30, 0x52, 0x75, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x22, 0x4e, 0x0a, 0x06, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x3a, 0x2a, 0x92, 0x82, 0x19, 0x26, 0x0a, 0x24, 0x44,
	0x65, 0x63, 0x69, 0x64, 0x65, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x20,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x22, 0x52, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x0f, 0x92, 0x82, 0x19, 0x0b, 0x0a, 0x09, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x20, 0x6c, 0x6f, 0x67, 0x22, 0xac, 0x01, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3b, 0x92, 0x82, 0x19, 0x37, 0x0a,
	0x35, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x20, 0x61, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x74, 0x72, 0x75,
	0x65, 0x2f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x22, 0x4a, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x3a, 0x2e, 0x92, 0x82, 0x19, 0x2a, 0x0a, 0x28, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x79, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x20, 0x74, 0x72,
	0x75, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x22, 0x3e, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x3a, 0x22,
	0x92, 0x82, 0x19, 0x1e, 0x0a, 0x1c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x61, 0x20,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x22, 0x4c, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x29, 0x92, 0x82, 0x19, 0x25, 0x0a, 0x23, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x79, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e,
	0x22, 0x3e, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x22, 0x92, 0x82,
	0x19, 0x1e, 0x0a, 0x1c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x61, 0x20, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x20, 0x62, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x22, 0x48, 0x0a, 0x05, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x3a, 0x27, 0x92, 0x82, 0x19, 0x23, 0x0a, 0x21, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x73, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x22, 0x72, 0x0a, 0x06, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x03, 0x76, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x3a, 0x24, 0x92, 0x82, 0x19, 0x20, 0x0a, 0x1e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x22, 0x57,
	0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x3a, 0x2b, 0x92, 0x82, 0x19, 0x27,
	0x0a, 0x25, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x22, 0x51, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x4e,
	0x75, 0x6d, 0x12, 0x20, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x03, 0x76, 0x61, 0x6c, 0x3a, 0x24, 0x92, 0x82, 0x19, 0x20, 0x0a, 0x1e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x22, 0x59, 0x0a, 0x0b, 0x46, 0x72,
	0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x3a, 0x25,
	0x92, 0x82, 0x19, 0x21, 0x0a, 0x1f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2e, 0x22, 0x54, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x61, 0x6c,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x3a, 0x24, 0x92, 0x82, 0x19, 0x20, 0x0a, 0x1e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x22, 0x5c, 0x0a, 0x0b, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x76, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x76, 0x61,
	0x6c, 0x73, 0x3a, 0x25, 0x92, 0x82, 0x19, 0x21, 0x0a, 0x1f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x22, 0x57, 0x0a, 0x08, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x3a, 0x2b, 0x92, 0x82, 0x19, 0x27, 0x0a, 0x25, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x70, 0x69, 0x65, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x22, 0x56, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x04, 0x76, 0x61, 0x6c, 0x73, 0x3a, 0x23, 0x92, 0x82, 0x19, 0x1f, 0x0a, 0x1d, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2e, 0x22, 0x6e, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x92, 0x82, 0x19, 0x1c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x61, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x50,
	0x75, 0x74, 0x41, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x28, 0x0a,
	0x04, 0x69, 0x6e, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x74, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x3a, 0x37, 0x92, 0x82, 0x19, 0x33, 0x0a, 0x31, 0x50, 0x75, 0x74, 0x20, 0x61, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x48, 0x0a, 0x03, 0x56,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x2d, 0x92, 0x82, 0x19, 0x29, 0x0a, 0x27, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x22, 0x32, 0x0a, 0x05, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x3a, 0x29,
	0x92, 0x82, 0x19, 0x25, 0x0a, 0x23, 0x49, 0x6e, 0x20, 0x61, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x2c, 0x20, 0x65, 0x78, 0x69, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x22, 0x48, 0x0a, 0x09, 0x44, 0x6f, 0x4e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x23,
	0x92, 0x82, 0x19, 0x1f, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x22, 0x46, 0x0a, 0x04, 0x4e, 0x65, 0x78, 0x74, 0x3a, 0x3e, 0x92, 0x82, 0x19,
	0x3a, 0x0a, 0x38, 0x49, 0x6e, 0x20, 0x61, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x2c, 0x20, 0x74, 0x72, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6e, 0x65, 0x78, 0x74, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x22, 0x9a, 0x01, 0x0a, 0x05,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x27, 0x0a, 0x07, 0x62, 0x79, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x62, 0x79, 0x53, 0x74,
	0x65, 0x70, 0x3a, 0x24, 0x92, 0x82, 0x19, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x57, 0x68, 0x69,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02,
	0x64, 0x6f, 0x3a, 0x41, 0x92, 0x82, 0x19, 0x3d, 0x0a, 0x3b, 0x4b, 0x65, 0x65, 0x70, 0x20, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65,
	0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x2e, 0x22, 0x7c, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f, 0x3a, 0x53,
	0x92, 0x82, 0x19, 0x4f, 0x0a, 0x4d, 0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x65, 0x73,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x64, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x70, 0x75, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x20, 0x69, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x20, 0x27, 0x28,
	0x29, 0x27, 0x2e, 0x22, 0x26, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x02, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f, 0x22, 0x55, 0x0a, 0x06, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x02, 0x64, 0x6f, 0x3a, 0x2d, 0x92, 0x82, 0x19, 0x29, 0x0a, 0x27, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x27, 0x61, 0x6e, 0x64,
	0x27, 0x2e, 0x22, 0x22, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x3a, 0x17, 0x92,
	0x82, 0x19, 0x13, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
	0x20, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x22, 0x3f, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x3a, 0x32, 0x92, 0x82, 0x19, 0x2e, 0x0a, 0x2c, 0x41, 0x64, 0x64, 0x20, 0x61,
	0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x20, 0x6c, 0x69,
	0x6e, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x6d,
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x22, 0x5c, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x3a, 0x2e, 0x92, 0x82, 0x19, 0x2a, 0x0a, 0x28, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2c, 0x20, 0x65, 0x67, 0x2e,
	0x20, 0x27, 0x31, 0x27, 0x2e, 0x22, 0x63, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x3a, 0x31, 0x92, 0x82, 0x19, 0x2d, 0x0a, 0x2b, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x69,
	0x6e, 0x20, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x3a,
	0x20, 0x65, 0x67, 0x2e, 0x20, 0x27, 0x6f, 0x6e, 0x65, 0x27, 0x22, 0x55, 0x0a, 0x03, 0x52, 0x6f,
	0x77, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f, 0x3a,
	0x30, 0x92, 0x82, 0x19, 0x2c, 0x0a, 0x2a, 0x41, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20,
	0x6c, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x22, 0x4d, 0x0a, 0x04, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f, 0x3a, 0x27, 0x92, 0x82, 0x19, 0x23, 0x0a, 0x21, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x22, 0x54, 0x0a, 0x03, 0x53, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x2b, 0x92, 0x82, 0x19, 0x27, 0x0a,
	0x25, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x62, 0x69, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x22, 0x5b, 0x0a, 0x05, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f, 0x3a, 0x34, 0x92,
	0x82, 0x19, 0x30, 0x0a, 0x2e, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x2d, 0x6c,
	0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73, 0x20, 0x27,
	0x2f, 0x27, 0x2e, 0x22, 0x44, 0x0a, 0x08, 0x53, 0x6f, 0x66, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x3a,
	0x38, 0x92, 0x82, 0x19, 0x34, 0x0a, 0x32, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x28, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x61, 0x74, 0x20, 0x61, 0x20, 0x6e, 0x65,
	0x77, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x20, 0x29, 0x22, 0x52, 0x0a, 0x04, 0x53, 0x70, 0x61,
	0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f, 0x3a,
	0x2c, 0x92, 0x82, 0x19, 0x28, 0x0a, 0x26, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x20, 0x74, 0x65,
	0x78, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x20, 0x62,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x22, 0x71, 0x0a,
	0x08, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x70,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x3a, 0x21, 0x92,
	0x82, 0x19, 0x1d, 0x0a, 0x1b, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x65, 0x78,
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x22, 0x4d, 0x0a, 0x07, 0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x20, 0x92,
	0x82, 0x19, 0x1c, 0x0a, 0x1a, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x22,
	0x90, 0x01, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x03, 0x73, 0x65, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x03, 0x73, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x3a, 0x44, 0x92, 0x82,
	0x19, 0x40, 0x0a, 0x3e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x65, 0x78, 0x74, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x70, 0x69, 0x65, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x3a, 0x5a, 0x92, 0x82, 0x19, 0x56,
	0x0a, 0x54, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x20, 0x77, 0x68, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x22, 0xab, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x02,
	0x69, 0x66, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c,
	0x52, 0x04, 0x74, 0x72, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3a, 0x36, 0x92, 0x82,
	0x19, 0x32, 0x0a, 0x30, 0x50, 0x69, 0x63, 0x6b, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x77, 0x6f, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x22, 0x61, 0x0a, 0x06, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x66, 0x12, 0x1c,
	0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x61, 0x12, 0x1c, 0x0a, 0x01,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x62, 0x3a, 0x1b, 0x92, 0x82, 0x19, 0x17,
	0x0a, 0x15, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x22, 0x64, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4f, 0x66, 0x12, 0x1c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x01, 0x61, 0x12, 0x1c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x62,
	0x3a, 0x1b, 0x92, 0x82, 0x19, 0x17, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79,
	0x20, 0x74, 0x77, 0x6f, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x22, 0x6d, 0x0a,
	0x0a, 0x51, 0x75, 0x6f, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x12, 0x1c, 0x0a, 0x01, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x61, 0x12, 0x1c, 0x0a, 0x01, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x62, 0x3a, 0x23, 0x92, 0x82, 0x19, 0x1f, 0x0a, 0x1d, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x62, 0x79, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x22, 0x88, 0x01, 0x0a,
	0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x12, 0x1c, 0x0a, 0x01,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x61, 0x12, 0x1c, 0x0a, 0x01, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x62, 0x3a, 0x3d, 0x92, 0x82, 0x19, 0x39, 0x0a, 0x37,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x62, 0x79, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x22, 0x5b, 0x0a, 0x05, 0x53, 0x75, 0x6d, 0x4f, 0x66,
	0x12, 0x1c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x61, 0x12, 0x1c,
	0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x62, 0x3a, 0x16, 0x92, 0x82,
	0x19, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2e, 0x22, 0x54, 0x0a, 0x05, 0x41, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a,
	0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x3a, 0x2b, 0x92,
	0x82, 0x19, 0x27, 0x0a, 0x25, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x22, 0x54, 0x0a, 0x05, 0x41, 0x73,
	0x52, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03,
	0x76, 0x61, 0x72, 0x3a, 0x2b, 0x92, 0x82, 0x19, 0x27, 0x0a, 0x25, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x22, 0x52, 0x0a, 0x05, 0x41, 0x73, 0x54, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x3a, 0x29, 0x92, 0x82, 0x19, 0x25, 0x0a,
	0x23, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x02, 0x69, 0x66, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64,
	0x6f, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x52, 0x04, 0x65,
	0x6c, 0x73, 0x65, 0x3a, 0x16, 0x92, 0x82, 0x19, 0x12, 0x0a, 0x10, 0x41, 0x6e, 0x20, 0x69, 0x66,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x22, 0x6a, 0x0a, 0x0a, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x02, 0x69, 0x66, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x02, 0x64, 0x6f, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x02, 0x64, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f, 0x12, 0x20, 0x0a, 0x04, 0x65,
	0x6c, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x52, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x22, 0x31, 0x0a,
	0x11, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6c,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f,
	0x22, 0xdd, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f,
	0x12, 0x20, 0x0a, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x52, 0x04, 0x65, 0x6c,
	0x73, 0x65, 0x3a, 0x2c, 0x92, 0x82, 0x19, 0x28, 0x0a, 0x26, 0x41, 0x6e, 0x20, 0x69, 0x66, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x22, 0x75, 0x0a, 0x09, 0x45, 0x72, 0x61, 0x73, 0x65, 0x45, 0x64, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x74, 0x45, 0x64, 0x67, 0x65, 0x3a, 0x2b, 0x92, 0x82, 0x19, 0x27,
	0x0a, 0x25, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20,
	0x6d, 0x6f, 0x72, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x45, 0x72, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x29, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x07, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x2b, 0x92, 0x82, 0x19,
	0x27, 0x0a, 0x25, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d,
	0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x3a, 0x1c, 0x92, 0x82, 0x19, 0x18, 0x0a, 0x16, 0x55,
	0x73, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x62, 0x6a,
	0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x2d, 0x92, 0x82, 0x19, 0x29, 0x0a, 0x27, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x22, 0x57, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63,
	0x12, 0x20, 0x0a, 0x03, 0x72, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x03, 0x72,
	0x65, 0x63, 0x3a, 0x2a, 0x92, 0x82, 0x19, 0x26, 0x0a, 0x24, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x22, 0x4b,
	0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x3a, 0x1c, 0x92,
	0x82, 0x19, 0x18, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x0b, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x3a, 0x19, 0x92, 0x82, 0x19, 0x15,
	0x0a, 0x13, 0x55, 0x73, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x22, 0x57, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x72,
	0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72,
	0x3a, 0x2c, 0x92, 0x82, 0x19, 0x28, 0x0a, 0x26, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x20,
	0x61, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x22, 0x4e,
	0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x3a, 0x1f, 0x92,
	0x82, 0x19, 0x1b, 0x0a, 0x19, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x5e,
	0x0a, 0x07, 0x49, 0x6e, 0x74, 0x6f, 0x4f, 0x62, 0x6a, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a,
	0x2d, 0x92, 0x82, 0x19, 0x29, 0x0a, 0x27, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61,
	0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x22, 0x4e,
	0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x3a, 0x1f, 0x92,
	0x82, 0x19, 0x1b, 0x0a, 0x19, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x4b,
	0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x6f, 0x54, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x3a, 0x1c, 0x92,
	0x82, 0x19, 0x18, 0x0a, 0x16, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x78, 0x74, 0x22, 0x61, 0x0a, 0x07, 0x49,
	0x6e, 0x74, 0x6f, 0x56, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x3a, 0x36, 0x92, 0x82, 0x19, 0x32, 0x0a, 0x30, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x47,
	0x0a, 0x04, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x45,
	0x64, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x74, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x74,
	0x45, 0x64, 0x67, 0x65, 0x3a, 0x1b, 0x92, 0x82, 0x19, 0x17, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x20,
	0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xad, 0x01, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x07, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x3a, 0x2e, 0x92, 0x82, 0x19, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x20, 0x6f, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x54, 0x72, 0x61, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x05, 0x74, 0x72, 0x61, 0x69, 0x74, 0x3a, 0x44, 0x92, 0x82, 0x19, 0x40, 0x0a, 0x3e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x22, 0x4f,
	0x0a, 0x04, 0x49, 0x64, 0x4f, 0x66, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x21, 0x92, 0x82,
	0x19, 0x1d, 0x0a, 0x1b, 0x41, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x22,
	0x7e, 0x0a, 0x0d, 0x49, 0x73, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x4f, 0x66,
	0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x3a, 0x33, 0x92, 0x82, 0x19, 0x2f,
	0x0a, 0x2d, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x22,
	0x81, 0x01, 0x0a, 0x08, 0x49, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x4f, 0x66, 0x12, 0x24, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x3a, 0x3b, 0x92, 0x82, 0x19, 0x37, 0x0a, 0x35, 0x54, 0x72,
	0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x6b, 0x69,
	0x6e, 0x64, 0x2e, 0x22, 0x59, 0x0a, 0x06, 0x4b, 0x69, 0x6e, 0x64, 0x4f, 0x66, 0x12, 0x24, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x3a, 0x29, 0x92, 0x82, 0x19, 0x25, 0x0a, 0x23, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x6c, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x27, 0x73, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x22, 0x40,
	0x0a, 0x07, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x4f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x3a, 0x21, 0x92,
	0x82, 0x19, 0x1d, 0x0a, 0x1b, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x2e,
	0x22, 0x4e, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x3a, 0x1e, 0x92, 0x82, 0x19, 0x1a, 0x0a, 0x18, 0x46, 0x75, 0x6c, 0x6c, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x22, 0x74, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3e, 0x92, 0x82, 0x19, 0x3a, 0x0a, 0x38, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x72, 0x61, 0x69, 0x74, 0x3a, 0x2c, 0x92,
	0x82, 0x19, 0x28, 0x0a, 0x26, 0x50, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x22, 0x65, 0x0a, 0x07, 0x41,
	0x6c, 0x6c, 0x54, 0x72, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x36, 0x92, 0x82, 0x19, 0x32,
	0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x69,
	0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x72, 0x75,
	0x65, 0x2e, 0x22, 0x24, 0x0a, 0x06, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x3a, 0x1a, 0x92, 0x82,
	0x19, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x2e, 0x22, 0x65, 0x0a, 0x07, 0x41, 0x6e, 0x79, 0x54,
	0x72, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x61, 0x6c,
	0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x36, 0x92, 0x82, 0x19, 0x32, 0x0a, 0x30, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x61,
	0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2e, 0x22,
	0x96, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c,
	0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x61, 0x12, 0x1e, 0x0a, 0x02,
	0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x01,
	0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x62, 0x3a, 0x2c, 0x92, 0x82, 0x19, 0x28,
	0x0a, 0x26, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x65, 0x71, 0x2c, 0x6e, 0x65, 0x2c,
	0x67, 0x74, 0x2c, 0x6c, 0x74, 0x2c, 0x67, 0x65, 0x2c, 0x6c, 0x65, 0x20, 0x74, 0x77, 0x6f, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x22, 0x9f, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x01, 0x61, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x02, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x01, 0x62,
	0x3a, 0x38, 0x92, 0x82, 0x19, 0x34, 0x0a, 0x32, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20,
	0x65, 0x71, 0x2c, 0x6e, 0x65, 0x2c, 0x67, 0x74, 0x2c, 0x6c, 0x74, 0x2c, 0x67, 0x65, 0x2c, 0x6c,
	0x65, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x28, 0x20,
	0x6c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x20, 0x29, 0x22, 0xf2, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x12, 0x20, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x3a, 0x82, 0x01, 0x92, 0x82, 0x19,
	0x7e, 0x0a, 0x7c, 0x41, 0x20, 0x67, 0x75, 0x61, 0x72, 0x64, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x20, 0x61, 0x74, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x65, 0x76, 0x65,
	0x72, 0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x22,
	0x21, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x50, 0x0a, 0x09, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x54, 0x72, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x3a, 0x21, 0x92, 0x82, 0x19, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x22, 0x2f, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x35, 0x0a, 0x09, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x3a, 0x45, 0x92, 0x82, 0x19, 0x41,
	0x0a, 0x3f, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74,
	0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x75, 0x72, 0x6e,
	0x2e, 0x22, 0x6e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x3a, 0x2c, 0x92, 0x82, 0x19, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x3a, 0x3e, 0x92, 0x82, 0x19, 0x3a, 0x0a, 0x38, 0x57,
	0x68, 0x65, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x61, 0x74, 0x20,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2e, 0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x3a, 0x5e,
	0x92, 0x82, 0x19, 0x5a, 0x0a, 0x58, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x75, 0x72, 0x6e, 0x2c, 0x20, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65, 0x2e, 0x22, 0x42,
	0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x22, 0x2d, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x59, 0x0a, 0x0b, 0x45, 0x6c, 0x73, 0x65, 0x49, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x02, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x02, 0x64, 0x6f, 0x3a, 0x2c,
	0x92, 0x82, 0x19, 0x28, 0x0a, 0x26, 0x52, 0x75, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x22, 0xbd, 0x02, 0x0a,
	0x06, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x3a, 0xd8, 0x01, 0x92, 0x82, 0x19, 0xd3, 0x01, 0x0a, 0xd0, 0x01, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x68,
	0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20,
	0x67, 0x65, 0x74, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x63, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x20, 0x49, 0x74, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x74, 0x77, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20,
	0x27, 0x69, 0x6e, 0x27, 0x20, 0x61, 0x73, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x27, 0x6f, 0x75, 0x74, 0x27, 0x20, 0x61, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x22, 0x75, 0x0a, 0x0b,
	0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x07,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x3a, 0x3a, 0x92, 0x82, 0x19, 0x36, 0x0a, 0x34, 0x52,
	0x65, 0x61, 0x64, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x69, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x22, 0x47, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x3a, 0x28, 0x92, 0x82, 0x19, 0x24, 0x0a, 0x22, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x22, 0x35, 0x0a, 0x08,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x02, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x52,
	0x02, 0x61, 0x74, 0x22, 0x25, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x16, 0x0a, 0x07, 0x5f, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x08, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x02, 0x61,
	0x74, 0x42, 0x18, 0x48, 0x01, 0x5a, 0x14, 0x67, 0x69, 0x74, 0x2e, 0x73, 0x72, 0x2e, 0x68, 0x74,
	0x2f, 0x7e, 0x69, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_all_proto_rawDescOnce sync.Once
	file_all_proto_rawDescData = file_all_proto_rawDesc
)

func file_all_proto_rawDescGZIP() []byte {
	file_all_proto_rawDescOnce.Do(func() {
		file_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_all_proto_rawDescData)
	})
	return file_all_proto_rawDescData
}

var file_all_proto_msgTypes = make([]protoimpl.MessageInfo, 176)
var file_all_proto_goTypes = []interface{}{
	(*Pos)(nil),               // 0: pb.Pos
	(*Assignment)(nil),        // 1: pb.Assignment
	(*BoolEval)(nil),          // 2: pb.BoolEval
	(*Brancher)(nil),          // 3: pb.Brancher
	(*Comparator)(nil),        // 4: pb.Comparator
	(*Execute)(nil),           // 5: pb.Execute
	(*FromSourceFields)(nil),  // 6: pb.FromSourceFields
	(*GrammarMaker)(nil),      // 7: pb.GrammarMaker
	(*IntoTargetFields)(nil),  // 8: pb.IntoTargetFields
	(*ListIterator)(nil),      // 9: pb.ListIterator
	(*ListSource)(nil),        // 10: pb.ListSource
	(*ListTarget)(nil),        // 11: pb.ListTarget
	(*NumListEval)(nil),       // 12: pb.NumListEval
	(*NumberEval)(nil),        // 13: pb.NumberEval
	(*RecordEval)(nil),        // 14: pb.RecordEval
	(*RecordListEval)(nil),    // 15: pb.RecordListEval
	(*ScannerMaker)(nil),      // 16: pb.ScannerMaker
	(*TextEval)(nil),          // 17: pb.TextEval
	(*TextListEval)(nil),      // 18: pb.TextListEval
	(*Trigger)(nil),           // 19: pb.Trigger
	(*At)(nil),                // 20: pb.At
	(*Each)(nil),              // 21: pb.Each
	(*Erasing)(nil),           // 22: pb.Erasing
	(*ErasingEdge)(nil),       // 23: pb.ErasingEdge
	(*Find)(nil),              // 24: pb.Find
	(*Len)(nil),               // 25: pb.Len
	(*Map)(nil),               // 26: pb.Map
	(*Reduce)(nil),            // 27: pb.Reduce
	(*ReverseList)(nil),       // 28: pb.ReverseList
	(*Set)(nil),               // 29: pb.Set
	(*Slice)(nil),             // 30: pb.Slice
	(*SortNumbers)(nil),       // 31: pb.SortNumbers
	(*SortRecords)(nil),       // 32: pb.SortRecords
	(*SortText)(nil),          // 33: pb.SortText
	(*Splice)(nil),            // 34: pb.Splice
	(*ReciprocalOf)(nil),      // 35: pb.ReciprocalOf
	(*ReciprocalsOf)(nil),     // 36: pb.ReciprocalsOf
	(*Relate)(nil),            // 37: pb.Relate
	(*RelativeOf)(nil),        // 38: pb.RelativeOf
	(*RelativesOf)(nil),       // 39: pb.RelativesOf
	(*Capitalize)(nil),        // 40: pb.Capitalize
	(*ChooseText)(nil),        // 41: pb.ChooseText
	(*MakeLowercase)(nil),     // 42: pb.MakeLowercase
	(*MakePlural)(nil),        // 43: pb.MakePlural
	(*MakeReversed)(nil),      // 44: pb.MakeReversed
	(*MakeSentenceCase)(nil),  // 45: pb.MakeSentenceCase
	(*MakeSingular)(nil),      // 46: pb.MakeSingular
	(*MakeTitleCase)(nil),     // 47: pb.MakeTitleCase
	(*MakeUppercase)(nil),     // 48: pb.MakeUppercase
	(*RenderTemplate)(nil),    // 49: pb.RenderTemplate
	(*EqualTo)(nil),           // 50: pb.EqualTo
	(*GreaterOrEqual)(nil),    // 51: pb.GreaterOrEqual
	(*GreaterThan)(nil),       // 52: pb.GreaterThan
	(*LessOrEqual)(nil),       // 53: pb.LessOrEqual
	(*LessThan)(nil),          // 54: pb.LessThan
	(*NotEqualTo)(nil),        // 55: pb.NotEqualTo
	(*TriggerCycle)(nil),      // 56: pb.TriggerCycle
	(*TriggerOnce)(nil),       // 57: pb.TriggerOnce
	(*TriggerSwitch)(nil),     // 58: pb.TriggerSwitch
	(*Action)(nil),            // 59: pb.Action
	(*Alias)(nil),             // 60: pb.Alias
	(*AllOf)(nil),             // 61: pb.AllOf
	(*AnyOf)(nil),             // 62: pb.AnyOf
	(*Directive)(nil),         // 63: pb.Directive
	(*Noun)(nil),              // 64: pb.Noun
	(*Retarget)(nil),          // 65: pb.Retarget
	(*Reverse)(nil),           // 66: pb.Reverse
	(*Self)(nil),              // 67: pb.Self
	(*Words)(nil),             // 68: pb.Words
	(*Activity)(nil),          // 69: pb.Activity
	(*Determine)(nil),         // 70: pb.Determine
	(*During)(nil),            // 71: pb.During
	(*Log)(nil),               // 72: pb.Log
	(*Send)(nil),              // 73: pb.Send
	(*Bool)(nil),              // 74: pb.Bool
	(*Number)(nil),            // 75: pb.Number
	(*Numbers)(nil),           // 76: pb.Numbers
	(*Text)(nil),              // 77: pb.Text
	(*Texts)(nil),             // 78: pb.Texts
	(*Assign)(nil),            // 79: pb.Assign
	(*FromBool)(nil),          // 80: pb.FromBool
	(*FromNum)(nil),           // 81: pb.FromNum
	(*FromNumbers)(nil),       // 82: pb.FromNumbers
	(*FromRecord)(nil),        // 83: pb.FromRecord
	(*FromRecords)(nil),       // 84: pb.FromRecords
	(*FromText)(nil),          // 85: pb.FromText
	(*FromTexts)(nil),         // 86: pb.FromTexts
	(*GetAtField)(nil),        // 87: pb.GetAtField
	(*PutAtField)(nil),        // 88: pb.PutAtField
	(*Var)(nil),               // 89: pb.Var
	(*Break)(nil),             // 90: pb.Break
	(*DoNothing)(nil),         // 91: pb.DoNothing
	(*Next)(nil),              // 92: pb.Next
	(*Range)(nil),             // 93: pb.Range
	(*While)(nil),             // 94: pb.While
	(*Bracket)(nil),           // 95: pb.Bracket
	(*Buffer)(nil),            // 96: pb.Buffer
	(*Commas)(nil),            // 97: pb.Commas
	(*Newline)(nil),           // 98: pb.Newline
	(*Paragraph)(nil),         // 99: pb.Paragraph
	(*PrintNum)(nil),          // 100: pb.PrintNum
	(*PrintNumWord)(nil),      // 101: pb.PrintNumWord
	(*Row)(nil),               // 102: pb.Row
	(*Rows)(nil),              // 103: pb.Rows
	(*Say)(nil),               // 104: pb.Say
	(*Slash)(nil),             // 105: pb.Slash
	(*Softline)(nil),          // 106: pb.Softline
	(*Span)(nil),              // 107: pb.Span
	(*Includes)(nil),          // 108: pb.Includes
	(*IsEmpty)(nil),           // 109: pb.IsEmpty
	(*Join)(nil),              // 110: pb.Join
	(*Matches)(nil),           // 111: pb.Matches
	(*ChooseNum)(nil),         // 112: pb.ChooseNum
	(*DiffOf)(nil),            // 113: pb.DiffOf
	(*ProductOf)(nil),         // 114: pb.ProductOf
	(*QuotientOf)(nil),        // 115: pb.QuotientOf
	(*RemainderOf)(nil),       // 116: pb.RemainderOf
	(*SumOf)(nil),             // 117: pb.SumOf
	(*AsNum)(nil),             // 118: pb.AsNum
	(*AsRec)(nil),             // 119: pb.AsRec
	(*AsTxt)(nil),             // 120: pb.AsTxt
	(*ChooseAction)(nil),      // 121: pb.ChooseAction
	(*ChooseMore)(nil),        // 122: pb.ChooseMore
	(*ChooseMoreValue)(nil),   // 123: pb.ChooseMoreValue
	(*ChooseNothingElse)(nil), // 124: pb.ChooseNothingElse
	(*ChooseValue)(nil),       // 125: pb.ChooseValue
	(*EraseEdge)(nil),         // 126: pb.EraseEdge
	(*EraseIndex)(nil),        // 127: pb.EraseIndex
	(*FromNumList)(nil),       // 128: pb.FromNumList
	(*FromObj)(nil),           // 129: pb.FromObj
	(*FromRec)(nil),           // 130: pb.FromRec
	(*FromRecList)(nil),       // 131: pb.FromRecList
	(*FromTxtList)(nil),       // 132: pb.FromTxtList
	(*FromVar)(nil),           // 133: pb.FromVar
	(*IntoNumList)(nil),       // 134: pb.IntoNumList
	(*IntoObj)(nil),           // 135: pb.IntoObj
	(*IntoRecList)(nil),       // 136: pb.IntoRecList
	(*IntoTxtList)(nil),       // 137: pb.IntoTxtList
	(*IntoVar)(nil),           // 138: pb.IntoVar
	(*Make)(nil),              // 139: pb.Make
	(*PutEdge)(nil),           // 140: pb.PutEdge
	(*PutIndex)(nil),          // 141: pb.PutIndex
	(*HasTrait)(nil),          // 142: pb.HasTrait
	(*IdOf)(nil),              // 143: pb.IdOf
	(*IsExactKindOf)(nil),     // 144: pb.IsExactKindOf
	(*IsKindOf)(nil),          // 145: pb.IsKindOf
	(*KindOf)(nil),            // 146: pb.KindOf
	(*KindsOf)(nil),           // 147: pb.KindsOf
	(*NameOf)(nil),            // 148: pb.NameOf
	(*ObjectExists)(nil),      // 149: pb.ObjectExists
	(*SetTrait)(nil),          // 150: pb.SetTrait
	(*AllTrue)(nil),           // 151: pb.AllTrue
	(*Always)(nil),            // 152: pb.Always
	(*AnyTrue)(nil),           // 153: pb.AnyTrue
	(*CompareNum)(nil),        // 154: pb.CompareNum
	(*CompareText)(nil),       // 155: pb.CompareText
	(*CountOf)(nil),           // 156: pb.CountOf
	(*HasDominion)(nil),       // 157: pb.HasDominion
	(*IsNotTrue)(nil),         // 158: pb.IsNotTrue
	(*RenderField)(nil),       // 159: pb.RenderField
	(*RenderName)(nil),        // 160: pb.RenderName
	(*RenderPattern)(nil),     // 161: pb.RenderPattern
	(*RenderRef)(nil),         // 162: pb.RenderRef
	(*CycleText)(nil),         // 163: pb.CycleText
	(*Response)(nil),          // 164: pb.Response
	(*ShuffleText)(nil),       // 165: pb.ShuffleText
	(*StoppingText)(nil),      // 166: pb.StoppingText
	(*Argument)(nil),          // 167: pb.Argument
	(*Arguments)(nil),         // 168: pb.Arguments
	(*ElseIfEmpty)(nil),       // 169: pb.ElseIfEmpty
	(*Gather)(nil),            // 170: pb.Gather
	(*GrammarDecl)(nil),       // 171: pb.GrammarDecl
	(*Lines)(nil),             // 172: pb.Lines
	(*Relation)(nil),          // 173: pb.Relation
	(*SortByField)(nil),       // 174: pb.SortByField
	(*Variable)(nil),          // 175: pb.Variable
}
var file_all_proto_depIdxs = []int32{
	80,  // 0: pb.Assignment.from_bool:type_name -> pb.FromBool
	81,  // 1: pb.Assignment.from_num:type_name -> pb.FromNum
	82,  // 2: pb.Assignment.from_numbers:type_name -> pb.FromNumbers
	83,  // 3: pb.Assignment.from_record:type_name -> pb.FromRecord
	84,  // 4: pb.Assignment.from_records:type_name -> pb.FromRecords
	85,  // 5: pb.Assignment.from_text:type_name -> pb.FromText
	86,  // 6: pb.Assignment.from_texts:type_name -> pb.FromTexts
	87,  // 7: pb.Assignment.get_at_field:type_name -> pb.GetAtField
	89,  // 8: pb.Assignment.get_var:type_name -> pb.Var
	161, // 9: pb.Assignment.render_pattern:type_name -> pb.RenderPattern
	162, // 10: pb.Assignment.render_ref:type_name -> pb.RenderRef
	151, // 11: pb.BoolEval.all_true:type_name -> pb.AllTrue
	152, // 12: pb.BoolEval.always:type_name -> pb.Always
	153, // 13: pb.BoolEval.any_true:type_name -> pb.AnyTrue
	74,  // 14: pb.BoolEval.bool_value:type_name -> pb.Bool
	154, // 15: pb.BoolEval.compare_num:type_name -> pb.CompareNum
	155, // 16: pb.BoolEval.compare_text:type_name -> pb.CompareText
	156, // 17: pb.BoolEval.count_of:type_name -> pb.CountOf
	70,  // 18: pb.BoolEval.determine:type_name -> pb.Determine
	71,  // 19: pb.BoolEval.during:type_name -> pb.During
	87,  // 20: pb.BoolEval.get_at_field:type_name -> pb.GetAtField
	89,  // 21: pb.BoolEval.get_var:type_name -> pb.Var
	157, // 22: pb.BoolEval.has_dominion:type_name -> pb.HasDominion
	142, // 23: pb.BoolEval.has_trait:type_name -> pb.HasTrait
	108, // 24: pb.BoolEval.includes:type_name -> pb.Includes
	109, // 25: pb.BoolEval.is_empty:type_name -> pb.IsEmpty
	144, // 26: pb.BoolEval.is_exact_kind_of:type_name -> pb.IsExactKindOf
	145, // 27: pb.BoolEval.is_kind_of:type_name -> pb.IsKindOf
	24,  // 28: pb.BoolEval.list_find:type_name -> pb.Find
	111, // 29: pb.BoolEval.matches:type_name -> pb.Matches
	158, // 30: pb.BoolEval.not:type_name -> pb.IsNotTrue
	149, // 31: pb.BoolEval.object_exists:type_name -> pb.ObjectExists
	161, // 32: pb.BoolEval.render_pattern:type_name -> pb.RenderPattern
	162, // 33: pb.BoolEval.render_ref:type_name -> pb.RenderRef
	73,  // 34: pb.BoolEval.send:type_name -> pb.Send
	122, // 35: pb.Brancher.choose_more:type_name -> pb.ChooseMore
	123, // 36: pb.Brancher.choose_more_value:type_name -> pb.ChooseMoreValue
	124, // 37: pb.Brancher.choose_nothing_else:type_name -> pb.ChooseNothingElse
	51,  // 38: pb.Comparator.at_least:type_name -> pb.GreaterOrEqual
	53,  // 39: pb.Comparator.at_most:type_name -> pb.LessOrEqual
	50,  // 40: pb.Comparator.equal:type_name -> pb.EqualTo
	52,  // 41: pb.Comparator.greater_than:type_name -> pb.GreaterThan
	54,  // 42: pb.Comparator.less_than:type_name -> pb.LessThan
	55,  // 43: pb.Comparator.unequal:type_name -> pb.NotEqualTo
	69,  // 44: pb.Execute.activity:type_name -> pb.Activity
	79,  // 45: pb.Execute.assign:type_name -> pb.Assign
	98,  // 46: pb.Execute.br:type_name -> pb.Newline
	90,  // 47: pb.Execute.break:type_name -> pb.Break
	121, // 48: pb.Execute.choose_action:type_name -> pb.ChooseAction
	125, // 49: pb.Execute.choose_value:type_name -> pb.ChooseValue
	72,  // 50: pb.Execute.debug_log:type_name -> pb.Log
	70,  // 51: pb.Execute.determine:type_name -> pb.Determine
	91,  // 52: pb.Execute.do_nothing:type_name -> pb.DoNothing
	126, // 53: pb.Execute.erase_edge:type_name -> pb.EraseEdge
	127, // 54: pb.Execute.erase_index:type_name -> pb.EraseIndex
	22,  // 55: pb.Execute.erasing:type_name -> pb.Erasing
	23,  // 56: pb.Execute.erasing_edge:type_name -> pb.ErasingEdge
	21,  // 57: pb.Execute.list_each:type_name -> pb.Each
	26,  // 58: pb.Execute.list_map:type_name -> pb.Map
	27,  // 59: pb.Execute.list_reduce:type_name -> pb.Reduce
	28,  // 60: pb.Execute.list_reverse:type_name -> pb.ReverseList
	29,  // 61: pb.Execute.list_set:type_name -> pb.Set
	31,  // 62: pb.Execute.list_sort_numbers:type_name -> pb.SortNumbers
	33,  // 63: pb.Execute.list_sort_text:type_name -> pb.SortText
	32,  // 64: pb.Execute.list_sort_using:type_name -> pb.SortRecords
	34,  // 65: pb.Execute.list_splice:type_name -> pb.Splice
	92,  // 66: pb.Execute.next:type_name -> pb.Next
	99,  // 67: pb.Execute.p:type_name -> pb.Paragraph
	88,  // 68: pb.Execute.put_at_field:type_name -> pb.PutAtField
	140, // 69: pb.Execute.put_edge:type_name -> pb.PutEdge
	141, // 70: pb.Execute.put_index:type_name -> pb.PutIndex
	37,  // 71: pb.Execute.relate:type_name -> pb.Relate
	161, // 72: pb.Execute.render_pattern:type_name -> pb.RenderPattern
	104, // 73: pb.Execute.say_text:type_name -> pb.Say
	73,  // 74: pb.Execute.send:type_name -> pb.Send
	150, // 75: pb.Execute.set_trait:type_name -> pb.SetTrait
	106, // 76: pb.Execute.wbr:type_name -> pb.Softline
	94,  // 77: pb.Execute.while:type_name -> pb.While
	129, // 78: pb.FromSourceFields.from_obj:type_name -> pb.FromObj
	130, // 79: pb.FromSourceFields.from_rec:type_name -> pb.FromRec
	133, // 80: pb.FromSourceFields.from_var:type_name -> pb.FromVar
	159, // 81: pb.FromSourceFields.render_field:type_name -> pb.RenderField
	60,  // 82: pb.GrammarMaker.alias:type_name -> pb.Alias
	63,  // 83: pb.GrammarMaker.directive:type_name -> pb.Directive
	135, // 84: pb.IntoTargetFields.into_obj:type_name -> pb.IntoObj
	138, // 85: pb.IntoTargetFields.into_var:type_name -> pb.IntoVar
	118, // 86: pb.ListIterator.as_num:type_name -> pb.AsNum
	119, // 87: pb.ListIterator.as_rec:type_name -> pb.AsRec
	120, // 88: pb.ListIterator.as_txt:type_name -> pb.AsTxt
	128, // 89: pb.ListSource.from_num_list:type_name -> pb.FromNumList
	131, // 90: pb.ListSource.from_rec_list:type_name -> pb.FromRecList
	132, // 91: pb.ListSource.from_txt_list:type_name -> pb.FromTxtList
	134, // 92: pb.ListTarget.into_num_list:type_name -> pb.IntoNumList
	136, // 93: pb.ListTarget.into_rec_list:type_name -> pb.IntoRecList
	137, // 94: pb.ListTarget.into_txt_list:type_name -> pb.IntoTxtList
	70,  // 95: pb.NumListEval.determine:type_name -> pb.Determine
	87,  // 96: pb.NumListEval.get_at_field:type_name -> pb.GetAtField
	89,  // 97: pb.NumListEval.get_var:type_name -> pb.Var
	30,  // 98: pb.NumListEval.list_slice:type_name -> pb.Slice
	34,  // 99: pb.NumListEval.list_splice:type_name -> pb.Splice
	76,  // 100: pb.NumListEval.numbers:type_name -> pb.Numbers
	93,  // 101: pb.NumListEval.range:type_name -> pb.Range
	161, // 102: pb.NumListEval.render_pattern:type_name -> pb.RenderPattern
	162, // 103: pb.NumListEval.render_ref:type_name -> pb.RenderRef
	112, // 104: pb.NumberEval.choose_num:type_name -> pb.ChooseNum
	70,  // 105: pb.NumberEval.determine:type_name -> pb.Determine
	113, // 106: pb.NumberEval.diff_of:type_name -> pb.DiffOf
	71,  // 107: pb.NumberEval.during:type_name -> pb.During
	87,  // 108: pb.NumberEval.get_at_field:type_name -> pb.GetAtField
	89,  // 109: pb.NumberEval.get_var:type_name -> pb.Var
	20,  // 110: pb.NumberEval.list_at:type_name -> pb.At
	24,  // 111: pb.NumberEval.list_find:type_name -> pb.Find
	25,  // 112: pb.NumberEval.list_len:type_name -> pb.Len
	75,  // 113: pb.NumberEval.num_value:type_name -> pb.Number
	114, // 114: pb.NumberEval.product_of:type_name -> pb.ProductOf
	115, // 115: pb.NumberEval.quotient_of:type_name -> pb.QuotientOf
	116, // 116: pb.NumberEval.remainder_of:type_name -> pb.RemainderOf
	161, // 117: pb.NumberEval.render_pattern:type_name -> pb.RenderPattern
	162, // 118: pb.NumberEval.render_ref:type_name -> pb.RenderRef
	117, // 119: pb.NumberEval.sum_of:type_name -> pb.SumOf
	70,  // 120: pb.RecordEval.determine:type_name -> pb.Determine
	87,  // 121: pb.RecordEval.get_at_field:type_name -> pb.GetAtField
	89,  // 122: pb.RecordEval.get_var:type_name -> pb.Var
	20,  // 123: pb.RecordEval.list_at:type_name -> pb.At
	139, // 124: pb.RecordEval.make:type_name -> pb.Make
	161, // 125: pb.RecordEval.render_pattern:type_name -> pb.RenderPattern
	162, // 126: pb.RecordEval.render_ref:type_name -> pb.RenderRef
	70,  // 127: pb.RecordListEval.determine:type_name -> pb.Determine
	87,  // 128: pb.RecordListEval.get_at_field:type_name -> pb.GetAtField
	89,  // 129: pb.RecordListEval.get_var:type_name -> pb.Var
	30,  // 130: pb.RecordListEval.list_slice:type_name -> pb.Slice
	34,  // 131: pb.RecordListEval.list_splice:type_name -> pb.Splice
	161, // 132: pb.RecordListEval.render_pattern:type_name -> pb.RenderPattern
	162, // 133: pb.RecordListEval.render_ref:type_name -> pb.RenderRef
	59,  // 134: pb.ScannerMaker.action:type_name -> pb.Action
	61,  // 135: pb.ScannerMaker.all_of:type_name -> pb.AllOf
	62,  // 136: pb.ScannerMaker.any_of:type_name -> pb.AnyOf
	64,  // 137: pb.ScannerMaker.noun:type_name -> pb.Noun
	65,  // 138: pb.ScannerMaker.retarget:type_name -> pb.Retarget
	66,  // 139: pb.ScannerMaker.reverse:type_name -> pb.Reverse
	67,  // 140: pb.ScannerMaker.self:type_name -> pb.Self
	68,  // 141: pb.ScannerMaker.words:type_name -> pb.Words
	95,  // 142: pb.TextEval.bracket_text:type_name -> pb.Bracket
	96,  // 143: pb.TextEval.buffer_text:type_name -> pb.Buffer
	40,  // 144: pb.TextEval.capitalize:type_name -> pb.Capitalize
	41,  // 145: pb.TextEval.choose_text:type_name -> pb.ChooseText
	97,  // 146: pb.TextEval.comma_text:type_name -> pb.Commas
	163, // 147: pb.TextEval.cycle_text:type_name -> pb.CycleText
	70,  // 148: pb.TextEval.determine:type_name -> pb.Determine
	87,  // 149: pb.TextEval.get_at_field:type_name -> pb.GetAtField
	89,  // 150: pb.TextEval.get_var:type_name -> pb.Var
	143, // 151: pb.TextEval.id_of:type_name -> pb.IdOf
	110, // 152: pb.TextEval.join:type_name -> pb.Join
	146, // 153: pb.TextEval.kind_of:type_name -> pb.KindOf
	20,  // 154: pb.TextEval.list_at:type_name -> pb.At
	42,  // 155: pb.TextEval.make_lowercase:type_name -> pb.MakeLowercase
	44,  // 156: pb.TextEval.make_reversed:type_name -> pb.MakeReversed
	45,  // 157: pb.TextEval.make_sentence_case:type_name -> pb.MakeSentenceCase
	47,  // 158: pb.TextEval.make_title_case:type_name -> pb.MakeTitleCase
	48,  // 159: pb.TextEval.make_uppercase:type_name -> pb.MakeUppercase
	148, // 160: pb.TextEval.name_of:type_name -> pb.NameOf
	43,  // 161: pb.TextEval.pluralize:type_name -> pb.MakePlural
	100, // 162: pb.TextEval.print_num:type_name -> pb.PrintNum
	101, // 163: pb.TextEval.print_num_word:type_name -> pb.PrintNumWord
	35,  // 164: pb.TextEval.reciprocal_of:type_name -> pb.ReciprocalOf
	38,  // 165: pb.TextEval.relative_of:type_name -> pb.RelativeOf
	160, // 166: pb.TextEval.render_name:type_name -> pb.RenderName
	161, // 167: pb.TextEval.render_pattern:type_name -> pb.RenderPattern
	162, // 168: pb.TextEval.render_ref:type_name -> pb.RenderRef
	49,  // 169: pb.TextEval.render_template:type_name -> pb.RenderTemplate
	164, // 170: pb.TextEval.response:type_name -> pb.Response
	102, // 171: pb.TextEval.row:type_name -> pb.Row
	103, // 172: pb.TextEval.rows:type_name -> pb.Rows
	165, // 173: pb.TextEval.shuffle_text:type_name -> pb.ShuffleText
	46,  // 174: pb.TextEval.singularize:type_name -> pb.MakeSingular
	105, // 175: pb.TextEval.slash_text:type_name -> pb.Slash
	107, // 176: pb.TextEval.span_text:type_name -> pb.Span
	166, // 177: pb.TextEval.stopping_text:type_name -> pb.StoppingText
	77,  // 178: pb.TextEval.text_value:type_name -> pb.Text
	70,  // 179: pb.TextListEval.determine:type_name -> pb.Determine
	87,  // 180: pb.TextListEval.get_at_field:type_name -> pb.GetAtField
	89,  // 181: pb.TextListEval.get_var:type_name -> pb.Var
	147, // 182: pb.TextListEval.kinds_of:type_name -> pb.KindsOf
	30,  // 183: pb.TextListEval.list_slice:type_name -> pb.Slice
	34,  // 184: pb.TextListEval.list_splice:type_name -> pb.Splice
	36,  // 185: pb.TextListEval.reciprocals_of:type_name -> pb.ReciprocalsOf
	39,  // 186: pb.TextListEval.relatives_of:type_name -> pb.RelativesOf
	161, // 187: pb.TextListEval.render_pattern:type_name -> pb.RenderPattern
	162, // 188: pb.TextListEval.render_ref:type_name -> pb.RenderRef
	78,  // 189: pb.TextListEval.texts:type_name -> pb.Texts
	56,  // 190: pb.Trigger.trigger_cycle:type_name -> pb.TriggerCycle
	57,  // 191: pb.Trigger.trigger_once:type_name -> pb.TriggerOnce
	58,  // 192: pb.Trigger.trigger_switch:type_name -> pb.TriggerSwitch
	1,   // 193: pb.At.list:type_name -> pb.Assignment
	13,  // 194: pb.At.index:type_name -> pb.NumberEval
	1,   // 195: pb.Each.list:type_name -> pb.Assignment
	9,   // 196: pb.Each.as:type_name -> pb.ListIterator
	69,  // 197: pb.Each.do:type_name -> pb.Activity
	169, // 198: pb.Each.else:type_name -> pb.ElseIfEmpty
	13,  // 199: pb.Erasing.count:type_name -> pb.NumberEval
	10,  // 200: pb.Erasing.from:type_name -> pb.ListSource
	13,  // 201: pb.Erasing.at_index:type_name -> pb.NumberEval
	69,  // 202: pb.Erasing.do:type_name -> pb.Activity
	10,  // 203: pb.ErasingEdge.from:type_name -> pb.ListSource
	69,  // 204: pb.ErasingEdge.do:type_name -> pb.Activity
	69,  // 205: pb.ErasingEdge.else:type_name -> pb.Activity
	1,   // 206: pb.Find.value:type_name -> pb.Assignment
	1,   // 207: pb.Find.list:type_name -> pb.Assignment
	1,   // 208: pb.Len.list:type_name -> pb.Assignment
	1,   // 209: pb.Map.from_list:type_name -> pb.Assignment
	1,   // 210: pb.Reduce.from_list:type_name -> pb.Assignment
	10,  // 211: pb.ReverseList.list:type_name -> pb.ListSource
	13,  // 212: pb.Set.index:type_name -> pb.NumberEval
	1,   // 213: pb.Set.from:type_name -> pb.Assignment
	1,   // 214: pb.Slice.list:type_name -> pb.Assignment
	13,  // 215: pb.Slice.start:type_name -> pb.NumberEval
	13,  // 216: pb.Slice.end:type_name -> pb.NumberEval
	175, // 217: pb.SortNumbers.var:type_name -> pb.Variable
	174, // 218: pb.SortNumbers.by_field:type_name -> pb.SortByField
	175, // 219: pb.SortRecords.var:type_name -> pb.Variable
	175, // 220: pb.SortText.var:type_name -> pb.Variable
	174, // 221: pb.SortText.by_field:type_name -> pb.SortByField
	175, // 222: pb.Splice.var:type_name -> pb.Variable
	13,  // 223: pb.Splice.start:type_name -> pb.NumberEval
	13,  // 224: pb.Splice.remove:type_name -> pb.NumberEval
	1,   // 225: pb.Splice.insert:type_name -> pb.Assignment
	173, // 226: pb.ReciprocalOf.via:type_name -> pb.Relation
	17,  // 227: pb.ReciprocalOf.object:type_name -> pb.TextEval
	173, // 228: pb.ReciprocalsOf.via:type_name -> pb.Relation
	17,  // 229: pb.ReciprocalsOf.object:type_name -> pb.TextEval
	17,  // 230: pb.Relate.object:type_name -> pb.TextEval
	17,  // 231: pb.Relate.to_object:type_name -> pb.TextEval
	173, // 232: pb.Relate.via:type_name -> pb.Relation
	173, // 233: pb.RelativeOf.via:type_name -> pb.Relation
	17,  // 234: pb.RelativeOf.object:type_name -> pb.TextEval
	173, // 235: pb.RelativesOf.via:type_name -> pb.Relation
	17,  // 236: pb.RelativesOf.object:type_name -> pb.TextEval
	17,  // 237: pb.Capitalize.text:type_name -> pb.TextEval
	2,   // 238: pb.ChooseText.if:type_name -> pb.BoolEval
	17,  // 239: pb.ChooseText.true:type_name -> pb.TextEval
	17,  // 240: pb.ChooseText.false:type_name -> pb.TextEval
	17,  // 241: pb.MakeLowercase.text:type_name -> pb.TextEval
	17,  // 242: pb.MakePlural.text:type_name -> pb.TextEval
	17,  // 243: pb.MakeReversed.text:type_name -> pb.TextEval
	17,  // 244: pb.MakeSentenceCase.text:type_name -> pb.TextEval
	17,  // 245: pb.MakeSingular.text:type_name -> pb.TextEval
	17,  // 246: pb.MakeTitleCase.text:type_name -> pb.TextEval
	17,  // 247: pb.MakeUppercase.text:type_name -> pb.TextEval
	17,  // 248: pb.RenderTemplate.expression:type_name -> pb.TextEval
	16,  // 249: pb.AllOf.series:type_name -> pb.ScannerMaker
	16,  // 250: pb.AnyOf.options:type_name -> pb.ScannerMaker
	16,  // 251: pb.Directive.scans:type_name -> pb.ScannerMaker
	16,  // 252: pb.Retarget.spans:type_name -> pb.ScannerMaker
	16,  // 253: pb.Reverse.reverses:type_name -> pb.ScannerMaker
	5,   // 254: pb.Activity.exes:type_name -> pb.Execute
	168, // 255: pb.Determine.arguments:type_name -> pb.Arguments
	1,   // 256: pb.Log.value:type_name -> pb.Assignment
	18,  // 257: pb.Send.path:type_name -> pb.TextListEval
	168, // 258: pb.Send.arguments:type_name -> pb.Arguments
	175, // 259: pb.Assign.var:type_name -> pb.Variable
	1,   // 260: pb.Assign.from:type_name -> pb.Assignment
	2,   // 261: pb.FromBool.val:type_name -> pb.BoolEval
	13,  // 262: pb.FromNum.val:type_name -> pb.NumberEval
	12,  // 263: pb.FromNumbers.vals:type_name -> pb.NumListEval
	14,  // 264: pb.FromRecord.val:type_name -> pb.RecordEval
	15,  // 265: pb.FromRecords.vals:type_name -> pb.RecordListEval
	17,  // 266: pb.FromText.val:type_name -> pb.TextEval
	18,  // 267: pb.FromTexts.vals:type_name -> pb.TextListEval
	6,   // 268: pb.GetAtField.from:type_name -> pb.FromSourceFields
	1,   // 269: pb.PutAtField.from:type_name -> pb.Assignment
	8,   // 270: pb.PutAtField.into:type_name -> pb.IntoTargetFields
	13,  // 271: pb.Range.to:type_name -> pb.NumberEval
	13,  // 272: pb.Range.from:type_name -> pb.NumberEval
	13,  // 273: pb.Range.by_step:type_name -> pb.NumberEval
	2,   // 274: pb.While.true:type_name -> pb.BoolEval
	69,  // 275: pb.While.do:type_name -> pb.Activity
	69,  // 276: pb.Bracket.do:type_name -> pb.Activity
	69,  // 277: pb.Buffer.do:type_name -> pb.Activity
	69,  // 278: pb.Commas.do:type_name -> pb.Activity
	13,  // 279: pb.PrintNum.num:type_name -> pb.NumberEval
	13,  // 280: pb.PrintNumWord.num:type_name -> pb.NumberEval
	69,  // 281: pb.Row.do:type_name -> pb.Activity
	69,  // 282: pb.Rows.do:type_name -> pb.Activity
	17,  // 283: pb.Say.text:type_name -> pb.TextEval
	69,  // 284: pb.Slash.do:type_name -> pb.Activity
	69,  // 285: pb.Span.do:type_name -> pb.Activity
	17,  // 286: pb.Includes.text:type_name -> pb.TextEval
	17,  // 287: pb.Includes.part:type_name -> pb.TextEval
	17,  // 288: pb.IsEmpty.text:type_name -> pb.TextEval
	17,  // 289: pb.Join.sep:type_name -> pb.TextEval
	17,  // 290: pb.Join.parts:type_name -> pb.TextEval
	17,  // 291: pb.Matches.text:type_name -> pb.TextEval
	2,   // 292: pb.ChooseNum.if:type_name -> pb.BoolEval
	13,  // 293: pb.ChooseNum.true:type_name -> pb.NumberEval
	13,  // 294: pb.ChooseNum.false:type_name -> pb.NumberEval
	13,  // 295: pb.DiffOf.a:type_name -> pb.NumberEval
	13,  // 296: pb.DiffOf.b:type_name -> pb.NumberEval
	13,  // 297: pb.ProductOf.a:type_name -> pb.NumberEval
	13,  // 298: pb.ProductOf.b:type_name -> pb.NumberEval
	13,  // 299: pb.QuotientOf.a:type_name -> pb.NumberEval
	13,  // 300: pb.QuotientOf.b:type_name -> pb.NumberEval
	13,  // 301: pb.RemainderOf.a:type_name -> pb.NumberEval
	13,  // 302: pb.RemainderOf.b:type_name -> pb.NumberEval
	13,  // 303: pb.SumOf.a:type_name -> pb.NumberEval
	13,  // 304: pb.SumOf.b:type_name -> pb.NumberEval
	175, // 305: pb.AsNum.var:type_name -> pb.Variable
	175, // 306: pb.AsRec.var:type_name -> pb.Variable
	175, // 307: pb.AsTxt.var:type_name -> pb.Variable
	2,   // 308: pb.ChooseAction.if:type_name -> pb.BoolEval
	69,  // 309: pb.ChooseAction.do:type_name -> pb.Activity
	3,   // 310: pb.ChooseAction.else:type_name -> pb.Brancher
	2,   // 311: pb.ChooseMore.if:type_name -> pb.BoolEval
	69,  // 312: pb.ChooseMore.do:type_name -> pb.Activity
	3,   // 313: pb.ChooseMore.else:type_name -> pb.Brancher
	1,   // 314: pb.ChooseMoreValue.from:type_name -> pb.Assignment
	2,   // 315: pb.ChooseMoreValue.filter:type_name -> pb.BoolEval
	69,  // 316: pb.ChooseMoreValue.do:type_name -> pb.Activity
	3,   // 317: pb.ChooseMoreValue.else:type_name -> pb.Brancher
	69,  // 318: pb.ChooseNothingElse.do:type_name -> pb.Activity
	1,   // 319: pb.ChooseValue.from:type_name -> pb.Assignment
	2,   // 320: pb.ChooseValue.filter:type_name -> pb.BoolEval
	69,  // 321: pb.ChooseValue.do:type_name -> pb.Activity
	3,   // 322: pb.ChooseValue.else:type_name -> pb.Brancher
	10,  // 323: pb.EraseEdge.from:type_name -> pb.ListSource
	13,  // 324: pb.EraseIndex.count:type_name -> pb.NumberEval
	10,  // 325: pb.EraseIndex.from:type_name -> pb.ListSource
	13,  // 326: pb.EraseIndex.at_index:type_name -> pb.NumberEval
	175, // 327: pb.FromNumList.var:type_name -> pb.Variable
	17,  // 328: pb.FromObj.object:type_name -> pb.TextEval
	14,  // 329: pb.FromRec.rec:type_name -> pb.RecordEval
	175, // 330: pb.FromRecList.var:type_name -> pb.Variable
	175, // 331: pb.FromTxtList.var:type_name -> pb.Variable
	175, // 332: pb.FromVar.var:type_name -> pb.Variable
	175, // 333: pb.IntoNumList.var:type_name -> pb.Variable
	17,  // 334: pb.IntoObj.object:type_name -> pb.TextEval
	175, // 335: pb.IntoRecList.var:type_name -> pb.Variable
	175, // 336: pb.IntoTxtList.var:type_name -> pb.Variable
	175, // 337: pb.IntoVar.var:type_name -> pb.Variable
	168, // 338: pb.Make.arguments:type_name -> pb.Arguments
	1,   // 339: pb.PutEdge.from:type_name -> pb.Assignment
	11,  // 340: pb.PutEdge.into:type_name -> pb.ListTarget
	1,   // 341: pb.PutIndex.from:type_name -> pb.Assignment
	11,  // 342: pb.PutIndex.into:type_name -> pb.ListTarget
	13,  // 343: pb.PutIndex.at_index:type_name -> pb.NumberEval
	17,  // 344: pb.HasTrait.object:type_name -> pb.TextEval
	17,  // 345: pb.HasTrait.trait:type_name -> pb.TextEval
	17,  // 346: pb.IdOf.object:type_name -> pb.TextEval
	17,  // 347: pb.IsExactKindOf.object:type_name -> pb.TextEval
	17,  // 348: pb.IsKindOf.object:type_name -> pb.TextEval
	17,  // 349: pb.KindOf.object:type_name -> pb.TextEval
	17,  // 350: pb.NameOf.object:type_name -> pb.TextEval
	17,  // 351: pb.ObjectExists.object:type_name -> pb.TextEval
	17,  // 352: pb.SetTrait.object:type_name -> pb.TextEval
	17,  // 353: pb.SetTrait.trait:type_name -> pb.TextEval
	2,   // 354: pb.AllTrue.tests:type_name -> pb.BoolEval
	2,   // 355: pb.AnyTrue.tests:type_name -> pb.BoolEval
	13,  // 356: pb.CompareNum.a:type_name -> pb.NumberEval
	4,   // 357: pb.CompareNum.is:type_name -> pb.Comparator
	13,  // 358: pb.CompareNum.b:type_name -> pb.NumberEval
	17,  // 359: pb.CompareText.a:type_name -> pb.TextEval
	4,   // 360: pb.CompareText.is:type_name -> pb.Comparator
	17,  // 361: pb.CompareText.b:type_name -> pb.TextEval
	13,  // 362: pb.CountOf.num:type_name -> pb.NumberEval
	19,  // 363: pb.CountOf.trigger:type_name -> pb.Trigger
	0,   // 364: pb.CountOf.pos:type_name -> pb.Pos
	2,   // 365: pb.IsNotTrue.test:type_name -> pb.BoolEval
	17,  // 366: pb.RenderField.name:type_name -> pb.TextEval
	168, // 367: pb.RenderPattern.arguments:type_name -> pb.Arguments
	17,  // 368: pb.CycleText.parts:type_name -> pb.TextEval
	17,  // 369: pb.Response.text:type_name -> pb.TextEval
	17,  // 370: pb.ShuffleText.parts:type_name -> pb.TextEval
	17,  // 371: pb.StoppingText.parts:type_name -> pb.TextEval
	1,   // 372: pb.Argument.from:type_name -> pb.Assignment
	167, // 373: pb.Arguments.args:type_name -> pb.Argument
	69,  // 374: pb.ElseIfEmpty.do:type_name -> pb.Activity
	175, // 375: pb.Gather.var:type_name -> pb.Variable
	10,  // 376: pb.Gather.from:type_name -> pb.ListSource
	7,   // 377: pb.GrammarDecl.grammar:type_name -> pb.GrammarMaker
	0,   // 378: pb.Relation.at:type_name -> pb.Pos
	0,   // 379: pb.Variable.at:type_name -> pb.Pos
	380, // [380:380] is the sub-list for method output_type
	380, // [380:380] is the sub-list for method input_type
	380, // [380:380] is the sub-list for extension type_name
	380, // [380:380] is the sub-list for extension extendee
	0,   // [0:380] is the sub-list for field type_name
}

func init() { file_all_proto_init() }
func file_all_proto_init() {
	if File_all_proto != nil {
		return
	}
	file_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolEval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brancher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comparator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromSourceFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrammarMaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntoTargetFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIterator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumListEval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberEval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordListEval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScannerMaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextEval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextListEval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*At); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Each); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erasing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErasingEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Find); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Len); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reduce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortNumbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Splice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReciprocalOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReciprocalsOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativeOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativesOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capitalize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeLowercase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakePlural); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeReversed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeSentenceCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeSingular); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeTitleCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeUppercase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EqualTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreaterOrEqual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreaterThan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LessOrEqual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LessThan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotEqualTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerCycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerOnce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Directive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Noun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Retarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reverse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Self); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Words); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Determine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*During); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Send); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Number); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Numbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Texts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromNumbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromTexts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAtField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAtField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Var); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Break); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoNothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Next); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*While); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bracket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Newline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paragraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintNumWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Say); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Softline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Includes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Join); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotientOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemainderOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsRec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsTxt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseMore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseMoreValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseNothingElse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EraseEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EraseIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromNumList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromRec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromRecList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromTxtList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntoNumList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntoObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntoRecList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntoTxtList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntoVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Make); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasTrait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsExactKindOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsKindOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KindOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KindsOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTrait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTrue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Always); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyTrue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasDominion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsNotTrue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShuffleText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoppingText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Arguments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElseIfEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gather); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrammarDecl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortByField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_all_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Assignment_FromBool)(nil),
		(*Assignment_FromNum)(nil),
		(*Assignment_FromNumbers)(nil),
		(*Assignment_FromRecord)(nil),
		(*Assignment_FromRecords)(nil),
		(*Assignment_FromText)(nil),
		(*Assignment_FromTexts)(nil),
		(*Assignment_GetAtField)(nil),
		(*Assignment_GetVar)(nil),
		(*Assignment_RenderPattern)(nil),
		(*Assignment_RenderRef)(nil),
	}
	file_all_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*BoolEval_AllTrue)(nil),
		(*BoolEval_Always)(nil),
		(*BoolEval_AnyTrue)(nil),
		(*BoolEval_BoolValue)(nil),
		(*BoolEval_CompareNum)(nil),
		(*BoolEval_CompareText)(nil),
		(*BoolEval_CountOf)(nil),
		(*BoolEval_Determine)(nil),
		(*BoolEval_During)(nil),
		(*BoolEval_GetAtField)(nil),
		(*BoolEval_GetVar)(nil),
		(*BoolEval_HasDominion)(nil),
		(*BoolEval_HasTrait)(nil),
		(*BoolEval_Includes)(nil),
		(*BoolEval_IsEmpty)(nil),
		(*BoolEval_IsExactKindOf)(nil),
		(*BoolEval_IsKindOf)(nil),
		(*BoolEval_ListFind)(nil),
		(*BoolEval_Matches)(nil),
		(*BoolEval_Not)(nil),
		(*BoolEval_ObjectExists)(nil),
		(*BoolEval_RenderPattern)(nil),
		(*BoolEval_RenderRef)(nil),
		(*BoolEval_Send)(nil),
	}
	file_all_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Brancher_ChooseMore)(nil),
		(*Brancher_ChooseMoreValue)(nil),
		(*Brancher_ChooseNothingElse)(nil),
	}
	file_all_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Comparator_AtLeast)(nil),
		(*Comparator_AtMost)(nil),
		(*Comparator_Equal)(nil),
		(*Comparator_GreaterThan)(nil),
		(*Comparator_LessThan)(nil),
		(*Comparator_Unequal)(nil),
	}
	file_all_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Execute_Activity)(nil),
		(*Execute_Assign)(nil),
		(*Execute_Br)(nil),
		(*Execute_Break)(nil),
		(*Execute_ChooseAction)(nil),
		(*Execute_ChooseValue)(nil),
		(*Execute_DebugLog)(nil),
		(*Execute_Determine)(nil),
		(*Execute_DoNothing)(nil),
		(*Execute_EraseEdge)(nil),
		(*Execute_EraseIndex)(nil),
		(*Execute_Erasing)(nil),
		(*Execute_ErasingEdge)(nil),
		(*Execute_ListEach)(nil),
		(*Execute_ListMap)(nil),
		(*Execute_ListReduce)(nil),
		(*Execute_ListReverse)(nil),
		(*Execute_ListSet)(nil),
		(*Execute_ListSortNumbers)(nil),
		(*Execute_ListSortText)(nil),
		(*Execute_ListSortUsing)(nil),
		(*Execute_ListSplice)(nil),
		(*Execute_Next)(nil),
		(*Execute_P)(nil),
		(*Execute_PutAtField)(nil),
		(*Execute_PutEdge)(nil),
		(*Execute_PutIndex)(nil),
		(*Execute_Relate)(nil),
		(*Execute_RenderPattern)(nil),
		(*Execute_SayText)(nil),
		(*Execute_Send)(nil),
		(*Execute_SetTrait)(nil),
		(*Execute_Wbr)(nil),
		(*Execute_While)(nil),
	}
	file_all_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*FromSourceFields_FromObj)(nil),
		(*FromSourceFields_FromRec)(nil),
		(*FromSourceFields_FromVar)(nil),
		(*FromSourceFields_RenderField)(nil),
	}
	file_all_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GrammarMaker_Alias)(nil),
		(*GrammarMaker_Directive)(nil),
	}
	file_all_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*IntoTargetFields_IntoObj)(nil),
		(*IntoTargetFields_IntoVar)(nil),
	}
	file_all_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ListIterator_AsNum)(nil),
		(*ListIterator_AsRec)(nil),
		(*ListIterator_AsTxt)(nil),
	}
	file_all_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ListSource_FromNumList)(nil),
		(*ListSource_FromRecList)(nil),
		(*ListSource_FromTxtList)(nil),
	}
	file_all_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ListTarget_IntoNumList)(nil),
		(*ListTarget_IntoRecList)(nil),
		(*ListTarget_IntoTxtList)(nil),
	}
	file_all_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*NumListEval_Determine)(nil),
		(*NumListEval_GetAtField)(nil),
		(*NumListEval_GetVar)(nil),
		(*NumListEval_ListSlice)(nil),
		(*NumListEval_ListSplice)(nil),
		(*NumListEval_Numbers)(nil),
		(*NumListEval_Range)(nil),
		(*NumListEval_RenderPattern)(nil),
		(*NumListEval_RenderRef)(nil),
	}
	file_all_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*NumberEval_ChooseNum)(nil),
		(*NumberEval_Determine)(nil),
		(*NumberEval_DiffOf)(nil),
		(*NumberEval_During)(nil),
		(*NumberEval_GetAtField)(nil),
		(*NumberEval_GetVar)(nil),
		(*NumberEval_ListAt)(nil),
		(*NumberEval_ListFind)(nil),
		(*NumberEval_ListLen)(nil),
		(*NumberEval_NumValue)(nil),
		(*NumberEval_ProductOf)(nil),
		(*NumberEval_QuotientOf)(nil),
		(*NumberEval_RemainderOf)(nil),
		(*NumberEval_RenderPattern)(nil),
		(*NumberEval_RenderRef)(nil),
		(*NumberEval_SumOf)(nil),
	}
	file_all_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*RecordEval_Determine)(nil),
		(*RecordEval_GetAtField)(nil),
		(*RecordEval_GetVar)(nil),
		(*RecordEval_ListAt)(nil),
		(*RecordEval_Make)(nil),
		(*RecordEval_RenderPattern)(nil),
		(*RecordEval_RenderRef)(nil),
	}
	file_all_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*RecordListEval_Determine)(nil),
		(*RecordListEval_GetAtField)(nil),
		(*RecordListEval_GetVar)(nil),
		(*RecordListEval_ListSlice)(nil),
		(*RecordListEval_ListSplice)(nil),
		(*RecordListEval_RenderPattern)(nil),
		(*RecordListEval_RenderRef)(nil),
	}
	file_all_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ScannerMaker_Action)(nil),
		(*ScannerMaker_AllOf)(nil),
		(*ScannerMaker_AnyOf)(nil),
		(*ScannerMaker_Noun)(nil),
		(*ScannerMaker_Retarget)(nil),
		(*ScannerMaker_Reverse)(nil),
		(*ScannerMaker_Self)(nil),
		(*ScannerMaker_Words)(nil),
	}
	file_all_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*TextEval_BracketText)(nil),
		(*TextEval_BufferText)(nil),
		(*TextEval_Capitalize)(nil),
		(*TextEval_ChooseText)(nil),
		(*TextEval_CommaText)(nil),
		(*TextEval_CycleText)(nil),
		(*TextEval_Determine)(nil),
		(*TextEval_GetAtField)(nil),
		(*TextEval_GetVar)(nil),
		(*TextEval_IdOf)(nil),
		(*TextEval_Join)(nil),
		(*TextEval_KindOf)(nil),
		(*TextEval_ListAt)(nil),
		(*TextEval_MakeLowercase)(nil),
		(*TextEval_MakeReversed)(nil),
		(*TextEval_MakeSentenceCase)(nil),
		(*TextEval_MakeTitleCase)(nil),
		(*TextEval_MakeUppercase)(nil),
		(*TextEval_NameOf)(nil),
		(*TextEval_Pluralize)(nil),
		(*TextEval_PrintNum)(nil),
		(*TextEval_PrintNumWord)(nil),
		(*TextEval_ReciprocalOf)(nil),
		(*TextEval_RelativeOf)(nil),
		(*TextEval_RenderName)(nil),
		(*TextEval_RenderPattern)(nil),
		(*TextEval_RenderRef)(nil),
		(*TextEval_RenderTemplate)(nil),
		(*TextEval_Response)(nil),
		(*TextEval_Row)(nil),
		(*TextEval_Rows)(nil),
		(*TextEval_ShuffleText)(nil),
		(*TextEval_Singularize)(nil),
		(*TextEval_SlashText)(nil),
		(*TextEval_SpanText)(nil),
		(*TextEval_StoppingText)(nil),
		(*TextEval_TextValue)(nil),
	}
	file_all_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*TextListEval_Determine)(nil),
		(*TextListEval_GetAtField)(nil),
		(*TextListEval_GetVar)(nil),
		(*TextListEval_KindsOf)(nil),
		(*TextListEval_ListSlice)(nil),
		(*TextListEval_ListSplice)(nil),
		(*TextListEval_ReciprocalsOf)(nil),
		(*TextListEval_RelativesOf)(nil),
		(*TextListEval_RenderPattern)(nil),
		(*TextListEval_RenderRef)(nil),
		(*TextListEval_Texts)(nil),
	}
	file_all_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Trigger_TriggerCycle)(nil),
		(*Trigger_TriggerOnce)(nil),
		(*Trigger_TriggerSwitch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   176,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_all_proto_goTypes,
		DependencyIndexes: file_all_proto_depIdxs,
		MessageInfos:      file_all_proto_msgTypes,
	}.Build()
	File_all_proto = out.File
	file_all_proto_rawDesc = nil
	file_all_proto_goTypes = nil
	file_all_proto_depIdxs = nil
}
1