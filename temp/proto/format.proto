// format.proto
syntax = "proto3"; 
package pb;
option go_package = "git.sr.ht/~ionous/pb";

import "main.proto";
import "options.proto";

message Capitalize {
		TextEval _text     =    1;

    option (if).desc = "Returns new text, with the first letter turned into uppercase.";
}

// would be nice if this splatted with Text literal
// Text:if:else:
message ChooseText {
		TextEval txt          =    1;
		BoolEval if__bool     =    2;
		TextEval else__text   =    3;

    option (if).desc = "Pick one of two strings based on a boolean test.";
}

message MakeLowercase {
		TextEval _text     =    1;

    option (if).desc = "Returns new text, with every letter turned into lowercase. For example, 'shout' from 'SHOUT'.";
}

message MakePlural {
		TextEval _text     =    1;

    option (if).desc = "Returns the plural form of a singular word. (ex. apples for apple. )";
}

message MakeReversed {
		TextEval _text     =    1;

    option (if).desc = "Returns new text flipped back to front. For example, 'elppA' from 'Apple', or 'noon' from 'noon'.";
}

message MakeSentenceCase {
		TextEval _text     =    1;

    option (if).desc = "Returns new text, start each sentence with a capital letter. For example, 'Empire Apple.' from 'Empire apple.'.";
}

message MakeSingular {
		TextEval _text     =    1;

    option (if).desc = "Returns the singular form of a plural word. (ex. apple for apples )";
}

message MakeTitleCase {
		TextEval _text     =    1;

    option (if).desc = "Returns new text, starting each word with a capital letter. For example, 'Empire Apple' from 'empire apple'.";
}

message MakeUppercase {
		TextEval _text     =    1;

    option (if).desc = "Returns new text, with every letter turned into uppercase. For example, 'APPLE' from 'apple'.";
}

message RenderTemplate {
		TextEval _text     =    1;

    option (if).desc = "Parse text using iffy templates. See: https://github.com/ionous/iffy/wiki/Templates";
}
