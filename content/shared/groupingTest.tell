# fix? the rules for deciding whether something starts with a vowel ( and therefore should use indefinite article 'an' )
# are defined by the "starts with vowel" pattern. so, even though, we've explicitly said "an x" in the declaration: that doesn't matter.
# ImportNouns() doesn't see the "an" as being special, and so doesn't get assign the noun a customized indefinite article.
# ( Inform also has this issue. )
# Potentially, the importer could call the "starts with vowel" pattern, and when true store the article.
# Or, maybe we could store the (various) articles used when defining the noun, sort through them, and pick the most reasonable one -- always storing that regardless.
# saying only ever "the X" , for example, would be remembered, but wouldn't alter the set of indefinite articles.
---
- Define scene:stage:
    - "Grouping tests"
    - - Declare: "The lab is a room.
          Clarence is an actor.
          Cats are kinds of animals.
          Two cats are in the lab.
          An empire apple and a pen are props in the lab.
          Triangles and scrabble tiles are kinds of props.
          Two triangles are in the lab.
          An X, a W, an F, a Y, and a Z are scrabble tiles in the lab."
      - Define noun:value:initially:
          - "x"
          - "indefinite article"
          - FromText: "an"
      - Define noun:value:initially:
          - "f"
          - "indefinite article"
          - FromText: "an"
      - Define scene:stage:do:
          - "Test no grouping"
          - - Define rule:do:
                - "assign grouping"
                - - # For patterns which return a value, assigning a return value ends the pattern matching.
                    # So end this pattern and block out the default handler.
                    Set:value:
                      - "@grouping"
                      - FromRecord: "@grouping"
          - - PrintInlineObjects objs:
                FromTextList:
                  - "Clarence"
                  - "apple"
                  - "pen"
                  - "triangle-1"
                  - "triangle-2"
                  - "cat-1"
                  - "cat-2"
            - Expect text: "Clarence, an empire apple, a pen, a triangle, a triangle, a cat, and a cat"
      - #
        Define scene:do:
          - "Test default grouping"
          - - PrintInlineObjects objs:
                FromTextList:
                  - "Clarence"
                  - "apple"
                  - "pen"
                  - "triangle-1"
                  - "triangle-2"
                  - "cat-1"
                  - "cat-2"
            - Expect text: "Clarence, an empire apple, a pen, two triangles, and two cats"
      - #
        Define scene:stage:do:
          - "Test custom grouping"
          - - Define rule:do:
                - "assign grouping"
                - - If:do:
                      - Is exactly:kind:
                          - "@obj"
                          - "props"
                      - - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "label"
                            - FromText: "props"
                        - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "hide label"
                            - FromBool: true
                        - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "hide size"
                            - FromBool: true
            - #
              Define rule:do:
                - "print several"
                - - If:do:
                      - Is all:
                          - Is compatible:kind:
                              - "@obj"
                              - "triangles"
                          - Is:matching:num:
                              - "@group_size"
                              - "greater_than"
                              - 1
                      - - Print: "a few shapely trigons"
          - - Print words:
                - PrintInlineObjects objs:
                    FromTextList:
                      - "Clarence"
                      - "apple"
                      - "pen"
                      - "triangle-1"
                      - "triangle-2"
                - Print: ";"
                - PrintInlineObjects objs:
                    FromTextList:
                      - "Clarence"
                      - "apple"
                      - "pen"
                      - "triangle-1"
            - Expect text: "Clarence, an empire apple and a pen, and a few shapely trigons; Clarence, an empire apple and a pen, and one triangle"
      - #
        Define scene:stage:do:
          - "x Test custom replacement"
          - - Define rule:do:
                - "assign grouping"
                - - If:do:
                      - Is compatible:kind:
                          - "@obj"
                          - "props"
                      - - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "label"
                            - FromText: "some things"
                        - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "hide size"
                            - FromBool: true
                        - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "hide objects"
                            - FromBool: true
          - - Print words:
                - PrintInlineObjects objs:
                    FromTextList:
                      - "Clarence"
                      - "apple"
                      - "pen"
                      - "triangle-1"
                      - "triangle-2"
                - Print: ";"
                - PrintInlineObjects objs:
                    FromTextList:
                      - "Clarence"
                      - "apple"
            - Expect text: "Clarence and some things; Clarence and an empire apple"
      - #
        Define scene:stage:do:
          - "x Test custom fancy phrases"
          - - Define rule:do:
                - "assign grouping"
                - - If:do:
                      - Is compatible:kind:
                          - "@obj"
                          - "props"
                      - - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "label"
                            - FromText: "the tiles"
                        - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "hide size"
                            - FromBool: true
            - #
              Define rule:do:
                - "after print group"
                - - If:do:
                      - Is:matching:text:
                          - Variable:dot:
                              - "group"
                              - - At field: "grouping"
                                - At field: "label"
                          - "equal_to"
                          - "the tiles"
                      - - Print: "from a Scrabble set"
            - #
              Define rule:do:
                - "print grouped object"
                - - If:do:
                      - Is compatible:kind:
                          - "@obj"
                          - "scrabble tiles"
                      - - Say: "{.obj}"
          - - Print words:
                - PrintInlineObjects objs:
                    FromTextList:
                      - "x"
                      - "w"
                      - "f"
                      - "y"
                      - "z"
                - Print: ";"
                - PrintInlineObjects objs:
                    FromTextList:
                      - "Clarence"
                      - "x"
                      - "w"
                      - "f"
                      - "y"
                      - "z"
            - Expect text: "the tiles X, W, F, Y, and Z from a Scrabble set; Clarence and the tiles X, W, F, Y, and Z from a Scrabble set"
      - #
        Define scene:stage:do:
          - "Test custom parentheticals"
          - - Define rule:do:
                - "assign grouping"
                - - If:do:
                      - Is compatible:kind:
                          - "@obj"
                          - "scrabble tiles"
                      - - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "label"
                            - FromText: "scrabble tiles"
            - #
              Define rule:do:
                - "print grouped object"
                - - If:do:
                      - Is compatible:kind:
                          - "@obj"
                          - "scrabble tiles"
                      - - Say: "{.obj}"
          - - PrintInlineObjects objs:
                FromTextList:
                  - "Clarence"
                  - "x"
                  - "w"
                  - "f"
                  - "y"
                  - "z"
            - Expect text: "Clarence and five scrabble tiles (X, W, F, Y, and Z)"
      - #
        Define scene:stage:do:
          - "Test custom parenthetical articles"
          - - Define rule:do:
                - "assign grouping"
                - - If:do:
                      - Is compatible:kind:
                          - "@obj"
                          - "scrabble tiles"
                      - - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "label"
                            - FromText: "scrabble tiles"
          - - PrintInlineObjects objs:
                FromTextList:
                  - "Clarence"
                  - "x"
                  - "w"
                  - "f"
                  - "y"
                  - "z"
            - Expect text: "Clarence and five scrabble tiles (an X, a W, an F, a Y, and a Z)"
      - # this has been disabled for quite a while.
        # even though the triangles are counted nouns
        # for some reason they get pulled into the 'things' group
        # and print ex. 'a triangle' instead of 'one triangle'.
        Define scene:stage:do:
          - "x Test custom unnamed parenthetical"
          - - Define rule:do:
                - "assign grouping"
                - - If:do:
                      - Is compatible:kind:
                          - "@obj"
                          - "props"
                      - - Set:value:
                            - Variable:dot:
                                - "grouping"
                                - - At field: "label"
                            - FromText: "things"
          - - Print words:
                - PrintInlineObjects objs:
                    FromTextList:
                      - "Clarence"
                      - "apple"
                      - "pen"
                      - "triangle-1"
                - Print: ";"
                - PrintInlineObjects objs:
                    FromTextList:
                      - "Clarence"
                      - "apple"
                      - "pen"
                      - "triangle-1"
                      - "triangle-2"
            - Expect text: "Clarence and three things (an empire apple, a pen, and one triangle); Clarence and four things (an empire apple, a pen, and two triangles)"
    
