---
- Declare: "Agents are kinds of object."
- Declare: "Players are kinds of agent."
- Define noun:kind:
    - "player"
    - "players"
- Define kind:fields:
    - "Agents"
    - - Text: "pawn"
- #
  Define noun:kind:
    - "self"
    - "actors"
- Define noun:value:initially:
    - "player"
    - "pawn"
    - FromText: "self"
- Define noun:value:initially:
    - "self"
    - "printed name"
    - FromText: "you"
- Declare: "You are proper named and privately named."
- # Given a noun, return true if its the player's actor or the player agent.
  Define pattern:requires:provides:
    - "is player"
    - - Text:kind:
          - "obj"
          - "object"
    - - Bool: "success"
- Define rule:named:do:
    - "is player"
    - "player from agent"
    - - If:do:
          - Is compatible:kind:
              - "@obj"
              - "agents"
          - - Set:value:
                - "@success"
                - FromBool:
                    Is:matching:text:
                      - "@obj"
                      - "equal_to"
                      - "#player"
- Define rule:named:do:
    - "is player"
    - "player from actor"
    - - If:do:
          - Is compatible:kind:
              - "@obj"
              - "actors"
          - - Set:value:
                - "@success"
                - FromBool:
                    Is:matching:text:
                      - "@obj"
                      - "equal_to"
                      - "#player.pawn"
- #
  Define scene:do:
    - "Test that the player exists"
    - - Expect:
          IsPlayer obj:
            FromText: "self"
- # self is the actor
  Interpret alias:as:
    - - "me"
      - "myself"
      - "self"
    - "self"
