---
- Declare: "Things are a kind of kind."
- Define kind:fields:
    - "Things"
    - - Text: "printed name"
- #
  Define scene:stage:do:
    - "Test name of a kind"
    - - Declare: "The named object and the unnamed object are things."
      - Declare: "The unnamed object is privately named."
    - - # The story engine automagically calls "print name" when the name of an object is used in a template.
        # ex. { .someObject }
        Say: "{.named}, {.unnamed}."
      - Expect text: "named object, thing."
- #
  Define pattern:requires:provides:do:
    - "print name"
    - - Text:kind:
          - "obj"
          - "object"
    - - Nothing:
    - - # if the object doesn't exist, use 'print nothing'.
        # ( by default, that will try to write: 'nowhere', 'nobody', or 'nothing'. )
        If:do:else:
          - Not:
              Object: "@obj"
          - - PrintNothing:
                FromText: "@obj"
          - # if the object was given an explicit 'printed name', print that.
            If:do:else:
              - Is:matching:text:
                  - Object:dot:
                      - "@obj"
                      - At field: "printed name"
                  - "other_than"
                  - ""
              - - Print:
                    Object:dot:
                      - "@obj"
                      - At field: "printed name"
                - Mention obj:
                    FromText: "@obj"
              - # if the object is publicly named, print the original name of the object;
                # privately named objects skip this rule.
                If:do:else:
                  - Object:dot:
                      - "@obj"
                      - At field: "publicly named"
                  - - Print:
                        Object name: "@obj"
                    - Mention obj:
                        FromText: "@obj"
                  - # if nothing else was printed, print the singular name of the kind: 'room', 'container', etc.
                    Finally do:
                      - Print:
                          Singular of:
                            Kind of: "@obj"
                      - Mention obj:
                          FromText: "@obj"
- #
  Define pattern:requires:provides:do:
    - "Print nothing"
    - - # Print nothing takes an object reference.
        # It uses that to try to determine the kind of the reference
        # even if the reference itself is blank.
        Text:kind:
          - "obj"
          - "object"
    - - Nothing:
    - - Print: "nothing"
- Define rule:named:do:
    - "Print nothing"
    - "print nowhere rule"
    - - If:do:
          - Is compatible:kind:nothing:
              - "@obj"
              - "rooms"
              - true
          - - Print: "nowhere"
- Define rule:named:do:
    - "Print nothing"
    - "print nobody rule"
    - - If:do:
          - Is compatible:kind:nothing:
              - "@obj"
              - "actors"
              - true
          - - Print: "nobody"
- # make a note that the named object has been mentioned in the story output.
  Define pattern:requires:provides:do:
    - "mention"
    - - Text:kind:
          - "obj"
          - "object"
    - - Nothing:
    - - If:do:
          - Is compatible:kind:
              - "@obj"
              - "things"
          - - Set:value:
                - Object:dot:
                    - "@obj"
                    - At field: "mentioned"
                - FromBool: true
            - Set:value:
                - Object:dot:
                    - "story"
                    - At field: "mentions"
                - FromNum:
                    Add:value:
                      - 1
                      - Object:dot:
                          - "story"
                          - At field: "mentions"
