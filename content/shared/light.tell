---
Tapestry:
  - Declare: "Radiance is a kind of aspect."
  - Define aspect:traits:
      - "radiance"
      - - "unlit"
        - "lit"
  - # Radiance determines whether something produces light.
    Define kind:fields:
      - "Things"
      - - Aspect: "radiance"
  - Declare: "Illumination is a kind of aspect."
  - # Returns true if light stops when passing from inside an object to outside an object.
    # Note that "lit" objects emit light from all of their surfaces,
    # so while a closed box might not reveal a flashlight locked inside,
    # a glowing haunted treasure chest would illuminate both its contents and the room where the treasure chest is located.
    # Actors are not considered fully opaque: carrying a lit torch will produce light.
    Define pattern:requires:provides:do:
      - "fully opaque"
      - - Text:kind:
            - "obj"
            - "object"
      - - Bool: "result"
      - - If:do:else:
            - KindOf:is:
                - "@obj"
                - "rooms"
            - - Comment: "a room is the top of line."
              - Set:value:
                  - "@result"
                  - FromBool: true
            - If:do:else:
                - AllTrue:
                    - KindOf:is:
                        - "@obj"
                        - "containers"
                    - Object:field:
                        - "@obj"
                        - "opaque"
                    - Object:field:
                        - "@obj"
                        - "closed"
                - - Set:value:
                      - "@result"
                      - FromBool: true
                - Finally do:
                    - Set:value:
                        - "@result"
                        - FromBool: false
  - # return the parent of an object if and only if that parent transmits light.
    # usually used as part of 'transparent list' which returns a list of all transparent ancestors.
    Define pattern:requires:provides:do:
      - "transparent of"
      - - Text:kind:
            - "obj"
            - "object"
      - - Text:kind:
            - "result"
            - "object"
        - Text:kind:initially:
            - "parent"
            - "object"
            - ParentOf obj:
                FromText: "@obj"
      - - # normally the parent is just the parent.
          Set:value:
            - "@result"
            - FromText: "@parent"
  - Define rule:do:
      - "transparent of"
      - - If:do:
            - FullyOpaque obj:
                FromText: "@obj"
            - - Comment: "for example: if our object is a closed, opaque, container, dont return anything."
              - Set:value:
                  - "@result"
                  - FromText: ""
  - # Return a list containing the object and all of its transparent ancestors.
    Define pattern:requires:provides:do:
      - "transparent list"
      - - Text:kind:
            - "obj"
            - "object"
      - - TextList: "list"
      - - Repeating:do:
            - Not:
                Is empty: "@obj"
            - - Push:into:
                  - FromText: "@obj"
                  - "@list"
              - Set:value:
                  - "@obj"
                  - FromText:
                      TransparentOf obj:
                        FromText: "@obj"
  - # returns true if the actor is not in darkness.
    Define pattern:requires:provides:do:
      - "Illuminates"
      - - Text:kind:
            - "actor"
            - "actor"
        - Bool: "refresh"
      - - Bool: "result"
      - - UpdateLighting actor:refresh:
            - FromText: "@actor"
            - FromBool: "@refresh"
        - Set:value:
            - "@result"
            - FromBool:
                Object:field:dot:
                  - "@actor"
                  - "lighting"
                  - - AtField: "illuminated"
  - Declare: "A lighting status is a kind of record."
  - Define kind:fields:
      - "actors"
      - - Record:kind:
            - "lighting"
            - "lighting status"
  - Define kind:fields:
      - "lighting status"
      - - Number: "last turn"
        - Bool: "illuminated"
  - # ensure an actor's lighting status is up to date.
    Define pattern:requires:provides:do:
      - "update lighting"
      - - Text:kind:
            - "actor"
            - "actor"
        - # true if the lighting status needs updating
          Bool: "refresh"
      - - # returns nothing
          Nothing:
      - - # verify we are trying to update the lighting of a valid actor.
          # ( was start game called? )
          Expect:
            Not:
              Is empty: "@actor"
        - If:do:
            - AnyTrue:
                - "@refresh"
                - Is:matching:num:
                    - Object:field:
                        - "story"
                        - "turn count"
                    - "greater_than"
                    - Object:field:dot:
                        - "@actor"
                        - "lighting"
                        - - AtField: "last turn"
            - - Set:value:
                  - Object:field:
                      - "@actor"
                      - "lighting"
                  - FromRecord:
                      LightingStatus lastTurn:illuminated:
                        - FromNumber:
                            Object:field:
                              - "story"
                              - "turn count"
                        - FromBool:
                            ContainsLight object:
                              FromText: "@actor"
  - # Determine whether the passed object is lit.
    # An object can be lit because it provides its own light, or because some nearby object has light.
    Define pattern:requires:provides:do:
      - "contains light"
      - - Text:kind:
            - "object"
            - "object"
      - - Bool: "result"
        - TextList: "queue"
        - Text: "ceiling"
      - - # determine the ceiling.
          Repeating:do:
            - Not:
                Is empty: "@object"
            - - Set:value:
                  - "@ceiling"
                  - FromText: "@object"
              - Set:value:
                  - "@object"
                  - FromText:
                      TransparentOf obj:
                        FromText: "@object"
        - # add the ceiling for processing.
          Push:into:
            - FromText: "@ceiling"
            - "@queue"
        - Repeating:do:
            - Is:matching:num:
                - Len:
                    FromTextList: "@queue"
                - "greater_than"
                - 0
            - - Erasing:as:do:
                  - "@queue"
                  - "it"
                  - - Comment: "objects which generate light are considered to be bright both inside and out; all of their surfaces aglow."
                    - If:do:else:
                        - Object:field:
                            - "@it"
                            - "lit"
                        - - Set:value:
                              - "@result"
                              - FromBool: true
                          - Break:
                        - If:do:
                            - AnyTrue:
                                - Is:matching:text:
                                    - "@it"
                                    - "equal_to"
                                    - "@ceiling"
                                - Not:
                                    FullyOpaque obj:
                                      FromText: "@it"
                            - - Comment: "Any children of our ceiling will be considered for their light contributions."
                              - Push:into:
                                  - FromTextList:
                                      ChildrenOf obj:
                                        FromText: "@it"
                                  - "@queue"
