---
- # Determine whether an actor can touch some specific object.
  Define pattern:requires:provides:do:
    - "can reach"
    - - Text:kind:
          - "actor"
          - "actor"
      - Text: "action"
      - # the target the agent is trying to reach
        Text:kind:
          - "noun"
          - "object"
      - Bool: "requires light"
    - - Text: "response"
      - Text:kind:
          - "i"
          - "object"
      - Text:kind:
          - "next"
          - "object"
      - Text: "dig error"
      - Num: "lca"
      - Text: "reach response"
      - Num: "reach error"
      - TextList: "path"
    - - Set:value:
          - "@i"
          - FromText: "@actor"
      - Repeat if:do:
          - Not:
              Is nothing: "@i"
          - # There's no problem reaching yourself, so start by putting yourself in the list of visited places.
            - Push:value:
                - "@path"
                - FromText: "@i"

            - Set:value:
                - "@next"
                - FromText:
                    ParentOf obj:
                      FromText: "@i"
            - If:do:
                - Is nothing: "@reach_response"
                - # Reach can only reject pairs. To force the acceptance of some particular source/target pair, reaching itself has to be customized.
                  - If:assuming:do:
                      - Not:
                          Is nothing: "@response"
                      - - Arg:from:
                            - "response"
                            - FromText:
                                ReachUp fromObj:intoObj:actor:noun:action:
                                  - FromText: "@i"
                                  - FromText: "@next"
                                  - FromText: "@actor"
                                  - FromText: "@noun"
                                  - FromText: "@action"
                      - - Set:value:
                            - "@reach_error"
                            - FromNum:
                                List length:
                                  FromTextList: "@path"
                        - Set:value:
                            - "@reach_response"
                            - FromText: "@response"
                        - # This doesn't exit the loop.
                          # It builds a complete hierarchy to help determine if the lca exists and if so, is the lca completely unreachable or merely blocked.
                          DoNothing:

            - Set:value:
                - "@i"
                - FromText: "@next"
      - # Simulate digging down from the (yet to be determined) lca by digging up from the target noun (until we find the lca.)
        Log:value:
          - "debug"
          - FromTextList: "@path"
      - Set:value:
          - "@i"
          - FromText: "@noun"
      - Repeat if:do:
          - Not:
              Is nothing: "@i"
          - - # set lca to the index of i in path
              Set:value:
                - "@lca"
                - FromNum:
                    Find:value:
                      - FromTextList: "@path"
                      - FromText: "@i"

            - # Exit once we've found the lca.
              If:do:
                - Is:matching:num:
                    - "@lca"
                    - "greater_than"
                    - 0
                - - Break:
            - # otherwise:
              Set:value:
                - "@next"
                - FromText:
                    ParentOf obj:
                      FromText: "@i"
            - If:assuming:do:
                - Not:
                    Is nothing: "@response"
                - - Arg:from:
                      - "response"
                      - FromText:
                          ReachDown fromObj:intoObj:actor:noun:action:
                            - FromText: "@next"
                            - FromText: "@i"
                            - FromText: "@actor"
                            - FromText: "@noun"
                            - FromText: "@action"
                - # To find the outermost dig error keep going,
                  # updating the error each time.
                  - Set:value:
                      - "@dig_error"
                      - FromText: "@response"

            - Set:value:
                - "@i"
                - FromText: "@next"
      - # Return the best response.
        If:do:else:
          - Is:matching:num:
              - "@lca"
              - "equal_to"
              - 0
          - # No lca ever found? That's the most important error.
            - Set:value:
                - "@response"
                - FromText:
                    Say response:with:
                      - "can't reach a common ancestor"
                      - "{They:.noun|capitalize!} {arent:.noun} available."
          - If:do:else:
              - Is:matching:num:
                  - "@reach_error"
                  - "less_than"
                  - "@lca"
              - # There is an error reaching up from the actor towards the lca.
                - Set:value:
                    - "@response"
                    - FromText: "@reach_response"
              - If:do:
                  - Not:
                      Is nothing: "@dig_error"
                  - # There was no error reaching up to the lca, so return any errors digging down to the noun.
                    - Set:value:
                        - "@response"
                        - FromText: "@dig_error"
- Define rule:do:
    - "before can reach"
    - - If:do:
          - Object:dot:
              - "@noun"
              - At field: "intangible"
          - - Set:value:
                - "@response"
                - FromText:
                    Say response:with:
                      - "require substance"
                      - "You should name something more substantial."
- Define rule:do:
    - "before can reach"
    - - If:do:
          - Is all:
              - "@requires_light"
              - # we know this rule is for the player, so we can rely the illumination cache.
                Object:dot:
                  - "@actor"
                  - At field: "not illuminated"
          - # Used to determine whether an action needing light can proceed.
            # Returns some response text if the action is blocked.
            # Relies on has light.
            - Set:value:
                - "@response"
                - FromText:
                    Say response:with:
                      - "can't act in the dark"
                      - "It is pitch dark, and {we!} can't see a thing."
- #
  Define pattern:requires:provides:do:
    - "reach up"
    - - Text:kind:
          - "from obj"
          - "object"
      - Text:kind:
          - "into obj"
          - "object"
      - Text:kind:
          - "actor"
          - "object"
      - Text:kind:
          - "noun"
          - "object"
      - Text: "action"
    - - Text: "response"
    - - # no default rules
        Continue:
- Define rule:do:
    - "reach up"
    - - If:do:
          - Is all:
              - Is compatible:kind:
                  - "@from_obj"
                  - "containers"
              - Object:dot:
                  - "@from_obj"
                  - At field: "closed"
          - - Set:value:
                - "@response"
                - FromText:
                    Say response:with:
                      - "can't reach outside closed containers"
                      - "{The: .from_obj|capitalize!} {arent: .from_obj} open."
- Define rule:do:
    - "reach up"
    - - Log:value:
          - "debug"
          - FromText:
              Say: "reach up: from:{.from_obj} -> into:{.into_obj}"
      - If:do:
          - Is compatible:kind:
              - "@from_obj"
              - "rooms"
          - - Set:value:
                - "@response"
                - FromText:
                    Say response:with:
                      - "can't reach outside rooms"
                      - "{They:.noun|capitalize!} {arent:.noun} available."
- #
  Define pattern:requires:provides:do:
    - "reach down"
    - - Text:kind:
          - "from obj"
          - "object"
      - Text:kind:
          - "into obj"
          - "object"
      - Text:kind:
          - "actor"
          - "object"
      - Text:kind:
          - "noun"
          - "object"
      - Text: "action"
    - - Text: "response"
    - - # no default rules
        Continue:
- Define rule:do:
    - "reach down"
    - - If:do:
          - Is all:
              - Is compatible:kind:
                  - "@into_obj"
                  - "containers"
              - Object:dot:
                  - "@into_obj"
                  - At field: "closed"
              - Not:
                  Is:matching:text:
                    - "@into_obj"
                    - "equal_to"
                    - "@noun"
          - - Set:value:
                - "@response"
                - FromText:
                    Say response:with:
                      - "can't reach inside closed containers"
                      - "{The: .into_obj|capitalize!} {arent: .into_obj} open."
- Define rule:do:
    - "reach down"
    - - Log:value:
          - "debug"
          - FromText:
              Say: "reach down: from:{.from_obj} -> into:{.into_obj}"
      - If:do:
          - Is compatible:kind:
              - "@into_obj"
              - "rooms"
          - - Set:value:
                - "@response"
                - FromText:
                    Say response:with:
                      - "can't reach inside rooms"
                      - "{We:|capitalize!} can't reach into {the: .into_obj}."
