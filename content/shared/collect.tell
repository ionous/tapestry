---
- # future: it'd be nice to separate this from main scripts. inject a domain dependency at weave time, or some sort of runtime 'attach domain'.
  Declare: "An object collection is a kind of record."
- Define kind:fields:
    - "object collection"
    - - Text: "id"
      - Text: "name"
      - Text: "kind"
      - TextList: "traits"
      - RecordList:kind:
          - "kids"
          - "object collection"
- Define pattern:requires:provides:do:
    - "collect objects"
    - - # determine the contents of this object, and all its accessible children.
        Text:kind:
          - "obj"
          - "object"
    - - Record:kind:
          - "result"
          - "object collection"
    - - Set:value:
          - Variable:dot:
              - "result"
              - - At field: "id"
          - FromText:
              Object: "@obj"
      - Set:value:
          - Variable:dot:
              - "result"
              - - At field: "name"
          - FromText:
              Object name: "@obj"
      - Set:value:
          - Variable:dot:
              - "result"
              - - At field: "kind"
          - FromText:
              Kind of: "@obj"
      - Set:value:
          - Variable:dot:
              - "result"
              - - At field: "traits"
          - FromTextList:
              Object states: "@obj"
      - # if we can see into the object, collect its children
        If:do:
          - HasAccessibleChildren obj:
              FromText: "@obj"
          - - Repeat across:as:do:
                - FromTextList:
                    ChildrenOf obj:
                      FromText: "@obj"
                - "kid"
                - - Push:value:
                      - Variable:dot:
                          - "result"
                          - - At field: "kids"
                      - FromTextList:
                          CollectObjects obj:
                            FromText: "@kid"

- Define pattern:requires:provides:do:
    - "has accessible children"
    - - Text:kind:
          - "obj"
          - "object"
    - - Bool: "accessible"
    - - # the default rule considers all children to be accessible.
        Set:value:
          - "@accessible"
          - FromBool: true
- Define rule:named:do:
    - "has accessible children"
    - "closed containers are inaccessible"
    - - If:do:
          - Is all:
              - Is compatible:kind:
                  - "@obj"
                  - "containers"
              - Object:dot:
                  - "@obj"
                  - At field: "closed"
          - - Set:value:
                - "@accessible"
                - FromBool: false
- Define pattern:requires:provides:do:
    - "is accessible"
    - - Text:kind:
          - "parent"
          - "object"
      - Text:kind:
          - "child"
          - "object"
    - - Bool: "accessible"
    - - # the default rule considers all children to be accessible.
        Set:value:
          - "@accessible"
          - FromBool: true
- Define rule:named:do:
    - "is accessible"
    - "carried objects are inaccessible"
    - - If:do:
          - Is all:
              - Is compatible:kind:
                  - "@parent"
                  - "actors"
              - Not:
                  Variable:dot:
                    - "child"
                    - - At field: "worn"
          - - Set:value:
                - "@accessible"
                - FromBool: false
