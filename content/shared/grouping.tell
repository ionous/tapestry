---
- # Returns a list of the objects partitioned into groups.
  Define pattern:requires:provides:do:
    - "make groups"
    - - TextList: "objs"
    - - RecordList:kind:
          - "groups"
          - "object group"
      - RecordList:kind:
          - "groupings"
          - "grouping"
    - - # for each object, create an object group
        Map:using:list:
          - "@groupings"
          - "assign grouping"
          - FromTextList: "@objs"
      - # remove any duplicate groups
        Reduce:using:list:
          - "@groups"
          - "collate groups"
          - FromRecordList: "@groupings"
- #
  Define pattern:requires:provides:do:
    - "assign grouping"
    - - Text:kind:
          - "obj"
          - "object"
    - - Record:kind:initially:
          - "grouping"
          - "grouping"
          - Groupings name:
              FromText: "@obj"
    - - # no default rules
        Continue:
- Define rule:do:
    - "assign grouping"
    - - If:do:else:
          - Is all:
              - Object:dot:
                  - "@obj"
                  - At field: "counted"
              - Is nothing:
                  Variable:dot:
                    - "grouping"
                    - - At field: "label"
          - - # unless already grouped, use print several for unnamed counted nouns.
              Set:value:
                - Variable:dot:
                    - "grouping"
                    - - At field: "label"
                - FromText:
                    Kind of: "@obj"
            - Set:value:
                - Variable:dot:
                    - "grouping"
                    - - At field: "hide label"
                - FromBool: true
            - Set:value:
                - Variable:dot:
                    - "grouping"
                    - - At field: "hide objects"
                - FromBool: true
          - Finally do:
              - Set:value:
                  - "@grouping"
                  - FromRecord: "@grouping"
- #
  Declare: "Groupings are kinds of record."
- Define kind:fields:
    - "Groupings"
    - - # the name of an object the grouping describes
        Text: "name"
      - Text: "label"
      - Bool: "hide label"
      - Bool: "hide size"
      - Bool: "hide objects"
- #
  Declare: "Object groups are kinds of records."
- Define kind:fields:
    - "Object groups"
    - - Record:kind:
          - "grouping"
          - "groupings"
      - TextList: "objects"
- #
  Define pattern:requires:provides:do:
    - "match groups"
    - - Record:kind:
          - "first"
          - "grouping"
      - Record:kind:
          - "second"
          - "grouping"
    - - Bool: "matching"
    - - # no default rules
        Continue:
- Define rule:do:
    - "match groups"
    - - If:do:else:
          - Is any:
              - Is nothing:
                  Variable:dot:
                    - "first"
                    - - At field: "label"
              - Is nothing:
                  Variable:dot:
                    - "second"
                    - - At field: "label"
          - - Set:value:
                - "@matching"
                - FromBool: false
          - If:do:
              - Is all:
                  - Is:matching:text:
                      - Variable:dot:
                          - "first"
                          - - At field: "label"
                      - "equal_to"
                      - Variable:dot:
                          - "second"
                          - - At field: "label"
                  - Is:matching:value:
                      - FromBool:
                          Variable:dot:
                            - "first"
                            - - At field: "hide label"
                      - "equal_to"
                      - FromBool:
                          Variable:dot:
                            - "second"
                            - - At field: "hide label"
                  - Is:matching:value:
                      - FromBool:
                          Variable:dot:
                            - "first"
                            - - At field: "hide size"
                      - "equal_to"
                      - FromBool:
                          Variable:dot:
                            - "second"
                            - - At field: "hide size"
                  - Is:matching:value:
                      - FromBool:
                          Variable:dot:
                            - "first"
                            - - At field: "hide objects"
                      - "equal_to"
                      - FromBool:
                          Variable:dot:
                            - "second"
                            - - At field: "hide objects"
              - - Set:value:
                    - "@matching"
                    - FromBool: true
- # Adds a grouping to a collated list of groupings, and returns the new list.
  Define pattern:requires:provides:do:
    - "collate groups"
    - - Record:kind:
          - "grouping"
          - "grouping"
      - RecordList:kind:
          - "groups"
          - "object group"
    - - # the returned value is the same variable as the second parameter
        RecordList:kind:
          - "groups"
          - "object group"
      - Num: "idx"
      - Record:kind:
          - "group"
          - "object group"
      - TextList: "names"
    - # find the index of the matching group
      - Repeat across:as:do:
          - FromRecordList: "@groups"
          - "el"
          - - If:do:
                - MatchGroups first:second:
                    - FromRecord: "@grouping"
                    - FromRecord:
                        Variable:dot:
                          - "el"
                          - - At field: "grouping"
                - - Set:value:
                      - "@idx"
                      - FromNum: "@index"
      - # create a new group if there wasn't an existing group matching the object's settings
        If:do:else:
          - Is:matching:num:
              - "@idx"
              - "equal_to"
              - 0
          - - Push:value:
                - "@names"
                - FromText:
                    Variable:dot:
                      - "grouping"
                      - - At field: "name"

            - Set:value:
                - Variable:dot:
                    - "group"
                    - - At field: "objects"
                - FromTextList: "@names"
            - Set:value:
                - Variable:dot:
                    - "group"
                    - - At field: "grouping"
                - FromRecord: "@grouping"
            - Push:value:
                - "@groups"
                - FromRecord: "@group"

          - # found a matching group?
            #  unpack it, add the object name to it, then pack it up again
            Finally do:
              - Set:value:
                  - "@group"
                  - FromRecord:
                      Variable:dot:
                        - "groups"
                        - - At index: "@idx"
              - Set:value:
                  - "@names"
                  - FromTextList:
                      Variable:dot:
                        - "group"
                        - - At field: "objects"
              - Push:value:
                  - "@names"
                  - FromText:
                      Variable:dot:
                        - "grouping"
                        - - At field: "name"

              - Set:value:
                  - Variable:dot:
                      - "group"
                      - - At field: "objects"
                  - FromTextList: "@names"
              - Set:value:
                  - Variable:dot:
                      - "groups"
                      - - At index: "@idx"
                  - FromRecord: "@group"
