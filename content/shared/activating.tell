---
- Define action:requires:
    - "activating"
    - - # the actor activating something ( ex. the player. )
        Text:kind:
          - "actor"
          - "actor"
      - # the thing being activated
        Text:kind:
          - "noun"
          - "thing"
- Define rule:named:do:
    - "instead of activating"
    - "the standard activating checks"
    - - If:assuming:do:else:
          - Not:
              Is nothing: "@response"
          - - Arg:from:
                - "response"
                - FromText:
                    CanReach actor:action:noun:
                      - FromText: "@actor"
                      - FromText: "activating"
                      - FromText: "@noun"
          - - Print: "@response"
          - If:assuming:do:
              - Not:
                  Is nothing: "@response"
              - - Arg:from:
                    - "response"
                    - FromText:
                        CanUse actor:action:noun:
                          - FromText: "@actor"
                          - FromText: "activating"
                          - FromText: "@noun"
              - - Print: "@response"
- Define rule:named:do:
    - "activating"
    - "the standard activating action"
    - - If:do:
          - StateChanging actor:noun:trait:guard:change:
              - FromText: "@actor"
              - FromText: "@noun"
              - FromText: "activated"
              - FromText: "activatable"
              - FromText: "switch on"
          - - # Continue on to the next event phase
              Continue:
- #
  Define action:requires:
    - "deactivating"
    - - # the actor deactivating ( ex. the player. ) something
        Text:kind:
          - "actor"
          - "actor"
      - # the thing being deactivated
        Text:kind:
          - "noun"
          - "thing"
- Define rule:named:do:
    - "instead of deactivating"
    - "the standard deactivating checks"
    - - If:assuming:do:else:
          - Not:
              Is nothing: "@response"
          - - Arg:from:
                - "response"
                - FromText:
                    CanReach actor:action:noun:
                      - FromText: "@actor"
                      - FromText: "deactivating"
                      - FromText: "@noun"
          - - Print: "@response"
          - If:assuming:do:
              - Not:
                  Is nothing: "@response"
              - - Arg:from:
                    - "response"
                    - FromText:
                        CanUse actor:action:noun:
                          - FromText: "@actor"
                          - FromText: "deactivating"
                          - FromText: "@noun"
              - - Print: "@response"
- Define rule:named:do:
    - "deactivating"
    - "the standard deactivating action"
    - - If:do:
          - StateChanging actor:noun:trait:guard:change:
              - FromText: "@actor"
              - FromText: "@noun"
              - FromText: "deactivated"
              - FromText: "activatable"
              - FromText: "switch off"
          - - # Continue on to the next event phase
              Continue:
- #
  Declare: "Devices are a kind of prop."
- Define kind:fields:
    - "Devices"
    - - Aspect: "activatability"
      - Aspect: "activation"
- # Control whether the "activation" status of something can be changed.
  Declare: "Activatability is a kind of aspect."
- Define state:names:
    - "activatability"
    - - "activatable"
      - "not activatable"
- # States to distinguish between whether something is on or off.
  Declare: "Activation is a kind of aspect."
- Define state:names:
    - "activation"
    - - "deactivated"
      - "activated"
