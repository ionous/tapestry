# Conversations
---
- Define scene:requires:
    - "quips"
    - "tapestry" 

# Each quip is a pair of "call and response" lines for the player and another actor.
# Quips are the units of this particular conversation system.
- Define kind:fields:
    - "quips"
    - - # The target of a player initiated conversation.
        Text:kind:
        - "speaker"
        - "actor"
      - # Topics can be used to influence the options available to the player to choose from.
        Text:kind:
        - "topic"
        - "object"
      - # The slug is the choice presented to the player.
        Text: "slug"
      - # The remark is the bit of text said by the player's character as a result of that choice.
        Text: "remark"
      - # The reply is the response of the target.
        Text: "reply"

- Define relation:kind:otherKind:cardinality:
    - "quip followers"
    - "quips"
    - "quips"
    - "many_to_many"    

- # if a quip has any prohibitions; then, the player must know none of them.
  Define relation:kind:otherKind:cardinality:
    - "quip prohibitions"
    - "quips"
    - "quips"
    - "many_to_many"    

- # if a quip has any requirements; then, the player must know all of them.
  Define relation:kind:otherKind:cardinality:
    - "quip requirements"
    - "quips"
    - "quips"
    - "many_to_many"    

- # Conversations is a singleton.
  # It implies that the player and a single other actor ( the target ) are talking.
  Define noun:kind:
    - "conversation"
    - "conversations"

- Define kind:fields:
    - "conversations"
    - - Text:kind:
        - "target"
        - "actor"
      - TextList:kind:
        - "history"
        - "quip"

---

A fact is a kind of object. A fact can be unknown or known.
A quip is a kind of fact. 
Conversations are a kind of kinds.
The default greeting is a quip. # with all default values

# # The urgencies influence the order of choices presented to the players. They are sorted from most important to least. ( gets the name "urgent status" )
A quip can be urgent or casual or trivial or leave-taking. A quip is usually casual. 

# # Restrictive quips limit which quips can follow them.
A quip is either unrestricted or restrictive.

# x is directly following y; y is directly followed by x
Directly following is a verb. Directly following has the subject quips, the object quips, and the relation quip followers.

# x is prohibited by y:
# if a quip has any prohibitions, then, the player must know none of them.
Prohibited by is a verb. Prohibited by has the subject quips, the object quips, and the relation quip prohibitions.

# x is required by y.
# if a quip has any prohibitions; then, the player must know all of them.
Required by is a verb. Required by has the subject quips, the object quips, and the relation quip requirements.

# Actors who are reticent will refuse to talk to the player.
An actor is either chatty or reticent.
The actors have a quip called the greeting.

---
- # Start a conversation.
  # This is the only conversation action which has two actors.
  # The target here also becomes the global conversation object's target.
  Define action:requires:
    - "greeting"
    - - # the actor starting the conversation (ex. the player).
        Text:kind:
          - "actor"
          - "actor"
      - # the actor being talked to.
        Text:kind:
          - "target"
          - "actor"
      - # optional, falls back to the blank default greeting.
        Text:kind:initially:
          - "quip"
          - "quip"
          - "#default_greeting"

- # end a conversation.
  Define action:requires:
    - "departing"
    - - # the actor saying goodbye.
        # ( often, but not always the player )
        Text:kind:initially:
          - "actor"
          - "actor"
          - "#self"

- # A conversation choice by the player.
  Define action:requires:
    - "discussing"
    - - # the player's actor.
        Text:kind:
        - "actor"
        - "actor"
      - # the line the player has chosen.
        Text:kind:
        - "quip"
        - "quip"

- # Replying to something something the player said. 
  Define action:requires:
    - "replying"
    - - # the actor responding.
        Text:kind:
        - "actor"
        - "actor"
      - # the line they are saying.
        Text:kind:
        - "quip"
        - "quip"

---
Understand "t/greet/ask [actors]" as greeting. Understand "talk to/with/-- [actors]" as greeting.

Instead of greeting:
  - # Reticence stops a conversation from starting if the actor doesn't want to talk. 
    If:do:
      - Object:dot:
        - "@target"
        - "reticence"
      - - Say: "There's no response."

Instead of greeting:
  - # Already talking to one actor or another.
    If:do:else:
      - Is:matching:text:
          - "@target"
          - "equal_to"
          - "#conversation.target"
      - - Say: "You're already talking to them!"
      - # Otherwise: already talking to some other actor.
        If:do:
          - Not: 
                Is nothing:
                - "#conversation.target"
          - - Say: "You're already talking to someone!"

When greeting:
  - Set:value:
      - "#conversation.target"
      - FromText: "@target"
  - RememberConversation quip:
      FromText: "@quip"
  - Discussing actor:quip:
    - FromText: "#self"
    - FromText: "@quip" 

# Reset the conversation
When departing:
  - Set:value:
    - "#conversation.target"
    - FromText: ""
  - Erase: "#conversation.history"
  
# Discussing is always the player.
When discussing:
  - # Let the player speak:
    Say actor:text:
    - "@actor"
    - Object:dot:
        - "@quip"
        - "remark"
  - # Remember that the player made this particular choice.
    RememberConversation quip: 
      FromText: "@quip"
  - # Let the npc respond:
    Replying actor:quip: 
      - FromText: "#conversation.target"
      - FromText: "@quip"

# Replying is the always the npc.
When replying:
  - # Make the npc speak the line.
    If:do:
      - Not:
          Is nothing: 
            Object:dot:
              - "@quip"
              - "reply"
      - - Say actor:text:
          - "@actor"
          - Object:dot:
            - "@quip"
            - "reply"
  - # Now the player knows what the npc has said.
    Set:state:
    - "@quip"
    - "known"
  - # Perform a mic drop if the quip says to.
    If:do:
    - Object:dot:
        - "@quip"
        - "departing"
    - - Departing actor: 
          FromText: "@actor"

---
- # Unique action for handling quip selection
  Define action:requires:
    - "inputting dialog"
    - - # always the player
        # ( needed for event capture )
        Text:kind:
        - "actor"
        - "actor"
      - # the menu item selected
        Text:kind:
        - "quip"
        - "quip"

- # Display the dialog options the player can choose from.
  Define pattern:requires:provides:do:
    - "print conversation choices"
    - - Text:kind:
        - "actor"
        - "actors"
    - - TextList:initially:
        - "quips"
        - GetPlayerQuips:
    - If:do:else:
      - Is empty: 
          FromTextList: "@quips"
      - - # do:
          Departing actor: 
            FromText: "#self"
      - # else:
        Finally do:
          - Print menu:do:
            - "inputting dialog"
            - - Repeat across:as:do:
                - FromTextList: "@quips"
                - "quip"
                - OfferQuip quip: 
                    FromText: "@quip"
---
Before requesting player input (this is the print conversation rule):
  - # If in conversation, print conversation choices.
    If:do:
      - Not: 
          Is nothing: "#conversation.target"
      - - PrintConversationChoices actor:
            FromText: "@actor"

When inputting dialog:
  - # Handle the selection of a menu option
    # XXX: quitting?
    Discussing actor:quip:
    - FromText: "@actor"
    - FromText: "@quip"

When inputting dialog:
  - If:do:
      - Is nothing: "@quip"
      - - Say response:with:
          - "Invalid dialog option" 
          - "Please choose a valid option."

---
- # display a choice during conversation
  Define pattern:requires:provides:do:
    - "offer quip"
    - Text:kind:
        - "quip"
        - "quip"
    - Text:initially:
        - "slug"
        - Text if:then:else:
            - Not: 
                Is nothing: 
                  Object:dot:
                    - "@quip"
                    - "slug"
            - Object:dot:
              - "@quip"
              - "slug"
            - Text list:at: 
                - Split lines: 
                    Object:dot:
                      - "@quip"
                      - "remark"
                - 1 
    - # do:
      - Print menu:choice: 
        - "@quip"   # the "key" used to identify the menu option
        - "@slug"   # the actual text printed

- # record the passed quip to the recent history
  Define pattern:requires:provides:do:
    - "remember conversation"
    - - Text:kind:
        - "quip"
        - "quip"
    - - Nothing:
    - - # push the new quip
        Push:value:front:
        - "#conversation.history"
        - FromText:
            "@quip"
        - true 
      - # make sure the history doesnt get too large. 3 is what alice used.
        Erase:start:
          - "#conversation.history"
          - 4 # remove starting with the fourth element; keep the first three.

- # Determine whether a quip can appear as a choice for the player.
  # By default, this checks that all of the quip's "permitted by" facts are known.
  # ( Authors can add their own rules to modify this behavior. )
  Define pattern:requires:provides:do:
    - "is quip permitted"
    - - Text:kind:
        - "quip"
        - "quip"
    - - # returns:
        Bool:initially:
        - "permitted"
        - true 
      - TextList:kind:initially:
        - "requirements"
        - "facts"
        - Relatives:object:
          - "quip requirements"
          - "@quip"
    - - Repeat across:as:do:
        - FromTextList: "@requirements"
        - "fact"
        - - If:do:
            - Object:dot:
              - "@fact"
              - "unknown"
            - - Set:value:
                - "@permitted"
                - FromBool: false 
              - # any missing permission prevents usage.
                Break: 

- # Determine whether a quip can't appear as a choice for the player.
  # By default, this checks that none of a quip's "prohibited by" facts are known.
  # ( Authors can add their own rules to modify this behavior. )
  Define pattern:requires:provides:do:
  - "is quip prohibited"
  - - Text:kind:
      - "quip"
      - "quip"
  - - # returns:
      Bool:initially:
      - "prohibited"
      - false
    - TextList:kind:initially:
      - "prohibitions"
      - "facts"
      - Relatives:object:
        - "quip prohibitions"
        - "@quip"
  - - Repeat across:as:do:
      - FromTextList:
        - "@prohibitions"
      - "fact"
      - - If:do:
          - Object:dot:
              - "@fact"
              - "known"
          - - Set:value:
              - "@prohibited"
              - FromBool: true
            - # a single prohibition prevents usage.
              Break:

- # Determine whether one quip was defined as directly following another.
  Define pattern:requires:provides:do:
  - "is quip directly following"
  - - Text:kind:
      - "quip"
      - "quip"
    - Text:kind:
      - "before"
      - "quip"  
  - - # returns:
      Bool: "follows"
  - - Set:value:
      - "@follows"
      - FromText:
          Find:value:
          - FromTextList: 
              Relatives:object:
                - "quip followers"
                - "@before"
          - FromText: "@quip"

- # called when determining which quips to present to the player.
  Define pattern:requires:provides:do:
  - "get player quips"
  - # requires:
    - Nothing:
  - # returns a list of quips:
    - TextList:kind:
      - "quips"
      - "quips"
  - # do:
    - # all possible quips, filtered by the 'filter quip' pattern.
      Set:value:
      - "@quips"
      - FromTextList:
          Objects of:pattern:
            - "quips"
            - "filter quips"  
    - # sort those quips by quip urgency.
      Sort:kind:field:
      - "@quips"
      - "quips"
      - "urgent status"

- # called when determining which quips to present to the player.
  # by default filters to speaker, topic, is permitted/prohibited settings.
  # restrictive quips additionally limit to "directly following" quips.
  Define pattern:requires:provides:do:
  - "filter quips"
  - - Text:kind:
      - "quip"
      - "quip"
  - - # return true to include a quip.
      # unless specifically included, quips are filtered out.
      Bool:initially:
      - "result"
      - false
    - # conversation history during greeting 
      # ( and after the player has chosen a quip )
      # so there's always a valid current quip.
      Text:kind:initially:
      - "current"
      - "quip"
      - "#conversation.history.1"
  - # do:
    - If:do:
      - Is all:
        - # only quips which involve this speaker.
          # note: the default greeting is shared by many speakers
          # so we can't use look at the current target.
          Is:matching:text:
          - "#conversation.target"
          - "equal_to"
          - Object:dot:
            - "@quip"
            - "speaker"
        - # only quips where the player to has something to say.
          Is any:
            - Not:
               Is nothing:
                Object:dot:
                  - "@quip"
                  - "remark"
            - Not:
               Is nothing:
                Object:dot:
                  - "@quip"
                  - "slug"
        - # only quips with the current topic
          Is:matching:text:
            - Object:dot:
                - "@current"
                - "topic"
            - "equal_to"
            - Object:dot:
                - "@quip"
                - "topic"
        - # specifically permitted 
          IsQuipPermitted quip: 
            FromText: "@quip"
        - # and not specifically prevented 
          Not:
            IsQuipProhibited quip: 
              FromText: "@quip"
          
      - # do:
        If:do:else:
        - Not: 
            Object:dot:
              - "@current"
              - "restrictive"
        - - Set:value:
            - "@result"
            - FromBool: true
        - If:do:
          - IsQuipDirectlyFollowing quip:before:
            - FromText: "@quip"
            - FromText: "@current"
          - # do: restrictive and directly follows
            - Set:value:
              - "@result"
              - FromBool: true
