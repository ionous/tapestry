---
Tapestry:
  - Define action:requires:
      - "dropping"
      - - # the actor activating something ( ex. the player. )
          Text:kind:
            - "actor"
            - "actor"
        - # the thing being dropped
          Text:kind:
            - "noun"
            - "thing"
  - Define rule:named:do:
      - "instead of dropping"
      - "the standard dropping checks"
      - - If:assuming:do:
            - Not:
                Is empty: "@response"
            - - Arg:from:
                  - "response"
                  - # can we handle ( locally touch ) the object.
                    # the response will be empty if we can
                    # or an error message if we cant
                    FromText:
                      CanHandle actor:action:noun:
                        - FromText: "@actor"
                        - FromText: "dropping"
                        - FromText: "@noun"
            - - Print: "@response"
  - Define rule:named:do:
      - "dropping"
      - "the standard dropping action"
      - - If:assuming:do:
            - Not:
                Is empty: "@response"
            - - Arg:from:
                  - "response"
                  - FromText:
                      MoveObject obj:dest:
                        - FromText: "@noun"
                        - FromText:
                            ParentOf obj:
                              FromText: "@actor"
            - - Print: "@response"
  - Define rule:do:
      - "report someone dropping"
      - - Say response:with:
            - "someone else drops"
            - "{The: .actor|capitalize!} put down {the: .noun}."
  - Define rule:do:
      - "report dropping"
      - - Say response:with:
            - "player drops"
            - "Dropped."
  - # 
    Define rule:do:
      - "can handle"
      - - If:do:
            - AllTrue:
                - Is:matching:text:
                    - "@action"
                    - "equal_to"
                    - "dropping"
                - Is:matching:text:
                    - WearerOf obj:
                        FromText: "@noun"
                    - "equal_to"
                    - "@actor"
            - - Set:value:
                  - "@response"
                  - FromText:
                      Say response:with:
                        - "can't drop clothing"
                        - "{We:|capitalize!} would have to take {those:.noun} off first."
  - Define rule:do:
      - "can reach"
      - - If:do:
            - AllTrue:
                - Is:matching:text:
                    - "@action"
                    - "equal_to"
                    - "dropping"
                - Is:matching:text:
                    - ParentOf obj:
                        FromText: "@actor"
                    - "equal_to"
                    - LocationOf obj:
                        FromText: "@noun"
            - - Comment: "Tell the player that they've already accomplished the goal they are trying to achieve ( vs. that they can't accomplish what they are trying to achieve. )"
              - Set:value:
                  - "@response"
                  - FromText:
                      Say response:with:
                        - "can't drop what's already there"
                        - "{The: .noun|capitalize!} {are: .noun} already here."
  - Define rule:do:
      - "can reach"
      - - If:do:
            - AllTrue:
                - Is:matching:text:
                    - "@action"
                    - "equal_to"
                    - "dropping"
                - Is:matching:text:
                    - "@actor"
                    - "equal_to"
                    - "@noun"
            - - Set:value:
                  - "@response"
                  - FromText:
                      Say response:with:
                        - "can't drop yourself"
                        - "{We:|capitalize!} lack the dexterity."
