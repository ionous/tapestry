{
  "_core": {
    "name": "core",
    "desc": "core",
    "uses": "group",
    "group": [
      "core"
    ]
  },
  "_debug": {
    "name": "debug",
    "desc": "debug",
    "uses": "group",
    "group": [
      "story",
      "debug"
    ]
  },
  "_eph": {
    "name": "eph",
    "desc": [
      "Ephemera generated by importing a story file.",
      "Ephemera are pre-factual statements which may include contradictory information.",
      "Assembly analyzes them to create a self-consistent data model of facts."
    ],
    "uses": "group",
    "group": [
      "eph"
    ]
  },
  "_eph_pattern_helpers": {
    "name": "eph_pattern_helpers",
    "desc": "eph_pattern_helpers",
    "uses": "group",
    "group": [
      "eph",
      "eph_pattern_helpers"
    ]
  },
  "_eph_relation_helpers": {
    "name": "eph_relation_helpers",
    "desc": "eph_relation_helpers",
    "uses": "group",
    "group": [
      "eph",
      "eph_relation_helpers"
    ]
  },
  "_events": {
    "name": "events",
    "desc": "events",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "events"
    ]
  },
  "_grammar": {
    "name": "grammar",
    "desc": "grammar",
    "uses": "group",
    "group": [
      "grammar"
    ]
  },
  "_kinds": {
    "name": "kinds",
    "desc": "kinds",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "kinds"
    ]
  },
  "_language": {
    "name": "language",
    "desc": "language",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "language"
    ]
  },
  "_list": {
    "name": "list",
    "desc": "list",
    "uses": "group",
    "group": [
      "list"
    ]
  },
  "_literal": {
    "name": "literal",
    "desc": "literal",
    "uses": "group",
    "group": [
      "literal"
    ]
  },
  "_map_making": {
    "name": "map_making",
    "desc": "map_making",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "map_making"
    ]
  },
  "_misc": {
    "name": "misc",
    "desc": "misc",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "misc"
    ]
  },
  "_nouns": {
    "name": "nouns",
    "desc": "nouns",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "nouns"
    ]
  },
  "_patterns": {
    "name": "patterns",
    "desc": "patterns",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "patterns"
    ]
  },
  "_prim": {
    "name": "prim",
    "desc": "prim",
    "uses": "group",
    "group": [
      "prim"
    ]
  },
  "_properties": {
    "name": "properties",
    "desc": "properties",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "properties"
    ]
  },
  "_reader": {
    "name": "reader",
    "desc": "reader",
    "uses": "group",
    "group": [
      "reader"
    ]
  },
  "_rel": {
    "name": "rel",
    "desc": "rel",
    "uses": "group",
    "group": [
      "rel"
    ]
  },
  "_relations": {
    "name": "relations",
    "desc": "relations",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "relations"
    ]
  },
  "_render": {
    "name": "render",
    "desc": "render",
    "uses": "group",
    "group": [
      "render"
    ]
  },
  "_rt": {
    "name": "rt",
    "desc": "rt",
    "uses": "group",
    "group": [
      "rt"
    ]
  },
  "_spec": {
    "name": "spec",
    "desc": "Describes itself using its own types.",
    "uses": "group",
    "group": [
      "spec"
    ]
  },
  "_statements": {
    "name": "statements",
    "desc": "statements",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "statements"
    ]
  },
  "_story": {
    "name": "story",
    "desc": "story",
    "uses": "group",
    "group": [
      "story"
    ]
  },
  "_stubs": {
    "name": "stubs",
    "desc": "stubs",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "stubs"
    ]
  },
  "_testdl": {
    "name": "testdl",
    "desc": "testdl",
    "uses": "group",
    "group": [
      "testdl"
    ]
  },
  "_tests": {
    "name": "tests",
    "desc": "tests",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "tests"
    ]
  },
  "_traits": {
    "name": "traits",
    "desc": "traits",
    "uses": "group",
    "group": [
      "story",
      "debug",
      "traits"
    ]
  },
  "abstract_action": {
    "name": "abstract_action",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "events"
    ],
    "with": {
      "tokens": [
        "$NOTHING"
      ],
      "params": {
        "$NOTHING": {
          "label": "nothing",
          "value": "nothing",
          "key": "$NOTHING",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "nothing",
        "value": "nothing",
        "key": "$NOTHING",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "action": {
    "name": "action",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "as",
        ": ",
        "$ACTION"
      ],
      "params": {
        "$ACTION": {
          "label": "_",
          "type": "text",
          "key": "$ACTION",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "scanner_maker"
      ]
    },
    "desc": {
      "label": "Action",
      "short": "makes a parser scanner producing a script defined action."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$ACTION",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "action_context": {
    "name": "action_context",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "events",
      "positioned"
    ],
    "with": {
      "tokens": [
        "and one ",
        "$KIND",
        " ( the other noun )"
      ],
      "params": {
        "$KIND": {
          "label": "kind",
          "type": "singular_kind",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "kind",
        "type": "singular_kind",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "action_decl": {
    "name": "action_decl",
    "desc": "Declare an activity: Activities help actors perform tasks: for instance, picking up or dropping items.  Activities involve either the player or an npc and possibly one or two other objects.",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "events"
    ],
    "with": {
      "tokens": [
        "Agents can ",
        "$EVENT",
        " and ",
        "$ACTION",
        " requires ",
        "$ACTION_PARAMS",
        "."
      ],
      "params": {
        "$EVENT": {
          "label": "act",
          "type": "event_name",
          "key": "$EVENT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$ACTION": {
          "label": "acting",
          "type": "action_name",
          "key": "$ACTION",
          "internal": false,
          "tag": "action",
          "sel": "action"
        },
        "$ACTION_PARAMS": {
          "label": "action params",
          "type": "action_params",
          "key": "$ACTION_PARAMS",
          "internal": false,
          "tag": "args",
          "sel": "args"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "Event",
    "sign": "Event:action:args:",
    "params": [
      {
        "label": "act",
        "type": "event_name",
        "key": "$EVENT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "acting",
        "type": "action_name",
        "key": "$ACTION",
        "internal": false,
        "tag": "action",
        "sel": "action"
      },
      {
        "label": "action params",
        "type": "action_params",
        "key": "$ACTION_PARAMS",
        "internal": false,
        "tag": "args",
        "sel": "args"
      }
    ]
  },
  "action_name": {
    "name": "action_name",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "events",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$ACTION_NAME"
      ],
      "params": {
        "$ACTION_NAME": {
          "label": "action name",
          "value": null,
          "key": "$ACTION_NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "action name",
        "value": null,
        "key": "$ACTION_NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "action_params": {
    "name": "action_params",
    "uses": "swap",
    "group": [
      "story",
      "debug",
      "events"
    ],
    "with": {
      "tokens": [
        "$COMMON",
        ", or ",
        "$DUAL",
        ", or ",
        "$NONE"
      ],
      "params": {
        "$COMMON": {
          "label": "one or more objects",
          "type": "common_action",
          "key": "$COMMON",
          "internal": false,
          "tag": "common",
          "sel": "common"
        },
        "$DUAL": {
          "label": "two similar objects",
          "type": "paired_action",
          "key": "$DUAL",
          "internal": false,
          "tag": "dual",
          "sel": "dual"
        },
        "$NONE": {
          "label": "nothing",
          "type": "abstract_action",
          "key": "$NONE",
          "internal": false,
          "tag": "none",
          "sel": "none"
        }
      }
    },
    "params": [
      {
        "label": "one or more objects",
        "type": "common_action",
        "key": "$COMMON",
        "internal": false,
        "tag": "common",
        "sel": "common"
      },
      {
        "label": "two similar objects",
        "type": "paired_action",
        "key": "$DUAL",
        "internal": false,
        "tag": "dual",
        "sel": "dual"
      },
      {
        "label": "nothing",
        "type": "abstract_action",
        "key": "$NONE",
        "internal": false,
        "tag": "none",
        "sel": "none"
      }
    ]
  },
  "affinity": {
    "name": "affinity",
    "desc": "Indicates storage for fields and other properties.",
    "uses": "str",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "$BOOL",
        ", ",
        "$NUMBER",
        ", ",
        "$NUM_LIST",
        ", ",
        "$TEXT",
        ", ",
        "$TEXT_LIST",
        ", ",
        "$RECORD",
        ", or ",
        "$RECORD_LIST"
      ],
      "params": {
        "$BOOL": {
          "label": "bool",
          "value": "bool",
          "key": "$BOOL",
          "internal": false,
          "tag": "bool",
          "sel": "bool"
        },
        "$NUMBER": {
          "label": "number",
          "value": "number",
          "key": "$NUMBER",
          "internal": false,
          "tag": "number",
          "sel": "number"
        },
        "$NUM_LIST": {
          "label": "num_list",
          "value": "num_list",
          "key": "$NUM_LIST",
          "internal": false,
          "tag": "num_list",
          "sel": "num_list"
        },
        "$TEXT": {
          "label": "text",
          "value": "text",
          "key": "$TEXT",
          "internal": false,
          "tag": "text",
          "sel": "text"
        },
        "$TEXT_LIST": {
          "label": "text_list",
          "value": "text_list",
          "key": "$TEXT_LIST",
          "internal": false,
          "tag": "text_list",
          "sel": "text_list"
        },
        "$RECORD": {
          "label": "record",
          "value": "record",
          "key": "$RECORD",
          "internal": false,
          "tag": "record",
          "sel": "record"
        },
        "$RECORD_LIST": {
          "label": "record_list",
          "value": "record_list",
          "key": "$RECORD_LIST",
          "internal": false,
          "tag": "record_list",
          "sel": "record_list"
        }
      }
    },
    "params": [
      {
        "label": "bool",
        "value": "bool",
        "key": "$BOOL",
        "internal": false,
        "tag": "bool",
        "sel": "bool"
      },
      {
        "label": "number",
        "value": "number",
        "key": "$NUMBER",
        "internal": false,
        "tag": "number",
        "sel": "number"
      },
      {
        "label": "num_list",
        "value": "num_list",
        "key": "$NUM_LIST",
        "internal": false,
        "tag": "num_list",
        "sel": "num_list"
      },
      {
        "label": "text",
        "value": "text",
        "key": "$TEXT",
        "internal": false,
        "tag": "text",
        "sel": "text"
      },
      {
        "label": "text_list",
        "value": "text_list",
        "key": "$TEXT_LIST",
        "internal": false,
        "tag": "text_list",
        "sel": "text_list"
      },
      {
        "label": "record",
        "value": "record",
        "key": "$RECORD",
        "internal": false,
        "tag": "record",
        "sel": "record"
      },
      {
        "label": "record_list",
        "value": "record_list",
        "key": "$RECORD_LIST",
        "internal": false,
        "tag": "record_list",
        "sel": "record_list"
      }
    ]
  },
  "alias": {
    "name": "alias",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "alias",
        ": ",
        "$NAMES",
        ", ",
        "as noun",
        ": ",
        "$AS_NOUN"
      ],
      "params": {
        "$NAMES": {
          "label": "_",
          "type": "text",
          "repeats": true,
          "key": "$NAMES",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$AS_NOUN": {
          "label": "as noun",
          "type": "text",
          "key": "$AS_NOUN",
          "internal": false,
          "tag": "as_noun",
          "sel": "as_noun"
        }
      },
      "slots": [
        "grammar_maker"
      ]
    },
    "desc": {
      "label": "Alias",
      "short": "allows the user to refer to a noun by one or more other terms."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "repeats": true,
        "key": "$NAMES",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "as noun",
        "type": "text",
        "key": "$AS_NOUN",
        "internal": false,
        "tag": "as_noun",
        "sel": "as_noun"
      }
    ]
  },
  "all_of": {
    "name": "all_of",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "all_of",
        ": ",
        "$SERIES"
      ],
      "params": {
        "$SERIES": {
          "label": "_",
          "type": "scanner_maker",
          "repeats": true,
          "key": "$SERIES",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "scanner_maker"
      ]
    },
    "desc": {
      "label": "All Of",
      "short": "makes a parser scanner"
    },
    "params": [
      {
        "label": "_",
        "type": "scanner_maker",
        "repeats": true,
        "key": "$SERIES",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "all_true": {
    "name": "all_true",
    "uses": "flow",
    "group": [
      "core",
      "logic"
    ],
    "with": {
      "tokens": [
        "all_true",
        ": ",
        "$TEST"
      ],
      "params": {
        "$TEST": {
          "label": "_",
          "type": "bool_eval",
          "repeats": true,
          "key": "$TEST",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "All True",
      "short": "Returns true if all of the evaluations are true."
    },
    "params": [
      {
        "label": "_",
        "type": "bool_eval",
        "repeats": true,
        "key": "$TEST",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "always": {
    "name": "always",
    "uses": "flow",
    "group": [
      "core",
      "logic"
    ],
    "with": {
      "tokens": [
        "always"
      ],
      "params": {},
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Always",
      "short": "Returns true."
    },
    "params": []
  },
  "ana": {
    "name": "ana",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "misc"
    ],
    "with": {
      "tokens": [
        "$A",
        " or ",
        "$AN"
      ],
      "params": {
        "$A": {
          "label": "a",
          "value": "a",
          "key": "$A",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$AN": {
          "label": "an",
          "value": "an",
          "key": "$AN",
          "internal": false,
          "tag": "an",
          "sel": "an"
        }
      }
    },
    "params": [
      {
        "label": "a",
        "value": "a",
        "key": "$A",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "an",
        "value": "an",
        "key": "$AN",
        "internal": false,
        "tag": "an",
        "sel": "an"
      }
    ]
  },
  "any_of": {
    "name": "any_of",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "any_of",
        ": ",
        "$OPTIONS"
      ],
      "params": {
        "$OPTIONS": {
          "label": "_",
          "type": "scanner_maker",
          "repeats": true,
          "key": "$OPTIONS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "scanner_maker"
      ]
    },
    "desc": {
      "label": "Any Of",
      "short": "makes a parser scanner"
    },
    "params": [
      {
        "label": "_",
        "type": "scanner_maker",
        "repeats": true,
        "key": "$OPTIONS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "any_true": {
    "name": "any_true",
    "uses": "flow",
    "group": [
      "core",
      "logic"
    ],
    "with": {
      "tokens": [
        "any_true",
        ": ",
        "$TEST"
      ],
      "params": {
        "$TEST": {
          "label": "_",
          "type": "bool_eval",
          "repeats": true,
          "key": "$TEST",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Any True",
      "short": "Returns true if any of the evaluations are true."
    },
    "params": [
      {
        "label": "_",
        "type": "bool_eval",
        "repeats": true,
        "key": "$TEST",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "are_an": {
    "name": "are_an",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "misc"
    ],
    "with": {
      "tokens": [
        "$ARE",
        ", ",
        "$AREA",
        ", ",
        "$AREAN",
        ", ",
        "$IS",
        ", ",
        "$ISA",
        ", ",
        "$ISAN"
      ],
      "params": {
        "$ARE": {
          "label": "are",
          "value": "are",
          "key": "$ARE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$AREA": {
          "label": "are a",
          "value": "area",
          "key": "$AREA",
          "internal": false,
          "tag": "area",
          "sel": "area"
        },
        "$AREAN": {
          "label": "are an",
          "value": "arean",
          "key": "$AREAN",
          "internal": false,
          "tag": "arean",
          "sel": "arean"
        },
        "$IS": {
          "label": "is",
          "value": "is",
          "key": "$IS",
          "internal": false,
          "tag": "is",
          "sel": "is"
        },
        "$ISA": {
          "label": "is a",
          "value": "isa",
          "key": "$ISA",
          "internal": false,
          "tag": "isa",
          "sel": "isa"
        },
        "$ISAN": {
          "label": "is an",
          "value": "isan",
          "key": "$ISAN",
          "internal": false,
          "tag": "isan",
          "sel": "isan"
        }
      }
    },
    "params": [
      {
        "label": "are",
        "value": "are",
        "key": "$ARE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "are a",
        "value": "area",
        "key": "$AREA",
        "internal": false,
        "tag": "area",
        "sel": "area"
      },
      {
        "label": "are an",
        "value": "arean",
        "key": "$AREAN",
        "internal": false,
        "tag": "arean",
        "sel": "arean"
      },
      {
        "label": "is",
        "value": "is",
        "key": "$IS",
        "internal": false,
        "tag": "is",
        "sel": "is"
      },
      {
        "label": "is a",
        "value": "isa",
        "key": "$ISA",
        "internal": false,
        "tag": "isa",
        "sel": "isa"
      },
      {
        "label": "is an",
        "value": "isan",
        "key": "$ISAN",
        "internal": false,
        "tag": "isan",
        "sel": "isan"
      }
    ]
  },
  "are_being": {
    "name": "are_being",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "misc"
    ],
    "with": {
      "tokens": [
        "$ARE",
        " or ",
        "$IS"
      ],
      "params": {
        "$ARE": {
          "label": "are",
          "value": "are",
          "key": "$ARE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$IS": {
          "label": "is",
          "value": "is",
          "key": "$IS",
          "internal": false,
          "tag": "is",
          "sel": "is"
        }
      }
    },
    "params": [
      {
        "label": "are",
        "value": "are",
        "key": "$ARE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "is",
        "value": "is",
        "key": "$IS",
        "internal": false,
        "tag": "is",
        "sel": "is"
      }
    ]
  },
  "are_either": {
    "name": "are_either",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "$CANBE",
        " ",
        "$EITHER"
      ],
      "params": {
        "$CANBE": {
          "label": "can be",
          "value": "canbe",
          "key": "$CANBE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$EITHER": {
          "label": "are either",
          "value": "either",
          "key": "$EITHER",
          "internal": false,
          "tag": "either",
          "sel": "either"
        }
      }
    },
    "params": [
      {
        "label": "can be",
        "value": "canbe",
        "key": "$CANBE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "are either",
        "value": "either",
        "key": "$EITHER",
        "internal": false,
        "tag": "either",
        "sel": "either"
      }
    ]
  },
  "arg": {
    "name": "arg",
    "uses": "flow",
    "group": [
      "rt"
    ],
    "with": {
      "tokens": [
        "arg",
        ": ",
        "$NAME",
        ", ",
        "from",
        ": ",
        "$FROM"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "from",
          "type": "assignment",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        }
      }
    },
    "desc": {
      "label": "Arg",
      "short": "Runtime version of argument"
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "assignment",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      }
    ]
  },
  "as_num": {
    "name": "as_num",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "as_num",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "list_iterator"
      ]
    },
    "desc": {
      "label": "As Num",
      "short": "Define the name of a number variable."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "as_rec": {
    "name": "as_rec",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "as_rec",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "list_iterator"
      ]
    },
    "desc": {
      "label": "As Rec",
      "short": "Define the name of a record variable."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "as_txt": {
    "name": "as_txt",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "as_txt",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "list_iterator"
      ]
    },
    "desc": {
      "label": "As Txt",
      "short": "Define the name of a text variable."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "aspect": {
    "name": "aspect",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "traits",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$ASPECT"
      ],
      "params": {
        "$ASPECT": {
          "label": "aspect",
          "value": null,
          "key": "$ASPECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "aspect",
        "value": null,
        "key": "$ASPECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "aspect_property": {
    "name": "aspect_property",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "an aspect ",
        "$ASPECT"
      ],
      "params": {
        "$ASPECT": {
          "label": "aspect",
          "type": "text",
          "key": "$ASPECT",
          "internal": false,
          "tag": "of",
          "sel": "of"
        }
      },
      "slots": [
        "property_slot"
      ]
    },
    "lede": "aspect",
    "sign": "aspect of:",
    "params": [
      {
        "label": "aspect",
        "type": "text",
        "key": "$ASPECT",
        "internal": false,
        "tag": "of",
        "sel": "of"
      }
    ]
  },
  "aspect_traits": {
    "name": "aspect_traits",
    "desc": "Add traits to an aspect",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "traits"
    ],
    "with": {
      "tokens": [
        "$ASPECT",
        " ",
        "$TRAIT_PHRASE"
      ],
      "params": {
        "$ASPECT": {
          "label": "aspect",
          "type": "aspect",
          "key": "$ASPECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$TRAIT_PHRASE": {
          "label": "trait phrase",
          "type": "trait_phrase",
          "key": "$TRAIT_PHRASE",
          "internal": false,
          "tag": "trait_phrase",
          "sel": "trait_phrase"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "aspect",
        "type": "aspect",
        "key": "$ASPECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "trait phrase",
        "type": "trait_phrase",
        "key": "$TRAIT_PHRASE",
        "internal": false,
        "tag": "trait_phrase",
        "sel": "trait_phrase"
      }
    ]
  },
  "assign": {
    "name": "assign",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "let",
        ": ",
        "$VAR",
        ", ",
        "be",
        ": ",
        "$FROM"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "be",
          "type": "assignment",
          "key": "$FROM",
          "internal": false,
          "tag": "be",
          "sel": "be"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Assign",
      "short": "Assigns a variable to a value."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "be",
        "type": "assignment",
        "key": "$FROM",
        "internal": false,
        "tag": "be",
        "sel": "be"
      }
    ]
  },
  "assignment": {
    "name": "assignment",
    "desc": "Helper for setting variables.",
    "uses": "slot",
    "group": [
      "rt"
    ],
    "params": []
  },
  "at_least": {
    "name": "at_least",
    "uses": "flow",
    "group": [
      "core",
      "comparison"
    ],
    "with": {
      "tokens": [
        "at_least"
      ],
      "params": {},
      "slots": [
        "comparator"
      ]
    },
    "desc": {
      "label": "At Least",
      "short": "The first value is greater than or equal to the second value."
    },
    "params": []
  },
  "at_most": {
    "name": "at_most",
    "uses": "flow",
    "group": [
      "core",
      "comparison"
    ],
    "with": {
      "tokens": [
        "at_most"
      ],
      "params": {},
      "slots": [
        "comparator"
      ]
    },
    "desc": {
      "label": "At Most",
      "short": "The first value is less than or equal to the second value."
    },
    "params": []
  },
  "blankline": {
    "name": "blankline",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "p"
      ],
      "params": {},
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Blankline",
      "short": "Add a single blank line following some text."
    },
    "params": []
  },
  "bool": {
    "name": "bool",
    "uses": "str",
    "group": [
      "prim"
    ],
    "with": {
      "tokens": [
        "$TRUE",
        " or ",
        "$FALSE"
      ],
      "params": {
        "$TRUE": {
          "label": "true",
          "value": "true",
          "key": "$TRUE",
          "internal": false,
          "tag": "true",
          "sel": "true"
        },
        "$FALSE": {
          "label": "false",
          "value": "false",
          "key": "$FALSE",
          "internal": false,
          "tag": "false",
          "sel": "false"
        }
      }
    },
    "params": [
      {
        "label": "true",
        "value": "true",
        "key": "$TRUE",
        "internal": false,
        "tag": "true",
        "sel": "true"
      },
      {
        "label": "false",
        "value": "false",
        "key": "$FALSE",
        "internal": false,
        "tag": "false",
        "sel": "false"
      }
    ]
  },
  "bool_eval": {
    "name": "bool_eval",
    "desc": "Statements which return true/false values.",
    "uses": "slot",
    "group": [
      "rt"
    ],
    "params": []
  },
  "bool_property": {
    "name": "bool_property",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "a true/false value ",
        "named ",
        "$NAME",
        " ( ",
        "$TYPE",
        " )",
        " ",
        "$INITIALLY"
      ],
      "params": {
        "$NAMED_PROPERTY": {
          "label": "named property",
          "type": "named_property",
          "expanded": true,
          "key": "$NAMED_PROPERTY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NAME": {
          "label": "name",
          "type": "text",
          "embedded": true,
          "key": "$NAME",
          "internal": false,
          "tag": "named",
          "sel": "named"
        },
        "$TYPE": {
          "label": "of",
          "type": "text",
          "optional": true,
          "embedded": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "of",
          "sel": "of"
        },
        "$INITIALLY": {
          "label": "initially",
          "type": "bool_eval",
          "optional": true,
          "key": "$INITIALLY",
          "internal": false,
          "tag": "initially",
          "sel": "initially"
        }
      },
      "slots": [
        "property_slot"
      ]
    },
    "lede": "bool",
    "sign": "bool named:of:initially:",
    "params": [
      {
        "label": "named property",
        "type": "named_property",
        "expanded": true,
        "key": "$NAMED_PROPERTY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "name",
        "type": "text",
        "embedded": true,
        "key": "$NAME",
        "internal": false,
        "tag": "named",
        "sel": "named"
      },
      {
        "label": "of",
        "type": "text",
        "optional": true,
        "embedded": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "of",
        "sel": "of"
      },
      {
        "label": "initially",
        "type": "bool_eval",
        "optional": true,
        "key": "$INITIALLY",
        "internal": false,
        "tag": "initially",
        "sel": "initially"
      }
    ]
  },
  "bool_value": {
    "name": "bool_value",
    "uses": "flow",
    "group": [
      "literal"
    ],
    "with": {
      "tokens": [
        "bool",
        ": ",
        "$BOOL",
        ", ",
        "class",
        ": ",
        "$CLASS"
      ],
      "params": {
        "$BOOL": {
          "label": "_",
          "type": "bool",
          "key": "$BOOL",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$CLASS": {
          "label": "class",
          "type": "text",
          "optional": true,
          "key": "$CLASS",
          "internal": false,
          "tag": "class",
          "sel": "class"
        }
      },
      "slots": [
        "bool_eval",
        "literal_value"
      ]
    },
    "desc": {
      "label": "Bool Value",
      "short": "Specify an explicit true or false."
    },
    "params": [
      {
        "label": "_",
        "type": "bool",
        "key": "$BOOL",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "class",
        "type": "text",
        "optional": true,
        "key": "$CLASS",
        "internal": false,
        "tag": "class",
        "sel": "class"
      }
    ]
  },
  "bracket_text": {
    "name": "bracket_text",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "brackets",
        " ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Bracket Text",
      "short": "Sandwiches text printed during a block and puts them inside parenthesis '()'."
    },
    "params": [
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "brancher": {
    "name": "brancher",
    "desc": "Helper for choose action.",
    "uses": "slot",
    "group": [
      "core"
    ],
    "params": []
  },
  "break": {
    "name": "break",
    "uses": "flow",
    "group": [
      "core",
      "flow"
    ],
    "with": {
      "tokens": [
        "break"
      ],
      "params": {},
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Break",
      "short": "In a repeating loop, exit the loop."
    },
    "params": []
  },
  "buffer_text": {
    "name": "buffer_text",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "buffers",
        " ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "params": [
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "call_cycle": {
    "name": "call_cycle",
    "uses": "flow",
    "group": [
      "core",
      "internal"
    ],
    "with": {
      "tokens": [
        "cycle",
        ": ",
        "$NAME",
        ", ",
        "over",
        ": ",
        "$PARTS"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PARTS": {
          "label": "over",
          "type": "text_eval",
          "repeats": true,
          "key": "$PARTS",
          "internal": false,
          "tag": "over",
          "sel": "over"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Call Cycle",
      "short": "Runtime version of cycle_text"
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "over",
        "type": "text_eval",
        "repeats": true,
        "key": "$PARTS",
        "internal": false,
        "tag": "over",
        "sel": "over"
      }
    ]
  },
  "call_pattern": {
    "name": "call_pattern",
    "uses": "flow",
    "group": [
      "core"
    ],
    "with": {
      "tokens": [
        "determine",
        ": ",
        "$PATTERN",
        ", ",
        "args",
        ": ",
        "$ARGUMENTS"
      ],
      "params": {
        "$PATTERN": {
          "label": "_",
          "type": "pattern_name",
          "key": "$PATTERN",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$ARGUMENTS": {
          "label": "args",
          "type": "arg",
          "repeats": true,
          "key": "$ARGUMENTS",
          "internal": false,
          "tag": "args",
          "sel": "args"
        }
      },
      "slots": [
        "execute",
        "bool_eval",
        "number_eval",
        "text_eval",
        "record_eval",
        "num_list_eval",
        "text_list_eval",
        "record_list_eval"
      ]
    },
    "desc": {
      "label": "Call Pattern",
      "short": "Executes a pattern, and potentially returns a value."
    },
    "params": [
      {
        "label": "_",
        "type": "pattern_name",
        "key": "$PATTERN",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "args",
        "type": "arg",
        "repeats": true,
        "key": "$ARGUMENTS",
        "internal": false,
        "tag": "args",
        "sel": "args"
      }
    ]
  },
  "call_send": {
    "name": "call_send",
    "uses": "flow",
    "group": [
      "core"
    ],
    "with": {
      "tokens": [
        "send",
        ": ",
        "$PATH",
        ", ",
        "event",
        ": ",
        "$EVENT"
      ],
      "params": {
        "$PATH": {
          "label": "_",
          "type": "text_list_eval",
          "key": "$PATH",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$EVENT": {
          "label": "event",
          "type": "bool_eval",
          "key": "$EVENT",
          "internal": false,
          "tag": "event",
          "sel": "event"
        }
      },
      "slots": [
        "execute",
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Call Send",
      "short": [
        "Triggers a event, calling the passed event ( a pattern ) for the handlers of the objects on the passed path.",
        "Although the event advertises it can take any bool evaluation, only pattern calls are supported.",
        "Returns a true/false success value."
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text_list_eval",
        "key": "$PATH",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "event",
        "type": "bool_eval",
        "key": "$EVENT",
        "internal": false,
        "tag": "event",
        "sel": "event"
      }
    ]
  },
  "call_shuffle": {
    "name": "call_shuffle",
    "uses": "flow",
    "group": [
      "core",
      "internal"
    ],
    "with": {
      "tokens": [
        "shuffle",
        ": ",
        "$NAME",
        ", ",
        "over",
        ": ",
        "$PARTS",
        ", ",
        "-",
        ": ",
        "$INDICES"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PARTS": {
          "label": "over",
          "type": "text_eval",
          "repeats": true,
          "key": "$PARTS",
          "internal": false,
          "tag": "over",
          "sel": "over"
        },
        "$INDICES": {
          "label": "-",
          "type": "shuffler",
          "key": "$INDICES",
          "internal": true,
          "tag": "-",
          "sel": "-"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Call Shuffle",
      "short": "Runtime version of shuffle_text"
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "over",
        "type": "text_eval",
        "repeats": true,
        "key": "$PARTS",
        "internal": false,
        "tag": "over",
        "sel": "over"
      },
      {
        "label": "-",
        "type": "shuffler",
        "key": "$INDICES",
        "internal": true,
        "tag": "-",
        "sel": "-"
      }
    ]
  },
  "call_terminal": {
    "name": "call_terminal",
    "uses": "flow",
    "group": [
      "core",
      "internal"
    ],
    "with": {
      "tokens": [
        "stopping",
        ": ",
        "$NAME",
        ", ",
        "over",
        ": ",
        "$PARTS"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PARTS": {
          "label": "over",
          "type": "text_eval",
          "repeats": true,
          "key": "$PARTS",
          "internal": false,
          "tag": "over",
          "sel": "over"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Call Terminal",
      "short": "Runtime version of stopping_text"
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "over",
        "type": "text_eval",
        "repeats": true,
        "key": "$PARTS",
        "internal": false,
        "tag": "over",
        "sel": "over"
      }
    ]
  },
  "call_trigger": {
    "name": "call_trigger",
    "uses": "flow",
    "group": [
      "core",
      "internal"
    ],
    "with": {
      "tokens": [
        "trigger",
        ": ",
        "$NAME",
        ", ",
        "on",
        ": ",
        "$TRIGGER",
        ", ",
        "num",
        ": ",
        "$NUM"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$TRIGGER": {
          "label": "on",
          "type": "trigger",
          "key": "$TRIGGER",
          "internal": false,
          "tag": "on",
          "sel": "on"
        },
        "$NUM": {
          "label": "num",
          "type": "number_eval",
          "key": "$NUM",
          "internal": false,
          "tag": "num",
          "sel": "num"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Call Trigger",
      "short": "Runtime version of count_of"
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "on",
        "type": "trigger",
        "key": "$TRIGGER",
        "internal": false,
        "tag": "on",
        "sel": "on"
      },
      {
        "label": "num",
        "type": "number_eval",
        "key": "$NUM",
        "internal": false,
        "tag": "num",
        "sel": "num"
      }
    ]
  },
  "capitalize": {
    "name": "capitalize",
    "uses": "flow",
    "group": [
      "core",
      "format"
    ],
    "with": {
      "tokens": [
        "capitalize",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "_",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Capitalize",
      "short": "Returns new text, with the first letter turned into uppercase."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "certainties": {
    "name": "certainties",
    "desc": "Give a kind a trait",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "$PLURAL_KINDS",
        " ",
        "$ARE_BEING",
        " ",
        "$CERTAINTY",
        " ",
        "$TRAIT",
        "."
      ],
      "params": {
        "$PLURAL_KINDS": {
          "label": "plural kinds",
          "type": "plural_kinds",
          "key": "$PLURAL_KINDS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$ARE_BEING": {
          "label": "are being",
          "type": "are_being",
          "key": "$ARE_BEING",
          "internal": false,
          "tag": "are_being",
          "sel": "are_being"
        },
        "$CERTAINTY": {
          "label": "certainty",
          "type": "certainty",
          "key": "$CERTAINTY",
          "internal": false,
          "tag": "certainty",
          "sel": "certainty"
        },
        "$TRAIT": {
          "label": "trait",
          "type": "trait",
          "key": "$TRAIT",
          "internal": false,
          "tag": "trait",
          "sel": "trait"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "plural kinds",
        "type": "plural_kinds",
        "key": "$PLURAL_KINDS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "are being",
        "type": "are_being",
        "key": "$ARE_BEING",
        "internal": false,
        "tag": "are_being",
        "sel": "are_being"
      },
      {
        "label": "certainty",
        "type": "certainty",
        "key": "$CERTAINTY",
        "internal": false,
        "tag": "certainty",
        "sel": "certainty"
      },
      {
        "label": "trait",
        "type": "trait",
        "key": "$TRAIT",
        "internal": false,
        "tag": "trait",
        "sel": "trait"
      }
    ]
  },
  "certainty": {
    "name": "certainty",
    "desc": {
      "label": "Certainty",
      "short": "Whether an trait applies to a kind of noun.",
      "long": ""
    },
    "uses": "str",
    "group": [
      "story",
      "debug",
      "properties",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$USUALLY",
        ", ",
        "$ALWAYS",
        ", ",
        "$SELDOM",
        ", or ",
        "$NEVER"
      ],
      "params": {
        "$USUALLY": {
          "label": "usually",
          "value": "usually",
          "key": "$USUALLY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$ALWAYS": {
          "label": "always",
          "value": "always",
          "key": "$ALWAYS",
          "internal": false,
          "tag": "always",
          "sel": "always"
        },
        "$SELDOM": {
          "label": "seldom",
          "value": "seldom",
          "key": "$SELDOM",
          "internal": false,
          "tag": "seldom",
          "sel": "seldom"
        },
        "$NEVER": {
          "label": "never",
          "value": "never",
          "key": "$NEVER",
          "internal": false,
          "tag": "never",
          "sel": "never"
        }
      }
    },
    "params": [
      {
        "label": "usually",
        "value": "usually",
        "key": "$USUALLY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "always",
        "value": "always",
        "key": "$ALWAYS",
        "internal": false,
        "tag": "always",
        "sel": "always"
      },
      {
        "label": "seldom",
        "value": "seldom",
        "key": "$SELDOM",
        "internal": false,
        "tag": "seldom",
        "sel": "seldom"
      },
      {
        "label": "never",
        "value": "never",
        "key": "$NEVER",
        "internal": false,
        "tag": "never",
        "sel": "never"
      }
    ]
  },
  "choice_spec": {
    "name": "choice_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "pick",
        ": ",
        "$NAME",
        ", ",
        "label",
        ": ",
        "$LABEL",
        ", ",
        "type",
        ": ",
        "$TYPE"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$LABEL": {
          "label": "label",
          "type": "text",
          "optional": true,
          "key": "$LABEL",
          "internal": false,
          "tag": "label",
          "sel": "label"
        },
        "$TYPE": {
          "label": "type",
          "type": "text",
          "optional": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "type",
          "sel": "type"
        }
      }
    },
    "desc": {
      "label": "Choice Spec",
      "short": [
        "for swap choices",
        "if either label or type are not specified, they are derived from the name."
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "label",
        "type": "text",
        "optional": true,
        "key": "$LABEL",
        "internal": false,
        "tag": "label",
        "sel": "label"
      },
      {
        "label": "type",
        "type": "text",
        "optional": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "type",
        "sel": "type"
      }
    ]
  },
  "choose_action": {
    "name": "choose_action",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "if",
        ": ",
        "$IF",
        ", ",
        "does",
        ": ",
        "$DOES",
        ", ",
        "else",
        ": ",
        "$ELSE"
      ],
      "params": {
        "$IF": {
          "label": "_",
          "type": "bool_eval",
          "key": "$IF",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        },
        "$ELSE": {
          "label": "else",
          "type": "brancher",
          "optional": true,
          "key": "$ELSE",
          "internal": false,
          "tag": "else",
          "sel": "else"
        }
      },
      "slots": [
        "execute",
        "brancher"
      ]
    },
    "desc": {
      "label": "Choose Action",
      "short": "An if statement."
    },
    "params": [
      {
        "label": "_",
        "type": "bool_eval",
        "key": "$IF",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      },
      {
        "label": "else",
        "type": "brancher",
        "optional": true,
        "key": "$ELSE",
        "internal": false,
        "tag": "else",
        "sel": "else"
      }
    ]
  },
  "choose_more": {
    "name": "choose_more",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "else_if",
        ": ",
        "$IF",
        ", ",
        "does",
        ": ",
        "$DOES",
        ", ",
        "else",
        ": ",
        "$ELSE"
      ],
      "params": {
        "$IF": {
          "label": "_",
          "type": "bool_eval",
          "key": "$IF",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        },
        "$ELSE": {
          "label": "else",
          "type": "brancher",
          "optional": true,
          "key": "$ELSE",
          "internal": false,
          "tag": "else",
          "sel": "else"
        }
      },
      "slots": [
        "brancher"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "bool_eval",
        "key": "$IF",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      },
      {
        "label": "else",
        "type": "brancher",
        "optional": true,
        "key": "$ELSE",
        "internal": false,
        "tag": "else",
        "sel": "else"
      }
    ]
  },
  "choose_more_value": {
    "name": "choose_more_value",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "else_if",
        ": ",
        "$ASSIGN",
        ", ",
        "from",
        ": ",
        "$FROM",
        ", ",
        "and",
        ": ",
        "$FILTER",
        ", ",
        "does",
        ": ",
        "$DOES",
        ", ",
        "else",
        ": ",
        "$ELSE"
      ],
      "params": {
        "$ASSIGN": {
          "label": "_",
          "type": "text",
          "key": "$ASSIGN",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "from",
          "type": "assignment",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$FILTER": {
          "label": "and",
          "type": "bool_eval",
          "key": "$FILTER",
          "internal": false,
          "tag": "and",
          "sel": "and"
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        },
        "$ELSE": {
          "label": "else",
          "type": "brancher",
          "optional": true,
          "key": "$ELSE",
          "internal": false,
          "tag": "else",
          "sel": "else"
        }
      },
      "slots": [
        "brancher"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$ASSIGN",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "assignment",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "and",
        "type": "bool_eval",
        "key": "$FILTER",
        "internal": false,
        "tag": "and",
        "sel": "and"
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      },
      {
        "label": "else",
        "type": "brancher",
        "optional": true,
        "key": "$ELSE",
        "internal": false,
        "tag": "else",
        "sel": "else"
      }
    ]
  },
  "choose_nothing_else": {
    "name": "choose_nothing_else",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "else_do",
        " ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "brancher"
      ]
    },
    "params": [
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "choose_num": {
    "name": "choose_num",
    "uses": "flow",
    "group": [
      "core",
      "math"
    ],
    "with": {
      "tokens": [
        "num",
        " ",
        "if",
        ": ",
        "$IF",
        ", ",
        "then",
        ": ",
        "$TRUE",
        ", ",
        "else",
        ": ",
        "$FALSE"
      ],
      "params": {
        "$IF": {
          "label": "if",
          "type": "bool_eval",
          "key": "$IF",
          "internal": false,
          "tag": "if",
          "sel": "if"
        },
        "$TRUE": {
          "label": "then",
          "type": "number_eval",
          "key": "$TRUE",
          "internal": false,
          "tag": "then",
          "sel": "then"
        },
        "$FALSE": {
          "label": "else",
          "type": "number_eval",
          "optional": true,
          "key": "$FALSE",
          "internal": false,
          "tag": "else",
          "sel": "else"
        }
      },
      "slots": [
        "number_eval"
      ]
    },
    "desc": {
      "label": "Choose Num",
      "short": "Pick one of two numbers based on a boolean test."
    },
    "params": [
      {
        "label": "if",
        "type": "bool_eval",
        "key": "$IF",
        "internal": false,
        "tag": "if",
        "sel": "if"
      },
      {
        "label": "then",
        "type": "number_eval",
        "key": "$TRUE",
        "internal": false,
        "tag": "then",
        "sel": "then"
      },
      {
        "label": "else",
        "type": "number_eval",
        "optional": true,
        "key": "$FALSE",
        "internal": false,
        "tag": "else",
        "sel": "else"
      }
    ]
  },
  "choose_text": {
    "name": "choose_text",
    "uses": "flow",
    "group": [
      "core",
      "format"
    ],
    "with": {
      "tokens": [
        "txt",
        " ",
        "if",
        ": ",
        "$IF",
        ", ",
        "then",
        ": ",
        "$TRUE",
        ", ",
        "else",
        ": ",
        "$FALSE"
      ],
      "params": {
        "$IF": {
          "label": "if",
          "type": "bool_eval",
          "key": "$IF",
          "internal": false,
          "tag": "if",
          "sel": "if"
        },
        "$TRUE": {
          "label": "then",
          "type": "text_eval",
          "key": "$TRUE",
          "internal": false,
          "tag": "then",
          "sel": "then"
        },
        "$FALSE": {
          "label": "else",
          "type": "text_eval",
          "optional": true,
          "key": "$FALSE",
          "internal": false,
          "tag": "else",
          "sel": "else"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Choose Text",
      "short": "Pick one of two strings based on a boolean test."
    },
    "params": [
      {
        "label": "if",
        "type": "bool_eval",
        "key": "$IF",
        "internal": false,
        "tag": "if",
        "sel": "if"
      },
      {
        "label": "then",
        "type": "text_eval",
        "key": "$TRUE",
        "internal": false,
        "tag": "then",
        "sel": "then"
      },
      {
        "label": "else",
        "type": "text_eval",
        "optional": true,
        "key": "$FALSE",
        "internal": false,
        "tag": "else",
        "sel": "else"
      }
    ]
  },
  "choose_value": {
    "name": "choose_value",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "if",
        ": ",
        "$ASSIGN",
        ", ",
        "from",
        ": ",
        "$FROM",
        ", ",
        "and",
        ": ",
        "$FILTER",
        ", ",
        "does",
        ": ",
        "$DOES",
        ", ",
        "else",
        ": ",
        "$ELSE"
      ],
      "params": {
        "$ASSIGN": {
          "label": "_",
          "type": "text",
          "key": "$ASSIGN",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "from",
          "type": "assignment",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$FILTER": {
          "label": "and",
          "type": "bool_eval",
          "key": "$FILTER",
          "internal": false,
          "tag": "and",
          "sel": "and"
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        },
        "$ELSE": {
          "label": "else",
          "type": "brancher",
          "optional": true,
          "key": "$ELSE",
          "internal": false,
          "tag": "else",
          "sel": "else"
        }
      },
      "slots": [
        "execute",
        "brancher"
      ]
    },
    "desc": {
      "label": "Choose Value",
      "short": "An if statement with local assignment."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$ASSIGN",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "assignment",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "and",
        "type": "bool_eval",
        "key": "$FILTER",
        "internal": false,
        "tag": "and",
        "sel": "and"
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      },
      {
        "label": "else",
        "type": "brancher",
        "optional": true,
        "key": "$ELSE",
        "internal": false,
        "tag": "else",
        "sel": "else"
      }
    ]
  },
  "comma_text": {
    "name": "comma_text",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "commas",
        " ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Comma Text",
      "short": "Separates words with commas, and 'and'."
    },
    "params": [
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "comment": {
    "name": "comment",
    "desc": {
      "label": "Add a note",
      "short": "Information about the story for you and other authors.",
      "long": ""
    },
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "language"
    ],
    "with": {
      "tokens": [
        "Note: ",
        "$LINES"
      ],
      "params": {
        "$LINES": {
          "label": "comment",
          "type": "lines",
          "key": "$LINES",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "story_statement",
        "execute"
      ]
    },
    "params": [
      {
        "label": "comment",
        "type": "lines",
        "key": "$LINES",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "common_action": {
    "name": "common_action",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "events",
      "positioned"
    ],
    "with": {
      "tokens": [
        "one ",
        "$KIND",
        " ( the noun ) ",
        "$ACTION_CONTEXT"
      ],
      "params": {
        "$KIND": {
          "label": "kind",
          "type": "singular_kind",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$ACTION_CONTEXT": {
          "label": "action context",
          "type": "action_context",
          "optional": true,
          "key": "$ACTION_CONTEXT",
          "internal": false,
          "tag": "action_context",
          "sel": "action_context"
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "kind",
        "type": "singular_kind",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "action context",
        "type": "action_context",
        "optional": true,
        "key": "$ACTION_CONTEXT",
        "internal": false,
        "tag": "action_context",
        "sel": "action_context"
      }
    ]
  },
  "comparator": {
    "name": "comparator",
    "desc": "Helper for comparing values.",
    "uses": "slot",
    "group": [
      "core"
    ],
    "params": []
  },
  "compare_num": {
    "name": "compare_num",
    "uses": "flow",
    "group": [
      "core",
      "logic"
    ],
    "with": {
      "tokens": [
        "cmp",
        ": ",
        "$A",
        ", ",
        "is",
        ": ",
        "$IS",
        ", ",
        "num",
        ": ",
        "$B"
      ],
      "params": {
        "$A": {
          "label": "_",
          "type": "number_eval",
          "key": "$A",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$IS": {
          "label": "is",
          "type": "comparator",
          "key": "$IS",
          "internal": false,
          "tag": "is",
          "sel": "is"
        },
        "$B": {
          "label": "num",
          "type": "number_eval",
          "key": "$B",
          "internal": false,
          "tag": "num",
          "sel": "num"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Compare Num",
      "short": "True if eq,ne,gt,lt,ge,le two numbers."
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$A",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "is",
        "type": "comparator",
        "key": "$IS",
        "internal": false,
        "tag": "is",
        "sel": "is"
      },
      {
        "label": "num",
        "type": "number_eval",
        "key": "$B",
        "internal": false,
        "tag": "num",
        "sel": "num"
      }
    ]
  },
  "compare_text": {
    "name": "compare_text",
    "uses": "flow",
    "group": [
      "core",
      "logic"
    ],
    "with": {
      "tokens": [
        "cmp",
        ": ",
        "$A",
        ", ",
        "is",
        ": ",
        "$IS",
        ", ",
        "txt",
        ": ",
        "$B"
      ],
      "params": {
        "$A": {
          "label": "_",
          "type": "text_eval",
          "key": "$A",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$IS": {
          "label": "is",
          "type": "comparator",
          "key": "$IS",
          "internal": false,
          "tag": "is",
          "sel": "is"
        },
        "$B": {
          "label": "txt",
          "type": "text_eval",
          "key": "$B",
          "internal": false,
          "tag": "txt",
          "sel": "txt"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Compare Text",
      "short": "True if eq,ne,gt,lt,ge,le two strings ( lexical. )"
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$A",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "is",
        "type": "comparator",
        "key": "$IS",
        "internal": false,
        "tag": "is",
        "sel": "is"
      },
      {
        "label": "txt",
        "type": "text_eval",
        "key": "$B",
        "internal": false,
        "tag": "txt",
        "sel": "txt"
      }
    ]
  },
  "count_of": {
    "name": "count_of",
    "desc": {
      "label": "count_of",
      "short": "A guard which returns true based on a counter.",
      "long": "Counters start at zero and are incremented every time the guard gets checked."
    },
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "stubs",
      "logic",
      "positioned"
    ],
    "with": {
      "tokens": [
        "trigger ",
        "$TRIGGER",
        " ",
        "$NUM"
      ],
      "params": {
        "$TRIGGER": {
          "label": "_",
          "type": "trigger",
          "key": "$TRIGGER",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NUM": {
          "label": "num",
          "type": "number_eval",
          "key": "$NUM",
          "internal": false,
          "tag": "num",
          "sel": "num"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "trigger",
        "key": "$TRIGGER",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "num",
        "type": "number_eval",
        "key": "$NUM",
        "internal": false,
        "tag": "num",
        "sel": "num"
      }
    ]
  },
  "cycle_text": {
    "name": "cycle_text",
    "desc": "When called multiple times, returns each of its inputs in turn.",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "stubs",
      "output",
      "positioned"
    ],
    "with": {
      "tokens": [
        "cycle ",
        "$PARTS"
      ],
      "params": {
        "$PARTS": {
          "label": "_",
          "type": "text_eval",
          "repeats": true,
          "key": "$PARTS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "repeats": true,
        "key": "$PARTS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "debug_log": {
    "name": "debug_log",
    "uses": "flow",
    "group": [
      "debug"
    ],
    "with": {
      "tokens": [
        "log",
        ": ",
        "$VALUE",
        ", ",
        "as",
        ": ",
        "$LOG_LEVEL"
      ],
      "params": {
        "$VALUE": {
          "label": "_",
          "type": "assignment",
          "key": "$VALUE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$LOG_LEVEL": {
          "label": "as",
          "type": "logging_level",
          "optional": true,
          "key": "$LOG_LEVEL",
          "internal": false,
          "tag": "as",
          "sel": "as"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Debug Log",
      "short": "Debug log"
    },
    "params": [
      {
        "label": "_",
        "type": "assignment",
        "key": "$VALUE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "as",
        "type": "logging_level",
        "optional": true,
        "key": "$LOG_LEVEL",
        "internal": false,
        "tag": "as",
        "sel": "as"
      }
    ]
  },
  "determiner": {
    "name": "determiner",
    "desc": "Determiners: modify a word they are associated to designate specificity or, sometimes, a count.  For instance: \"some\" fish hooks, \"a\" pineapple, \"75\" triangles, \"our\" Trevor.",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "with": {
      "tokens": [
        "$A",
        ", ",
        "$AN",
        ", ",
        "$THE",
        ", ",
        "$OUR",
        ", or ",
        "$DETERMINER"
      ],
      "params": {
        "$A": {
          "label": "a",
          "value": "a",
          "key": "$A",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$AN": {
          "label": "an",
          "value": "an",
          "key": "$AN",
          "internal": false,
          "tag": "an",
          "sel": "an"
        },
        "$THE": {
          "label": "the",
          "value": "the",
          "key": "$THE",
          "internal": false,
          "tag": "the",
          "sel": "the"
        },
        "$OUR": {
          "label": "our",
          "value": "our",
          "key": "$OUR",
          "internal": false,
          "tag": "our",
          "sel": "our"
        },
        "$DETERMINER": {
          "label": "other determiner",
          "value": null,
          "key": "$DETERMINER",
          "internal": false,
          "tag": "determiner",
          "sel": "determiner"
        }
      }
    },
    "params": [
      {
        "label": "a",
        "value": "a",
        "key": "$A",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "an",
        "value": "an",
        "key": "$AN",
        "internal": false,
        "tag": "an",
        "sel": "an"
      },
      {
        "label": "the",
        "value": "the",
        "key": "$THE",
        "internal": false,
        "tag": "the",
        "sel": "the"
      },
      {
        "label": "our",
        "value": "our",
        "key": "$OUR",
        "internal": false,
        "tag": "our",
        "sel": "our"
      },
      {
        "label": "other determiner",
        "value": null,
        "key": "$DETERMINER",
        "internal": false,
        "tag": "determiner",
        "sel": "determiner"
      }
    ]
  },
  "diff_of": {
    "name": "diff_of",
    "uses": "flow",
    "group": [
      "core",
      "math"
    ],
    "with": {
      "tokens": [
        "dec",
        ": ",
        "$A",
        ", ",
        "by",
        ": ",
        "$B"
      ],
      "params": {
        "$A": {
          "label": "_",
          "type": "number_eval",
          "key": "$A",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$B": {
          "label": "by",
          "type": "number_eval",
          "optional": true,
          "key": "$B",
          "internal": false,
          "tag": "by",
          "sel": "by"
        }
      },
      "slots": [
        "number_eval"
      ]
    },
    "desc": {
      "label": "Diff Of",
      "short": "Subtract two numbers."
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$A",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "by",
        "type": "number_eval",
        "optional": true,
        "key": "$B",
        "internal": false,
        "tag": "by",
        "sel": "by"
      }
    ]
  },
  "directive": {
    "name": "directive",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "directive",
        ": ",
        "$LEDE",
        ", ",
        "scans",
        ": ",
        "$SCANS"
      ],
      "params": {
        "$LEDE": {
          "label": "_",
          "type": "text",
          "repeats": true,
          "key": "$LEDE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$SCANS": {
          "label": "scans",
          "type": "scanner_maker",
          "repeats": true,
          "key": "$SCANS",
          "internal": false,
          "tag": "scans",
          "sel": "scans"
        }
      },
      "slots": [
        "grammar_maker"
      ]
    },
    "desc": {
      "label": "Directive",
      "short": "starts a parser scanner"
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "repeats": true,
        "key": "$LEDE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "scans",
        "type": "scanner_maker",
        "repeats": true,
        "key": "$SCANS",
        "internal": false,
        "tag": "scans",
        "sel": "scans"
      }
    ]
  },
  "do_nothing": {
    "name": "do_nothing",
    "uses": "flow",
    "group": [
      "debug"
    ],
    "with": {
      "tokens": [
        "do_nothing",
        " ",
        "why",
        ": ",
        "$REASON"
      ],
      "params": {
        "$REASON": {
          "label": "why",
          "type": "text",
          "optional": true,
          "key": "$REASON",
          "internal": false,
          "tag": "why",
          "sel": "why"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Do Nothing",
      "short": "Statement which does nothing."
    },
    "params": [
      {
        "label": "why",
        "type": "text",
        "optional": true,
        "key": "$REASON",
        "internal": false,
        "tag": "why",
        "sel": "why"
      }
    ]
  },
  "during": {
    "name": "during",
    "uses": "flow",
    "group": [
      "core",
      "patterns"
    ],
    "with": {
      "tokens": [
        "during",
        ": ",
        "$PATTERN"
      ],
      "params": {
        "$PATTERN": {
          "label": "_",
          "type": "pattern_name",
          "key": "$PATTERN",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "bool_eval",
        "number_eval"
      ]
    },
    "desc": {
      "label": "During",
      "short": "Decide whether a pattern is running."
    },
    "params": [
      {
        "label": "_",
        "type": "pattern_name",
        "key": "$PATTERN",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "eph_aliases": {
    "name": "eph_aliases",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "understand",
        ": ",
        "$SHORT_NAME",
        ", ",
        "as",
        ": ",
        "$ALIASES"
      ],
      "params": {
        "$SHORT_NAME": {
          "label": "understand",
          "type": "text",
          "key": "$SHORT_NAME",
          "internal": false,
          "tag": "understand",
          "sel": "understand"
        },
        "$ALIASES": {
          "label": "as",
          "type": "text",
          "repeats": true,
          "key": "$ALIASES",
          "internal": false,
          "tag": "as",
          "sel": "as"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "params": [
      {
        "label": "understand",
        "type": "text",
        "key": "$SHORT_NAME",
        "internal": false,
        "tag": "understand",
        "sel": "understand"
      },
      {
        "label": "as",
        "type": "text",
        "repeats": true,
        "key": "$ALIASES",
        "internal": false,
        "tag": "as",
        "sel": "as"
      }
    ]
  },
  "eph_always": {
    "name": "eph_always",
    "uses": "str",
    "group": [
      "eph",
      "eph_pattern_helpers"
    ],
    "with": {
      "tokens": [
        "$ALWAYS"
      ],
      "params": {
        "$ALWAYS": {
          "label": "always",
          "value": "always",
          "key": "$ALWAYS",
          "internal": false,
          "tag": "always",
          "sel": "always"
        }
      }
    },
    "params": [
      {
        "label": "always",
        "value": "always",
        "key": "$ALWAYS",
        "internal": false,
        "tag": "always",
        "sel": "always"
      }
    ]
  },
  "eph_aspects": {
    "name": "eph_aspects",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "aspects",
        ": ",
        "$ASPECTS",
        ", ",
        "traits",
        ": ",
        "$TRAITS"
      ],
      "params": {
        "$ASPECTS": {
          "label": "aspects",
          "type": "text",
          "key": "$ASPECTS",
          "internal": false,
          "tag": "aspects",
          "sel": "aspects"
        },
        "$TRAITS": {
          "label": "traits",
          "type": "text",
          "repeats": true,
          "key": "$TRAITS",
          "internal": false,
          "tag": "traits",
          "sel": "traits"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "desc": {
      "label": "Eph Aspects",
      "short": [
        "A set of related object states such that exactly one member of the set is true for a given object at a single time.",
        "Generates an implicit kind of 'aspect' where every field of the kind is a boolean property."
      ]
    },
    "params": [
      {
        "label": "aspects",
        "type": "text",
        "key": "$ASPECTS",
        "internal": false,
        "tag": "aspects",
        "sel": "aspects"
      },
      {
        "label": "traits",
        "type": "text",
        "repeats": true,
        "key": "$TRAITS",
        "internal": false,
        "tag": "traits",
        "sel": "traits"
      }
    ]
  },
  "eph_at": {
    "name": "eph_at",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "at",
        ": ",
        "$AT",
        ", ",
        "eph",
        ": ",
        "$EPH"
      ],
      "params": {
        "$AT": {
          "label": "at",
          "type": "text",
          "key": "$AT",
          "internal": false,
          "tag": "at",
          "sel": "at"
        },
        "$EPH": {
          "label": "eph",
          "type": "ephemera",
          "key": "$EPH",
          "internal": false,
          "tag": "eph",
          "sel": "eph"
        }
      }
    },
    "params": [
      {
        "label": "at",
        "type": "text",
        "key": "$AT",
        "internal": false,
        "tag": "at",
        "sel": "at"
      },
      {
        "label": "eph",
        "type": "ephemera",
        "key": "$EPH",
        "internal": false,
        "tag": "eph",
        "sel": "eph"
      }
    ]
  },
  "eph_begin_domain": {
    "name": "eph_begin_domain",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "domain",
        ": ",
        "$NAME",
        ", ",
        "requires",
        ": ",
        "$REQUIRES"
      ],
      "params": {
        "$NAME": {
          "label": "domain",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "domain",
          "sel": "domain"
        },
        "$REQUIRES": {
          "label": "requires",
          "type": "text",
          "repeats": true,
          "key": "$REQUIRES",
          "internal": false,
          "tag": "requires",
          "sel": "requires"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "params": [
      {
        "label": "domain",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "domain",
        "sel": "domain"
      },
      {
        "label": "requires",
        "type": "text",
        "repeats": true,
        "key": "$REQUIRES",
        "internal": false,
        "tag": "requires",
        "sel": "requires"
      }
    ]
  },
  "eph_cardinality": {
    "name": "eph_cardinality",
    "uses": "swap",
    "group": [
      "eph",
      "eph_relation_helpers"
    ],
    "with": {
      "tokens": [
        "$ONE_ONE",
        ", ",
        "$ONE_MANY",
        ", ",
        "$MANY_ONE",
        ", or ",
        "$MANY_MANY"
      ],
      "params": {
        "$ONE_ONE": {
          "label": "one one",
          "type": "one_one",
          "key": "$ONE_ONE",
          "internal": false,
          "tag": "one_one",
          "sel": "one_one"
        },
        "$ONE_MANY": {
          "label": "one many",
          "type": "one_many",
          "key": "$ONE_MANY",
          "internal": false,
          "tag": "one_many",
          "sel": "one_many"
        },
        "$MANY_ONE": {
          "label": "many one",
          "type": "many_one",
          "key": "$MANY_ONE",
          "internal": false,
          "tag": "many_one",
          "sel": "many_one"
        },
        "$MANY_MANY": {
          "label": "many many",
          "type": "many_many",
          "key": "$MANY_MANY",
          "internal": false,
          "tag": "many_many",
          "sel": "many_many"
        }
      }
    },
    "params": [
      {
        "label": "one one",
        "type": "one_one",
        "key": "$ONE_ONE",
        "internal": false,
        "tag": "one_one",
        "sel": "one_one"
      },
      {
        "label": "one many",
        "type": "one_many",
        "key": "$ONE_MANY",
        "internal": false,
        "tag": "one_many",
        "sel": "one_many"
      },
      {
        "label": "many one",
        "type": "many_one",
        "key": "$MANY_ONE",
        "internal": false,
        "tag": "many_one",
        "sel": "many_one"
      },
      {
        "label": "many many",
        "type": "many_many",
        "key": "$MANY_MANY",
        "internal": false,
        "tag": "many_many",
        "sel": "many_many"
      }
    ]
  },
  "eph_checks": {
    "name": "eph_checks",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "check",
        ": ",
        "$NAME",
        ", ",
        "expect",
        ": ",
        "$EXPECT",
        ", ",
        "does",
        ": ",
        "$EXE"
      ],
      "params": {
        "$NAME": {
          "label": "check",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "check",
          "sel": "check"
        },
        "$EXPECT": {
          "label": "expect",
          "type": "literal_value",
          "optional": true,
          "key": "$EXPECT",
          "internal": false,
          "tag": "expect",
          "sel": "expect"
        },
        "$EXE": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$EXE",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "params": [
      {
        "label": "check",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "check",
        "sel": "check"
      },
      {
        "label": "expect",
        "type": "literal_value",
        "optional": true,
        "key": "$EXPECT",
        "internal": false,
        "tag": "expect",
        "sel": "expect"
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$EXE",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "eph_directives": {
    "name": "eph_directives",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "go",
        ": ",
        "$NAME",
        ", ",
        "parse",
        ": ",
        "$DIRECTIVE"
      ],
      "params": {
        "$NAME": {
          "label": "go",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "go",
          "sel": "go"
        },
        "$DIRECTIVE": {
          "label": "parse",
          "type": "directive",
          "key": "$DIRECTIVE",
          "internal": false,
          "tag": "parse",
          "sel": "parse"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "params": [
      {
        "label": "go",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "go",
        "sel": "go"
      },
      {
        "label": "parse",
        "type": "directive",
        "key": "$DIRECTIVE",
        "internal": false,
        "tag": "parse",
        "sel": "parse"
      }
    ]
  },
  "eph_end_domain": {
    "name": "eph_end_domain",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "domain",
        ": ",
        "$NAME"
      ],
      "params": {
        "$NAME": {
          "label": "domain",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "domain",
          "sel": "domain"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "params": [
      {
        "label": "domain",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "domain",
        "sel": "domain"
      }
    ]
  },
  "eph_kinds": {
    "name": "eph_kinds",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "kinds",
        ": ",
        "$KINDS",
        ", ",
        "from",
        ": ",
        "$FROM",
        ", ",
        "contain",
        ": ",
        "$CONTAIN"
      ],
      "params": {
        "$KINDS": {
          "label": "kinds",
          "type": "text",
          "key": "$KINDS",
          "internal": false,
          "tag": "kinds",
          "sel": "kinds"
        },
        "$FROM": {
          "label": "from",
          "type": "text",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$CONTAIN": {
          "label": "contain",
          "type": "eph_params",
          "repeats": true,
          "key": "$CONTAIN",
          "internal": false,
          "tag": "contain",
          "sel": "contain"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "desc": {
      "label": "Eph Kinds",
      "short": [
        "A new type deriving from another existing type.",
        "The new kind has all of the properties of all of its ancestor kinds",
        "and it can be used wherever one of its ancestor kinds is needed.",
        "( The reverse isn't true because the new kind can have its own unique properties not available to its ancestors. )"
      ]
    },
    "params": [
      {
        "label": "kinds",
        "type": "text",
        "key": "$KINDS",
        "internal": false,
        "tag": "kinds",
        "sel": "kinds"
      },
      {
        "label": "from",
        "type": "text",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "contain",
        "type": "eph_params",
        "repeats": true,
        "key": "$CONTAIN",
        "internal": false,
        "tag": "contain",
        "sel": "contain"
      }
    ]
  },
  "eph_list": {
    "name": "eph_list",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "list",
        ": ",
        "$ALL"
      ],
      "params": {
        "$ALL": {
          "label": "list",
          "type": "eph_at",
          "repeats": true,
          "key": "$ALL",
          "internal": false,
          "tag": "list",
          "sel": "list"
        }
      }
    },
    "params": [
      {
        "label": "list",
        "type": "eph_at",
        "repeats": true,
        "key": "$ALL",
        "internal": false,
        "tag": "list",
        "sel": "list"
      }
    ]
  },
  "eph_nouns": {
    "name": "eph_nouns",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "noun",
        ": ",
        "$NOUN",
        ", ",
        "kind",
        ": ",
        "$KIND"
      ],
      "params": {
        "$NOUN": {
          "label": "noun",
          "type": "text",
          "key": "$NOUN",
          "internal": false,
          "tag": "noun",
          "sel": "noun"
        },
        "$KIND": {
          "label": "kind",
          "type": "text",
          "key": "$KIND",
          "internal": false,
          "tag": "kind",
          "sel": "kind"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "params": [
      {
        "label": "noun",
        "type": "text",
        "key": "$NOUN",
        "internal": false,
        "tag": "noun",
        "sel": "noun"
      },
      {
        "label": "kind",
        "type": "text",
        "key": "$KIND",
        "internal": false,
        "tag": "kind",
        "sel": "kind"
      }
    ]
  },
  "eph_opposites": {
    "name": "eph_opposites",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "opposite",
        ": ",
        "$OPPOSITE",
        ", ",
        "word",
        ": ",
        "$WORD"
      ],
      "params": {
        "$OPPOSITE": {
          "label": "opposite",
          "type": "text",
          "key": "$OPPOSITE",
          "internal": false,
          "tag": "opposite",
          "sel": "opposite"
        },
        "$WORD": {
          "label": "word",
          "type": "text",
          "key": "$WORD",
          "internal": false,
          "tag": "word",
          "sel": "word"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "desc": {
      "label": "Eph Opposites",
      "short": [
        "Rules for transforming plural text to singular text and back again.",
        "Used by the assembler to help interpret author definitions,",
        "and at runtime to help the parser interpret user input."
      ]
    },
    "params": [
      {
        "label": "opposite",
        "type": "text",
        "key": "$OPPOSITE",
        "internal": false,
        "tag": "opposite",
        "sel": "opposite"
      },
      {
        "label": "word",
        "type": "text",
        "key": "$WORD",
        "internal": false,
        "tag": "word",
        "sel": "word"
      }
    ]
  },
  "eph_params": {
    "name": "eph_params",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "have",
        ": ",
        "$AFFINITY",
        ", ",
        "called",
        ": ",
        "$NAME",
        ", ",
        "of",
        ": ",
        "$CLASS",
        ", ",
        "initially",
        ": ",
        "$INITIALLY"
      ],
      "params": {
        "$AFFINITY": {
          "label": "have",
          "type": "affinity",
          "key": "$AFFINITY",
          "internal": false,
          "tag": "have",
          "sel": "have"
        },
        "$NAME": {
          "label": "called",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "called",
          "sel": "called"
        },
        "$CLASS": {
          "label": "of",
          "type": "text",
          "optional": true,
          "key": "$CLASS",
          "internal": false,
          "tag": "of",
          "sel": "of"
        },
        "$INITIALLY": {
          "label": "initially",
          "type": "assignment",
          "optional": true,
          "key": "$INITIALLY",
          "internal": false,
          "tag": "initially",
          "sel": "initially"
        }
      }
    },
    "desc": {
      "label": "Eph Params",
      "short": [
        "'Affinity' designates the storage type of a given parameter",
        "while 'class' is used to indicate an interpretation of that parameter, for example a reference to a kind.",
        "Pattern locals can have an initial value, other uses of parameter cannot."
      ]
    },
    "params": [
      {
        "label": "have",
        "type": "affinity",
        "key": "$AFFINITY",
        "internal": false,
        "tag": "have",
        "sel": "have"
      },
      {
        "label": "called",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "called",
        "sel": "called"
      },
      {
        "label": "of",
        "type": "text",
        "optional": true,
        "key": "$CLASS",
        "internal": false,
        "tag": "of",
        "sel": "of"
      },
      {
        "label": "initially",
        "type": "assignment",
        "optional": true,
        "key": "$INITIALLY",
        "internal": false,
        "tag": "initially",
        "sel": "initially"
      }
    ]
  },
  "eph_patterns": {
    "name": "eph_patterns",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "pattern",
        ": ",
        "$NAME",
        ", ",
        "with",
        ": ",
        "$PARAMS",
        ", ",
        "locals",
        ": ",
        "$LOCALS",
        ", ",
        "result",
        ": ",
        "$RESULT"
      ],
      "params": {
        "$NAME": {
          "label": "pattern",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "pattern",
          "sel": "pattern"
        },
        "$PARAMS": {
          "label": "with",
          "type": "eph_params",
          "optional": true,
          "repeats": true,
          "key": "$PARAMS",
          "internal": false,
          "tag": "with",
          "sel": "with"
        },
        "$LOCALS": {
          "label": "locals",
          "type": "eph_params",
          "optional": true,
          "repeats": true,
          "key": "$LOCALS",
          "internal": false,
          "tag": "locals",
          "sel": "locals"
        },
        "$RESULT": {
          "label": "result",
          "type": "eph_params",
          "optional": true,
          "key": "$RESULT",
          "internal": false,
          "tag": "result",
          "sel": "result"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "desc": {
      "label": "Eph Patterns",
      "short": [
        "Patterns provide author reusable code.",
        "The parameters define values provided by the caller.",
        "Locals provide scratch values for use during pattern processing.",
        "The result allows the pattern to return a value to the caller of pattern.",
        "While multiple pattern commands can be used to define a pattern,",
        "the set of arguments and the return can only be specified once."
      ]
    },
    "params": [
      {
        "label": "pattern",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "pattern",
        "sel": "pattern"
      },
      {
        "label": "with",
        "type": "eph_params",
        "optional": true,
        "repeats": true,
        "key": "$PARAMS",
        "internal": false,
        "tag": "with",
        "sel": "with"
      },
      {
        "label": "locals",
        "type": "eph_params",
        "optional": true,
        "repeats": true,
        "key": "$LOCALS",
        "internal": false,
        "tag": "locals",
        "sel": "locals"
      },
      {
        "label": "result",
        "type": "eph_params",
        "optional": true,
        "key": "$RESULT",
        "internal": false,
        "tag": "result",
        "sel": "result"
      }
    ]
  },
  "eph_plurals": {
    "name": "eph_plurals",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "plural",
        ": ",
        "$PLURAL",
        ", ",
        "singular",
        ": ",
        "$SINGULAR"
      ],
      "params": {
        "$PLURAL": {
          "label": "plural",
          "type": "text",
          "key": "$PLURAL",
          "internal": false,
          "tag": "plural",
          "sel": "plural"
        },
        "$SINGULAR": {
          "label": "singular",
          "type": "text",
          "key": "$SINGULAR",
          "internal": false,
          "tag": "singular",
          "sel": "singular"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "desc": {
      "label": "Eph Plurals",
      "short": [
        "Rules for transforming plural text to singular text and back again.",
        "Used by the assembler to help interpret author definitions,",
        "and at runtime to help the parser interpret user input."
      ]
    },
    "params": [
      {
        "label": "plural",
        "type": "text",
        "key": "$PLURAL",
        "internal": false,
        "tag": "plural",
        "sel": "plural"
      },
      {
        "label": "singular",
        "type": "text",
        "key": "$SINGULAR",
        "internal": false,
        "tag": "singular",
        "sel": "singular"
      }
    ]
  },
  "eph_refs": {
    "name": "eph_refs",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "refs",
        ": ",
        "$REFS"
      ],
      "params": {
        "$REFS": {
          "label": "refs",
          "type": "ephemera",
          "repeats": true,
          "key": "$REFS",
          "internal": false,
          "tag": "refs",
          "sel": "refs"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "desc": {
      "label": "Eph Refs",
      "short": [
        "Implies some fact about the world that will be defined elsewhere.",
        "Reuses the set of ephemera to limit redefinition. Not all are valid."
      ]
    },
    "params": [
      {
        "label": "refs",
        "type": "ephemera",
        "repeats": true,
        "key": "$REFS",
        "internal": false,
        "tag": "refs",
        "sel": "refs"
      }
    ]
  },
  "eph_relations": {
    "name": "eph_relations",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        ": ",
        "$REL",
        ", ",
        "relate",
        ": ",
        "$CARDINALITY"
      ],
      "params": {
        "$REL": {
          "label": "_",
          "type": "text",
          "key": "$REL",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$CARDINALITY": {
          "label": "relate",
          "type": "eph_cardinality",
          "key": "$CARDINALITY",
          "internal": false,
          "tag": "relate",
          "sel": "relate"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$REL",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "relate",
        "type": "eph_cardinality",
        "key": "$CARDINALITY",
        "internal": false,
        "tag": "relate",
        "sel": "relate"
      }
    ]
  },
  "eph_relatives": {
    "name": "eph_relatives",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        ": ",
        "$REL",
        ", ",
        "relates",
        ": ",
        "$NOUN",
        ", ",
        "to",
        ": ",
        "$OTHER_NOUN"
      ],
      "params": {
        "$REL": {
          "label": "_",
          "type": "text",
          "key": "$REL",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NOUN": {
          "label": "relates",
          "type": "text",
          "key": "$NOUN",
          "internal": false,
          "tag": "relates",
          "sel": "relates"
        },
        "$OTHER_NOUN": {
          "label": "to",
          "type": "text",
          "key": "$OTHER_NOUN",
          "internal": false,
          "tag": "to",
          "sel": "to"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$REL",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "relates",
        "type": "text",
        "key": "$NOUN",
        "internal": false,
        "tag": "relates",
        "sel": "relates"
      },
      {
        "label": "to",
        "type": "text",
        "key": "$OTHER_NOUN",
        "internal": false,
        "tag": "to",
        "sel": "to"
      }
    ]
  },
  "eph_rules": {
    "name": "eph_rules",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "pattern",
        ": ",
        "$NAME",
        ", ",
        "target",
        ": ",
        "$TARGET",
        ", ",
        "if",
        ": ",
        "$FILTER",
        ", ",
        "when",
        ": ",
        "$WHEN",
        ", ",
        "does",
        ": ",
        "$EXE",
        ", ",
        "touch",
        ": ",
        "$TOUCH"
      ],
      "params": {
        "$NAME": {
          "label": "pattern",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "pattern",
          "sel": "pattern"
        },
        "$TARGET": {
          "label": "target",
          "type": "text",
          "optional": true,
          "key": "$TARGET",
          "internal": false,
          "tag": "target",
          "sel": "target"
        },
        "$FILTER": {
          "label": "if",
          "type": "bool_eval",
          "key": "$FILTER",
          "internal": false,
          "tag": "if",
          "sel": "if"
        },
        "$WHEN": {
          "label": "when",
          "type": "eph_timing",
          "key": "$WHEN",
          "internal": false,
          "tag": "when",
          "sel": "when"
        },
        "$EXE": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$EXE",
          "internal": false,
          "tag": "does",
          "sel": "does"
        },
        "$TOUCH": {
          "label": "touch",
          "type": "eph_always",
          "optional": true,
          "key": "$TOUCH",
          "internal": false,
          "tag": "touch",
          "sel": "touch"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "params": [
      {
        "label": "pattern",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "pattern",
        "sel": "pattern"
      },
      {
        "label": "target",
        "type": "text",
        "optional": true,
        "key": "$TARGET",
        "internal": false,
        "tag": "target",
        "sel": "target"
      },
      {
        "label": "if",
        "type": "bool_eval",
        "key": "$FILTER",
        "internal": false,
        "tag": "if",
        "sel": "if"
      },
      {
        "label": "when",
        "type": "eph_timing",
        "key": "$WHEN",
        "internal": false,
        "tag": "when",
        "sel": "when"
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$EXE",
        "internal": false,
        "tag": "does",
        "sel": "does"
      },
      {
        "label": "touch",
        "type": "eph_always",
        "optional": true,
        "key": "$TOUCH",
        "internal": false,
        "tag": "touch",
        "sel": "touch"
      }
    ]
  },
  "eph_timing": {
    "name": "eph_timing",
    "uses": "str",
    "group": [
      "eph",
      "eph_pattern_helpers"
    ],
    "with": {
      "tokens": [
        "$BEFORE",
        ", ",
        "$DURING",
        ", ",
        "$AFTER",
        ", or ",
        "$LATER"
      ],
      "params": {
        "$BEFORE": {
          "label": "before",
          "value": "before",
          "key": "$BEFORE",
          "internal": false,
          "tag": "before",
          "sel": "before"
        },
        "$DURING": {
          "label": "during",
          "value": "during",
          "key": "$DURING",
          "internal": false,
          "tag": "during",
          "sel": "during"
        },
        "$AFTER": {
          "label": "after",
          "value": "after",
          "key": "$AFTER",
          "internal": false,
          "tag": "after",
          "sel": "after"
        },
        "$LATER": {
          "label": "later",
          "value": "later",
          "key": "$LATER",
          "internal": false,
          "tag": "later",
          "sel": "later"
        }
      }
    },
    "params": [
      {
        "label": "before",
        "value": "before",
        "key": "$BEFORE",
        "internal": false,
        "tag": "before",
        "sel": "before"
      },
      {
        "label": "during",
        "value": "during",
        "key": "$DURING",
        "internal": false,
        "tag": "during",
        "sel": "during"
      },
      {
        "label": "after",
        "value": "after",
        "key": "$AFTER",
        "internal": false,
        "tag": "after",
        "sel": "after"
      },
      {
        "label": "later",
        "value": "later",
        "key": "$LATER",
        "internal": false,
        "tag": "later",
        "sel": "later"
      }
    ]
  },
  "eph_values": {
    "name": "eph_values",
    "uses": "flow",
    "group": [
      "eph"
    ],
    "with": {
      "tokens": [
        "eph",
        " ",
        "noun",
        ": ",
        "$NOUN",
        ", ",
        "has",
        ": ",
        "$FIELD",
        ", ",
        "path",
        ": ",
        "$PATH",
        ", ",
        "value",
        ": ",
        "$VALUE"
      ],
      "params": {
        "$NOUN": {
          "label": "noun",
          "type": "text",
          "key": "$NOUN",
          "internal": false,
          "tag": "noun",
          "sel": "noun"
        },
        "$FIELD": {
          "label": "has",
          "type": "text",
          "key": "$FIELD",
          "internal": false,
          "tag": "has",
          "sel": "has"
        },
        "$PATH": {
          "label": "path",
          "type": "text",
          "optional": true,
          "repeats": true,
          "key": "$PATH",
          "internal": false,
          "tag": "path",
          "sel": "path"
        },
        "$VALUE": {
          "label": "value",
          "type": "literal_value",
          "key": "$VALUE",
          "internal": false,
          "tag": "value",
          "sel": "value"
        }
      },
      "slots": [
        "ephemera"
      ]
    },
    "desc": {
      "label": "Eph Values",
      "short": [
        "Give a noun a specific value at startup.",
        "Initialization is somewhat simplistic:",
        "1. Initial values are not scoped to domains, triggers must be used to change values when domains begin and end.",
        "2. The values inside of records can be set using a 'path' to find them, however individual values within lists cannot be set.",
        "Note: when using a path, the path addresses the noun first, the named field - referring to the inner most record - last."
      ]
    },
    "params": [
      {
        "label": "noun",
        "type": "text",
        "key": "$NOUN",
        "internal": false,
        "tag": "noun",
        "sel": "noun"
      },
      {
        "label": "has",
        "type": "text",
        "key": "$FIELD",
        "internal": false,
        "tag": "has",
        "sel": "has"
      },
      {
        "label": "path",
        "type": "text",
        "optional": true,
        "repeats": true,
        "key": "$PATH",
        "internal": false,
        "tag": "path",
        "sel": "path"
      },
      {
        "label": "value",
        "type": "literal_value",
        "key": "$VALUE",
        "internal": false,
        "tag": "value",
        "sel": "value"
      }
    ]
  },
  "ephemera": {
    "name": "ephemera",
    "uses": "slot",
    "group": [
      "eph"
    ],
    "params": []
  },
  "equal": {
    "name": "equal",
    "uses": "flow",
    "group": [
      "core",
      "comparison"
    ],
    "with": {
      "tokens": [
        "equals"
      ],
      "params": {},
      "slots": [
        "comparator"
      ]
    },
    "desc": {
      "label": "Equal",
      "short": "Two values exactly match."
    },
    "params": []
  },
  "erase_edge": {
    "name": "erase_edge",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "erase",
        ": ",
        "$FROM",
        ", ",
        "at_front",
        ": ",
        "$AT_EDGE"
      ],
      "params": {
        "$FROM": {
          "label": "_",
          "type": "list_source",
          "key": "$FROM",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$AT_EDGE": {
          "label": "at_front",
          "type": "bool_eval",
          "optional": true,
          "key": "$AT_EDGE",
          "internal": false,
          "tag": "at_front",
          "sel": "at_front"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Erase Edge",
      "short": "Erase at edge: Remove one or more values from a list"
    },
    "params": [
      {
        "label": "_",
        "type": "list_source",
        "key": "$FROM",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "at_front",
        "type": "bool_eval",
        "optional": true,
        "key": "$AT_EDGE",
        "internal": false,
        "tag": "at_front",
        "sel": "at_front"
      }
    ]
  },
  "erase_index": {
    "name": "erase_index",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "erase",
        ": ",
        "$COUNT",
        ", ",
        "from",
        ": ",
        "$FROM",
        ", ",
        "at index",
        ": ",
        "$AT_INDEX"
      ],
      "params": {
        "$COUNT": {
          "label": "_",
          "type": "number_eval",
          "key": "$COUNT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "from",
          "type": "list_source",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$AT_INDEX": {
          "label": "at index",
          "type": "number_eval",
          "key": "$AT_INDEX",
          "internal": false,
          "tag": "at_index",
          "sel": "at_index"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Erase Index",
      "short": "Erase at index: Remove one or more values from a list"
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$COUNT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "list_source",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "at index",
        "type": "number_eval",
        "key": "$AT_INDEX",
        "internal": false,
        "tag": "at_index",
        "sel": "at_index"
      }
    ]
  },
  "erasing": {
    "name": "erasing",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "erasing",
        ": ",
        "$COUNT",
        ", ",
        "from",
        ": ",
        "$FROM",
        ", ",
        "at index",
        ": ",
        "$AT_INDEX",
        ", ",
        "as",
        ": ",
        "$AS",
        ", ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$COUNT": {
          "label": "_",
          "type": "number_eval",
          "key": "$COUNT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "from",
          "type": "list_source",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$AT_INDEX": {
          "label": "at index",
          "type": "number_eval",
          "key": "$AT_INDEX",
          "internal": false,
          "tag": "at_index",
          "sel": "at_index"
        },
        "$AS": {
          "label": "as",
          "type": "text",
          "key": "$AS",
          "internal": false,
          "tag": "as",
          "sel": "as"
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Erasing",
      "short": "Erase elements from the front or back of a list. Runs an activity with a list containing the erased values; the list can be empty if nothing was erased."
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$COUNT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "list_source",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "at index",
        "type": "number_eval",
        "key": "$AT_INDEX",
        "internal": false,
        "tag": "at_index",
        "sel": "at_index"
      },
      {
        "label": "as",
        "type": "text",
        "key": "$AS",
        "internal": false,
        "tag": "as",
        "sel": "as"
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "erasing_edge": {
    "name": "erasing_edge",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "erasing",
        ": ",
        "$FROM",
        ", ",
        "at_front",
        ": ",
        "$AT_EDGE",
        ", ",
        "as",
        ": ",
        "$AS",
        ", ",
        "does",
        ": ",
        "$DOES",
        ", ",
        "else",
        ": ",
        "$ELSE"
      ],
      "params": {
        "$FROM": {
          "label": "_",
          "type": "list_source",
          "key": "$FROM",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$AT_EDGE": {
          "label": "at_front",
          "type": "bool_eval",
          "optional": true,
          "key": "$AT_EDGE",
          "internal": false,
          "tag": "at_front",
          "sel": "at_front"
        },
        "$AS": {
          "label": "as",
          "type": "text",
          "key": "$AS",
          "internal": false,
          "tag": "as",
          "sel": "as"
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        },
        "$ELSE": {
          "label": "else",
          "type": "brancher",
          "optional": true,
          "key": "$ELSE",
          "internal": false,
          "tag": "else",
          "sel": "else"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Erasing Edge",
      "short": "Erase one element from the front or back of a list. Runs an activity with a list containing the erased values; the list can be empty if nothing was erased."
    },
    "params": [
      {
        "label": "_",
        "type": "list_source",
        "key": "$FROM",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "at_front",
        "type": "bool_eval",
        "optional": true,
        "key": "$AT_EDGE",
        "internal": false,
        "tag": "at_front",
        "sel": "at_front"
      },
      {
        "label": "as",
        "type": "text",
        "key": "$AS",
        "internal": false,
        "tag": "as",
        "sel": "as"
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      },
      {
        "label": "else",
        "type": "brancher",
        "optional": true,
        "key": "$ELSE",
        "internal": false,
        "tag": "else",
        "sel": "else"
      }
    ]
  },
  "event_block": {
    "name": "event_block",
    "desc": {
      "label": "Declare event listeners",
      "short": "Listeners let objects in the game world react to changes before, during, or after they happen.",
      "long": ""
    },
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "events",
      "positioned"
    ],
    "with": {
      "tokens": [
        "For ",
        "$TARGET",
        " ",
        "$HANDLERS"
      ],
      "params": {
        "$TARGET": {
          "label": "the target",
          "type": "event_target",
          "key": "$TARGET",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$HANDLERS": {
          "label": "handlers",
          "type": "event_handler",
          "repeats": true,
          "key": "$HANDLERS",
          "internal": false,
          "tag": "handlers",
          "sel": "handlers"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "listen",
    "params": [
      {
        "label": "the target",
        "type": "event_target",
        "key": "$TARGET",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "handlers",
        "type": "event_handler",
        "repeats": true,
        "key": "$HANDLERS",
        "internal": false,
        "tag": "handlers",
        "sel": "handlers"
      }
    ]
  },
  "event_handler": {
    "name": "event_handler",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "events"
    ],
    "with": {
      "tokens": [
        "$EVENT_PHASE",
        " ",
        "$EVENT",
        " ",
        "$LOCALS",
        " do:",
        "$RULES"
      ],
      "params": {
        "$EVENT_PHASE": {
          "label": "event phase",
          "type": "event_phase",
          "key": "$EVENT_PHASE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$EVENT": {
          "label": "the event",
          "type": "event_name",
          "key": "$EVENT",
          "internal": false,
          "tag": "event",
          "sel": "event"
        },
        "$LOCALS": {
          "label": "provides",
          "type": "property_slot",
          "optional": true,
          "repeats": true,
          "key": "$LOCALS",
          "internal": false,
          "tag": "provides",
          "sel": "provides"
        },
        "$RULES": {
          "label": "rules",
          "type": "pattern_rule",
          "repeats": true,
          "key": "$RULES",
          "internal": false,
          "tag": "rules",
          "sel": "rules"
        }
      },
      "slots": []
    },
    "lede": "with",
    "sign": "with:event:provides:rules:",
    "params": [
      {
        "label": "event phase",
        "type": "event_phase",
        "key": "$EVENT_PHASE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "the event",
        "type": "event_name",
        "key": "$EVENT",
        "internal": false,
        "tag": "event",
        "sel": "event"
      },
      {
        "label": "provides",
        "type": "property_slot",
        "optional": true,
        "repeats": true,
        "key": "$LOCALS",
        "internal": false,
        "tag": "provides",
        "sel": "provides"
      },
      {
        "label": "rules",
        "type": "pattern_rule",
        "repeats": true,
        "key": "$RULES",
        "internal": false,
        "tag": "rules",
        "sel": "rules"
      }
    ]
  },
  "event_name": {
    "name": "event_name",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "events",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$EVENT_NAME"
      ],
      "params": {
        "$EVENT_NAME": {
          "label": "event name",
          "value": null,
          "key": "$EVENT_NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "event name",
        "value": null,
        "key": "$EVENT_NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "event_phase": {
    "name": "event_phase",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "events"
    ],
    "with": {
      "tokens": [
        "$BEFORE",
        ", ",
        "$WHILE",
        ", or ",
        "$AFTER"
      ],
      "params": {
        "$BEFORE": {
          "label": "before",
          "value": "before",
          "key": "$BEFORE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$WHILE": {
          "label": "during",
          "value": "while",
          "key": "$WHILE",
          "internal": false,
          "tag": "while",
          "sel": "while"
        },
        "$AFTER": {
          "label": "after",
          "value": "after",
          "key": "$AFTER",
          "internal": false,
          "tag": "after",
          "sel": "after"
        }
      }
    },
    "params": [
      {
        "label": "before",
        "value": "before",
        "key": "$BEFORE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "during",
        "value": "while",
        "key": "$WHILE",
        "internal": false,
        "tag": "while",
        "sel": "while"
      },
      {
        "label": "after",
        "value": "after",
        "key": "$AFTER",
        "internal": false,
        "tag": "after",
        "sel": "after"
      }
    ]
  },
  "event_target": {
    "name": "event_target",
    "uses": "swap",
    "group": [
      "story",
      "debug",
      "events"
    ],
    "with": {
      "tokens": [
        "the ",
        "$KINDS",
        " or ",
        "$NOUN"
      ],
      "params": {
        "$KINDS": {
          "label": "kinds",
          "type": "plural_kinds",
          "key": "$KINDS",
          "internal": false,
          "tag": "kinds",
          "sel": "kinds"
        },
        "$NOUN": {
          "label": "noun",
          "type": "named_noun",
          "key": "$NOUN",
          "internal": false,
          "tag": "noun",
          "sel": "noun"
        }
      }
    },
    "params": [
      {
        "label": "kinds",
        "type": "plural_kinds",
        "key": "$KINDS",
        "internal": false,
        "tag": "kinds",
        "sel": "kinds"
      },
      {
        "label": "noun",
        "type": "named_noun",
        "key": "$NOUN",
        "internal": false,
        "tag": "noun",
        "sel": "noun"
      }
    ]
  },
  "execute": {
    "name": "execute",
    "desc": "Run a series of statements.",
    "uses": "slot",
    "group": [
      "rt"
    ],
    "params": []
  },
  "field_value": {
    "name": "field_value",
    "uses": "flow",
    "group": [
      "literal"
    ],
    "with": {
      "tokens": [
        "field",
        " ",
        "field",
        ": ",
        "$FIELD",
        ", ",
        "value",
        ": ",
        "$VALUE"
      ],
      "params": {
        "$FIELD": {
          "label": "field",
          "type": "text",
          "key": "$FIELD",
          "internal": false,
          "tag": "field",
          "sel": "field"
        },
        "$VALUE": {
          "label": "value",
          "type": "literal_value",
          "key": "$VALUE",
          "internal": false,
          "tag": "value",
          "sel": "value"
        }
      }
    },
    "desc": {
      "label": "Field Value",
      "short": "A fixed value of a record."
    },
    "params": [
      {
        "label": "field",
        "type": "text",
        "key": "$FIELD",
        "internal": false,
        "tag": "field",
        "sel": "field"
      },
      {
        "label": "value",
        "type": "literal_value",
        "key": "$VALUE",
        "internal": false,
        "tag": "value",
        "sel": "value"
      }
    ]
  },
  "field_values": {
    "name": "field_values",
    "uses": "flow",
    "group": [
      "literal",
      "internal"
    ],
    "with": {
      "tokens": [
        "fields",
        ": ",
        "$CONTAINS"
      ],
      "params": {
        "$CONTAINS": {
          "label": "_",
          "type": "field_value",
          "repeats": true,
          "key": "$CONTAINS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "literal_value"
      ]
    },
    "desc": {
      "label": "Field Values",
      "short": [
        "A series of values all for the same record.",
        "While it can be specified wherever a literal value can, it only has meaning when the record type is known."
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "field_value",
        "repeats": true,
        "key": "$CONTAINS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "flow_spec": {
    "name": "flow_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "flow",
        ": ",
        "$NAME",
        ", ",
        "phrase",
        ": ",
        "$PHRASE",
        ", ",
        "trim",
        ": ",
        "$TRIM",
        ", ",
        "uses",
        ": ",
        "$TERMS"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "optional": true,
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PHRASE": {
          "label": "phrase",
          "type": "text",
          "optional": true,
          "key": "$PHRASE",
          "internal": false,
          "tag": "phrase",
          "sel": "phrase"
        },
        "$TRIM": {
          "label": "trim",
          "type": "bool",
          "optional": true,
          "key": "$TRIM",
          "internal": false,
          "tag": "trim",
          "sel": "trim"
        },
        "$TERMS": {
          "label": "uses",
          "type": "term_spec",
          "repeats": true,
          "key": "$TERMS",
          "internal": false,
          "tag": "uses",
          "sel": "uses"
        }
      }
    },
    "desc": {
      "label": "Flow Spec",
      "short": [
        "name: overrides the name of the operation used in compact story files.",
        "phrase: english text with embedded tokens referring to existing terms.",
        "trim: whether the first term should be left off when calling the command."
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "optional": true,
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "phrase",
        "type": "text",
        "optional": true,
        "key": "$PHRASE",
        "internal": false,
        "tag": "phrase",
        "sel": "phrase"
      },
      {
        "label": "trim",
        "type": "bool",
        "optional": true,
        "key": "$TRIM",
        "internal": false,
        "tag": "trim",
        "sel": "trim"
      },
      {
        "label": "uses",
        "type": "term_spec",
        "repeats": true,
        "key": "$TERMS",
        "internal": false,
        "tag": "uses",
        "sel": "uses"
      }
    ]
  },
  "from_bool": {
    "name": "from_bool",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "from_bool",
        ": ",
        "$VAL"
      ],
      "params": {
        "$VAL": {
          "label": "_",
          "type": "bool_eval",
          "key": "$VAL",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "assignment"
      ]
    },
    "desc": {
      "label": "From Bool",
      "short": "Assigns the calculated boolean value."
    },
    "params": [
      {
        "label": "_",
        "type": "bool_eval",
        "key": "$VAL",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_num": {
    "name": "from_num",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "from_num",
        ": ",
        "$VAL"
      ],
      "params": {
        "$VAL": {
          "label": "_",
          "type": "number_eval",
          "key": "$VAL",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "assignment"
      ]
    },
    "desc": {
      "label": "From Num",
      "short": "Assigns the calculated number."
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$VAL",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_num_list": {
    "name": "from_num_list",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "var_of_nums",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "list_source"
      ]
    },
    "desc": {
      "label": "From Num List",
      "short": "Uses a list of numbers"
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_numbers": {
    "name": "from_numbers",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "from_nums",
        ": ",
        "$VALS"
      ],
      "params": {
        "$VALS": {
          "label": "_",
          "type": "num_list_eval",
          "key": "$VALS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "assignment"
      ]
    },
    "desc": {
      "label": "From Numbers",
      "short": "Assigns the calculated numbers."
    },
    "params": [
      {
        "label": "_",
        "type": "num_list_eval",
        "key": "$VALS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_obj": {
    "name": "from_obj",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "obj_fields",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$OBJECT": {
          "label": "_",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "from_source_fields"
      ]
    },
    "desc": {
      "label": "From Obj",
      "short": "Targets an object with a computed name."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_rec": {
    "name": "from_rec",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "rec_fields",
        ": ",
        "$REC"
      ],
      "params": {
        "$REC": {
          "label": "_",
          "type": "record_eval",
          "key": "$REC",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "from_source_fields"
      ]
    },
    "desc": {
      "label": "From Rec",
      "short": "Targets a record stored in a record."
    },
    "params": [
      {
        "label": "_",
        "type": "record_eval",
        "key": "$REC",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_rec_list": {
    "name": "from_rec_list",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "var_of_recs",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "list_source"
      ]
    },
    "desc": {
      "label": "From Rec List",
      "short": "Uses a list of records"
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_record": {
    "name": "from_record",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "from_rec",
        ": ",
        "$VAL"
      ],
      "params": {
        "$VAL": {
          "label": "_",
          "type": "record_eval",
          "key": "$VAL",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "assignment"
      ]
    },
    "desc": {
      "label": "From Record",
      "short": "Assigns the calculated record."
    },
    "params": [
      {
        "label": "_",
        "type": "record_eval",
        "key": "$VAL",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_records": {
    "name": "from_records",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "from_recs",
        ": ",
        "$VALS"
      ],
      "params": {
        "$VALS": {
          "label": "_",
          "type": "record_list_eval",
          "key": "$VALS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "assignment"
      ]
    },
    "desc": {
      "label": "From Records",
      "short": "Assigns the calculated records."
    },
    "params": [
      {
        "label": "_",
        "type": "record_list_eval",
        "key": "$VALS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_source_fields": {
    "name": "from_source_fields",
    "desc": "Helper for getting fields.",
    "uses": "slot",
    "group": [
      "core"
    ],
    "params": []
  },
  "from_text": {
    "name": "from_text",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "from_txt",
        ": ",
        "$VAL"
      ],
      "params": {
        "$VAL": {
          "label": "_",
          "type": "text_eval",
          "key": "$VAL",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "assignment"
      ]
    },
    "desc": {
      "label": "From Text",
      "short": "Assigns the calculated piece of text."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$VAL",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_texts": {
    "name": "from_texts",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "from_txts",
        ": ",
        "$VALS"
      ],
      "params": {
        "$VALS": {
          "label": "_",
          "type": "text_list_eval",
          "key": "$VALS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "assignment"
      ]
    },
    "desc": {
      "label": "From Texts",
      "short": "Assigns the calculated texts."
    },
    "params": [
      {
        "label": "_",
        "type": "text_list_eval",
        "key": "$VALS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_txt_list": {
    "name": "from_txt_list",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "var_of_txts",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "list_source"
      ]
    },
    "desc": {
      "label": "From Txt List",
      "short": "Uses a list of text"
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "from_var": {
    "name": "from_var",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "var_fields",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "from_source_fields"
      ]
    },
    "desc": {
      "label": "From Var",
      "short": "Targets a record stored in a variable."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "get_at_field": {
    "name": "get_at_field",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "get",
        ": ",
        "$FIELD",
        ", ",
        "from",
        ": ",
        "$FROM"
      ],
      "params": {
        "$FIELD": {
          "label": "_",
          "type": "text",
          "key": "$FIELD",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "from",
          "type": "from_source_fields",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        }
      },
      "slots": [
        "assignment",
        "bool_eval",
        "number_eval",
        "text_eval",
        "record_eval",
        "num_list_eval",
        "text_list_eval",
        "record_list_eval"
      ]
    },
    "desc": {
      "label": "Get At Field",
      "short": "Get a value from a record."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$FIELD",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "from_source_fields",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      }
    ]
  },
  "get_var": {
    "name": "get_var",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "var",
        ": ",
        "$NAME"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "variable_name",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "assignment",
        "bool_eval",
        "number_eval",
        "text_eval",
        "record_eval",
        "num_list_eval",
        "text_list_eval",
        "record_list_eval"
      ]
    },
    "desc": {
      "label": "Get Var",
      "short": "Get Variable: Return the value of the named variable."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "grammar": {
    "name": "grammar",
    "uses": "flow",
    "group": [
      "grammar",
      "internal"
    ],
    "with": {
      "tokens": [
        "grammar",
        ": ",
        "$GRAMMAR"
      ],
      "params": {
        "$GRAMMAR": {
          "label": "_",
          "type": "grammar_maker",
          "key": "$GRAMMAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "desc": {
      "label": "Grammar",
      "short": "Read what the player types and turn it into actions."
    },
    "params": [
      {
        "label": "_",
        "type": "grammar_maker",
        "key": "$GRAMMAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "grammar_decl": {
    "name": "grammar_decl",
    "desc": "Read what the player types and turn it into actions.",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "stubs",
      "grammar"
    ],
    "with": {
      "tokens": [
        "understand ",
        "$GRAMMAR"
      ],
      "params": {
        "$GRAMMAR": {
          "label": "_",
          "type": "grammar_maker",
          "key": "$GRAMMAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "grammar_maker",
        "key": "$GRAMMAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "grammar_maker": {
    "name": "grammar_maker",
    "desc": "Helper for defining parser grammars.",
    "uses": "slot",
    "group": [
      "grammar"
    ],
    "params": []
  },
  "greater_than": {
    "name": "greater_than",
    "uses": "flow",
    "group": [
      "core",
      "comparison"
    ],
    "with": {
      "tokens": [
        "greater_than"
      ],
      "params": {},
      "slots": [
        "comparator"
      ]
    },
    "desc": {
      "label": "Greater Than",
      "short": "The first value is larger than the second value."
    },
    "params": []
  },
  "group_spec": {
    "name": "group_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "group",
        " ",
        "contains",
        ": ",
        "$SPECS"
      ],
      "params": {
        "$SPECS": {
          "label": "contains",
          "type": "type_spec",
          "repeats": true,
          "key": "$SPECS",
          "internal": false,
          "tag": "contains",
          "sel": "contains"
        }
      }
    },
    "desc": {
      "label": "Group Spec",
      "short": [
        "a collection of one or more other specs."
      ]
    },
    "params": [
      {
        "label": "contains",
        "type": "type_spec",
        "repeats": true,
        "key": "$SPECS",
        "internal": false,
        "tag": "contains",
        "sel": "contains"
      }
    ]
  },
  "has_dominion": {
    "name": "has_dominion",
    "uses": "flow",
    "group": [
      "core",
      "logic"
    ],
    "with": {
      "tokens": [
        "has_dominion",
        ": ",
        "$NAME"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "has_trait": {
    "name": "has_trait",
    "uses": "flow",
    "group": [
      "core",
      "objects"
    ],
    "with": {
      "tokens": [
        "get",
        " ",
        "obj",
        ": ",
        "$OBJECT",
        ", ",
        "trait",
        ": ",
        "$TRAIT"
      ],
      "params": {
        "$OBJECT": {
          "label": "obj",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "obj",
          "sel": "obj"
        },
        "$TRAIT": {
          "label": "trait",
          "type": "text_eval",
          "key": "$TRAIT",
          "internal": false,
          "tag": "trait",
          "sel": "trait"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Has Trait",
      "short": "Return true if the object is currently in the requested state."
    },
    "params": [
      {
        "label": "obj",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "obj",
        "sel": "obj"
      },
      {
        "label": "trait",
        "type": "text_eval",
        "key": "$TRAIT",
        "internal": false,
        "tag": "trait",
        "sel": "trait"
      }
    ]
  },
  "id_of": {
    "name": "id_of",
    "uses": "flow",
    "group": [
      "core",
      "objects"
    ],
    "with": {
      "tokens": [
        "id_of",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$OBJECT": {
          "label": "_",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Id Of",
      "short": "A unique object identifier."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "includes": {
    "name": "includes",
    "uses": "flow",
    "group": [
      "core",
      "strings"
    ],
    "with": {
      "tokens": [
        "contains",
        ": ",
        "$TEXT",
        ", ",
        "part",
        ": ",
        "$PART"
      ],
      "params": {
        "$TEXT": {
          "label": "_",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PART": {
          "label": "part",
          "type": "text_eval",
          "key": "$PART",
          "internal": false,
          "tag": "part",
          "sel": "part"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Includes",
      "short": "True if text contains text."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "part",
        "type": "text_eval",
        "key": "$PART",
        "internal": false,
        "tag": "part",
        "sel": "part"
      }
    ]
  },
  "into_num_list": {
    "name": "into_num_list",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "into_nums",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "list_target"
      ]
    },
    "desc": {
      "label": "Into Num List",
      "short": "Targets a list of numbers"
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "into_obj": {
    "name": "into_obj",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "obj_field",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$OBJECT": {
          "label": "_",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "into_target_fields"
      ]
    },
    "desc": {
      "label": "Into Obj",
      "short": "Targets an object with a computed name."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "into_rec_list": {
    "name": "into_rec_list",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "into_recs",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "list_target"
      ]
    },
    "desc": {
      "label": "Into Rec List",
      "short": "Targets a list of records"
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "into_target_fields": {
    "name": "into_target_fields",
    "desc": "Helper for setting fields.",
    "uses": "slot",
    "group": [
      "core"
    ],
    "params": []
  },
  "into_txt_list": {
    "name": "into_txt_list",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "into_txts",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "list_target"
      ]
    },
    "desc": {
      "label": "Into Txt List",
      "short": "Targets a list of text"
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "into_var": {
    "name": "into_var",
    "uses": "flow",
    "group": [
      "core",
      "misc"
    ],
    "with": {
      "tokens": [
        "var_field",
        ": ",
        "$VAR"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "into_target_fields"
      ]
    },
    "desc": {
      "label": "Into Var",
      "short": "Targets an object or record stored in a variable"
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "is_empty": {
    "name": "is_empty",
    "uses": "flow",
    "group": [
      "core",
      "strings"
    ],
    "with": {
      "tokens": [
        "is",
        " ",
        "empty",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "empty",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "empty",
          "sel": "empty"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Is Empty",
      "short": "True if the text is empty."
    },
    "params": [
      {
        "label": "empty",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "empty",
        "sel": "empty"
      }
    ]
  },
  "is_exact_kind_of": {
    "name": "is_exact_kind_of",
    "uses": "flow",
    "group": [
      "core",
      "objects"
    ],
    "with": {
      "tokens": [
        "kind_of",
        ": ",
        "$OBJECT",
        ", ",
        "is_exactly",
        ": ",
        "$KIND"
      ],
      "params": {
        "$OBJECT": {
          "label": "_",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$KIND": {
          "label": "is_exactly",
          "type": "text",
          "key": "$KIND",
          "internal": false,
          "tag": "is_exactly",
          "sel": "is_exactly"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Is Exact Kind Of",
      "short": "True if the object is exactly the named kind."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "is_exactly",
        "type": "text",
        "key": "$KIND",
        "internal": false,
        "tag": "is_exactly",
        "sel": "is_exactly"
      }
    ]
  },
  "is_kind_of": {
    "name": "is_kind_of",
    "uses": "flow",
    "group": [
      "core",
      "objects"
    ],
    "with": {
      "tokens": [
        "kind_of",
        ": ",
        "$OBJECT",
        ", ",
        "is",
        ": ",
        "$KIND"
      ],
      "params": {
        "$OBJECT": {
          "label": "_",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$KIND": {
          "label": "is",
          "type": "text",
          "key": "$KIND",
          "internal": false,
          "tag": "is",
          "sel": "is"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Is Kind Of",
      "short": "True if the object is compatible with the named kind."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "is",
        "type": "text",
        "key": "$KIND",
        "internal": false,
        "tag": "is",
        "sel": "is"
      }
    ]
  },
  "join": {
    "name": "join",
    "uses": "flow",
    "group": [
      "core",
      "strings"
    ],
    "with": {
      "tokens": [
        "join",
        ": ",
        "$SEP",
        ", ",
        "parts",
        ": ",
        "$PARTS"
      ],
      "params": {
        "$SEP": {
          "label": "_",
          "type": "text_eval",
          "optional": true,
          "key": "$SEP",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PARTS": {
          "label": "parts",
          "type": "text_eval",
          "repeats": true,
          "key": "$PARTS",
          "internal": false,
          "tag": "parts",
          "sel": "parts"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Join",
      "short": "Returns multiple pieces of text as a single new piece of text."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "optional": true,
        "key": "$SEP",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "parts",
        "type": "text_eval",
        "repeats": true,
        "key": "$PARTS",
        "internal": false,
        "tag": "parts",
        "sel": "parts"
      }
    ]
  },
  "kind_of": {
    "name": "kind_of",
    "uses": "flow",
    "group": [
      "core",
      "objects"
    ],
    "with": {
      "tokens": [
        "kind_of",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$OBJECT": {
          "label": "_",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Kind Of",
      "short": "Friendly name of the object's kind."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "kind_of_noun": {
    "name": "kind_of_noun",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "with": {
      "tokens": [
        "$ARE_AN",
        " ",
        "$KIND"
      ],
      "params": {
        "$ARE_AN": {
          "label": "are an",
          "type": "are_an",
          "key": "$ARE_AN",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$KIND": {
          "label": "kind",
          "type": "singular_kind",
          "key": "$KIND",
          "internal": false,
          "tag": "named",
          "sel": "named"
        }
      },
      "slots": [
        "noun_continuation"
      ]
    },
    "lede": "Kind",
    "sign": "Kind:named:",
    "params": [
      {
        "label": "are an",
        "type": "are_an",
        "key": "$ARE_AN",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "kind",
        "type": "singular_kind",
        "key": "$KIND",
        "internal": false,
        "tag": "named",
        "sel": "named"
      }
    ]
  },
  "kind_of_relation": {
    "name": "kind_of_relation",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "relations"
    ],
    "with": {
      "tokens": [
        "$RELATION",
        " relates ",
        "$CARDINALITY"
      ],
      "params": {
        "$RELATION": {
          "label": "relation",
          "type": "relation_name",
          "key": "$RELATION",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$CARDINALITY": {
          "label": "cardinality",
          "type": "relation_cardinality",
          "key": "$CARDINALITY",
          "internal": false,
          "tag": "cardinality",
          "sel": "cardinality"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "relation",
        "type": "relation_name",
        "key": "$RELATION",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "cardinality",
        "type": "relation_cardinality",
        "key": "$CARDINALITY",
        "internal": false,
        "tag": "cardinality",
        "sel": "cardinality"
      }
    ]
  },
  "kinds_have_properties": {
    "name": "kinds_have_properties",
    "desc": "Add properties to a kind",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "kinds"
    ],
    "with": {
      "tokens": [
        "$PLURAL_KINDS",
        " have ",
        "$PROPS",
        "."
      ],
      "params": {
        "$PLURAL_KINDS": {
          "label": "plural kinds",
          "type": "plural_kinds",
          "key": "$PLURAL_KINDS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PROPS": {
          "label": "props",
          "type": "property_slot",
          "repeats": true,
          "filters": [
            "comma-and"
          ],
          "key": "$PROPS",
          "internal": false,
          "tag": "have",
          "sel": "have"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "Kinds",
    "sign": "Kinds:have:",
    "params": [
      {
        "label": "plural kinds",
        "type": "plural_kinds",
        "key": "$PLURAL_KINDS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "props",
        "type": "property_slot",
        "repeats": true,
        "filters": [
          "comma-and"
        ],
        "key": "$PROPS",
        "internal": false,
        "tag": "have",
        "sel": "have"
      }
    ]
  },
  "kinds_of": {
    "name": "kinds_of",
    "uses": "flow",
    "group": [
      "core",
      "objects"
    ],
    "with": {
      "tokens": [
        "kinds_of",
        ": ",
        "$KIND"
      ],
      "params": {
        "$KIND": {
          "label": "_",
          "type": "text",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_list_eval"
      ]
    },
    "desc": {
      "label": "Kinds Of",
      "short": "A list of compatible kinds."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "kinds_of_aspect": {
    "name": "kinds_of_aspect",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "traits"
    ],
    "with": {
      "tokens": [
        "$ASPECT",
        " is a kind of value."
      ],
      "params": {
        "$ASPECT": {
          "label": "aspect",
          "type": "aspect",
          "key": "$ASPECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "aspect",
        "type": "aspect",
        "key": "$ASPECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "kinds_of_kind": {
    "name": "kinds_of_kind",
    "desc": "Declare a kind",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "kinds"
    ],
    "with": {
      "tokens": [
        "$PLURAL_KINDS",
        " are a kind of ",
        "$SINGULAR_KIND",
        "."
      ],
      "params": {
        "$PLURAL_KINDS": {
          "label": "plural kinds",
          "type": "plural_kinds",
          "key": "$PLURAL_KINDS",
          "internal": false,
          "tag": "kinds",
          "sel": "kinds"
        },
        "$SINGULAR_KIND": {
          "label": "singular kind",
          "type": "singular_kind",
          "key": "$SINGULAR_KIND",
          "internal": false,
          "tag": "of",
          "sel": "of"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "Make",
    "sign": "Make kinds:of:",
    "params": [
      {
        "label": "plural kinds",
        "type": "plural_kinds",
        "key": "$PLURAL_KINDS",
        "internal": false,
        "tag": "kinds",
        "sel": "kinds"
      },
      {
        "label": "singular kind",
        "type": "singular_kind",
        "key": "$SINGULAR_KIND",
        "internal": false,
        "tag": "of",
        "sel": "of"
      }
    ]
  },
  "less_than": {
    "name": "less_than",
    "uses": "flow",
    "group": [
      "core",
      "comparison"
    ],
    "with": {
      "tokens": [
        "less_than"
      ],
      "params": {},
      "slots": [
        "comparator"
      ]
    },
    "desc": {
      "label": "Less Than",
      "short": "The first value is less than the second value."
    },
    "params": []
  },
  "lines": {
    "name": "lines",
    "desc": "A sequence of characters of any length spanning multiple lines.  Paragraphs are a prime example. Generally lines are some piece of the story that will be displayed to the player.  See also: text.",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "language"
    ],
    "with": {
      "tokens": [
        "$LINES"
      ],
      "params": {
        "$LINES": {
          "label": "lines",
          "value": null,
          "key": "$LINES",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "lines",
        "value": null,
        "key": "$LINES",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "list_at": {
    "name": "list_at",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "get",
        ": ",
        "$LIST",
        ", ",
        "index",
        ": ",
        "$INDEX"
      ],
      "params": {
        "$LIST": {
          "label": "_",
          "type": "assignment",
          "key": "$LIST",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$INDEX": {
          "label": "index",
          "type": "number_eval",
          "key": "$INDEX",
          "internal": false,
          "tag": "index",
          "sel": "index"
        }
      },
      "slots": [
        "number_eval",
        "text_eval",
        "record_eval"
      ]
    },
    "desc": {
      "label": "List At",
      "short": "Get a value from a list. The first element is is index 1."
    },
    "params": [
      {
        "label": "_",
        "type": "assignment",
        "key": "$LIST",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "index",
        "type": "number_eval",
        "key": "$INDEX",
        "internal": false,
        "tag": "index",
        "sel": "index"
      }
    ]
  },
  "list_each": {
    "name": "list_each",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "repeating",
        " ",
        "across",
        ": ",
        "$LIST",
        ", ",
        "as",
        ": ",
        "$AS",
        ", ",
        "does",
        ": ",
        "$DOES",
        ", ",
        "else",
        ": ",
        "$ELSE"
      ],
      "params": {
        "$LIST": {
          "label": "across",
          "type": "assignment",
          "key": "$LIST",
          "internal": false,
          "tag": "across",
          "sel": "across"
        },
        "$AS": {
          "label": "as",
          "type": "list_iterator",
          "key": "$AS",
          "internal": false,
          "tag": "as",
          "sel": "as"
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        },
        "$ELSE": {
          "label": "else",
          "type": "brancher",
          "optional": true,
          "key": "$ELSE",
          "internal": false,
          "tag": "else",
          "sel": "else"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "List Each",
      "short": "Loops over the elements in the passed list, or runs the 'else' activity if empty."
    },
    "params": [
      {
        "label": "across",
        "type": "assignment",
        "key": "$LIST",
        "internal": false,
        "tag": "across",
        "sel": "across"
      },
      {
        "label": "as",
        "type": "list_iterator",
        "key": "$AS",
        "internal": false,
        "tag": "as",
        "sel": "as"
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      },
      {
        "label": "else",
        "type": "brancher",
        "optional": true,
        "key": "$ELSE",
        "internal": false,
        "tag": "else",
        "sel": "else"
      }
    ]
  },
  "list_find": {
    "name": "list_find",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "find",
        ": ",
        "$VALUE",
        ", ",
        "list",
        ": ",
        "$LIST"
      ],
      "params": {
        "$VALUE": {
          "label": "_",
          "type": "assignment",
          "key": "$VALUE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$LIST": {
          "label": "list",
          "type": "assignment",
          "key": "$LIST",
          "internal": false,
          "tag": "list",
          "sel": "list"
        }
      },
      "slots": [
        "bool_eval",
        "number_eval"
      ]
    },
    "desc": {
      "label": "List Find",
      "short": "Search a list for a specific value."
    },
    "params": [
      {
        "label": "_",
        "type": "assignment",
        "key": "$VALUE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "list",
        "type": "assignment",
        "key": "$LIST",
        "internal": false,
        "tag": "list",
        "sel": "list"
      }
    ]
  },
  "list_gather": {
    "name": "list_gather",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "gather",
        ": ",
        "$VAR",
        ", ",
        "from",
        ": ",
        "$FROM",
        ", ",
        "using",
        ": ",
        "$USING"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "from",
          "type": "list_source",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$USING": {
          "label": "using",
          "type": "text",
          "key": "$USING",
          "internal": false,
          "tag": "using",
          "sel": "using"
        }
      }
    },
    "desc": {
      "label": "List Gather",
      "short": "Transform the values from a list. The named pattern gets called once for each value in the list. It get called with two parameters: 'in' as each value from the list, and 'out' as the var passed to the gather."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "list_source",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "using",
        "type": "text",
        "key": "$USING",
        "internal": false,
        "tag": "using",
        "sel": "using"
      }
    ]
  },
  "list_iterator": {
    "name": "list_iterator",
    "desc": "Helper for accessing lists.",
    "uses": "slot",
    "group": [
      "list"
    ],
    "params": []
  },
  "list_len": {
    "name": "list_len",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "len",
        ": ",
        "$LIST"
      ],
      "params": {
        "$LIST": {
          "label": "_",
          "type": "assignment",
          "key": "$LIST",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "number_eval"
      ]
    },
    "desc": {
      "label": "List Len",
      "short": "Determines the number of values in a list."
    },
    "params": [
      {
        "label": "_",
        "type": "assignment",
        "key": "$LIST",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "list_map": {
    "name": "list_map",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "map",
        ": ",
        "$TO_LIST",
        ", ",
        "from list",
        ": ",
        "$FROM_LIST",
        ", ",
        "using",
        ": ",
        "$USING_PATTERN"
      ],
      "params": {
        "$TO_LIST": {
          "label": "_",
          "type": "text",
          "key": "$TO_LIST",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM_LIST": {
          "label": "from list",
          "type": "assignment",
          "key": "$FROM_LIST",
          "internal": false,
          "tag": "from_list",
          "sel": "from_list"
        },
        "$USING_PATTERN": {
          "label": "using",
          "type": "text",
          "key": "$USING_PATTERN",
          "internal": false,
          "tag": "using",
          "sel": "using"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "List Map",
      "short": "Transform the values from one list and place the results in another list. The designated pattern is called with each value from the 'from list', one value at a time."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$TO_LIST",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from list",
        "type": "assignment",
        "key": "$FROM_LIST",
        "internal": false,
        "tag": "from_list",
        "sel": "from_list"
      },
      {
        "label": "using",
        "type": "text",
        "key": "$USING_PATTERN",
        "internal": false,
        "tag": "using",
        "sel": "using"
      }
    ]
  },
  "list_reduce": {
    "name": "list_reduce",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "reduce",
        " ",
        "into",
        ": ",
        "$INTO_VALUE",
        ", ",
        "from list",
        ": ",
        "$FROM_LIST",
        ", ",
        "using",
        ": ",
        "$USING_PATTERN"
      ],
      "params": {
        "$INTO_VALUE": {
          "label": "into",
          "type": "text",
          "key": "$INTO_VALUE",
          "internal": false,
          "tag": "into",
          "sel": "into"
        },
        "$FROM_LIST": {
          "label": "from list",
          "type": "assignment",
          "key": "$FROM_LIST",
          "internal": false,
          "tag": "from_list",
          "sel": "from_list"
        },
        "$USING_PATTERN": {
          "label": "using",
          "type": "text",
          "key": "$USING_PATTERN",
          "internal": false,
          "tag": "using",
          "sel": "using"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "List Reduce",
      "short": "Transform the values from one list by combining them into a single value. The named pattern is called with two parameters: 'in' ( each element of the list ) and 'out' ( ex. a record )."
    },
    "params": [
      {
        "label": "into",
        "type": "text",
        "key": "$INTO_VALUE",
        "internal": false,
        "tag": "into",
        "sel": "into"
      },
      {
        "label": "from list",
        "type": "assignment",
        "key": "$FROM_LIST",
        "internal": false,
        "tag": "from_list",
        "sel": "from_list"
      },
      {
        "label": "using",
        "type": "text",
        "key": "$USING_PATTERN",
        "internal": false,
        "tag": "using",
        "sel": "using"
      }
    ]
  },
  "list_reverse": {
    "name": "list_reverse",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "reverse",
        " ",
        "list",
        ": ",
        "$LIST"
      ],
      "params": {
        "$LIST": {
          "label": "list",
          "type": "list_source",
          "key": "$LIST",
          "internal": false,
          "tag": "list",
          "sel": "list"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "List Reverse",
      "short": "Reverse a list."
    },
    "params": [
      {
        "label": "list",
        "type": "list_source",
        "key": "$LIST",
        "internal": false,
        "tag": "list",
        "sel": "list"
      }
    ]
  },
  "list_set": {
    "name": "list_set",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "set",
        ": ",
        "$LIST",
        ", ",
        "index",
        ": ",
        "$INDEX",
        ", ",
        "from",
        ": ",
        "$FROM"
      ],
      "params": {
        "$LIST": {
          "label": "_",
          "type": "text",
          "key": "$LIST",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$INDEX": {
          "label": "index",
          "type": "number_eval",
          "key": "$INDEX",
          "internal": false,
          "tag": "index",
          "sel": "index"
        },
        "$FROM": {
          "label": "from",
          "type": "assignment",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "List Set",
      "short": "Overwrite an existing value in a list."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$LIST",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "index",
        "type": "number_eval",
        "key": "$INDEX",
        "internal": false,
        "tag": "index",
        "sel": "index"
      },
      {
        "label": "from",
        "type": "assignment",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      }
    ]
  },
  "list_slice": {
    "name": "list_slice",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "slice",
        ": ",
        "$LIST",
        ", ",
        "start",
        ": ",
        "$START",
        ", ",
        "end",
        ": ",
        "$END"
      ],
      "params": {
        "$LIST": {
          "label": "_",
          "type": "assignment",
          "key": "$LIST",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$START": {
          "label": "start",
          "type": "number_eval",
          "optional": true,
          "key": "$START",
          "internal": false,
          "tag": "start",
          "sel": "start"
        },
        "$END": {
          "label": "end",
          "type": "number_eval",
          "optional": true,
          "key": "$END",
          "internal": false,
          "tag": "end",
          "sel": "end"
        }
      },
      "slots": [
        "num_list_eval",
        "text_list_eval",
        "record_list_eval"
      ]
    },
    "desc": {
      "label": "List Slice",
      "short": [
        "Create a new list from a section of another list.",
        "Start is optional, if omitted slice starts at the first element.",
        "If start is greater the length, an empty array is returned.",
        "Slice doesnt include the ending index.",
        "Negatives indices indicates an offset from the end.",
        "When end is omitted, copy up to and including the last element;",
        "and do the same if the end is greater than the length"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "assignment",
        "key": "$LIST",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "start",
        "type": "number_eval",
        "optional": true,
        "key": "$START",
        "internal": false,
        "tag": "start",
        "sel": "start"
      },
      {
        "label": "end",
        "type": "number_eval",
        "optional": true,
        "key": "$END",
        "internal": false,
        "tag": "end",
        "sel": "end"
      }
    ]
  },
  "list_sort_numbers": {
    "name": "list_sort_numbers",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "sort_numbers",
        ": ",
        "$VAR",
        ", ",
        "by field",
        ": ",
        "$BY_FIELD",
        ", ",
        "descending",
        ": ",
        "$DESCENDING"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$BY_FIELD": {
          "label": "by field",
          "type": "text",
          "key": "$BY_FIELD",
          "internal": false,
          "tag": "by_field",
          "sel": "by_field"
        },
        "$DESCENDING": {
          "label": "descending",
          "type": "bool_eval",
          "optional": true,
          "key": "$DESCENDING",
          "internal": false,
          "tag": "descending",
          "sel": "descending"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "by field",
        "type": "text",
        "key": "$BY_FIELD",
        "internal": false,
        "tag": "by_field",
        "sel": "by_field"
      },
      {
        "label": "descending",
        "type": "bool_eval",
        "optional": true,
        "key": "$DESCENDING",
        "internal": false,
        "tag": "descending",
        "sel": "descending"
      }
    ]
  },
  "list_sort_text": {
    "name": "list_sort_text",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "sort_texts",
        ": ",
        "$VAR",
        ", ",
        "by field",
        ": ",
        "$BY_FIELD",
        ", ",
        "descending",
        ": ",
        "$DESCENDING",
        ", ",
        "using case",
        ": ",
        "$USING_CASE"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$BY_FIELD": {
          "label": "by field",
          "type": "text",
          "key": "$BY_FIELD",
          "internal": false,
          "tag": "by_field",
          "sel": "by_field"
        },
        "$DESCENDING": {
          "label": "descending",
          "type": "bool_eval",
          "optional": true,
          "key": "$DESCENDING",
          "internal": false,
          "tag": "descending",
          "sel": "descending"
        },
        "$USING_CASE": {
          "label": "using case",
          "type": "bool_eval",
          "optional": true,
          "key": "$USING_CASE",
          "internal": false,
          "tag": "using_case",
          "sel": "using_case"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "List Sort Text",
      "short": "Rearrange the elements in the named list by using the designated pattern to test pairs of elements."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "by field",
        "type": "text",
        "key": "$BY_FIELD",
        "internal": false,
        "tag": "by_field",
        "sel": "by_field"
      },
      {
        "label": "descending",
        "type": "bool_eval",
        "optional": true,
        "key": "$DESCENDING",
        "internal": false,
        "tag": "descending",
        "sel": "descending"
      },
      {
        "label": "using case",
        "type": "bool_eval",
        "optional": true,
        "key": "$USING_CASE",
        "internal": false,
        "tag": "using_case",
        "sel": "using_case"
      }
    ]
  },
  "list_sort_using": {
    "name": "list_sort_using",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "sort",
        ": ",
        "$VAR",
        ", ",
        "using",
        ": ",
        "$USING"
      ],
      "params": {
        "$VAR": {
          "label": "_",
          "type": "variable_name",
          "key": "$VAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$USING": {
          "label": "using",
          "type": "text",
          "key": "$USING",
          "internal": false,
          "tag": "using",
          "sel": "using"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "List Sort Using",
      "short": "Rearrange the elements in the named list by using the designated pattern to test pairs of elements."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$VAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "using",
        "type": "text",
        "key": "$USING",
        "internal": false,
        "tag": "using",
        "sel": "using"
      }
    ]
  },
  "list_source": {
    "name": "list_source",
    "desc": "Helper for accessing lists.",
    "uses": "slot",
    "group": [
      "list"
    ],
    "params": []
  },
  "list_splice": {
    "name": "list_splice",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "splice",
        ": ",
        "$LIST",
        ", ",
        "start",
        ": ",
        "$START",
        ", ",
        "remove",
        ": ",
        "$REMOVE",
        ", ",
        "insert",
        ": ",
        "$INSERT"
      ],
      "params": {
        "$LIST": {
          "label": "_",
          "type": "text",
          "key": "$LIST",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$START": {
          "label": "start",
          "type": "number_eval",
          "key": "$START",
          "internal": false,
          "tag": "start",
          "sel": "start"
        },
        "$REMOVE": {
          "label": "remove",
          "type": "number_eval",
          "key": "$REMOVE",
          "internal": false,
          "tag": "remove",
          "sel": "remove"
        },
        "$INSERT": {
          "label": "insert",
          "type": "assignment",
          "key": "$INSERT",
          "internal": false,
          "tag": "insert",
          "sel": "insert"
        }
      },
      "slots": [
        "execute",
        "num_list_eval",
        "text_list_eval",
        "record_list_eval"
      ]
    },
    "desc": {
      "label": "List Splice",
      "short": "Modify a list by adding and removing elements. Note: the type of the elements being added must match the type of the list. Text cant be added to a list of numbers, numbers cant be added to a list of text. If the starting index is negative, it will begin that many elements from the end of the array. If list's length + the start is less than 0, it will begin from index 0. If the remove count is missing, it removes all elements from the start to the end; if it is 0 or negative, no elements are removed."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$LIST",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "start",
        "type": "number_eval",
        "key": "$START",
        "internal": false,
        "tag": "start",
        "sel": "start"
      },
      {
        "label": "remove",
        "type": "number_eval",
        "key": "$REMOVE",
        "internal": false,
        "tag": "remove",
        "sel": "remove"
      },
      {
        "label": "insert",
        "type": "assignment",
        "key": "$INSERT",
        "internal": false,
        "tag": "insert",
        "sel": "insert"
      }
    ]
  },
  "list_target": {
    "name": "list_target",
    "desc": "Helper for accessing lists.",
    "uses": "slot",
    "group": [
      "list"
    ],
    "params": []
  },
  "literal_value": {
    "name": "literal_value",
    "desc": "Slot for constant values.",
    "uses": "slot",
    "group": [
      "literal"
    ],
    "params": []
  },
  "logging_level": {
    "name": "logging_level",
    "uses": "str",
    "group": [
      "debug"
    ],
    "with": {
      "tokens": [
        "$NOTE",
        " ",
        "$TO_DO",
        " ",
        "$FIX",
        " ",
        "$INFO",
        " ",
        "$WARNING",
        " ",
        "$ERROR"
      ],
      "params": {
        "$NOTE": {
          "label": "note",
          "value": "note",
          "key": "$NOTE",
          "internal": false,
          "tag": "note",
          "sel": "note"
        },
        "$TO_DO": {
          "label": "to_do",
          "value": "to_do",
          "key": "$TO_DO",
          "internal": false,
          "tag": "to_do",
          "sel": "to_do"
        },
        "$FIX": {
          "label": "fix",
          "value": "fix",
          "key": "$FIX",
          "internal": false,
          "tag": "fix",
          "sel": "fix"
        },
        "$INFO": {
          "label": "info",
          "value": "info",
          "key": "$INFO",
          "internal": false,
          "tag": "info",
          "sel": "info"
        },
        "$WARNING": {
          "label": "warning",
          "value": "warning",
          "key": "$WARNING",
          "internal": false,
          "tag": "warning",
          "sel": "warning"
        },
        "$ERROR": {
          "label": "error",
          "value": "error",
          "key": "$ERROR",
          "internal": false,
          "tag": "error",
          "sel": "error"
        }
      }
    },
    "params": [
      {
        "label": "note",
        "value": "note",
        "key": "$NOTE",
        "internal": false,
        "tag": "note",
        "sel": "note"
      },
      {
        "label": "to_do",
        "value": "to_do",
        "key": "$TO_DO",
        "internal": false,
        "tag": "to_do",
        "sel": "to_do"
      },
      {
        "label": "fix",
        "value": "fix",
        "key": "$FIX",
        "internal": false,
        "tag": "fix",
        "sel": "fix"
      },
      {
        "label": "info",
        "value": "info",
        "key": "$INFO",
        "internal": false,
        "tag": "info",
        "sel": "info"
      },
      {
        "label": "warning",
        "value": "warning",
        "key": "$WARNING",
        "internal": false,
        "tag": "warning",
        "sel": "warning"
      },
      {
        "label": "error",
        "value": "error",
        "key": "$ERROR",
        "internal": false,
        "tag": "error",
        "sel": "error"
      }
    ]
  },
  "make_lowercase": {
    "name": "make_lowercase",
    "uses": "flow",
    "group": [
      "core",
      "format"
    ],
    "with": {
      "tokens": [
        "lower",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "_",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Make Lowercase",
      "short": "Returns new text, with every letter turned into lowercase. For example, 'shout' from 'SHOUT'."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "make_opposite": {
    "name": "make_opposite",
    "desc": "The opposite of east is west.",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "language"
    ],
    "with": {
      "tokens": [
        "The opposite of ",
        "$WORD",
        " is the ",
        "$OPPOSITE",
        "."
      ],
      "params": {
        "$WORD": {
          "label": "word",
          "type": "text",
          "key": "$WORD",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OPPOSITE": {
          "label": "opposite",
          "type": "text",
          "key": "$OPPOSITE",
          "internal": false,
          "tag": "opposite",
          "sel": "opposite"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "make",
    "params": [
      {
        "label": "word",
        "type": "text",
        "key": "$WORD",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "opposite",
        "type": "text",
        "key": "$OPPOSITE",
        "internal": false,
        "tag": "opposite",
        "sel": "opposite"
      }
    ]
  },
  "make_plural": {
    "name": "make_plural",
    "desc": {
      "label": "make_plural",
      "short": "The plural of person is people.",
      "long": "The plural of person is persons."
    },
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "language"
    ],
    "with": {
      "tokens": [
        "The plural of ",
        "$SINGULAR",
        " is ",
        "$PLURAL",
        "."
      ],
      "params": {
        "$SINGULAR": {
          "label": "singular",
          "type": "text",
          "key": "$SINGULAR",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PLURAL": {
          "label": "plural",
          "type": "text",
          "key": "$PLURAL",
          "internal": false,
          "tag": "plural",
          "sel": "plural"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "make",
    "params": [
      {
        "label": "singular",
        "type": "text",
        "key": "$SINGULAR",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "plural",
        "type": "text",
        "key": "$PLURAL",
        "internal": false,
        "tag": "plural",
        "sel": "plural"
      }
    ]
  },
  "make_reversed": {
    "name": "make_reversed",
    "uses": "flow",
    "group": [
      "core",
      "format"
    ],
    "with": {
      "tokens": [
        "reverse",
        " ",
        "text",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "text",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "text",
          "sel": "text"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Make Reversed",
      "short": "Returns new text flipped back to front. For example, 'elppA' from 'Apple', or 'noon' from 'noon'."
    },
    "params": [
      {
        "label": "text",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "text",
        "sel": "text"
      }
    ]
  },
  "make_sentence_case": {
    "name": "make_sentence_case",
    "uses": "flow",
    "group": [
      "core",
      "format"
    ],
    "with": {
      "tokens": [
        "sentence",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "_",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Make Sentence Case",
      "short": "Returns new text, start each sentence with a capital letter. For example, 'Empire Apple.' from 'Empire apple.'."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "make_title_case": {
    "name": "make_title_case",
    "uses": "flow",
    "group": [
      "core",
      "format"
    ],
    "with": {
      "tokens": [
        "title",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "_",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Make Title Case",
      "short": "Returns new text, starting each word with a capital letter. For example, 'Empire Apple' from 'empire apple'."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "make_uppercase": {
    "name": "make_uppercase",
    "uses": "flow",
    "group": [
      "core",
      "format"
    ],
    "with": {
      "tokens": [
        "upper",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "_",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Make Uppercase",
      "short": "Returns new text, with every letter turned into uppercase. For example, 'APPLE' from 'apple'."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "many_many": {
    "name": "many_many",
    "uses": "flow",
    "group": [
      "eph",
      "eph_relation_helpers"
    ],
    "with": {
      "tokens": [
        "kinds",
        ": ",
        "$KINDS",
        ", ",
        "to_kinds",
        ": ",
        "$OTHER_KINDS"
      ],
      "params": {
        "$KINDS": {
          "label": "_",
          "type": "text",
          "key": "$KINDS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OTHER_KINDS": {
          "label": "to_kinds",
          "type": "text",
          "key": "$OTHER_KINDS",
          "internal": false,
          "tag": "to_kinds",
          "sel": "to_kinds"
        }
      }
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$KINDS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "to_kinds",
        "type": "text",
        "key": "$OTHER_KINDS",
        "internal": false,
        "tag": "to_kinds",
        "sel": "to_kinds"
      }
    ]
  },
  "many_one": {
    "name": "many_one",
    "uses": "flow",
    "group": [
      "eph",
      "eph_relation_helpers"
    ],
    "with": {
      "tokens": [
        "kinds",
        ": ",
        "$KINDS",
        ", ",
        "to_kind",
        ": ",
        "$OTHER_KIND"
      ],
      "params": {
        "$KINDS": {
          "label": "_",
          "type": "text",
          "key": "$KINDS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OTHER_KIND": {
          "label": "to_kind",
          "type": "text",
          "key": "$OTHER_KIND",
          "internal": false,
          "tag": "to_kind",
          "sel": "to_kind"
        }
      }
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$KINDS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "to_kind",
        "type": "text",
        "key": "$OTHER_KIND",
        "internal": false,
        "tag": "to_kind",
        "sel": "to_kind"
      }
    ]
  },
  "many_to_many": {
    "name": "many_to_many",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "relations"
    ],
    "with": {
      "tokens": [
        "many ",
        "$KINDS",
        " to many ",
        "$OTHER_KINDS"
      ],
      "params": {
        "$KINDS": {
          "label": "kinds",
          "type": "plural_kinds",
          "key": "$KINDS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OTHER_KINDS": {
          "label": "other kinds",
          "type": "plural_kinds",
          "key": "$OTHER_KINDS",
          "internal": false,
          "tag": "other_kinds",
          "sel": "other_kinds"
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "kinds",
        "type": "plural_kinds",
        "key": "$KINDS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "other kinds",
        "type": "plural_kinds",
        "key": "$OTHER_KINDS",
        "internal": false,
        "tag": "other_kinds",
        "sel": "other_kinds"
      }
    ]
  },
  "many_to_one": {
    "name": "many_to_one",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "relations"
    ],
    "with": {
      "tokens": [
        "many ",
        "$KINDS",
        " to one ",
        "$KIND"
      ],
      "params": {
        "$KINDS": {
          "label": "kinds",
          "type": "plural_kinds",
          "key": "$KINDS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$KIND": {
          "label": "kind",
          "type": "singular_kind",
          "key": "$KIND",
          "internal": false,
          "tag": "kind",
          "sel": "kind"
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "kinds",
        "type": "plural_kinds",
        "key": "$KINDS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "kind",
        "type": "singular_kind",
        "key": "$KIND",
        "internal": false,
        "tag": "kind",
        "sel": "kind"
      }
    ]
  },
  "map_connection": {
    "name": "map_connection",
    "desc": "Chooses between a one-way and a two-way connection between rooms.  Generally, this only makes sense for map headings, but it at least causes 'departing' to check that a reverse connection exists.  Note: moving from one room leads you into another somewhat generically.  Sometimes its useful to position the player on entry to a new room based on where they came from.  Using, a previous room or last used door can do the trick.",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "map_making"
    ],
    "with": {
      "tokens": [
        "$ARRIVING_AT",
        " or ",
        "$CONNECTING_TO"
      ],
      "params": {
        "$ARRIVING_AT": {
          "label": "arriving_at",
          "value": "arriving_at",
          "key": "$ARRIVING_AT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$CONNECTING_TO": {
          "label": "connecting_to",
          "value": "connecting_to",
          "key": "$CONNECTING_TO",
          "internal": false,
          "tag": "connecting_to",
          "sel": "connecting_to"
        }
      }
    },
    "params": [
      {
        "label": "arriving_at",
        "value": "arriving_at",
        "key": "$ARRIVING_AT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "connecting_to",
        "value": "connecting_to",
        "key": "$CONNECTING_TO",
        "internal": false,
        "tag": "connecting_to",
        "sel": "connecting_to"
      }
    ]
  },
  "map_departing": {
    "name": "map_departing",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "map_making",
      "modeling"
    ],
    "with": {
      "tokens": [
        "departing",
        " ",
        "from",
        ": ",
        "$ROOM",
        ", ",
        "via",
        ": ",
        "$DOOR",
        ", ",
        "and",
        ": ",
        "$MAP_CONNECTION",
        ", ",
        "other room",
        ": ",
        "$OTHER_ROOM"
      ],
      "params": {
        "$ROOM": {
          "label": "from",
          "type": "named_noun",
          "key": "$ROOM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$DOOR": {
          "label": "via",
          "type": "named_noun",
          "key": "$DOOR",
          "internal": false,
          "tag": "via",
          "sel": "via"
        },
        "$MAP_CONNECTION": {
          "label": "and",
          "type": "map_connection",
          "key": "$MAP_CONNECTION",
          "internal": false,
          "tag": "and",
          "sel": "and"
        },
        "$OTHER_ROOM": {
          "label": "other room",
          "type": "named_noun",
          "key": "$OTHER_ROOM",
          "internal": false,
          "tag": "other_room",
          "sel": "other_room"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "desc": {
      "label": "Map Departing",
      "short": "Leaving a room by by going through a door ( ex. departing the house via the front door... )"
    },
    "params": [
      {
        "label": "from",
        "type": "named_noun",
        "key": "$ROOM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "via",
        "type": "named_noun",
        "key": "$DOOR",
        "internal": false,
        "tag": "via",
        "sel": "via"
      },
      {
        "label": "and",
        "type": "map_connection",
        "key": "$MAP_CONNECTION",
        "internal": false,
        "tag": "and",
        "sel": "and"
      },
      {
        "label": "other room",
        "type": "named_noun",
        "key": "$OTHER_ROOM",
        "internal": false,
        "tag": "other_room",
        "sel": "other_room"
      }
    ]
  },
  "map_direction": {
    "name": "map_direction",
    "desc": "A heading for movement within the game, often connecting one room within the game to another.  The most commonly used are standard compass directions like 'north', 'east', 'south', and 'west'.",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "map_making",
      "modeling"
    ],
    "with": {
      "tokens": [
        "$MAP_DIRECTION"
      ],
      "params": {
        "$MAP_DIRECTION": {
          "label": "map direction",
          "value": null,
          "key": "$MAP_DIRECTION",
          "internal": false,
          "tag": "map_direction",
          "sel": "map_direction"
        }
      }
    },
    "params": [
      {
        "label": "map direction",
        "value": null,
        "key": "$MAP_DIRECTION",
        "internal": false,
        "tag": "map_direction",
        "sel": "map_direction"
      }
    ]
  },
  "map_heading": {
    "name": "map_heading",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "map_making",
      "modeling"
    ],
    "with": {
      "tokens": [
        "heading",
        ": ",
        "$DIR",
        ", ",
        "from",
        ": ",
        "$ROOM",
        ", ",
        "via",
        ": ",
        "$DOOR",
        ", ",
        "and",
        ": ",
        "$MAP_CONNECTION",
        ", ",
        "other room",
        ": ",
        "$OTHER_ROOM"
      ],
      "params": {
        "$DIR": {
          "label": "_",
          "type": "map_direction",
          "key": "$DIR",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$ROOM": {
          "label": "from",
          "type": "named_noun",
          "key": "$ROOM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$DOOR": {
          "label": "via",
          "type": "named_noun",
          "optional": true,
          "key": "$DOOR",
          "internal": false,
          "tag": "via",
          "sel": "via"
        },
        "$MAP_CONNECTION": {
          "label": "and",
          "type": "map_connection",
          "key": "$MAP_CONNECTION",
          "internal": false,
          "tag": "and",
          "sel": "and"
        },
        "$OTHER_ROOM": {
          "label": "other room",
          "type": "named_noun",
          "key": "$OTHER_ROOM",
          "internal": false,
          "tag": "other_room",
          "sel": "other_room"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "desc": {
      "label": "Map Heading",
      "short": "Leaving a room by moving in a compass direction ( ex. heading east... )"
    },
    "params": [
      {
        "label": "_",
        "type": "map_direction",
        "key": "$DIR",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "named_noun",
        "key": "$ROOM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "via",
        "type": "named_noun",
        "optional": true,
        "key": "$DOOR",
        "internal": false,
        "tag": "via",
        "sel": "via"
      },
      {
        "label": "and",
        "type": "map_connection",
        "key": "$MAP_CONNECTION",
        "internal": false,
        "tag": "and",
        "sel": "and"
      },
      {
        "label": "other room",
        "type": "named_noun",
        "key": "$OTHER_ROOM",
        "internal": false,
        "tag": "other_room",
        "sel": "other_room"
      }
    ]
  },
  "matches": {
    "name": "matches",
    "uses": "flow",
    "group": [
      "core",
      "matching"
    ],
    "with": {
      "tokens": [
        "matches",
        ": ",
        "$TEXT",
        ", ",
        "to",
        ": ",
        "$PATTERN",
        ", ",
        "-",
        ": ",
        "$CACHE"
      ],
      "params": {
        "$TEXT": {
          "label": "_",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PATTERN": {
          "label": "to",
          "type": "text",
          "key": "$PATTERN",
          "internal": false,
          "tag": "to",
          "sel": "to"
        },
        "$CACHE": {
          "label": "-",
          "type": "match_cache",
          "key": "$CACHE",
          "internal": true,
          "tag": "-",
          "sel": "-"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Matches",
      "short": "Determine whether the specified text is similar to the specified regular expression."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "to",
        "type": "text",
        "key": "$PATTERN",
        "internal": false,
        "tag": "to",
        "sel": "to"
      },
      {
        "label": "-",
        "type": "match_cache",
        "key": "$CACHE",
        "internal": true,
        "tag": "-",
        "sel": "-"
      }
    ]
  },
  "name_of": {
    "name": "name_of",
    "uses": "flow",
    "group": [
      "core",
      "objects"
    ],
    "with": {
      "tokens": [
        "name_of",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$OBJECT": {
          "label": "_",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Name Of",
      "short": "Full name of the object."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "named_noun": {
    "name": "named_noun",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "with": {
      "tokens": [
        "$DETERMINER",
        " ",
        "$NAME"
      ],
      "params": {
        "$DETERMINER": {
          "label": "determiner",
          "type": "determiner",
          "key": "$DETERMINER",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NAME": {
          "label": "name",
          "type": "noun_name",
          "key": "$NAME",
          "internal": false,
          "tag": "named",
          "sel": "named"
        }
      },
      "slots": []
    },
    "lede": "Noun",
    "sign": "Noun:named:",
    "params": [
      {
        "label": "determiner",
        "type": "determiner",
        "key": "$DETERMINER",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "name",
        "type": "noun_name",
        "key": "$NAME",
        "internal": false,
        "tag": "named",
        "sel": "named"
      }
    ]
  },
  "named_property": {
    "name": "named_property",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "named ",
        "$NAME",
        " ( ",
        "$TYPE",
        " )"
      ],
      "params": {
        "$NAME": {
          "label": "name",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$TYPE": {
          "label": "of",
          "type": "text",
          "optional": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "type",
          "sel": "type"
        }
      },
      "slots": []
    },
    "embed": true,
    "params": [
      {
        "label": "name",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "of",
        "type": "text",
        "optional": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "type",
        "sel": "type"
      }
    ]
  },
  "never": {
    "name": "never",
    "uses": "flow",
    "group": [
      "core",
      "logic"
    ],
    "with": {
      "tokens": [
        "never"
      ],
      "params": {},
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Never",
      "short": "Returns false."
    },
    "params": []
  },
  "newline": {
    "name": "newline",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "br"
      ],
      "params": {},
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Newline",
      "short": "Start a new line."
    },
    "params": []
  },
  "next": {
    "name": "next",
    "uses": "flow",
    "group": [
      "core",
      "flow"
    ],
    "with": {
      "tokens": [
        "next"
      ],
      "params": {},
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Next",
      "short": "In a repeating loop, try the next iteration of the loop."
    },
    "params": []
  },
  "not": {
    "name": "not",
    "uses": "flow",
    "group": [
      "core",
      "logic"
    ],
    "with": {
      "tokens": [
        "not",
        ": ",
        "$TEST"
      ],
      "params": {
        "$TEST": {
          "label": "_",
          "type": "bool_eval",
          "key": "$TEST",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Not",
      "short": "Returns the opposite value."
    },
    "params": [
      {
        "label": "_",
        "type": "bool_eval",
        "key": "$TEST",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "noun": {
    "name": "noun",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "noun",
        ": ",
        "$KIND"
      ],
      "params": {
        "$KIND": {
          "label": "_",
          "type": "text",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "scanner_maker"
      ]
    },
    "desc": {
      "label": "Noun",
      "short": "makes a parser scanner"
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "noun_assignment": {
    "name": "noun_assignment",
    "desc": {
      "label": "Assign text to a noun",
      "short": "Assign text.",
      "long": "Gives a noun one or more lines of text."
    },
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "The ",
        "$PROPERTY",
        " of ",
        "$NOUNS",
        " is ",
        "$LINES"
      ],
      "params": {
        "$PROPERTY": {
          "label": "property",
          "type": "property",
          "key": "$PROPERTY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NOUNS": {
          "label": "nouns",
          "type": "named_noun",
          "repeats": true,
          "key": "$NOUNS",
          "internal": false,
          "tag": "nouns",
          "sel": "nouns"
        },
        "$LINES": {
          "label": "the text",
          "type": "lines",
          "filters": [
            "quote"
          ],
          "key": "$LINES",
          "internal": false,
          "tag": "lines",
          "sel": "lines"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "property",
        "type": "property",
        "key": "$PROPERTY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "nouns",
        "type": "named_noun",
        "repeats": true,
        "key": "$NOUNS",
        "internal": false,
        "tag": "nouns",
        "sel": "nouns"
      },
      {
        "label": "the text",
        "type": "lines",
        "filters": [
          "quote"
        ],
        "key": "$LINES",
        "internal": false,
        "tag": "lines",
        "sel": "lines"
      }
    ]
  },
  "noun_continuation": {
    "name": "noun_continuation",
    "uses": "slot",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "params": []
  },
  "noun_kind_statement": {
    "name": "noun_kind_statement",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "with": {
      "tokens": [
        "$NOUNS",
        " ",
        "$KIND_OF_NOUN",
        " ",
        "$MORE",
        "."
      ],
      "params": {
        "$NOUNS": {
          "label": "nouns",
          "type": "named_noun",
          "repeats": true,
          "filters": [
            "comma-and"
          ],
          "key": "$NOUNS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$KIND_OF_NOUN": {
          "label": "is a kind",
          "type": "kind_of_noun",
          "key": "$KIND_OF_NOUN",
          "internal": false,
          "tag": "depict",
          "sel": "depict"
        },
        "$MORE": {
          "label": "and",
          "type": "noun_continuation",
          "optional": true,
          "repeats": true,
          "key": "$MORE",
          "internal": false,
          "tag": "and",
          "sel": "and"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "Nouns",
    "sign": "Nouns:depict:and:",
    "params": [
      {
        "label": "nouns",
        "type": "named_noun",
        "repeats": true,
        "filters": [
          "comma-and"
        ],
        "key": "$NOUNS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "is a kind",
        "type": "kind_of_noun",
        "key": "$KIND_OF_NOUN",
        "internal": false,
        "tag": "depict",
        "sel": "depict"
      },
      {
        "label": "and",
        "type": "noun_continuation",
        "optional": true,
        "repeats": true,
        "key": "$MORE",
        "internal": false,
        "tag": "and",
        "sel": "and"
      }
    ]
  },
  "noun_name": {
    "name": "noun_name",
    "desc": "Noun name: Some specific person, place, or thing; or, more rarely, a kind.  Proper names are usually capitalized:  For example, maybe: 'Haruki', 'Jane', or 'Toronto'.  Common names are usually not capitalized. For example, maybe: 'table', 'chair', or 'dog park'.  A set of duplicate object uses their kind. For instance: twelve 'cats'.`",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "nouns",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$NOUN_NAME"
      ],
      "params": {
        "$NOUN_NAME": {
          "label": "noun name",
          "value": null,
          "key": "$NOUN_NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "noun name",
        "value": null,
        "key": "$NOUN_NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "noun_relation": {
    "name": "noun_relation",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "with": {
      "tokens": [
        "$ARE_BEING",
        " ",
        "$RELATION",
        " ",
        "$OTHER_NOUNS"
      ],
      "params": {
        "$ARE_BEING": {
          "label": "are being",
          "type": "are_being",
          "optional": true,
          "key": "$ARE_BEING",
          "internal": false,
          "tag": "are_being",
          "sel": "are_being"
        },
        "$RELATION": {
          "label": "relation",
          "type": "relation_name",
          "key": "$RELATION",
          "internal": false,
          "tag": "relation",
          "sel": "relation"
        },
        "$OTHER_NOUNS": {
          "label": "other nouns",
          "type": "named_noun",
          "repeats": true,
          "filters": [
            "comma-and"
          ],
          "key": "$OTHER_NOUNS",
          "internal": false,
          "tag": "other_nouns",
          "sel": "other_nouns"
        }
      },
      "slots": [
        "noun_continuation"
      ]
    },
    "params": [
      {
        "label": "are being",
        "type": "are_being",
        "optional": true,
        "key": "$ARE_BEING",
        "internal": false,
        "tag": "are_being",
        "sel": "are_being"
      },
      {
        "label": "relation",
        "type": "relation_name",
        "key": "$RELATION",
        "internal": false,
        "tag": "relation",
        "sel": "relation"
      },
      {
        "label": "other nouns",
        "type": "named_noun",
        "repeats": true,
        "filters": [
          "comma-and"
        ],
        "key": "$OTHER_NOUNS",
        "internal": false,
        "tag": "other_nouns",
        "sel": "other_nouns"
      }
    ]
  },
  "noun_relation_statement": {
    "name": "noun_relation_statement",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "with": {
      "tokens": [
        "$NOUNS",
        " ",
        "$NOUN_RELATION",
        " ",
        "$MORE",
        "."
      ],
      "params": {
        "$NOUNS": {
          "label": "nouns",
          "type": "named_noun",
          "repeats": true,
          "filters": [
            "comma-and"
          ],
          "key": "$NOUNS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NOUN_RELATION": {
          "label": "noun relation",
          "type": "noun_relation",
          "key": "$NOUN_RELATION",
          "internal": false,
          "tag": "relate_to",
          "sel": "relate_to"
        },
        "$MORE": {
          "label": "and",
          "type": "noun_continuation",
          "optional": true,
          "repeats": true,
          "key": "$MORE",
          "internal": false,
          "tag": "and",
          "sel": "and"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "Nouns",
    "sign": "Nouns:relate_to:and:",
    "params": [
      {
        "label": "nouns",
        "type": "named_noun",
        "repeats": true,
        "filters": [
          "comma-and"
        ],
        "key": "$NOUNS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "noun relation",
        "type": "noun_relation",
        "key": "$NOUN_RELATION",
        "internal": false,
        "tag": "relate_to",
        "sel": "relate_to"
      },
      {
        "label": "and",
        "type": "noun_continuation",
        "optional": true,
        "repeats": true,
        "key": "$MORE",
        "internal": false,
        "tag": "and",
        "sel": "and"
      }
    ]
  },
  "noun_trait_statement": {
    "name": "noun_trait_statement",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "with": {
      "tokens": [
        "$NOUNS",
        " ",
        "$NOUN_TRAITS",
        " ",
        "$MORE",
        "."
      ],
      "params": {
        "$NOUNS": {
          "label": "nouns",
          "type": "named_noun",
          "repeats": true,
          "filters": [
            "comma-and"
          ],
          "key": "$NOUNS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NOUN_TRAITS": {
          "label": "noun traits",
          "type": "noun_traits",
          "key": "$NOUN_TRAITS",
          "internal": false,
          "tag": "start_as",
          "sel": "start_as"
        },
        "$MORE": {
          "label": "and",
          "type": "noun_continuation",
          "optional": true,
          "repeats": true,
          "key": "$MORE",
          "internal": false,
          "tag": "and",
          "sel": "and"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "Nouns",
    "sign": "Nouns:start_as:and:",
    "params": [
      {
        "label": "nouns",
        "type": "named_noun",
        "repeats": true,
        "filters": [
          "comma-and"
        ],
        "key": "$NOUNS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "noun traits",
        "type": "noun_traits",
        "key": "$NOUN_TRAITS",
        "internal": false,
        "tag": "start_as",
        "sel": "start_as"
      },
      {
        "label": "and",
        "type": "noun_continuation",
        "optional": true,
        "repeats": true,
        "key": "$MORE",
        "internal": false,
        "tag": "and",
        "sel": "and"
      }
    ]
  },
  "noun_traits": {
    "name": "noun_traits",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "with": {
      "tokens": [
        "$ARE_BEING",
        " ",
        "$TRAIT"
      ],
      "params": {
        "$ARE_BEING": {
          "label": "are being",
          "type": "are_being",
          "key": "$ARE_BEING",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$TRAIT": {
          "label": "trait",
          "type": "trait",
          "repeats": true,
          "filters": [
            "comma-and"
          ],
          "key": "$TRAIT",
          "internal": false,
          "tag": "trait",
          "sel": "trait"
        }
      },
      "slots": [
        "noun_continuation"
      ]
    },
    "params": [
      {
        "label": "are being",
        "type": "are_being",
        "key": "$ARE_BEING",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "trait",
        "type": "trait",
        "repeats": true,
        "filters": [
          "comma-and"
        ],
        "key": "$TRAIT",
        "internal": false,
        "tag": "trait",
        "sel": "trait"
      }
    ]
  },
  "num_list_eval": {
    "name": "num_list_eval",
    "desc": "Statements which return a list of numbers.",
    "uses": "slot",
    "group": [
      "rt"
    ],
    "params": []
  },
  "num_list_property": {
    "name": "num_list_property",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "a list of nums ",
        "named ",
        "$NAME",
        " ( ",
        "$TYPE",
        " )",
        " ",
        "$INITIALLY"
      ],
      "params": {
        "$NAMED_PROPERTY": {
          "label": "named property",
          "type": "named_property",
          "expanded": true,
          "key": "$NAMED_PROPERTY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NAME": {
          "label": "name",
          "type": "text",
          "embedded": true,
          "key": "$NAME",
          "internal": false,
          "tag": "named",
          "sel": "named"
        },
        "$TYPE": {
          "label": "of",
          "type": "text",
          "optional": true,
          "embedded": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "of",
          "sel": "of"
        },
        "$INITIALLY": {
          "label": "initially",
          "type": "num_list_eval",
          "optional": true,
          "key": "$INITIALLY",
          "internal": false,
          "tag": "initially",
          "sel": "initially"
        }
      },
      "slots": [
        "property_slot"
      ]
    },
    "lede": "num_list",
    "sign": "num_list named:of:initially:",
    "params": [
      {
        "label": "named property",
        "type": "named_property",
        "expanded": true,
        "key": "$NAMED_PROPERTY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "name",
        "type": "text",
        "embedded": true,
        "key": "$NAME",
        "internal": false,
        "tag": "named",
        "sel": "named"
      },
      {
        "label": "of",
        "type": "text",
        "optional": true,
        "embedded": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "of",
        "sel": "of"
      },
      {
        "label": "initially",
        "type": "num_list_eval",
        "optional": true,
        "key": "$INITIALLY",
        "internal": false,
        "tag": "initially",
        "sel": "initially"
      }
    ]
  },
  "num_spec": {
    "name": "num_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "num",
        " ",
        "exclusively",
        ": ",
        "$EXCLUSIVELY",
        ", ",
        "uses",
        ": ",
        "$USES"
      ],
      "params": {
        "$EXCLUSIVELY": {
          "label": "exclusively",
          "type": "bool",
          "optional": true,
          "key": "$EXCLUSIVELY",
          "internal": false,
          "tag": "exclusively",
          "sel": "exclusively"
        },
        "$USES": {
          "label": "uses",
          "type": "number",
          "repeats": true,
          "key": "$USES",
          "internal": false,
          "tag": "uses",
          "sel": "uses"
        }
      }
    },
    "desc": {
      "label": "Num Spec",
      "short": [
        "when exclusive is true means the user can only specify one of the options",
        "otherwise the options are treated as hints."
      ]
    },
    "params": [
      {
        "label": "exclusively",
        "type": "bool",
        "optional": true,
        "key": "$EXCLUSIVELY",
        "internal": false,
        "tag": "exclusively",
        "sel": "exclusively"
      },
      {
        "label": "uses",
        "type": "number",
        "repeats": true,
        "key": "$USES",
        "internal": false,
        "tag": "uses",
        "sel": "uses"
      }
    ]
  },
  "num_value": {
    "name": "num_value",
    "uses": "flow",
    "group": [
      "literal"
    ],
    "with": {
      "tokens": [
        "num",
        ": ",
        "$NUM",
        ", ",
        "class",
        ": ",
        "$CLASS"
      ],
      "params": {
        "$NUM": {
          "label": "_",
          "type": "number",
          "key": "$NUM",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$CLASS": {
          "label": "class",
          "type": "text",
          "optional": true,
          "key": "$CLASS",
          "internal": false,
          "tag": "class",
          "sel": "class"
        }
      },
      "slots": [
        "number_eval",
        "literal_value"
      ]
    },
    "desc": {
      "label": "Num Value",
      "short": "Specify a particular number."
    },
    "params": [
      {
        "label": "_",
        "type": "number",
        "key": "$NUM",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "class",
        "type": "text",
        "optional": true,
        "key": "$CLASS",
        "internal": false,
        "tag": "class",
        "sel": "class"
      }
    ]
  },
  "num_values": {
    "name": "num_values",
    "uses": "flow",
    "group": [
      "literal"
    ],
    "with": {
      "tokens": [
        "nums",
        ": ",
        "$VALUES",
        ", ",
        "class",
        ": ",
        "$CLASS"
      ],
      "params": {
        "$VALUES": {
          "label": "_",
          "type": "number",
          "repeats": true,
          "key": "$VALUES",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$CLASS": {
          "label": "class",
          "type": "text",
          "optional": true,
          "key": "$CLASS",
          "internal": false,
          "tag": "class",
          "sel": "class"
        }
      },
      "slots": [
        "num_list_eval",
        "literal_value"
      ]
    },
    "desc": {
      "label": "Num Values",
      "short": "Number List: Specify a list of numbers."
    },
    "params": [
      {
        "label": "_",
        "type": "number",
        "repeats": true,
        "key": "$VALUES",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "class",
        "type": "text",
        "optional": true,
        "key": "$CLASS",
        "internal": false,
        "tag": "class",
        "sel": "class"
      }
    ]
  },
  "number": {
    "name": "number",
    "uses": "num",
    "group": [
      "prim"
    ],
    "params": []
  },
  "number_eval": {
    "name": "number_eval",
    "desc": "Statements which return a number.",
    "uses": "slot",
    "group": [
      "rt"
    ],
    "params": []
  },
  "number_property": {
    "name": "number_property",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "a number ",
        "named ",
        "$NAME",
        " ( ",
        "$TYPE",
        " )",
        " ",
        "$INITIALLY"
      ],
      "params": {
        "$NAMED_PROPERTY": {
          "label": "named property",
          "type": "named_property",
          "expanded": true,
          "key": "$NAMED_PROPERTY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NAME": {
          "label": "name",
          "type": "text",
          "embedded": true,
          "key": "$NAME",
          "internal": false,
          "tag": "named",
          "sel": "named"
        },
        "$TYPE": {
          "label": "of",
          "type": "text",
          "optional": true,
          "embedded": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "of",
          "sel": "of"
        },
        "$INITIALLY": {
          "label": "initially",
          "type": "number_eval",
          "optional": true,
          "key": "$INITIALLY",
          "internal": false,
          "tag": "initially",
          "sel": "initially"
        }
      },
      "slots": [
        "property_slot"
      ]
    },
    "lede": "number",
    "sign": "number named:of:initially:",
    "params": [
      {
        "label": "named property",
        "type": "named_property",
        "expanded": true,
        "key": "$NAMED_PROPERTY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "name",
        "type": "text",
        "embedded": true,
        "key": "$NAME",
        "internal": false,
        "tag": "named",
        "sel": "named"
      },
      {
        "label": "of",
        "type": "text",
        "optional": true,
        "embedded": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "of",
        "sel": "of"
      },
      {
        "label": "initially",
        "type": "number_eval",
        "optional": true,
        "key": "$INITIALLY",
        "internal": false,
        "tag": "initially",
        "sel": "initially"
      }
    ]
  },
  "object_exists": {
    "name": "object_exists",
    "uses": "flow",
    "group": [
      "core",
      "objects"
    ],
    "with": {
      "tokens": [
        "is",
        " ",
        "valid",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$OBJECT": {
          "label": "valid",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "valid",
          "sel": "valid"
        }
      },
      "slots": [
        "bool_eval"
      ]
    },
    "desc": {
      "label": "Object Exists",
      "short": "Returns whether there is a object of the specified name."
    },
    "params": [
      {
        "label": "valid",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "valid",
        "sel": "valid"
      }
    ]
  },
  "one_many": {
    "name": "one_many",
    "uses": "flow",
    "group": [
      "eph",
      "eph_relation_helpers"
    ],
    "with": {
      "tokens": [
        "kind",
        ": ",
        "$KIND",
        ", ",
        "to_kinds",
        ": ",
        "$OTHER_KINDS"
      ],
      "params": {
        "$KIND": {
          "label": "_",
          "type": "text",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OTHER_KINDS": {
          "label": "to_kinds",
          "type": "text",
          "key": "$OTHER_KINDS",
          "internal": false,
          "tag": "to_kinds",
          "sel": "to_kinds"
        }
      }
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "to_kinds",
        "type": "text",
        "key": "$OTHER_KINDS",
        "internal": false,
        "tag": "to_kinds",
        "sel": "to_kinds"
      }
    ]
  },
  "one_one": {
    "name": "one_one",
    "uses": "flow",
    "group": [
      "eph",
      "eph_relation_helpers"
    ],
    "with": {
      "tokens": [
        "kind",
        ": ",
        "$KIND",
        ", ",
        "to_kind",
        ": ",
        "$OTHER_KIND"
      ],
      "params": {
        "$KIND": {
          "label": "_",
          "type": "text",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OTHER_KIND": {
          "label": "to_kind",
          "type": "text",
          "key": "$OTHER_KIND",
          "internal": false,
          "tag": "to_kind",
          "sel": "to_kind"
        }
      }
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "to_kind",
        "type": "text",
        "key": "$OTHER_KIND",
        "internal": false,
        "tag": "to_kind",
        "sel": "to_kind"
      }
    ]
  },
  "one_to_many": {
    "name": "one_to_many",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "relations"
    ],
    "with": {
      "tokens": [
        "one ",
        "$KIND",
        " to many ",
        "$KINDS"
      ],
      "params": {
        "$KIND": {
          "label": "kind",
          "type": "singular_kind",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$KINDS": {
          "label": "kinds",
          "type": "plural_kinds",
          "key": "$KINDS",
          "internal": false,
          "tag": "kinds",
          "sel": "kinds"
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "kind",
        "type": "singular_kind",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "kinds",
        "type": "plural_kinds",
        "key": "$KINDS",
        "internal": false,
        "tag": "kinds",
        "sel": "kinds"
      }
    ]
  },
  "one_to_one": {
    "name": "one_to_one",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "relations"
    ],
    "with": {
      "tokens": [
        "one ",
        "$KIND",
        " to one ",
        "$OTHER_KIND"
      ],
      "params": {
        "$KIND": {
          "label": "kind",
          "type": "singular_kind",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OTHER_KIND": {
          "label": "other kind",
          "type": "singular_kind",
          "key": "$OTHER_KIND",
          "internal": false,
          "tag": "other_kind",
          "sel": "other_kind"
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "kind",
        "type": "singular_kind",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "other kind",
        "type": "singular_kind",
        "key": "$OTHER_KIND",
        "internal": false,
        "tag": "other_kind",
        "sel": "other_kind"
      }
    ]
  },
  "option_spec": {
    "name": "option_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "option",
        ": ",
        "$NAME",
        ", ",
        "label",
        ": ",
        "$LABEL"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$LABEL": {
          "label": "label",
          "type": "text",
          "optional": true,
          "key": "$LABEL",
          "internal": false,
          "tag": "label",
          "sel": "label"
        }
      }
    },
    "desc": {
      "label": "Option Spec",
      "short": [
        "for string options",
        "if the label isnt specified, its derived from the name."
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "label",
        "type": "text",
        "optional": true,
        "key": "$LABEL",
        "internal": false,
        "tag": "label",
        "sel": "label"
      }
    ]
  },
  "paired_action": {
    "name": "paired_action",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "events",
      "positioned"
    ],
    "with": {
      "tokens": [
        "two ",
        "$KINDS",
        " ( the noun and other noun )"
      ],
      "params": {
        "$KINDS": {
          "label": "kinds",
          "type": "plural_kinds",
          "key": "$KINDS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "kinds",
        "type": "plural_kinds",
        "key": "$KINDS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "paragraph": {
    "name": "paragraph",
    "desc": "Phrases",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "statements"
    ],
    "with": {
      "tokens": [
        "$STORY_STATEMENT"
      ],
      "params": {
        "$STORY_STATEMENT": {
          "label": "story statement",
          "type": "story_statement",
          "optional": true,
          "repeats": true,
          "key": "$STORY_STATEMENT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "story statement",
        "type": "story_statement",
        "optional": true,
        "repeats": true,
        "key": "$STORY_STATEMENT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "pattern_actions": {
    "name": "pattern_actions",
    "desc": {
      "label": "Add actions to a pattern",
      "short": "Actions to take when using a pattern.",
      "long": ""
    },
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "patterns"
    ],
    "with": {
      "tokens": [
        "To determine ",
        "$NAME",
        " ",
        "$LOCALS",
        " do: ",
        "$RULES"
      ],
      "params": {
        "$NAME": {
          "label": "pattern name",
          "type": "pattern_name",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$LOCALS": {
          "label": "locals",
          "type": "property_slot",
          "optional": true,
          "repeats": true,
          "key": "$LOCALS",
          "internal": false,
          "tag": "provides",
          "sel": "provides"
        },
        "$RULES": {
          "label": "rules",
          "type": "pattern_rule",
          "repeats": true,
          "key": "$RULES",
          "internal": false,
          "tag": "rules",
          "sel": "rules"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "pattern",
    "sign": "pattern:provides:rules:",
    "params": [
      {
        "label": "pattern name",
        "type": "pattern_name",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "locals",
        "type": "property_slot",
        "optional": true,
        "repeats": true,
        "key": "$LOCALS",
        "internal": false,
        "tag": "provides",
        "sel": "provides"
      },
      {
        "label": "rules",
        "type": "pattern_rule",
        "repeats": true,
        "key": "$RULES",
        "internal": false,
        "tag": "rules",
        "sel": "rules"
      }
    ]
  },
  "pattern_decl": {
    "name": "pattern_decl",
    "desc": "Declare a pattern: A pattern is a bundle of functions which can either change the game world or provide information about it.  Each function in a given pattern has \"guards\" which determine whether the function applies in a particular situation.",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "patterns"
    ],
    "with": {
      "tokens": [
        "To determine ",
        "$NAME",
        " ",
        "$PARAMS",
        " ",
        "$PATTERN_RETURN",
        "."
      ],
      "params": {
        "$NAME": {
          "label": "name",
          "type": "pattern_name",
          "filters": [
            "quote"
          ],
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$PARAMS": {
          "label": "params",
          "type": "property_slot",
          "optional": true,
          "repeats": true,
          "key": "$PARAMS",
          "internal": false,
          "tag": "requires",
          "sel": "requires"
        },
        "$PATTERN_RETURN": {
          "label": "pattern return",
          "type": "pattern_return",
          "optional": true,
          "key": "$PATTERN_RETURN",
          "internal": false,
          "tag": "returns",
          "sel": "returns"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "lede": "Pattern",
    "sign": "Pattern:requires:returns:",
    "params": [
      {
        "label": "name",
        "type": "pattern_name",
        "filters": [
          "quote"
        ],
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "params",
        "type": "property_slot",
        "optional": true,
        "repeats": true,
        "key": "$PARAMS",
        "internal": false,
        "tag": "requires",
        "sel": "requires"
      },
      {
        "label": "pattern return",
        "type": "pattern_return",
        "optional": true,
        "key": "$PATTERN_RETURN",
        "internal": false,
        "tag": "returns",
        "sel": "returns"
      }
    ]
  },
  "pattern_flags": {
    "name": "pattern_flags",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "patterns"
    ],
    "with": {
      "tokens": [
        "$BEFORE",
        ", ",
        "$AFTER",
        ", ",
        "$TERMINATE"
      ],
      "params": {
        "$BEFORE": {
          "label": "continue before",
          "value": "before",
          "key": "$BEFORE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$AFTER": {
          "label": "continue after",
          "value": "after",
          "key": "$AFTER",
          "internal": false,
          "tag": "after",
          "sel": "after"
        },
        "$TERMINATE": {
          "label": "terminate",
          "value": "terminate",
          "key": "$TERMINATE",
          "internal": false,
          "tag": "terminate",
          "sel": "terminate"
        }
      }
    },
    "params": [
      {
        "label": "continue before",
        "value": "before",
        "key": "$BEFORE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "continue after",
        "value": "after",
        "key": "$AFTER",
        "internal": false,
        "tag": "after",
        "sel": "after"
      },
      {
        "label": "terminate",
        "value": "terminate",
        "key": "$TERMINATE",
        "internal": false,
        "tag": "terminate",
        "sel": "terminate"
      }
    ]
  },
  "pattern_name": {
    "name": "pattern_name",
    "uses": "str",
    "group": [
      "core",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$PATTERN_NAME"
      ],
      "params": {
        "$PATTERN_NAME": {
          "label": "pattern name",
          "value": null,
          "key": "$PATTERN_NAME",
          "internal": false,
          "tag": "pattern_name",
          "sel": "pattern_name"
        }
      }
    },
    "params": [
      {
        "label": "pattern name",
        "value": null,
        "key": "$PATTERN_NAME",
        "internal": false,
        "tag": "pattern_name",
        "sel": "pattern_name"
      }
    ]
  },
  "pattern_return": {
    "name": "pattern_return",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "patterns"
    ],
    "with": {
      "tokens": [
        "returning ",
        "$RESULT"
      ],
      "params": {
        "$RESULT": {
          "label": "result",
          "type": "property_slot",
          "key": "$RESULT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": []
    },
    "lede": "pattern_result",
    "sign": "pattern_result:",
    "params": [
      {
        "label": "result",
        "type": "property_slot",
        "key": "$RESULT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "pattern_rule": {
    "name": "pattern_rule",
    "desc": "Rule",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "patterns"
    ],
    "with": {
      "tokens": [
        "When ",
        "$GUARD",
        "$FLAGS",
        ", then: ",
        "$DOES"
      ],
      "params": {
        "$GUARD": {
          "label": "conditions are met",
          "type": "bool_eval",
          "key": "$GUARD",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FLAGS": {
          "label": "continue",
          "type": "pattern_flags",
          "optional": true,
          "key": "$FLAGS",
          "internal": false,
          "tag": "flags",
          "sel": "flags"
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "conditions are met",
        "type": "bool_eval",
        "key": "$GUARD",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "continue",
        "type": "pattern_flags",
        "optional": true,
        "key": "$FLAGS",
        "internal": false,
        "tag": "flags",
        "sel": "flags"
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "pattern_type": {
    "name": "pattern_type",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "patterns",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$PATTERNS",
        ", ",
        "$ACTIONS",
        ", ",
        "$EVENTS",
        ", or ",
        "$PATTERN_TYPE"
      ],
      "params": {
        "$PATTERNS": {
          "label": "patterns",
          "value": "patterns",
          "key": "$PATTERNS",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$ACTIONS": {
          "label": "actions",
          "value": "actions",
          "key": "$ACTIONS",
          "internal": false,
          "tag": "actions",
          "sel": "actions"
        },
        "$EVENTS": {
          "label": "events",
          "value": "events",
          "key": "$EVENTS",
          "internal": false,
          "tag": "events",
          "sel": "events"
        },
        "$PATTERN_TYPE": {
          "label": "another pattern type",
          "value": null,
          "key": "$PATTERN_TYPE",
          "internal": false,
          "tag": "pattern_type",
          "sel": "pattern_type"
        }
      }
    },
    "params": [
      {
        "label": "patterns",
        "value": "patterns",
        "key": "$PATTERNS",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "actions",
        "value": "actions",
        "key": "$ACTIONS",
        "internal": false,
        "tag": "actions",
        "sel": "actions"
      },
      {
        "label": "events",
        "value": "events",
        "key": "$EVENTS",
        "internal": false,
        "tag": "events",
        "sel": "events"
      },
      {
        "label": "another pattern type",
        "value": null,
        "key": "$PATTERN_TYPE",
        "internal": false,
        "tag": "pattern_type",
        "sel": "pattern_type"
      }
    ]
  },
  "plural_kinds": {
    "name": "plural_kinds",
    "desc": "The plural name of a type of similar nouns.  For example: animals, containers, etc.",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "kinds",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$PLURAL_KINDS"
      ],
      "params": {
        "$PLURAL_KINDS": {
          "label": "plural kinds",
          "value": null,
          "key": "$PLURAL_KINDS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "plural kinds",
        "value": null,
        "key": "$PLURAL_KINDS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "pluralize": {
    "name": "pluralize",
    "uses": "flow",
    "group": [
      "core",
      "format"
    ],
    "with": {
      "tokens": [
        "plural",
        " ",
        "of",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "of",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "of",
          "sel": "of"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Pluralize",
      "short": "Returns the plural form of a singular word. (ex. apples for apple. )"
    },
    "params": [
      {
        "label": "of",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "of",
        "sel": "of"
      }
    ]
  },
  "position": {
    "name": "position",
    "uses": "flow",
    "group": [
      "reader",
      "internal"
    ],
    "with": {
      "tokens": [
        "src",
        ": ",
        "$OFFSET",
        ", ",
        "in",
        ": ",
        "$SOURCE"
      ],
      "params": {
        "$OFFSET": {
          "label": "_",
          "type": "text",
          "key": "$OFFSET",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$SOURCE": {
          "label": "in",
          "type": "text",
          "key": "$SOURCE",
          "internal": false,
          "tag": "in",
          "sel": "in"
        }
      }
    },
    "desc": {
      "label": "Position",
      "short": "Identifies the location of a specific command ( ex. from an .if file )."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$OFFSET",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "in",
        "type": "text",
        "key": "$SOURCE",
        "internal": false,
        "tag": "in",
        "sel": "in"
      }
    ]
  },
  "print_num": {
    "name": "print_num",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "numeral",
        ": ",
        "$NUM"
      ],
      "params": {
        "$NUM": {
          "label": "_",
          "type": "number_eval",
          "key": "$NUM",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Print Num",
      "short": "Writes a number using numerals, eg. '1'."
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$NUM",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "print_num_word": {
    "name": "print_num_word",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "numeral",
        " ",
        "words",
        ": ",
        "$NUM"
      ],
      "params": {
        "$NUM": {
          "label": "words",
          "type": "number_eval",
          "key": "$NUM",
          "internal": false,
          "tag": "words",
          "sel": "words"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Print Num Word",
      "short": "Writes a number in plain english: eg. 'one'"
    },
    "params": [
      {
        "label": "words",
        "type": "number_eval",
        "key": "$NUM",
        "internal": false,
        "tag": "words",
        "sel": "words"
      }
    ]
  },
  "product_of": {
    "name": "product_of",
    "uses": "flow",
    "group": [
      "core",
      "math"
    ],
    "with": {
      "tokens": [
        "mul",
        ": ",
        "$A",
        ", ",
        "by",
        ": ",
        "$B"
      ],
      "params": {
        "$A": {
          "label": "_",
          "type": "number_eval",
          "key": "$A",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$B": {
          "label": "by",
          "type": "number_eval",
          "key": "$B",
          "internal": false,
          "tag": "by",
          "sel": "by"
        }
      },
      "slots": [
        "number_eval"
      ]
    },
    "desc": {
      "label": "Product Of",
      "short": "Multiply two numbers."
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$A",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "by",
        "type": "number_eval",
        "key": "$B",
        "internal": false,
        "tag": "by",
        "sel": "by"
      }
    ]
  },
  "property": {
    "name": "property",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "properties",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$PROPERTY"
      ],
      "params": {
        "$PROPERTY": {
          "label": "property",
          "value": null,
          "key": "$PROPERTY",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "property",
        "value": null,
        "key": "$PROPERTY",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "property_slot": {
    "name": "property_slot",
    "desc": "future: each slot should support an appropriate 'starting as' initial value",
    "uses": "slot",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "params": []
  },
  "put_at_field": {
    "name": "put_at_field",
    "uses": "flow",
    "group": [
      "core",
      "variables"
    ],
    "with": {
      "tokens": [
        "put",
        ": ",
        "$INTO",
        ", ",
        "from",
        ": ",
        "$FROM",
        ", ",
        "at",
        ": ",
        "$AT_FIELD"
      ],
      "params": {
        "$INTO": {
          "label": "_",
          "type": "into_target_fields",
          "key": "$INTO",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "from",
          "type": "assignment",
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$AT_FIELD": {
          "label": "at",
          "type": "text",
          "key": "$AT_FIELD",
          "internal": false,
          "tag": "at",
          "sel": "at"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Put At Field",
      "short": "Put a value into the field of an record or object"
    },
    "params": [
      {
        "label": "_",
        "type": "into_target_fields",
        "key": "$INTO",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "assignment",
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "at",
        "type": "text",
        "key": "$AT_FIELD",
        "internal": false,
        "tag": "at",
        "sel": "at"
      }
    ]
  },
  "put_edge": {
    "name": "put_edge",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "put",
        ": ",
        "$FROM",
        ", ",
        "into",
        ": ",
        "$INTO",
        ", ",
        "at_front",
        ": ",
        "$AT_EDGE"
      ],
      "params": {
        "$FROM": {
          "label": "_",
          "type": "assignment",
          "key": "$FROM",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$INTO": {
          "label": "into",
          "type": "list_target",
          "key": "$INTO",
          "internal": false,
          "tag": "into",
          "sel": "into"
        },
        "$AT_EDGE": {
          "label": "at_front",
          "type": "bool_eval",
          "optional": true,
          "key": "$AT_EDGE",
          "internal": false,
          "tag": "at_front",
          "sel": "at_front"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Put Edge",
      "short": "Add a value to a list"
    },
    "params": [
      {
        "label": "_",
        "type": "assignment",
        "key": "$FROM",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "into",
        "type": "list_target",
        "key": "$INTO",
        "internal": false,
        "tag": "into",
        "sel": "into"
      },
      {
        "label": "at_front",
        "type": "bool_eval",
        "optional": true,
        "key": "$AT_EDGE",
        "internal": false,
        "tag": "at_front",
        "sel": "at_front"
      }
    ]
  },
  "put_index": {
    "name": "put_index",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "put",
        ": ",
        "$FROM",
        ", ",
        "into",
        ": ",
        "$INTO",
        ", ",
        "at index",
        ": ",
        "$AT_INDEX"
      ],
      "params": {
        "$FROM": {
          "label": "_",
          "type": "assignment",
          "key": "$FROM",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$INTO": {
          "label": "into",
          "type": "list_target",
          "key": "$INTO",
          "internal": false,
          "tag": "into",
          "sel": "into"
        },
        "$AT_INDEX": {
          "label": "at index",
          "type": "number_eval",
          "key": "$AT_INDEX",
          "internal": false,
          "tag": "at_index",
          "sel": "at_index"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Put Index",
      "short": "Replace one value in a list with another"
    },
    "params": [
      {
        "label": "_",
        "type": "assignment",
        "key": "$FROM",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "into",
        "type": "list_target",
        "key": "$INTO",
        "internal": false,
        "tag": "into",
        "sel": "into"
      },
      {
        "label": "at index",
        "type": "number_eval",
        "key": "$AT_INDEX",
        "internal": false,
        "tag": "at_index",
        "sel": "at_index"
      }
    ]
  },
  "quotient_of": {
    "name": "quotient_of",
    "uses": "flow",
    "group": [
      "core",
      "math"
    ],
    "with": {
      "tokens": [
        "div",
        ": ",
        "$A",
        ", ",
        "by",
        ": ",
        "$B"
      ],
      "params": {
        "$A": {
          "label": "_",
          "type": "number_eval",
          "key": "$A",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$B": {
          "label": "by",
          "type": "number_eval",
          "key": "$B",
          "internal": false,
          "tag": "by",
          "sel": "by"
        }
      },
      "slots": [
        "number_eval"
      ]
    },
    "desc": {
      "label": "Quotient Of",
      "short": "Divide one number by another."
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$A",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "by",
        "type": "number_eval",
        "key": "$B",
        "internal": false,
        "tag": "by",
        "sel": "by"
      }
    ]
  },
  "range": {
    "name": "range",
    "uses": "flow",
    "group": [
      "list"
    ],
    "with": {
      "tokens": [
        "range",
        ": ",
        "$TO",
        ", ",
        "from",
        ": ",
        "$FROM",
        ", ",
        "by step",
        ": ",
        "$BY_STEP"
      ],
      "params": {
        "$TO": {
          "label": "_",
          "type": "number_eval",
          "key": "$TO",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FROM": {
          "label": "from",
          "type": "number_eval",
          "optional": true,
          "key": "$FROM",
          "internal": false,
          "tag": "from",
          "sel": "from"
        },
        "$BY_STEP": {
          "label": "by step",
          "type": "number_eval",
          "optional": true,
          "key": "$BY_STEP",
          "internal": false,
          "tag": "by_step",
          "sel": "by_step"
        }
      },
      "slots": [
        "num_list_eval"
      ]
    },
    "desc": {
      "label": "Range",
      "short": [
        "Generates a series of numbers r[i] = (start + step*i) where i>=0.",
        "Start and step default to 1, stop defaults to start;",
        "the inputs are truncated to produce whole numbers;",
        "a zero step returns an error.",
        "A positive step ends the series when the returned value would exceed stop",
        "while a negative step ends before generating a value less than stop."
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$TO",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "from",
        "type": "number_eval",
        "optional": true,
        "key": "$FROM",
        "internal": false,
        "tag": "from",
        "sel": "from"
      },
      {
        "label": "by step",
        "type": "number_eval",
        "optional": true,
        "key": "$BY_STEP",
        "internal": false,
        "tag": "by_step",
        "sel": "by_step"
      }
    ]
  },
  "reciprocal_of": {
    "name": "reciprocal_of",
    "uses": "flow",
    "group": [
      "rel"
    ],
    "with": {
      "tokens": [
        "reciprocal",
        ": ",
        "$VIA",
        ", ",
        "object",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$VIA": {
          "label": "_",
          "type": "relation_name",
          "key": "$VIA",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OBJECT": {
          "label": "object",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "object",
          "sel": "object"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Reciprocal Of",
      "short": "Returns the implied relative of a noun (ex. the source in a one-to-many relation.)"
    },
    "params": [
      {
        "label": "_",
        "type": "relation_name",
        "key": "$VIA",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "object",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "object",
        "sel": "object"
      }
    ]
  },
  "reciprocals_of": {
    "name": "reciprocals_of",
    "uses": "flow",
    "group": [
      "rel"
    ],
    "with": {
      "tokens": [
        "reciprocals",
        ": ",
        "$VIA",
        ", ",
        "object",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$VIA": {
          "label": "_",
          "type": "relation_name",
          "key": "$VIA",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OBJECT": {
          "label": "object",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "object",
          "sel": "object"
        }
      },
      "slots": [
        "text_list_eval"
      ]
    },
    "desc": {
      "label": "Reciprocals Of",
      "short": "Returns the implied relative of a noun (ex. the sources of a many-to-many relation.)"
    },
    "params": [
      {
        "label": "_",
        "type": "relation_name",
        "key": "$VIA",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "object",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "object",
        "sel": "object"
      }
    ]
  },
  "record_eval": {
    "name": "record_eval",
    "desc": "Statements which return a record.",
    "uses": "slot",
    "group": [
      "rt"
    ],
    "params": []
  },
  "record_list_eval": {
    "name": "record_list_eval",
    "desc": "Statements which return a list of records.",
    "uses": "slot",
    "group": [
      "rt"
    ],
    "params": []
  },
  "record_list_property": {
    "name": "record_list_property",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "a list of records ",
        "named ",
        "$NAME",
        " ( ",
        "$TYPE",
        " )",
        " ",
        "$INITIALLY"
      ],
      "params": {
        "$NAMED_PROPERTY": {
          "label": "named property",
          "type": "named_property",
          "expanded": true,
          "key": "$NAMED_PROPERTY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NAME": {
          "label": "name",
          "type": "text",
          "embedded": true,
          "key": "$NAME",
          "internal": false,
          "tag": "named",
          "sel": "named"
        },
        "$TYPE": {
          "label": "of",
          "type": "text",
          "optional": true,
          "embedded": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "of",
          "sel": "of"
        },
        "$INITIALLY": {
          "label": "initially",
          "type": "record_list_eval",
          "optional": true,
          "key": "$INITIALLY",
          "internal": false,
          "tag": "initially",
          "sel": "initially"
        }
      },
      "slots": [
        "property_slot"
      ]
    },
    "lede": "record_list",
    "sign": "record_list named:of:initially:",
    "params": [
      {
        "label": "named property",
        "type": "named_property",
        "expanded": true,
        "key": "$NAMED_PROPERTY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "name",
        "type": "text",
        "embedded": true,
        "key": "$NAME",
        "internal": false,
        "tag": "named",
        "sel": "named"
      },
      {
        "label": "of",
        "type": "text",
        "optional": true,
        "embedded": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "of",
        "sel": "of"
      },
      {
        "label": "initially",
        "type": "record_list_eval",
        "optional": true,
        "key": "$INITIALLY",
        "internal": false,
        "tag": "initially",
        "sel": "initially"
      }
    ]
  },
  "record_property": {
    "name": "record_property",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "a record ",
        "named ",
        "$NAME",
        " ( ",
        "$TYPE",
        " )",
        " ",
        "$INITIALLY"
      ],
      "params": {
        "$NAMED_PROPERTY": {
          "label": "named property",
          "type": "named_property",
          "expanded": true,
          "key": "$NAMED_PROPERTY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NAME": {
          "label": "name",
          "type": "text",
          "embedded": true,
          "key": "$NAME",
          "internal": false,
          "tag": "named",
          "sel": "named"
        },
        "$TYPE": {
          "label": "of",
          "type": "text",
          "optional": true,
          "embedded": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "of",
          "sel": "of"
        },
        "$INITIALLY": {
          "label": "initially",
          "type": "record_eval",
          "optional": true,
          "key": "$INITIALLY",
          "internal": false,
          "tag": "initially",
          "sel": "initially"
        }
      },
      "slots": [
        "property_slot"
      ]
    },
    "lede": "record",
    "sign": "record named:of:initially:",
    "params": [
      {
        "label": "named property",
        "type": "named_property",
        "expanded": true,
        "key": "$NAMED_PROPERTY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "name",
        "type": "text",
        "embedded": true,
        "key": "$NAME",
        "internal": false,
        "tag": "named",
        "sel": "named"
      },
      {
        "label": "of",
        "type": "text",
        "optional": true,
        "embedded": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "of",
        "sel": "of"
      },
      {
        "label": "initially",
        "type": "record_eval",
        "optional": true,
        "key": "$INITIALLY",
        "internal": false,
        "tag": "initially",
        "sel": "initially"
      }
    ]
  },
  "record_value": {
    "name": "record_value",
    "uses": "flow",
    "group": [
      "literal"
    ],
    "with": {
      "tokens": [
        "rec",
        ": ",
        "$KIND",
        ", ",
        "fields",
        ": ",
        "$FIELDS",
        ", ",
        "-",
        ": ",
        "$CACHE"
      ],
      "params": {
        "$KIND": {
          "label": "_",
          "type": "text",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FIELDS": {
          "label": "fields",
          "type": "field_value",
          "repeats": true,
          "key": "$FIELDS",
          "internal": false,
          "tag": "fields",
          "sel": "fields"
        },
        "$CACHE": {
          "label": "-",
          "type": "record_cache",
          "key": "$CACHE",
          "internal": true,
          "tag": "-",
          "sel": "-"
        }
      },
      "slots": [
        "record_eval",
        "literal_value"
      ]
    },
    "desc": {
      "label": "Record Value",
      "short": "Specify a record composed of literal values."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "fields",
        "type": "field_value",
        "repeats": true,
        "key": "$FIELDS",
        "internal": false,
        "tag": "fields",
        "sel": "fields"
      },
      {
        "label": "-",
        "type": "record_cache",
        "key": "$CACHE",
        "internal": true,
        "tag": "-",
        "sel": "-"
      }
    ]
  },
  "record_values": {
    "name": "record_values",
    "uses": "flow",
    "group": [
      "literal"
    ],
    "with": {
      "tokens": [
        "recs",
        ": ",
        "$KIND",
        ", ",
        "containing",
        ": ",
        "$ELS",
        ", ",
        "-",
        ": ",
        "$CACHE"
      ],
      "params": {
        "$KIND": {
          "label": "_",
          "type": "text",
          "key": "$KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$ELS": {
          "label": "containing",
          "type": "field_values",
          "repeats": true,
          "key": "$ELS",
          "internal": false,
          "tag": "containing",
          "sel": "containing"
        },
        "$CACHE": {
          "label": "-",
          "type": "records_cache",
          "key": "$CACHE",
          "internal": true,
          "tag": "-",
          "sel": "-"
        }
      },
      "slots": [
        "record_list_eval",
        "literal_value"
      ]
    },
    "desc": {
      "label": "Record Values",
      "short": "Specify a series of records, all of the same kind."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "containing",
        "type": "field_values",
        "repeats": true,
        "key": "$ELS",
        "internal": false,
        "tag": "containing",
        "sel": "containing"
      },
      {
        "label": "-",
        "type": "records_cache",
        "key": "$CACHE",
        "internal": true,
        "tag": "-",
        "sel": "-"
      }
    ]
  },
  "relate": {
    "name": "relate",
    "uses": "flow",
    "group": [
      "rel"
    ],
    "with": {
      "tokens": [
        "relate",
        ": ",
        "$OBJECT",
        ", ",
        "to",
        ": ",
        "$TO_OBJECT",
        ", ",
        "via",
        ": ",
        "$VIA"
      ],
      "params": {
        "$OBJECT": {
          "label": "_",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$TO_OBJECT": {
          "label": "to",
          "type": "text_eval",
          "key": "$TO_OBJECT",
          "internal": false,
          "tag": "to",
          "sel": "to"
        },
        "$VIA": {
          "label": "via",
          "type": "relation_name",
          "key": "$VIA",
          "internal": false,
          "tag": "via",
          "sel": "via"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Relate",
      "short": "Relate two nouns."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "to",
        "type": "text_eval",
        "key": "$TO_OBJECT",
        "internal": false,
        "tag": "to",
        "sel": "to"
      },
      {
        "label": "via",
        "type": "relation_name",
        "key": "$VIA",
        "internal": false,
        "tag": "via",
        "sel": "via"
      }
    ]
  },
  "relation_cardinality": {
    "name": "relation_cardinality",
    "uses": "swap",
    "group": [
      "story",
      "debug",
      "relations",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$ONE_TO_ONE",
        ", ",
        "$ONE_TO_MANY",
        ", ",
        "$MANY_TO_ONE",
        ", or ",
        "$MANY_TO_MANY"
      ],
      "params": {
        "$ONE_TO_ONE": {
          "label": "one to one",
          "type": "one_to_one",
          "key": "$ONE_TO_ONE",
          "internal": false,
          "tag": "one_to_one",
          "sel": "one_to_one"
        },
        "$ONE_TO_MANY": {
          "label": "one to many",
          "type": "one_to_many",
          "key": "$ONE_TO_MANY",
          "internal": false,
          "tag": "one_to_many",
          "sel": "one_to_many"
        },
        "$MANY_TO_ONE": {
          "label": "many to one",
          "type": "many_to_one",
          "key": "$MANY_TO_ONE",
          "internal": false,
          "tag": "many_to_one",
          "sel": "many_to_one"
        },
        "$MANY_TO_MANY": {
          "label": "many to many",
          "type": "many_to_many",
          "key": "$MANY_TO_MANY",
          "internal": false,
          "tag": "many_to_many",
          "sel": "many_to_many"
        }
      }
    },
    "params": [
      {
        "label": "one to one",
        "type": "one_to_one",
        "key": "$ONE_TO_ONE",
        "internal": false,
        "tag": "one_to_one",
        "sel": "one_to_one"
      },
      {
        "label": "one to many",
        "type": "one_to_many",
        "key": "$ONE_TO_MANY",
        "internal": false,
        "tag": "one_to_many",
        "sel": "one_to_many"
      },
      {
        "label": "many to one",
        "type": "many_to_one",
        "key": "$MANY_TO_ONE",
        "internal": false,
        "tag": "many_to_one",
        "sel": "many_to_one"
      },
      {
        "label": "many to many",
        "type": "many_to_many",
        "key": "$MANY_TO_MANY",
        "internal": false,
        "tag": "many_to_many",
        "sel": "many_to_many"
      }
    ]
  },
  "relation_name": {
    "name": "relation_name",
    "uses": "str",
    "group": [
      "rel",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$RELATION_NAME"
      ],
      "params": {
        "$RELATION_NAME": {
          "label": "relation name",
          "value": null,
          "key": "$RELATION_NAME",
          "internal": false,
          "tag": "relation_name",
          "sel": "relation_name"
        }
      }
    },
    "params": [
      {
        "label": "relation name",
        "value": null,
        "key": "$RELATION_NAME",
        "internal": false,
        "tag": "relation_name",
        "sel": "relation_name"
      }
    ]
  },
  "relative_of": {
    "name": "relative_of",
    "uses": "flow",
    "group": [
      "rel"
    ],
    "with": {
      "tokens": [
        "relative",
        ": ",
        "$VIA",
        ", ",
        "object",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$VIA": {
          "label": "_",
          "type": "relation_name",
          "key": "$VIA",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OBJECT": {
          "label": "object",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "object",
          "sel": "object"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Relative Of",
      "short": "Returns the relative of a noun (ex. the target of a one-to-one relation.)"
    },
    "params": [
      {
        "label": "_",
        "type": "relation_name",
        "key": "$VIA",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "object",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "object",
        "sel": "object"
      }
    ]
  },
  "relative_to_noun": {
    "name": "relative_to_noun",
    "desc": "Relate nouns to each other",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "nouns"
    ],
    "with": {
      "tokens": [
        "The ",
        "$RELATION",
        " of ",
        "$NOUNS",
        " ",
        "$ARE_BEING",
        " ",
        "$OTHER_NOUNS",
        "."
      ],
      "params": {
        "$RELATION": {
          "label": "relation",
          "type": "relation_name",
          "key": "$RELATION",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NOUNS": {
          "label": "nouns",
          "type": "named_noun",
          "repeats": true,
          "filters": [
            "comma-and"
          ],
          "key": "$NOUNS",
          "internal": false,
          "tag": "nouns",
          "sel": "nouns"
        },
        "$ARE_BEING": {
          "label": "are being",
          "type": "are_being",
          "key": "$ARE_BEING",
          "internal": false,
          "tag": "are_being",
          "sel": "are_being"
        },
        "$OTHER_NOUNS": {
          "label": "other nouns",
          "type": "named_noun",
          "repeats": true,
          "filters": [
            "comma-and"
          ],
          "key": "$OTHER_NOUNS",
          "internal": false,
          "tag": "other_nouns",
          "sel": "other_nouns"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "relation",
        "type": "relation_name",
        "key": "$RELATION",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "nouns",
        "type": "named_noun",
        "repeats": true,
        "filters": [
          "comma-and"
        ],
        "key": "$NOUNS",
        "internal": false,
        "tag": "nouns",
        "sel": "nouns"
      },
      {
        "label": "are being",
        "type": "are_being",
        "key": "$ARE_BEING",
        "internal": false,
        "tag": "are_being",
        "sel": "are_being"
      },
      {
        "label": "other nouns",
        "type": "named_noun",
        "repeats": true,
        "filters": [
          "comma-and"
        ],
        "key": "$OTHER_NOUNS",
        "internal": false,
        "tag": "other_nouns",
        "sel": "other_nouns"
      }
    ]
  },
  "relatives_of": {
    "name": "relatives_of",
    "uses": "flow",
    "group": [
      "rel"
    ],
    "with": {
      "tokens": [
        "relatives",
        ": ",
        "$VIA",
        ", ",
        "object",
        ": ",
        "$OBJECT"
      ],
      "params": {
        "$VIA": {
          "label": "_",
          "type": "relation_name",
          "key": "$VIA",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$OBJECT": {
          "label": "object",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "object",
          "sel": "object"
        }
      },
      "slots": [
        "text_list_eval"
      ]
    },
    "desc": {
      "label": "Relatives Of",
      "short": "Returns the relatives of a noun as a list of names (ex. the targets of one-to-many relation)."
    },
    "params": [
      {
        "label": "_",
        "type": "relation_name",
        "key": "$VIA",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "object",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "object",
        "sel": "object"
      }
    ]
  },
  "remainder_of": {
    "name": "remainder_of",
    "uses": "flow",
    "group": [
      "core",
      "math"
    ],
    "with": {
      "tokens": [
        "mod",
        ": ",
        "$A",
        ", ",
        "by",
        ": ",
        "$B"
      ],
      "params": {
        "$A": {
          "label": "_",
          "type": "number_eval",
          "key": "$A",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$B": {
          "label": "by",
          "type": "number_eval",
          "key": "$B",
          "internal": false,
          "tag": "by",
          "sel": "by"
        }
      },
      "slots": [
        "number_eval"
      ]
    },
    "desc": {
      "label": "Remainder Of",
      "short": "Divide one number by another, and return the remainder."
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$A",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "by",
        "type": "number_eval",
        "key": "$B",
        "internal": false,
        "tag": "by",
        "sel": "by"
      }
    ]
  },
  "render_exp": {
    "name": "render_exp",
    "uses": "flow",
    "group": [
      "render",
      "internal"
    ],
    "with": {
      "tokens": [
        "render_exp",
        ": ",
        "$EXPRESSION"
      ],
      "params": {
        "$EXPRESSION": {
          "label": "_",
          "type": "text_eval",
          "key": "$EXPRESSION",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$EXPRESSION",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "render_field": {
    "name": "render_field",
    "uses": "flow",
    "group": [
      "render",
      "internal"
    ],
    "with": {
      "tokens": [
        "render_field",
        ": ",
        "$NAME"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text_eval",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "from_source_fields"
      ]
    },
    "desc": {
      "label": "Render Field",
      "short": [
        "in template phrases, picks between record variables, object variables, and named global objects.",
        "ex. could be \"ringBearer\", \"SamWise\", or \"frodo\""
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "render_flags": {
    "name": "render_flags",
    "uses": "str",
    "group": [
      "render"
    ],
    "with": {
      "tokens": [
        "$RENDER_AS_VAR",
        ", ",
        "$RENDER_AS_OBJ",
        ", or ",
        "$RENDER_AS_ANY"
      ],
      "params": {
        "$RENDER_AS_VAR": {
          "label": "as_var",
          "value": "render_as_var",
          "key": "$RENDER_AS_VAR",
          "internal": false,
          "tag": "as_var",
          "sel": "as_var"
        },
        "$RENDER_AS_OBJ": {
          "label": "as_obj",
          "value": "render_as_obj",
          "key": "$RENDER_AS_OBJ",
          "internal": false,
          "tag": "as_obj",
          "sel": "as_obj"
        },
        "$RENDER_AS_ANY": {
          "label": "as_any",
          "value": "render_as_any",
          "key": "$RENDER_AS_ANY",
          "internal": false,
          "tag": "as_any",
          "sel": "as_any"
        }
      }
    },
    "params": [
      {
        "label": "as_var",
        "value": "render_as_var",
        "key": "$RENDER_AS_VAR",
        "internal": false,
        "tag": "as_var",
        "sel": "as_var"
      },
      {
        "label": "as_obj",
        "value": "render_as_obj",
        "key": "$RENDER_AS_OBJ",
        "internal": false,
        "tag": "as_obj",
        "sel": "as_obj"
      },
      {
        "label": "as_any",
        "value": "render_as_any",
        "key": "$RENDER_AS_ANY",
        "internal": false,
        "tag": "as_any",
        "sel": "as_any"
      }
    ]
  },
  "render_name": {
    "name": "render_name",
    "uses": "flow",
    "group": [
      "render",
      "internal"
    ],
    "with": {
      "tokens": [
        "render_name",
        ": ",
        "$NAME"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Render Name",
      "short": [
        "handles changing a template like {.boombip} into text.",
        "if the name is a variable containing an object name: return the printed object name ( via \"print name\" )",
        "if the name is a variable with some other text: return that text.",
        "if the name isn't a variable but refers to some object: return that object's printed object name.",
        "otherwise, its an error."
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "render_pattern": {
    "name": "render_pattern",
    "uses": "flow",
    "group": [
      "render",
      "internal"
    ],
    "with": {
      "tokens": [
        "render",
        ": ",
        "$CALL"
      ],
      "params": {
        "$CALL": {
          "label": "_",
          "type": "call_pattern",
          "key": "$CALL",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "assignment",
        "text_eval"
      ]
    },
    "desc": {
      "label": "Render Pattern",
      "short": [
        "printing is generally an activity b/c say is an activity",
        "and we want the ability to say several things in series."
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "call_pattern",
        "key": "$CALL",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "render_ref": {
    "name": "render_ref",
    "uses": "flow",
    "group": [
      "render",
      "internal"
    ],
    "with": {
      "tokens": [
        "render_ref",
        ": ",
        "$NAME",
        ", ",
        "flags",
        ": ",
        "$FLAGS"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "variable_name",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$FLAGS": {
          "label": "flags",
          "type": "render_flags",
          "key": "$FLAGS",
          "internal": false,
          "tag": "flags",
          "sel": "flags"
        }
      },
      "slots": [
        "assignment",
        "number_eval",
        "text_eval"
      ]
    },
    "desc": {
      "label": "Render Ref",
      "short": "returns the value of a variable or the id of an object."
    },
    "params": [
      {
        "label": "_",
        "type": "variable_name",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "flags",
        "type": "render_flags",
        "key": "$FLAGS",
        "internal": false,
        "tag": "flags",
        "sel": "flags"
      }
    ]
  },
  "render_template": {
    "name": "render_template",
    "desc": {
      "label": "render_template",
      "short": "Parse text using templates.",
      "long": "See: https://github.com/ionous/iffy/wiki/Templates"
    },
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "stubs",
      "format"
    ],
    "with": {
      "tokens": [
        "render_template ",
        "$TEMPLATE"
      ],
      "params": {
        "$TEMPLATE": {
          "label": "_",
          "type": "lines",
          "key": "$TEMPLATE",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "lines",
        "key": "$TEMPLATE",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "response": {
    "name": "response",
    "uses": "flow",
    "group": [
      "core",
      "output"
    ],
    "with": {
      "tokens": [
        "response",
        ": ",
        "$NAME",
        ", ",
        "text",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$TEXT": {
          "label": "text",
          "type": "text_eval",
          "optional": true,
          "key": "$TEXT",
          "internal": false,
          "tag": "text",
          "sel": "text"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Response",
      "short": "Generate text in a replaceable manner."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "text",
        "type": "text_eval",
        "optional": true,
        "key": "$TEXT",
        "internal": false,
        "tag": "text",
        "sel": "text"
      }
    ]
  },
  "retarget": {
    "name": "retarget",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "retarget",
        ": ",
        "$SPAN"
      ],
      "params": {
        "$SPAN": {
          "label": "_",
          "type": "scanner_maker",
          "repeats": true,
          "key": "$SPAN",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "scanner_maker"
      ]
    },
    "desc": {
      "label": "Retarget",
      "short": "makes a parser scanner"
    },
    "params": [
      {
        "label": "_",
        "type": "scanner_maker",
        "repeats": true,
        "key": "$SPAN",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "reverse": {
    "name": "reverse",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "reverse",
        ": ",
        "$REVERSES"
      ],
      "params": {
        "$REVERSES": {
          "label": "_",
          "type": "scanner_maker",
          "repeats": true,
          "key": "$REVERSES",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "scanner_maker"
      ]
    },
    "desc": {
      "label": "Reverse",
      "short": "makes a parser scanner"
    },
    "params": [
      {
        "label": "_",
        "type": "scanner_maker",
        "repeats": true,
        "key": "$REVERSES",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "row": {
    "name": "row",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "row",
        " ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Row",
      "short": "A single line as part of a group of lines."
    },
    "params": [
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "rows": {
    "name": "rows",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "rows",
        " ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Rows",
      "short": "Group text into successive lines."
    },
    "params": [
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "say_text": {
    "name": "say_text",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "say",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "_",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Say Text",
      "short": "Print some bit of text to the player."
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "scanner_maker": {
    "name": "scanner_maker",
    "desc": "Helper for defining input scanners.",
    "uses": "slot",
    "group": [
      "grammar"
    ],
    "params": []
  },
  "self": {
    "name": "self",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "self",
        ": ",
        "$PLAYER"
      ],
      "params": {
        "$PLAYER": {
          "label": "_",
          "type": "text",
          "key": "$PLAYER",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "scanner_maker"
      ]
    },
    "desc": {
      "label": "Self",
      "short": "makes a parser scanner which matches the player. ( the player string is just to make the composer happy. )"
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$PLAYER",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "set_trait": {
    "name": "set_trait",
    "uses": "flow",
    "group": [
      "core",
      "objects"
    ],
    "with": {
      "tokens": [
        "put",
        " ",
        "obj",
        ": ",
        "$OBJECT",
        ", ",
        "trait",
        ": ",
        "$TRAIT"
      ],
      "params": {
        "$OBJECT": {
          "label": "obj",
          "type": "text_eval",
          "key": "$OBJECT",
          "internal": false,
          "tag": "obj",
          "sel": "obj"
        },
        "$TRAIT": {
          "label": "trait",
          "type": "text_eval",
          "key": "$TRAIT",
          "internal": false,
          "tag": "trait",
          "sel": "trait"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Set Trait",
      "short": "Put an object into a particular state."
    },
    "params": [
      {
        "label": "obj",
        "type": "text_eval",
        "key": "$OBJECT",
        "internal": false,
        "tag": "obj",
        "sel": "obj"
      },
      {
        "label": "trait",
        "type": "text_eval",
        "key": "$TRAIT",
        "internal": false,
        "tag": "trait",
        "sel": "trait"
      }
    ]
  },
  "shuffle_text": {
    "name": "shuffle_text",
    "desc": "When called multiple times returns its inputs at random.",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "stubs",
      "output",
      "positioned"
    ],
    "with": {
      "tokens": [
        "shuffle ",
        "$PARTS"
      ],
      "params": {
        "$PARTS": {
          "label": "_",
          "type": "text_eval",
          "repeats": true,
          "key": "$PARTS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "repeats": true,
        "key": "$PARTS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "singular_kind": {
    "name": "singular_kind",
    "desc": "Describes a type of similar nouns.  For example: an animal, a container, etc.",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "kinds",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$SINGULAR_KIND"
      ],
      "params": {
        "$SINGULAR_KIND": {
          "label": "singular kind",
          "value": null,
          "key": "$SINGULAR_KIND",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "singular kind",
        "value": null,
        "key": "$SINGULAR_KIND",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "singularize": {
    "name": "singularize",
    "uses": "flow",
    "group": [
      "core",
      "format"
    ],
    "with": {
      "tokens": [
        "singular",
        " ",
        "of",
        ": ",
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "of",
          "type": "text_eval",
          "key": "$TEXT",
          "internal": false,
          "tag": "of",
          "sel": "of"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Singularize",
      "short": "Returns the singular form of a plural word. (ex. apple for apples )"
    },
    "params": [
      {
        "label": "of",
        "type": "text_eval",
        "key": "$TEXT",
        "internal": false,
        "tag": "of",
        "sel": "of"
      }
    ]
  },
  "slash_text": {
    "name": "slash_text",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "slashes",
        " ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Slash Text",
      "short": "Separates words with left-leaning slashes '/'."
    },
    "params": [
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "slot_spec": {
    "name": "slot_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "slot"
      ],
      "params": {}
    },
    "desc": {
      "label": "Slot Spec",
      "short": [
        "A member of a flow which any of the other types can opt into.",
        "Aka an interface."
      ]
    },
    "params": []
  },
  "softline": {
    "name": "softline",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "wbr"
      ],
      "params": {},
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "Softline",
      "short": "Start a new line ( if not already at a new line. )"
    },
    "params": []
  },
  "span_text": {
    "name": "span_text",
    "uses": "flow",
    "group": [
      "core",
      "printing"
    ],
    "with": {
      "tokens": [
        "spaces",
        " ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "desc": {
      "label": "Span Text",
      "short": "Writes text with spaces between words."
    },
    "params": [
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "stopping_text": {
    "name": "stopping_text",
    "desc": "When called multiple times returns each of its inputs in turn, sticking to the last one.",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "stubs",
      "output",
      "positioned"
    ],
    "with": {
      "tokens": [
        "stopping ",
        "$PARTS"
      ],
      "params": {
        "$PARTS": {
          "label": "_",
          "type": "text_eval",
          "repeats": true,
          "key": "$PARTS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "text_eval"
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text_eval",
        "repeats": true,
        "key": "$PARTS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "story": {
    "name": "story",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "statements"
    ],
    "with": {
      "tokens": [
        "$PARAGRAPH"
      ],
      "params": {
        "$PARAGRAPH": {
          "label": "paragraph",
          "type": "paragraph",
          "repeats": true,
          "key": "$PARAGRAPH",
          "internal": false,
          "tag": "paragraphs",
          "sel": "paragraphs"
        }
      },
      "slots": []
    },
    "lede": "story",
    "sign": "story paragraphs:",
    "params": [
      {
        "label": "paragraph",
        "type": "paragraph",
        "repeats": true,
        "key": "$PARAGRAPH",
        "internal": false,
        "tag": "paragraphs",
        "sel": "paragraphs"
      }
    ]
  },
  "story_break": {
    "name": "story_break",
    "desc": "this cheats a bit by making the signature the same as the comment marker  that allows nodes which look like comments but are actually story breaks.",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "statements",
      "internal"
    ],
    "with": {
      "tokens": [
        "story_break"
      ],
      "params": {},
      "slots": [
        "story_statement"
      ]
    },
    "lede": "--",
    "params": []
  },
  "story_file": {
    "name": "story_file",
    "desc": "top level node, currently just for blockly  might eventually contain story metadata  ex. author, description...",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "statements"
    ],
    "with": {
      "tokens": [
        "$STORY_LINES"
      ],
      "params": {
        "$STORY_LINES": {
          "label": "_",
          "type": "story_statement",
          "repeats": true,
          "key": "$STORY_LINES",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": []
    },
    "lede": "tapestry",
    "sign": "tapestry:",
    "params": [
      {
        "label": "_",
        "type": "story_statement",
        "repeats": true,
        "key": "$STORY_LINES",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "story_statement": {
    "name": "story_statement",
    "desc": "Phrase",
    "uses": "slot",
    "group": [
      "story",
      "debug",
      "statements"
    ],
    "params": []
  },
  "str_spec": {
    "name": "str_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "str",
        " ",
        "exclusively",
        ": ",
        "$EXCLUSIVELY",
        ", ",
        "uses",
        ": ",
        "$USES"
      ],
      "params": {
        "$EXCLUSIVELY": {
          "label": "exclusively",
          "type": "bool",
          "optional": true,
          "key": "$EXCLUSIVELY",
          "internal": false,
          "tag": "exclusively",
          "sel": "exclusively"
        },
        "$USES": {
          "label": "uses",
          "type": "option_spec",
          "repeats": true,
          "key": "$USES",
          "internal": false,
          "tag": "uses",
          "sel": "uses"
        }
      }
    },
    "desc": {
      "label": "Str Spec",
      "short": [
        "when exclusive is true means the user can only specify one of the options",
        "otherwise the options are treated as hints."
      ]
    },
    "params": [
      {
        "label": "exclusively",
        "type": "bool",
        "optional": true,
        "key": "$EXCLUSIVELY",
        "internal": false,
        "tag": "exclusively",
        "sel": "exclusively"
      },
      {
        "label": "uses",
        "type": "option_spec",
        "repeats": true,
        "key": "$USES",
        "internal": false,
        "tag": "uses",
        "sel": "uses"
      }
    ]
  },
  "sum_of": {
    "name": "sum_of",
    "uses": "flow",
    "group": [
      "core",
      "math"
    ],
    "with": {
      "tokens": [
        "inc",
        ": ",
        "$A",
        ", ",
        "by",
        ": ",
        "$B"
      ],
      "params": {
        "$A": {
          "label": "_",
          "type": "number_eval",
          "key": "$A",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$B": {
          "label": "by",
          "type": "number_eval",
          "optional": true,
          "key": "$B",
          "internal": false,
          "tag": "by",
          "sel": "by"
        }
      },
      "slots": [
        "number_eval"
      ]
    },
    "desc": {
      "label": "Sum Of",
      "short": "Add two numbers."
    },
    "params": [
      {
        "label": "_",
        "type": "number_eval",
        "key": "$A",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "by",
        "type": "number_eval",
        "optional": true,
        "key": "$B",
        "internal": false,
        "tag": "by",
        "sel": "by"
      }
    ]
  },
  "swap_spec": {
    "name": "swap_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "swap",
        " ",
        "between",
        ": ",
        "$BETWEEN"
      ],
      "params": {
        "$BETWEEN": {
          "label": "between",
          "type": "choice_spec",
          "repeats": true,
          "key": "$BETWEEN",
          "internal": false,
          "tag": "between",
          "sel": "between"
        }
      }
    },
    "desc": {
      "label": "Swap Spec",
      "short": "specifies a choice between one or more other types"
    },
    "params": [
      {
        "label": "between",
        "type": "choice_spec",
        "repeats": true,
        "key": "$BETWEEN",
        "internal": false,
        "tag": "between",
        "sel": "between"
      }
    ]
  },
  "term_spec": {
    "name": "term_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "term",
        ": ",
        "$KEY",
        ", ",
        "name",
        ": ",
        "$NAME",
        ", ",
        "type",
        ": ",
        "$TYPE",
        ", ",
        "private",
        ": ",
        "$PRIVATE",
        ", ",
        "optional",
        ": ",
        "$OPTIONAL",
        ", ",
        "repeats",
        ": ",
        "$REPEATS"
      ],
      "params": {
        "$KEY": {
          "label": "_",
          "type": "text",
          "key": "$KEY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NAME": {
          "label": "name",
          "type": "text",
          "optional": true,
          "key": "$NAME",
          "internal": false,
          "tag": "name",
          "sel": "name"
        },
        "$TYPE": {
          "label": "type",
          "type": "text",
          "optional": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "type",
          "sel": "type"
        },
        "$PRIVATE": {
          "label": "private",
          "type": "bool",
          "optional": true,
          "key": "$PRIVATE",
          "internal": false,
          "tag": "private",
          "sel": "private"
        },
        "$OPTIONAL": {
          "label": "optional",
          "type": "bool",
          "optional": true,
          "key": "$OPTIONAL",
          "internal": false,
          "tag": "optional",
          "sel": "optional"
        },
        "$REPEATS": {
          "label": "repeats",
          "type": "bool",
          "optional": true,
          "key": "$REPEATS",
          "internal": false,
          "tag": "repeats",
          "sel": "repeats"
        }
      }
    },
    "desc": {
      "label": "Term Spec",
      "short": [
        "a member of a flow",
        "the key gets used as the name and label, unless an explicit name is specified.",
        "the type is derived from the name."
      ]
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$KEY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "name",
        "type": "text",
        "optional": true,
        "key": "$NAME",
        "internal": false,
        "tag": "name",
        "sel": "name"
      },
      {
        "label": "type",
        "type": "text",
        "optional": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "type",
        "sel": "type"
      },
      {
        "label": "private",
        "type": "bool",
        "optional": true,
        "key": "$PRIVATE",
        "internal": false,
        "tag": "private",
        "sel": "private"
      },
      {
        "label": "optional",
        "type": "bool",
        "optional": true,
        "key": "$OPTIONAL",
        "internal": false,
        "tag": "optional",
        "sel": "optional"
      },
      {
        "label": "repeats",
        "type": "bool",
        "optional": true,
        "key": "$REPEATS",
        "internal": false,
        "tag": "repeats",
        "sel": "repeats"
      }
    ]
  },
  "test_bool": {
    "name": "test_bool",
    "uses": "str",
    "group": [
      "testdl"
    ],
    "with": {
      "tokens": [
        "$TRUE",
        " or ",
        "$FALSE"
      ],
      "params": {
        "$TRUE": {
          "label": "true",
          "value": "true",
          "key": "$TRUE",
          "internal": false,
          "tag": "true",
          "sel": "true"
        },
        "$FALSE": {
          "label": "false",
          "value": "false",
          "key": "$FALSE",
          "internal": false,
          "tag": "false",
          "sel": "false"
        }
      }
    },
    "params": [
      {
        "label": "true",
        "value": "true",
        "key": "$TRUE",
        "internal": false,
        "tag": "true",
        "sel": "true"
      },
      {
        "label": "false",
        "value": "false",
        "key": "$FALSE",
        "internal": false,
        "tag": "false",
        "sel": "false"
      }
    ]
  },
  "test_embed": {
    "name": "test_embed",
    "uses": "flow",
    "group": [
      "testdl"
    ],
    "with": {
      "tokens": [
        "embed",
        " ",
        "test flow",
        ": ",
        "$TEST_FLOW"
      ],
      "params": {
        "$TEST_FLOW": {
          "label": "test flow",
          "type": "test_flow",
          "key": "$TEST_FLOW",
          "internal": false,
          "tag": "test_flow",
          "sel": "test_flow"
        }
      },
      "slots": [
        "test_slot"
      ]
    },
    "params": [
      {
        "label": "test flow",
        "type": "test_flow",
        "key": "$TEST_FLOW",
        "internal": false,
        "tag": "test_flow",
        "sel": "test_flow"
      }
    ]
  },
  "test_flow": {
    "name": "test_flow",
    "uses": "flow",
    "group": [
      "testdl"
    ],
    "with": {
      "tokens": [
        "flow",
        " ",
        "slot",
        ": ",
        "$SLOT",
        ", ",
        "txt",
        ": ",
        "$TXT",
        ", ",
        "num",
        ": ",
        "$NUM",
        ", ",
        "bool",
        ": ",
        "$BOOL",
        ", ",
        "swap",
        ": ",
        "$SWAP",
        ", ",
        "slots",
        ": ",
        "$SLOTS"
      ],
      "params": {
        "$SLOT": {
          "label": "slot",
          "type": "test_slot",
          "optional": true,
          "key": "$SLOT",
          "internal": false,
          "tag": "slot",
          "sel": "slot"
        },
        "$TXT": {
          "label": "txt",
          "type": "test_txt",
          "optional": true,
          "key": "$TXT",
          "internal": false,
          "tag": "txt",
          "sel": "txt"
        },
        "$NUM": {
          "label": "num",
          "type": "test_num",
          "optional": true,
          "key": "$NUM",
          "internal": false,
          "tag": "num",
          "sel": "num"
        },
        "$BOOL": {
          "label": "bool",
          "type": "test_bool",
          "optional": true,
          "key": "$BOOL",
          "internal": false,
          "tag": "bool",
          "sel": "bool"
        },
        "$SWAP": {
          "label": "swap",
          "type": "test_swap",
          "optional": true,
          "key": "$SWAP",
          "internal": false,
          "tag": "swap",
          "sel": "swap"
        },
        "$SLOTS": {
          "label": "slots",
          "type": "test_slot",
          "optional": true,
          "repeats": true,
          "key": "$SLOTS",
          "internal": false,
          "tag": "slots",
          "sel": "slots"
        }
      },
      "slots": [
        "test_slot"
      ]
    },
    "params": [
      {
        "label": "slot",
        "type": "test_slot",
        "optional": true,
        "key": "$SLOT",
        "internal": false,
        "tag": "slot",
        "sel": "slot"
      },
      {
        "label": "txt",
        "type": "test_txt",
        "optional": true,
        "key": "$TXT",
        "internal": false,
        "tag": "txt",
        "sel": "txt"
      },
      {
        "label": "num",
        "type": "test_num",
        "optional": true,
        "key": "$NUM",
        "internal": false,
        "tag": "num",
        "sel": "num"
      },
      {
        "label": "bool",
        "type": "test_bool",
        "optional": true,
        "key": "$BOOL",
        "internal": false,
        "tag": "bool",
        "sel": "bool"
      },
      {
        "label": "swap",
        "type": "test_swap",
        "optional": true,
        "key": "$SWAP",
        "internal": false,
        "tag": "swap",
        "sel": "swap"
      },
      {
        "label": "slots",
        "type": "test_slot",
        "optional": true,
        "repeats": true,
        "key": "$SLOTS",
        "internal": false,
        "tag": "slots",
        "sel": "slots"
      }
    ]
  },
  "test_name": {
    "name": "test_name",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "tests",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$CURRENT_TEST",
        ", or ",
        "$TEST_NAME"
      ],
      "params": {
        "$CURRENT_TEST": {
          "label": "the test",
          "value": "current_test",
          "key": "$CURRENT_TEST",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$TEST_NAME": {
          "label": "test name",
          "value": null,
          "key": "$TEST_NAME",
          "internal": false,
          "tag": "test_name",
          "sel": "test_name"
        }
      }
    },
    "params": [
      {
        "label": "the test",
        "value": "current_test",
        "key": "$CURRENT_TEST",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "test name",
        "value": null,
        "key": "$TEST_NAME",
        "internal": false,
        "tag": "test_name",
        "sel": "test_name"
      }
    ]
  },
  "test_num": {
    "name": "test_num",
    "uses": "num",
    "group": [
      "testdl"
    ],
    "params": []
  },
  "test_output": {
    "name": "test_output",
    "desc": {
      "label": "Test Output",
      "short": "Expect that a test uses 'Say' to print some specific text.",
      "long": ""
    },
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "tests"
    ],
    "with": {
      "tokens": [
        "output ",
        "$LINES",
        "."
      ],
      "params": {
        "$LINES": {
          "label": "lines",
          "type": "lines",
          "filters": [
            "quote"
          ],
          "key": "$LINES",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "testing"
      ]
    },
    "params": [
      {
        "label": "lines",
        "type": "lines",
        "filters": [
          "quote"
        ],
        "key": "$LINES",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "test_rule": {
    "name": "test_rule",
    "desc": "Add actions to a test",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "tests"
    ],
    "with": {
      "tokens": [
        "To test ",
        "$TEST_NAME",
        ": ",
        "$DOES"
      ],
      "params": {
        "$TEST_NAME": {
          "label": "test name",
          "type": "test_name",
          "key": "$TEST_NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "test name",
        "type": "test_name",
        "key": "$TEST_NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "test_scene": {
    "name": "test_scene",
    "desc": "Create a scene for testing",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "tests"
    ],
    "with": {
      "tokens": [
        "While testing ",
        "$TEST_NAME",
        ": ",
        "$STORY"
      ],
      "params": {
        "$TEST_NAME": {
          "label": "test name",
          "type": "test_name",
          "key": "$TEST_NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$STORY": {
          "label": "story",
          "type": "story_statement",
          "repeats": true,
          "key": "$STORY",
          "internal": false,
          "tag": "story",
          "sel": "story"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "test name",
        "type": "test_name",
        "key": "$TEST_NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "story",
        "type": "story_statement",
        "repeats": true,
        "key": "$STORY",
        "internal": false,
        "tag": "story",
        "sel": "story"
      }
    ]
  },
  "test_slot": {
    "name": "test_slot",
    "uses": "slot",
    "group": [
      "testdl"
    ],
    "params": []
  },
  "test_statement": {
    "name": "test_statement",
    "desc": "Describe test results",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "tests",
      "positioned"
    ],
    "with": {
      "tokens": [
        "Expect ",
        "$TEST_NAME",
        " to ",
        "$TEST"
      ],
      "params": {
        "$TEST_NAME": {
          "label": "test name",
          "type": "test_name",
          "key": "$TEST_NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$TEST": {
          "label": "expectation",
          "type": "testing",
          "key": "$TEST",
          "internal": false,
          "tag": "test",
          "sel": "test"
        }
      },
      "slots": [
        "story_statement"
      ]
    },
    "params": [
      {
        "label": "test name",
        "type": "test_name",
        "key": "$TEST_NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "expectation",
        "type": "testing",
        "key": "$TEST",
        "internal": false,
        "tag": "test",
        "sel": "test"
      }
    ]
  },
  "test_str": {
    "name": "test_str",
    "uses": "str",
    "group": [
      "testdl"
    ],
    "with": {
      "tokens": [
        "$ONE",
        ", ",
        "$OTHER",
        ", ",
        "$OPTION"
      ],
      "params": {
        "$ONE": {
          "label": "one",
          "value": "one",
          "key": "$ONE",
          "internal": false,
          "tag": "one",
          "sel": "one"
        },
        "$OTHER": {
          "label": "other",
          "value": "other",
          "key": "$OTHER",
          "internal": false,
          "tag": "other",
          "sel": "other"
        },
        "$OPTION": {
          "label": "option",
          "value": "option",
          "key": "$OPTION",
          "internal": false,
          "tag": "option",
          "sel": "option"
        }
      }
    },
    "params": [
      {
        "label": "one",
        "value": "one",
        "key": "$ONE",
        "internal": false,
        "tag": "one",
        "sel": "one"
      },
      {
        "label": "other",
        "value": "other",
        "key": "$OTHER",
        "internal": false,
        "tag": "other",
        "sel": "other"
      },
      {
        "label": "option",
        "value": "option",
        "key": "$OPTION",
        "internal": false,
        "tag": "option",
        "sel": "option"
      }
    ]
  },
  "test_swap": {
    "name": "test_swap",
    "uses": "swap",
    "group": [
      "testdl"
    ],
    "with": {
      "tokens": [
        "swap ",
        "$A",
        " ",
        "$B",
        " ",
        "$C"
      ],
      "params": {
        "$A": {
          "label": "flow",
          "type": "test_flow",
          "key": "$A",
          "internal": false,
          "tag": "a",
          "sel": "a"
        },
        "$B": {
          "label": "slot",
          "type": "test_slot",
          "key": "$B",
          "internal": false,
          "tag": "b",
          "sel": "b"
        },
        "$C": {
          "label": "text",
          "type": "test_txt",
          "key": "$C",
          "internal": false,
          "tag": "c",
          "sel": "c"
        }
      }
    },
    "params": [
      {
        "label": "flow",
        "type": "test_flow",
        "key": "$A",
        "internal": false,
        "tag": "a",
        "sel": "a"
      },
      {
        "label": "slot",
        "type": "test_slot",
        "key": "$B",
        "internal": false,
        "tag": "b",
        "sel": "b"
      },
      {
        "label": "text",
        "type": "test_txt",
        "key": "$C",
        "internal": false,
        "tag": "c",
        "sel": "c"
      }
    ]
  },
  "test_txt": {
    "name": "test_txt",
    "uses": "str",
    "group": [
      "testdl"
    ],
    "with": {
      "tokens": [
        "$TEST_TXT"
      ],
      "params": {
        "$TEST_TXT": {
          "label": "test txt",
          "value": null,
          "key": "$TEST_TXT",
          "internal": false,
          "tag": "test_txt",
          "sel": "test_txt"
        }
      }
    },
    "params": [
      {
        "label": "test txt",
        "value": null,
        "key": "$TEST_TXT",
        "internal": false,
        "tag": "test_txt",
        "sel": "test_txt"
      }
    ]
  },
  "testing": {
    "name": "testing",
    "desc": "Run a series of tests.",
    "uses": "slot",
    "group": [
      "story",
      "debug",
      "tests"
    ],
    "params": []
  },
  "text": {
    "name": "text",
    "desc": "A sequence of characters of any length, all on one line.  Examples include letters, words, or short sentences.  Text is generally something displayed to the player.  See also: lines.",
    "uses": "str",
    "group": [
      "prim"
    ],
    "with": {
      "tokens": [
        "$TEXT"
      ],
      "params": {
        "$TEXT": {
          "label": "text",
          "value": null,
          "key": "$TEXT",
          "internal": false,
          "tag": "text",
          "sel": "text"
        }
      }
    },
    "params": [
      {
        "label": "text",
        "value": null,
        "key": "$TEXT",
        "internal": false,
        "tag": "text",
        "sel": "text"
      }
    ]
  },
  "text_eval": {
    "name": "text_eval",
    "desc": "Statements which return text.",
    "uses": "slot",
    "group": [
      "rt"
    ],
    "params": []
  },
  "text_list_eval": {
    "name": "text_list_eval",
    "desc": "Statements which return a list of text.",
    "uses": "slot",
    "group": [
      "rt"
    ],
    "params": []
  },
  "text_list_property": {
    "name": "text_list_property",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "a list of text ",
        "named ",
        "$NAME",
        " ( ",
        "$TYPE",
        " )",
        " ",
        "$INITIALLY"
      ],
      "params": {
        "$NAMED_PROPERTY": {
          "label": "named property",
          "type": "named_property",
          "expanded": true,
          "key": "$NAMED_PROPERTY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NAME": {
          "label": "name",
          "type": "text",
          "embedded": true,
          "key": "$NAME",
          "internal": false,
          "tag": "named",
          "sel": "named"
        },
        "$TYPE": {
          "label": "of",
          "type": "text",
          "optional": true,
          "embedded": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "of",
          "sel": "of"
        },
        "$INITIALLY": {
          "label": "initially",
          "type": "text_list_eval",
          "optional": true,
          "key": "$INITIALLY",
          "internal": false,
          "tag": "initially",
          "sel": "initially"
        }
      },
      "slots": [
        "property_slot"
      ]
    },
    "lede": "text_list",
    "sign": "text_list named:of:initially:",
    "params": [
      {
        "label": "named property",
        "type": "named_property",
        "expanded": true,
        "key": "$NAMED_PROPERTY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "name",
        "type": "text",
        "embedded": true,
        "key": "$NAME",
        "internal": false,
        "tag": "named",
        "sel": "named"
      },
      {
        "label": "of",
        "type": "text",
        "optional": true,
        "embedded": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "of",
        "sel": "of"
      },
      {
        "label": "initially",
        "type": "text_list_eval",
        "optional": true,
        "key": "$INITIALLY",
        "internal": false,
        "tag": "initially",
        "sel": "initially"
      }
    ]
  },
  "text_property": {
    "name": "text_property",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "properties"
    ],
    "with": {
      "tokens": [
        "some text ",
        "named ",
        "$NAME",
        " ( ",
        "$TYPE",
        " )",
        " ",
        "$INITIALLY"
      ],
      "params": {
        "$NAMED_PROPERTY": {
          "label": "named property",
          "type": "named_property",
          "expanded": true,
          "key": "$NAMED_PROPERTY",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$NAME": {
          "label": "name",
          "type": "text",
          "embedded": true,
          "key": "$NAME",
          "internal": false,
          "tag": "named",
          "sel": "named"
        },
        "$TYPE": {
          "label": "of",
          "type": "text",
          "optional": true,
          "embedded": true,
          "key": "$TYPE",
          "internal": false,
          "tag": "of",
          "sel": "of"
        },
        "$INITIALLY": {
          "label": "initially",
          "type": "text_eval",
          "optional": true,
          "key": "$INITIALLY",
          "internal": false,
          "tag": "initially",
          "sel": "initially"
        }
      },
      "slots": [
        "property_slot"
      ]
    },
    "lede": "text",
    "sign": "text named:of:initially:",
    "params": [
      {
        "label": "named property",
        "type": "named_property",
        "expanded": true,
        "key": "$NAMED_PROPERTY",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "name",
        "type": "text",
        "embedded": true,
        "key": "$NAME",
        "internal": false,
        "tag": "named",
        "sel": "named"
      },
      {
        "label": "of",
        "type": "text",
        "optional": true,
        "embedded": true,
        "key": "$TYPE",
        "internal": false,
        "tag": "of",
        "sel": "of"
      },
      {
        "label": "initially",
        "type": "text_eval",
        "optional": true,
        "key": "$INITIALLY",
        "internal": false,
        "tag": "initially",
        "sel": "initially"
      }
    ]
  },
  "text_value": {
    "name": "text_value",
    "uses": "flow",
    "group": [
      "literal"
    ],
    "with": {
      "tokens": [
        "txt",
        ": ",
        "$TEXT",
        ", ",
        "class",
        ": ",
        "$CLASS"
      ],
      "params": {
        "$TEXT": {
          "label": "_",
          "type": "text",
          "key": "$TEXT",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$CLASS": {
          "label": "class",
          "type": "text",
          "optional": true,
          "key": "$CLASS",
          "internal": false,
          "tag": "class",
          "sel": "class"
        }
      },
      "slots": [
        "text_eval",
        "literal_value"
      ]
    },
    "desc": {
      "label": "Text Value",
      "short": "Specify a small bit of text."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$TEXT",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "class",
        "type": "text",
        "optional": true,
        "key": "$CLASS",
        "internal": false,
        "tag": "class",
        "sel": "class"
      }
    ]
  },
  "text_values": {
    "name": "text_values",
    "uses": "flow",
    "group": [
      "literal"
    ],
    "with": {
      "tokens": [
        "txts",
        ": ",
        "$VALUES",
        ", ",
        "class",
        ": ",
        "$CLASS"
      ],
      "params": {
        "$VALUES": {
          "label": "_",
          "type": "text",
          "repeats": true,
          "key": "$VALUES",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$CLASS": {
          "label": "class",
          "type": "text",
          "optional": true,
          "key": "$CLASS",
          "internal": false,
          "tag": "class",
          "sel": "class"
        }
      },
      "slots": [
        "text_list_eval",
        "literal_value"
      ]
    },
    "desc": {
      "label": "Text Values",
      "short": "Text List: Specifies a set of text values."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "repeats": true,
        "key": "$VALUES",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "class",
        "type": "text",
        "optional": true,
        "key": "$CLASS",
        "internal": false,
        "tag": "class",
        "sel": "class"
      }
    ]
  },
  "trait": {
    "name": "trait",
    "uses": "str",
    "group": [
      "story",
      "debug",
      "traits",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$TRAIT"
      ],
      "params": {
        "$TRAIT": {
          "label": "trait",
          "value": null,
          "key": "$TRAIT",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      }
    },
    "params": [
      {
        "label": "trait",
        "value": null,
        "key": "$TRAIT",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  },
  "trait_phrase": {
    "name": "trait_phrase",
    "uses": "flow",
    "group": [
      "story",
      "debug",
      "traits"
    ],
    "with": {
      "tokens": [
        "$ARE_EITHER",
        " ",
        "$TRAIT",
        "."
      ],
      "params": {
        "$ARE_EITHER": {
          "label": "are either",
          "type": "are_either",
          "key": "$ARE_EITHER",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$TRAIT": {
          "label": "trait",
          "type": "trait",
          "repeats": true,
          "filters": [
            "comma-or"
          ],
          "key": "$TRAIT",
          "internal": false,
          "tag": "trait",
          "sel": "trait"
        }
      },
      "slots": []
    },
    "params": [
      {
        "label": "are either",
        "type": "are_either",
        "key": "$ARE_EITHER",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "trait",
        "type": "trait",
        "repeats": true,
        "filters": [
          "comma-or"
        ],
        "key": "$TRAIT",
        "internal": false,
        "tag": "trait",
        "sel": "trait"
      }
    ]
  },
  "trigger": {
    "name": "trigger",
    "desc": "Helper for counting values.",
    "uses": "slot",
    "group": [
      "core"
    ],
    "params": []
  },
  "trigger_cycle": {
    "name": "trigger_cycle",
    "uses": "flow",
    "group": [
      "core",
      "comparison"
    ],
    "with": {
      "tokens": [
        "every"
      ],
      "params": {},
      "slots": [
        "trigger"
      ]
    },
    "params": []
  },
  "trigger_once": {
    "name": "trigger_once",
    "uses": "flow",
    "group": [
      "core",
      "comparison"
    ],
    "with": {
      "tokens": [
        "at"
      ],
      "params": {},
      "slots": [
        "trigger"
      ]
    },
    "params": []
  },
  "trigger_switch": {
    "name": "trigger_switch",
    "uses": "flow",
    "group": [
      "core",
      "comparison"
    ],
    "with": {
      "tokens": [
        "after"
      ],
      "params": {},
      "slots": [
        "trigger"
      ]
    },
    "params": []
  },
  "type_spec": {
    "name": "type_spec",
    "uses": "flow",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "spec",
        ": ",
        "$NAME",
        ", ",
        "with",
        ": ",
        "$SPEC",
        ", ",
        "slots",
        ": ",
        "$SLOTS",
        ", ",
        "groups",
        ": ",
        "$GROUPS"
      ],
      "params": {
        "$NAME": {
          "label": "_",
          "type": "text",
          "key": "$NAME",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$SPEC": {
          "label": "with",
          "type": "uses_spec",
          "key": "$SPEC",
          "internal": false,
          "tag": "with",
          "sel": "with"
        },
        "$SLOTS": {
          "label": "slots",
          "type": "text",
          "optional": true,
          "repeats": true,
          "key": "$SLOTS",
          "internal": false,
          "tag": "slots",
          "sel": "slots"
        },
        "$GROUPS": {
          "label": "groups",
          "type": "text",
          "optional": true,
          "repeats": true,
          "key": "$GROUPS",
          "internal": false,
          "tag": "groups",
          "sel": "groups"
        }
      }
    },
    "desc": {
      "label": "Type Spec",
      "short": "can optionally fit one or more slots, or be part of one or more groups."
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "key": "$NAME",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "with",
        "type": "uses_spec",
        "key": "$SPEC",
        "internal": false,
        "tag": "with",
        "sel": "with"
      },
      {
        "label": "slots",
        "type": "text",
        "optional": true,
        "repeats": true,
        "key": "$SLOTS",
        "internal": false,
        "tag": "slots",
        "sel": "slots"
      },
      {
        "label": "groups",
        "type": "text",
        "optional": true,
        "repeats": true,
        "key": "$GROUPS",
        "internal": false,
        "tag": "groups",
        "sel": "groups"
      }
    ]
  },
  "unequal": {
    "name": "unequal",
    "uses": "flow",
    "group": [
      "core",
      "comparison"
    ],
    "with": {
      "tokens": [
        "other_than"
      ],
      "params": {},
      "slots": [
        "comparator"
      ]
    },
    "desc": {
      "label": "Unequal",
      "short": "The first value doesn't equal the second value."
    },
    "params": []
  },
  "uses_spec": {
    "name": "uses_spec",
    "uses": "swap",
    "group": [
      "spec"
    ],
    "with": {
      "tokens": [
        "$FLOW",
        ", ",
        "$SLOT",
        ", ",
        "$SWAP",
        ", ",
        "$NUM",
        ", ",
        "$STR",
        ", or ",
        "$GROUP"
      ],
      "params": {
        "$FLOW": {
          "label": "flow",
          "type": "flow_spec",
          "key": "$FLOW",
          "internal": false,
          "tag": "flow",
          "sel": "flow"
        },
        "$SLOT": {
          "label": "slot",
          "type": "slot_spec",
          "key": "$SLOT",
          "internal": false,
          "tag": "slot",
          "sel": "slot"
        },
        "$SWAP": {
          "label": "swap",
          "type": "swap_spec",
          "key": "$SWAP",
          "internal": false,
          "tag": "swap",
          "sel": "swap"
        },
        "$NUM": {
          "label": "num",
          "type": "num_spec",
          "key": "$NUM",
          "internal": false,
          "tag": "num",
          "sel": "num"
        },
        "$STR": {
          "label": "str",
          "type": "str_spec",
          "key": "$STR",
          "internal": false,
          "tag": "str",
          "sel": "str"
        },
        "$GROUP": {
          "label": "group",
          "type": "group_spec",
          "key": "$GROUP",
          "internal": false,
          "tag": "group",
          "sel": "group"
        }
      }
    },
    "params": [
      {
        "label": "flow",
        "type": "flow_spec",
        "key": "$FLOW",
        "internal": false,
        "tag": "flow",
        "sel": "flow"
      },
      {
        "label": "slot",
        "type": "slot_spec",
        "key": "$SLOT",
        "internal": false,
        "tag": "slot",
        "sel": "slot"
      },
      {
        "label": "swap",
        "type": "swap_spec",
        "key": "$SWAP",
        "internal": false,
        "tag": "swap",
        "sel": "swap"
      },
      {
        "label": "num",
        "type": "num_spec",
        "key": "$NUM",
        "internal": false,
        "tag": "num",
        "sel": "num"
      },
      {
        "label": "str",
        "type": "str_spec",
        "key": "$STR",
        "internal": false,
        "tag": "str",
        "sel": "str"
      },
      {
        "label": "group",
        "type": "group_spec",
        "key": "$GROUP",
        "internal": false,
        "tag": "group",
        "sel": "group"
      }
    ]
  },
  "variable_name": {
    "name": "variable_name",
    "uses": "str",
    "group": [
      "core",
      "positioned"
    ],
    "with": {
      "tokens": [
        "$VARIABLE_NAME"
      ],
      "params": {
        "$VARIABLE_NAME": {
          "label": "variable name",
          "value": null,
          "key": "$VARIABLE_NAME",
          "internal": false,
          "tag": "variable_name",
          "sel": "variable_name"
        }
      }
    },
    "params": [
      {
        "label": "variable name",
        "value": null,
        "key": "$VARIABLE_NAME",
        "internal": false,
        "tag": "variable_name",
        "sel": "variable_name"
      }
    ]
  },
  "while": {
    "name": "while",
    "uses": "flow",
    "group": [
      "core",
      "flow"
    ],
    "with": {
      "tokens": [
        "repeating",
        ": ",
        "$TRUE",
        ", ",
        "does",
        ": ",
        "$DOES"
      ],
      "params": {
        "$TRUE": {
          "label": "_",
          "type": "bool_eval",
          "key": "$TRUE",
          "internal": false,
          "tag": "_",
          "sel": ""
        },
        "$DOES": {
          "label": "does",
          "type": "execute",
          "repeats": true,
          "key": "$DOES",
          "internal": false,
          "tag": "does",
          "sel": "does"
        }
      },
      "slots": [
        "execute"
      ]
    },
    "desc": {
      "label": "While",
      "short": "Keep running a series of actions while a condition is true."
    },
    "params": [
      {
        "label": "_",
        "type": "bool_eval",
        "key": "$TRUE",
        "internal": false,
        "tag": "_",
        "sel": ""
      },
      {
        "label": "does",
        "type": "execute",
        "repeats": true,
        "key": "$DOES",
        "internal": false,
        "tag": "does",
        "sel": "does"
      }
    ]
  },
  "words": {
    "name": "words",
    "uses": "flow",
    "group": [
      "grammar"
    ],
    "with": {
      "tokens": [
        "words",
        ": ",
        "$WORDS"
      ],
      "params": {
        "$WORDS": {
          "label": "_",
          "type": "text",
          "repeats": true,
          "key": "$WORDS",
          "internal": false,
          "tag": "_",
          "sel": ""
        }
      },
      "slots": [
        "scanner_maker"
      ]
    },
    "desc": {
      "label": "Words",
      "short": "makes a parser scanner"
    },
    "params": [
      {
        "label": "_",
        "type": "text",
        "repeats": true,
        "key": "$WORDS",
        "internal": false,
        "tag": "_",
        "sel": ""
      }
    ]
  }
}