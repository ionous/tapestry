{
  "Spec:with group:": [
    "list",
    {
      "Group contains:": [
        {
          "--": "Define the name of a number variable.",
          "Spec:with flow:": [
            "as_num",
            {
              "Flow:trim:uses:": [
                "as_num",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:with flow:": [
            "list_slice",
            {
              "Flow:trim:uses:": [
                "slice",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "start",
                      "number_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "end",
                      "number_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Add a value to a list.",
          "Spec:with flow:": [
            "put_edge",
            {
              "Flow:uses:": [
                "put",
                [
                  {
                    "Term:name:type:optional:": [
                      "at_front",
                      "at_edge",
                      "bool_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "into",
                      "list_target"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Get a value from a list. The first element is is index 1.",
          "Spec:with flow:": [
            "list_at",
            {
              "Flow:trim:uses:": [
                "get",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "index",
                      "number_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Erase at edge: Remove one or more values from a list.",
          "Spec:with flow:": [
            "erase_edge",
            {
              "Flow:trim:uses:": [
                "erase",
                true,
                [
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "at_front",
                      "at_edge",
                      "bool_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Reverse a list.",
          "Spec:with flow:": [
            "list_reverse",
            {
              "Flow:uses:": [
                "reverse",
                [
                  {
                    "Term:type:": [
                      "list",
                      "list_source"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Search a list for a specific value.",
          "Spec:with flow:": [
            "list_find",
            {
              "Flow:trim:uses:": [
                "find",
                true,
                [
                  {
                    "Term:type:": [
                      "value",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "list",
                      "assignment"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Determines the number of values in a list.",
          "Spec:with flow:": [
            "list_len",
            {
              "Flow:trim:uses:": [
                "len",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "assignment"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Targets a list of text.",
          "Spec:with flow:": [
            "into_txt_list",
            {
              "Flow:trim:uses:": [
                "into_txts",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Transform the values from one list and place the results in another list. The designated pattern is called with each value from the 'from list', one value at a time.",
          "Spec:with flow:": [
            "list_map",
            {
              "Flow:trim:uses:": [
                "map",
                true,
                [
                  {
                    "Term:type:": [
                      "to_list",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from_list",
                      "assignment"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "using",
                      "using_pattern",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Modify a list by adding and removing elements. Note: the type of the elements being added must match the type of the list. Text cant be added to a list of numbers, numbers cant be added to a list of text. If the starting index is negative, it will begin that many elements from the end of the array. If list's length + the start is less than 0, it will begin from index 0. If the remove count is missing, it removes all elements from the start to the end; if it is 0 or negative, no elements are removed.",
          "Spec:with flow:": [
            "list_splice",
            {
              "Flow:trim:uses:": [
                "splice",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "start",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "remove",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "insert",
                      "assignment"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Targets a list of numbers.",
          "Spec:with flow:": [
            "into_num_list",
            {
              "Flow:trim:uses:": [
                "into_nums",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Uses a list of text.",
          "Spec:with flow:": [
            "from_txt_list",
            {
              "Flow:trim:uses:": [
                "var_of_txts",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Targets a list of records.",
          "Spec:with flow:": [
            "into_rec_list",
            {
              "Flow:trim:uses:": [
                "into_recs",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Replace one value in a list with another.",
          "Spec:with flow:": [
            "put_index",
            {
              "Flow:uses:": [
                "put",
                [
                  {
                    "Term:type:": [
                      "at_index",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "into",
                      "list_target"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Transform the values from a list. The named pattern gets called once for each value in the list. It get called with two parameters: 'in' as each value from the list, and 'out' as the var passed to the gather.",
          "Spec:with flow:": [
            "list_gather",
            {
              "Flow:trim:uses:": [
                "gather",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:type:": [
                      "using",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Rearrange the elements in the named list by using the designated pattern to test pairs of elements.",
          "Spec:with flow:": [
            "list_sort_using",
            {
              "Flow:trim:uses:": [
                "sort",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "using",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Helper for accessing lists.",
          "Spec:with slot:": [
            "list_source",
            {
              "Slot": true
            }
          ]
        },
        {
          "--": "Helper for accessing lists.",
          "Spec:with slot:": [
            "list_iterator",
            {
              "Slot": true
            }
          ]
        },
        {
          "Spec:with flow:": [
            "list_sort_numbers",
            {
              "Flow:trim:uses:": [
                "sort_numbers",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "by_field",
                      "text"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "descending",
                      "bool_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Rearrange the elements in the named list by using the designated pattern to test pairs of elements.",
          "Spec:with flow:": [
            "list_sort_text",
            {
              "Flow:trim:uses:": [
                "sort_texts",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "by_field",
                      "text"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "descending",
                      "bool_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "using_case",
                      "bool_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Loops over the elements in the passed list, or runs the 'else' activity if empty.",
          "Spec:with flow:": [
            "list_each",
            {
              "Flow:uses:": [
                "repeating",
                [
                  {
                    "Term:type:optional:": [
                      "else",
                      "brancher",
                      true
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "across",
                      "list",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "as",
                      "list_iterator"
                    ]
                  },
                  {
                    "Term:type:": [
                      "do",
                      "activity"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Uses a list of records.",
          "Spec:with flow:": [
            "from_rec_list",
            {
              "Flow:trim:uses:": [
                "var_of_recs",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Erase at index: Remove one or more values from a list.",
          "Spec:with flow:": [
            "erase_index",
            {
              "Flow:uses:": [
                "erase",
                [
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:type:": [
                      "at_index",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "count",
                      "number_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Define the name of a text variable.",
          "Spec:with flow:": [
            "as_txt",
            {
              "Flow:trim:uses:": [
                "as_txt",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Erase elements from the front or back of a list. Runs an activity with a list containing the erased values; the list can be empty if nothing was erased.",
          "Spec:with flow:": [
            "erasing",
            {
              "Flow:trim:uses:": [
                "erasing",
                true,
                [
                  {
                    "Term:type:": [
                      "count",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:type:": [
                      "at_index",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "as",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "do",
                      "activity"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Overwrite an existing value in a list.",
          "Spec:with flow:": [
            "list_set",
            {
              "Flow:trim:uses:": [
                "set",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "index",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "assignment"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Uses a list of numbers.",
          "Spec:with flow:": [
            "from_num_list",
            {
              "Flow:trim:uses:": [
                "var_of_nums",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Helper for accessing lists.",
          "Spec:with slot:": [
            "list_target",
            {
              "Slot": true
            }
          ]
        },
        {
          "--": "Transform the values from one list by combining them into a single value. The named pattern is called with two parameters: 'in' ( each element of the list ) and 'out' ( ex. a record ).",
          "Spec:with flow:": [
            "list_reduce",
            {
              "Flow:uses:": [
                "reduce",
                [
                  {
                    "Term:name:type:": [
                      "using",
                      "using_pattern",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "into",
                      "into_value",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from_list",
                      "assignment"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Define the name of a record variable.",
          "Spec:with flow:": [
            "as_rec",
            {
              "Flow:trim:uses:": [
                "as_rec",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:with flow:": [
            "range",
            {
              "Flow:trim:uses:": [
                "range",
                true,
                [
                  {
                    "Term:type:": [
                      "to",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "from",
                      "number_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "by_step",
                      "number_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Erase one element from the front or back of a list. Runs an activity with a list containing the erased values; the list can be empty if nothing was erased.",
          "Spec:with flow:": [
            "erasing_edge",
            {
              "Flow:trim:uses:": [
                "erasing",
                true,
                [
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "at_front",
                      "at_edge",
                      "bool_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:": [
                      "as",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "do",
                      "activity"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "else",
                      "brancher",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        }
      ]
    }
  ]
}
