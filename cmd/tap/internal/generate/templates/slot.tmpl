const {{Pascal .Name}}_Type = "{{.Name}}"
var {{Pascal .Name}}_Optional_Marshal = {{Pascal .Name}}_Marshal

type {{Pascal .Name}}_Slot struct { Value *{{Pascal .Name}} }

func (at {{Pascal .Name}}_Slot) Marshal(m jsn.Marshaler) (err error) {
  if err = m.MarshalBlock(at); err == nil {
    if a, ok := at.GetSlot(); ok {
      if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
        m.Error(e)
      }
    }
    m.EndBlock()
  }
  return
}
func (at {{Pascal .Name}}_Slot) GetType() string { return {{Pascal .Name}}_Type }
func (at {{Pascal .Name}}_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at {{Pascal .Name}}_Slot) SetSlot(v interface{}) (okay bool) {
  (*at.Value), okay = v.({{Pascal .Name}})
  return
}

func {{Pascal .Name}}_Marshal(m jsn.Marshaler, ptr *{{Pascal .Name}}) (err error) {
  slot := {{Pascal .Name}}_Slot{ptr}
  return slot.Marshal(m)
}
{{template "repeating.tmpl" (RepeatData .Name false)}}