type {{.Name}}{{.Mod}}_Slice []{{.El}}

func (op* {{.Name}}{{.Mod}}_Slice) GetType() string {  return {{.Name}}_Type }

func (op *{{.Name}}{{.Mod}}_Slice) Marshal(m jsn.Marshaler) error {
  return {{.Name}}{{.Mod}}_Repeats_Marshal(m, (*[]{{.El}})(op))
}

func (op* {{.Name}}{{.Mod}}_Slice) GetSize() (ret int) {
  if els:= *op; els != nil {
    ret = len(els)
  } else {
    ret = -1
   }
   return
}

func (op* {{.Name}}{{.Mod}}_Slice) SetSize(cnt int) {
  var els []{{.El}}
  if cnt >= 0 {
    els = make({{.Name}}{{.Mod}}_Slice, cnt)
  }
  (*op) = els
}

func (op* {{.Name}}{{.Mod}}_Slice) MarshalEl(m jsn.Marshaler, i int) error {
  return {{.Name}}{{.Mod}}_Marshal(m, &(*op)[i])
}

func {{.Name}}{{.Mod}}_Repeats_Marshal(m jsn.Marshaler, vals *[]{{.El}}) error {
  return jsn.RepeatBlock(m, (*{{.Name}}{{.Mod}}_Slice)(vals))
}

func {{.Name}}{{.Mod}}_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]{{.El}}) (err error) {
  if len(*pv) > 0 || !m.IsEncoding() {
    err = {{.Name}}{{.Mod}}_Repeats_Marshal(m, pv)
  }
  return
}