{{- with $type := . }}
// {{Pascal .Name}}
{{- /* 
    code doc 
*/ -}}
{{- if .UserComment }}
{{- range $i, $el := Lines .UserComment }}{{ if $i }}
//{{end}}{{""}} {{$el}}{{end}}{{end}}
{{- /*
    struct decl
*/}}
type {{Pascal .Name}} struct {
{{range Terms .}}{{/* loop over terms */ -}}
{{""}}	{{Pascal .Field}} {{.GoDecl -}}
{{""}}	`if:"{{- if .Private}}internal{{else}}label={{if .IsInline}}_{{else}}{{.Key}}{{end}}{{end}}
{{- if .Optional}},optional{{end}}
{{- if .IsUnboxed}},type={{.TypeName}}{{end}}"`
{{end}}{{/*ends range $terms*/ -}}
{{""}}	UserComment string
}
{{- /*
    slots
*/ -}}
{{if .Slots }}
// User implemented slots:
{{- range $slot := .Slots }}
var _ {{ScopeOf $slot}}{{Pascal $slot}} = (*{{Pascal $type.Name}})(nil)
{{- end}}{{/*ends range slots*/}}
{{end }}{{/*ends if slots*/}}
{{template "compose.tmpl" .}}
{{- /*
    keys for each of the public members
*/ -}}
{{range Terms .}}{{/* loop over terms */ -}}{{if not .Private -}}
const {{Pascal $type.Name}}_Field_{{Pascal .Field}} = "{{.Value}}"
{{end}}{{end}}{{/*ends range $terms*/ -}}
{{- /*
    marshal interface
*/ -}}
{{template "marshalSignature.tmpl" .}}
{{- /*
    repeating
*/ -}}
{{template "repeating.tmpl" (RepeatData .Name false)}}
{{- /*
    flow contents
*/ -}}
type {{Pascal .Name}}_Flow struct { ptr* {{Pascal .Name}} }

func (n {{Pascal .Name}}_Flow) GetType() string { return {{Pascal .Name}}_Type }
func (n {{Pascal .Name}}_Flow) GetLede() string { return {{
    if .Spec.Value.Name}}"{{.Spec.Value.Name}}"{{else}}{{Pascal .Name}}_Type{{end}} }
func (n {{Pascal .Name}}_Flow) GetFlow() interface{} { return n.ptr }
func (n {{Pascal .Name}}_Flow) SetFlow(i interface{}) (okay bool) {
  if ptr, ok := i.(*{{Pascal .Name}}); ok {
    *n.ptr, okay = *ptr, true
  }
  return
}

func {{Pascal .Name}}_Optional_Marshal(m jsn.Marshaler, pv **{{Pascal .Name}}) (err error) {
  if enc := m.IsEncoding(); enc && *pv != nil {
    err = {{Pascal .Name}}_Marshal(m, *pv)
  } else if !enc {
    var v {{Pascal .Name}}
    if err = {{Pascal .Name}}_Marshal(m, &v); err == nil {
      *pv = &v
    }
  }
  return
}

func {{Pascal .Name}}_Marshal(m jsn.Marshaler, val *{{Pascal .Name}}) (err error) {
  m.SetComment(&val.UserComment)
  if err = m.MarshalBlock({{Pascal .Name}}_Flow{val}); err == nil {
{{- range $i, $term:= Terms .}}{{/* loop over terms */}}{{if not .Private}}
    e{{$i}} := m.MarshalKey("{{if not .IsInline}}{{.Key}}{{end}}", {{Pascal $type.Name}}_Field_{{Pascal .Field}})
    if e{{$i}} == nil {
      e{{$i}} = {{ScopeOf .TypeName}}{{Pascal .TypeName -}}
      {{if .IsUnboxed}}_Unboxed{{end -}}
      {{if .Optional}}_Optional{{end -}}
      {{if .Repeats}}_Repeats{{end -}}
      _Marshal(m, &val.{{Pascal .Field}})
    }
    if e{{$i}} != nil && e{{$i}} != jsn.Missing {
      m.Error(errutil.New(e{{$i}}, "in flow at", {{Pascal $type.Name}}_Field_{{Pascal .Field}}))
    }
{{- end}}{{end}}
    m.EndBlock()
  }
  return
}
{{/* end of with */ -}}
{{end}}