// Code generated by "makeops"; edit at your own risk.
package grammar

import (
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/jsn"
	"github.com/ionous/errutil"
)

// Action makes a parser scanner producing a script defined action.
type Action struct {
	Action string `if:"label=_,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ ScannerMaker = (*Action)(nil)

func (*Action) Compose() composer.Spec {
	return composer.Spec{
		Name: Action_Type,
		Uses: composer.Type_Flow,
		Lede: "action",
	}
}

const Action_Type = "action"
const Action_Field_Action = "$ACTION"

func (op *Action) Marshal(m jsn.Marshaler) error {
	return Action_Marshal(m, op)
}

type Action_Slice []Action

func (op *Action_Slice) GetType() string { return Action_Type }

func (op *Action_Slice) Marshal(m jsn.Marshaler) error {
	return Action_Repeats_Marshal(m, (*[]Action)(op))
}

func (op *Action_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Action_Slice) SetSize(cnt int) {
	var els []Action
	if cnt >= 0 {
		els = make(Action_Slice, cnt)
	}
	(*op) = els
}

func (op *Action_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Action_Marshal(m, &(*op)[i])
}

func Action_Repeats_Marshal(m jsn.Marshaler, vals *[]Action) error {
	return jsn.RepeatBlock(m, (*Action_Slice)(vals))
}

func Action_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Action) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Action_Repeats_Marshal(m, pv)
	}
	return
}

type Action_Flow struct{ ptr *Action }

func (n Action_Flow) GetType() string      { return Action_Type }
func (n Action_Flow) GetLede() string      { return "action" }
func (n Action_Flow) GetFlow() interface{} { return n.ptr }
func (n Action_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Action); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Action_Optional_Marshal(m jsn.Marshaler, pv **Action) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Action_Marshal(m, *pv)
	} else if !enc {
		var v Action
		if err = Action_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Action_Marshal(m jsn.Marshaler, val *Action) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Action_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Action_Field_Action)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Action)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Action_Field_Action))
		}
		m.EndBlock()
	}
	return
}

// ChooseOne makes a parser scanner.
type ChooseOne struct {
	Options []ScannerMaker `if:"label=of"`
	Markup  map[string]any
}

// User implemented slots:
var _ ScannerMaker = (*ChooseOne)(nil)

func (*ChooseOne) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseOne_Type,
		Uses: composer.Type_Flow,
		Lede: "one",
	}
}

const ChooseOne_Type = "choose_one"
const ChooseOne_Field_Options = "$OPTIONS"

func (op *ChooseOne) Marshal(m jsn.Marshaler) error {
	return ChooseOne_Marshal(m, op)
}

type ChooseOne_Slice []ChooseOne

func (op *ChooseOne_Slice) GetType() string { return ChooseOne_Type }

func (op *ChooseOne_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseOne_Repeats_Marshal(m, (*[]ChooseOne)(op))
}

func (op *ChooseOne_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseOne_Slice) SetSize(cnt int) {
	var els []ChooseOne
	if cnt >= 0 {
		els = make(ChooseOne_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseOne_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseOne_Marshal(m, &(*op)[i])
}

func ChooseOne_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseOne) error {
	return jsn.RepeatBlock(m, (*ChooseOne_Slice)(vals))
}

func ChooseOne_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseOne) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseOne_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseOne_Flow struct{ ptr *ChooseOne }

func (n ChooseOne_Flow) GetType() string      { return ChooseOne_Type }
func (n ChooseOne_Flow) GetLede() string      { return "one" }
func (n ChooseOne_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseOne_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseOne); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseOne_Optional_Marshal(m jsn.Marshaler, pv **ChooseOne) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseOne_Marshal(m, *pv)
	} else if !enc {
		var v ChooseOne
		if err = ChooseOne_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseOne_Marshal(m jsn.Marshaler, val *ChooseOne) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseOne_Flow{val}); err == nil {
		e0 := m.MarshalKey("of", ChooseOne_Field_Options)
		if e0 == nil {
			e0 = ScannerMaker_Repeats_Marshal(m, &val.Options)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseOne_Field_Options))
		}
		m.EndBlock()
	}
	return
}

// Directive starts a parser scanner.
type Directive struct {
	Name   string         `if:"label=name,type=text"`
	Series []ScannerMaker `if:"label=with"`
	Markup map[string]any
}

// User implemented slots:
var _ GrammarMaker = (*Directive)(nil)

func (*Directive) Compose() composer.Spec {
	return composer.Spec{
		Name: Directive_Type,
		Uses: composer.Type_Flow,
		Lede: "interpret",
	}
}

const Directive_Type = "directive"
const Directive_Field_Name = "$NAME"
const Directive_Field_Series = "$SERIES"

func (op *Directive) Marshal(m jsn.Marshaler) error {
	return Directive_Marshal(m, op)
}

type Directive_Slice []Directive

func (op *Directive_Slice) GetType() string { return Directive_Type }

func (op *Directive_Slice) Marshal(m jsn.Marshaler) error {
	return Directive_Repeats_Marshal(m, (*[]Directive)(op))
}

func (op *Directive_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Directive_Slice) SetSize(cnt int) {
	var els []Directive
	if cnt >= 0 {
		els = make(Directive_Slice, cnt)
	}
	(*op) = els
}

func (op *Directive_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Directive_Marshal(m, &(*op)[i])
}

func Directive_Repeats_Marshal(m jsn.Marshaler, vals *[]Directive) error {
	return jsn.RepeatBlock(m, (*Directive_Slice)(vals))
}

func Directive_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Directive) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Directive_Repeats_Marshal(m, pv)
	}
	return
}

type Directive_Flow struct{ ptr *Directive }

func (n Directive_Flow) GetType() string      { return Directive_Type }
func (n Directive_Flow) GetLede() string      { return "interpret" }
func (n Directive_Flow) GetFlow() interface{} { return n.ptr }
func (n Directive_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Directive); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Directive_Optional_Marshal(m jsn.Marshaler, pv **Directive) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Directive_Marshal(m, *pv)
	} else if !enc {
		var v Directive
		if err = Directive_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Directive_Marshal(m jsn.Marshaler, val *Directive) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Directive_Flow{val}); err == nil {
		e0 := m.MarshalKey("name", Directive_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Directive_Field_Name))
		}
		e1 := m.MarshalKey("with", Directive_Field_Series)
		if e1 == nil {
			e1 = ScannerMaker_Repeats_Marshal(m, &val.Series)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Directive_Field_Series))
		}
		m.EndBlock()
	}
	return
}

// Focus Select a specific set of bounds for the scanner.
type Focus struct {
	Player string         `if:"label=_,type=text"`
	Series []ScannerMaker `if:"label=sequence"`
	Markup map[string]any
}

// User implemented slots:
var _ ScannerMaker = (*Focus)(nil)

func (*Focus) Compose() composer.Spec {
	return composer.Spec{
		Name: Focus_Type,
		Uses: composer.Type_Flow,
	}
}

const Focus_Type = "focus"
const Focus_Field_Player = "$PLAYER"
const Focus_Field_Series = "$SERIES"

func (op *Focus) Marshal(m jsn.Marshaler) error {
	return Focus_Marshal(m, op)
}

type Focus_Slice []Focus

func (op *Focus_Slice) GetType() string { return Focus_Type }

func (op *Focus_Slice) Marshal(m jsn.Marshaler) error {
	return Focus_Repeats_Marshal(m, (*[]Focus)(op))
}

func (op *Focus_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Focus_Slice) SetSize(cnt int) {
	var els []Focus
	if cnt >= 0 {
		els = make(Focus_Slice, cnt)
	}
	(*op) = els
}

func (op *Focus_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Focus_Marshal(m, &(*op)[i])
}

func Focus_Repeats_Marshal(m jsn.Marshaler, vals *[]Focus) error {
	return jsn.RepeatBlock(m, (*Focus_Slice)(vals))
}

func Focus_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Focus) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Focus_Repeats_Marshal(m, pv)
	}
	return
}

type Focus_Flow struct{ ptr *Focus }

func (n Focus_Flow) GetType() string      { return Focus_Type }
func (n Focus_Flow) GetLede() string      { return Focus_Type }
func (n Focus_Flow) GetFlow() interface{} { return n.ptr }
func (n Focus_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Focus); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Focus_Optional_Marshal(m jsn.Marshaler, pv **Focus) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Focus_Marshal(m, *pv)
	} else if !enc {
		var v Focus
		if err = Focus_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Focus_Marshal(m jsn.Marshaler, val *Focus) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Focus_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Focus_Field_Player)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Player)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Focus_Field_Player))
		}
		e1 := m.MarshalKey("sequence", Focus_Field_Series)
		if e1 == nil {
			e1 = ScannerMaker_Repeats_Marshal(m, &val.Series)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Focus_Field_Series))
		}
		m.EndBlock()
	}
	return
}

const GrammarMaker_Type = "grammar_maker"

var GrammarMaker_Optional_Marshal = GrammarMaker_Marshal

type GrammarMaker_Slot struct{ Value *GrammarMaker }

func (at GrammarMaker_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at GrammarMaker_Slot) GetType() string              { return GrammarMaker_Type }
func (at GrammarMaker_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at GrammarMaker_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(GrammarMaker)
	return
}

func GrammarMaker_Marshal(m jsn.Marshaler, ptr *GrammarMaker) (err error) {
	slot := GrammarMaker_Slot{ptr}
	return slot.Marshal(m)
}

type GrammarMaker_Slice []GrammarMaker

func (op *GrammarMaker_Slice) GetType() string { return GrammarMaker_Type }

func (op *GrammarMaker_Slice) Marshal(m jsn.Marshaler) error {
	return GrammarMaker_Repeats_Marshal(m, (*[]GrammarMaker)(op))
}

func (op *GrammarMaker_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *GrammarMaker_Slice) SetSize(cnt int) {
	var els []GrammarMaker
	if cnt >= 0 {
		els = make(GrammarMaker_Slice, cnt)
	}
	(*op) = els
}

func (op *GrammarMaker_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return GrammarMaker_Marshal(m, &(*op)[i])
}

func GrammarMaker_Repeats_Marshal(m jsn.Marshaler, vals *[]GrammarMaker) error {
	return jsn.RepeatBlock(m, (*GrammarMaker_Slice)(vals))
}

func GrammarMaker_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]GrammarMaker) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = GrammarMaker_Repeats_Marshal(m, pv)
	}
	return
}

// Noun makes a parser scanner.
type Noun struct {
	Kind   string `if:"label=noun,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ ScannerMaker = (*Noun)(nil)

func (*Noun) Compose() composer.Spec {
	return composer.Spec{
		Name: Noun_Type,
		Uses: composer.Type_Flow,
		Lede: "one",
	}
}

const Noun_Type = "noun"
const Noun_Field_Kind = "$KIND"

func (op *Noun) Marshal(m jsn.Marshaler) error {
	return Noun_Marshal(m, op)
}

type Noun_Slice []Noun

func (op *Noun_Slice) GetType() string { return Noun_Type }

func (op *Noun_Slice) Marshal(m jsn.Marshaler) error {
	return Noun_Repeats_Marshal(m, (*[]Noun)(op))
}

func (op *Noun_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Noun_Slice) SetSize(cnt int) {
	var els []Noun
	if cnt >= 0 {
		els = make(Noun_Slice, cnt)
	}
	(*op) = els
}

func (op *Noun_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Noun_Marshal(m, &(*op)[i])
}

func Noun_Repeats_Marshal(m jsn.Marshaler, vals *[]Noun) error {
	return jsn.RepeatBlock(m, (*Noun_Slice)(vals))
}

func Noun_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Noun) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Noun_Repeats_Marshal(m, pv)
	}
	return
}

type Noun_Flow struct{ ptr *Noun }

func (n Noun_Flow) GetType() string      { return Noun_Type }
func (n Noun_Flow) GetLede() string      { return "one" }
func (n Noun_Flow) GetFlow() interface{} { return n.ptr }
func (n Noun_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Noun); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Noun_Optional_Marshal(m jsn.Marshaler, pv **Noun) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Noun_Marshal(m, *pv)
	} else if !enc {
		var v Noun
		if err = Noun_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Noun_Marshal(m jsn.Marshaler, val *Noun) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Noun_Flow{val}); err == nil {
		e0 := m.MarshalKey("noun", Noun_Field_Kind)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Noun_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// Refine Change to the bounds of the most recent result.
type Refine struct {
	Series []ScannerMaker `if:"label=sequence"`
	Markup map[string]any
}

// User implemented slots:
var _ ScannerMaker = (*Refine)(nil)

func (*Refine) Compose() composer.Spec {
	return composer.Spec{
		Name: Refine_Type,
		Uses: composer.Type_Flow,
	}
}

const Refine_Type = "refine"
const Refine_Field_Series = "$SERIES"

func (op *Refine) Marshal(m jsn.Marshaler) error {
	return Refine_Marshal(m, op)
}

type Refine_Slice []Refine

func (op *Refine_Slice) GetType() string { return Refine_Type }

func (op *Refine_Slice) Marshal(m jsn.Marshaler) error {
	return Refine_Repeats_Marshal(m, (*[]Refine)(op))
}

func (op *Refine_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Refine_Slice) SetSize(cnt int) {
	var els []Refine
	if cnt >= 0 {
		els = make(Refine_Slice, cnt)
	}
	(*op) = els
}

func (op *Refine_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Refine_Marshal(m, &(*op)[i])
}

func Refine_Repeats_Marshal(m jsn.Marshaler, vals *[]Refine) error {
	return jsn.RepeatBlock(m, (*Refine_Slice)(vals))
}

func Refine_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Refine) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Refine_Repeats_Marshal(m, pv)
	}
	return
}

type Refine_Flow struct{ ptr *Refine }

func (n Refine_Flow) GetType() string      { return Refine_Type }
func (n Refine_Flow) GetLede() string      { return Refine_Type }
func (n Refine_Flow) GetFlow() interface{} { return n.ptr }
func (n Refine_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Refine); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Refine_Optional_Marshal(m jsn.Marshaler, pv **Refine) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Refine_Marshal(m, *pv)
	} else if !enc {
		var v Refine
		if err = Refine_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Refine_Marshal(m jsn.Marshaler, val *Refine) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Refine_Flow{val}); err == nil {
		e0 := m.MarshalKey("sequence", Refine_Field_Series)
		if e0 == nil {
			e0 = ScannerMaker_Repeats_Marshal(m, &val.Series)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Refine_Field_Series))
		}
		m.EndBlock()
	}
	return
}

// Reverse Swap the first and last matching results.
type Reverse struct {
	Reverses []ScannerMaker `if:"label=_"`
	Markup   map[string]any
}

// User implemented slots:
var _ ScannerMaker = (*Reverse)(nil)

func (*Reverse) Compose() composer.Spec {
	return composer.Spec{
		Name: Reverse_Type,
		Uses: composer.Type_Flow,
	}
}

const Reverse_Type = "reverse"
const Reverse_Field_Reverses = "$REVERSES"

func (op *Reverse) Marshal(m jsn.Marshaler) error {
	return Reverse_Marshal(m, op)
}

type Reverse_Slice []Reverse

func (op *Reverse_Slice) GetType() string { return Reverse_Type }

func (op *Reverse_Slice) Marshal(m jsn.Marshaler) error {
	return Reverse_Repeats_Marshal(m, (*[]Reverse)(op))
}

func (op *Reverse_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Reverse_Slice) SetSize(cnt int) {
	var els []Reverse
	if cnt >= 0 {
		els = make(Reverse_Slice, cnt)
	}
	(*op) = els
}

func (op *Reverse_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Reverse_Marshal(m, &(*op)[i])
}

func Reverse_Repeats_Marshal(m jsn.Marshaler, vals *[]Reverse) error {
	return jsn.RepeatBlock(m, (*Reverse_Slice)(vals))
}

func Reverse_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Reverse) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Reverse_Repeats_Marshal(m, pv)
	}
	return
}

type Reverse_Flow struct{ ptr *Reverse }

func (n Reverse_Flow) GetType() string      { return Reverse_Type }
func (n Reverse_Flow) GetLede() string      { return Reverse_Type }
func (n Reverse_Flow) GetFlow() interface{} { return n.ptr }
func (n Reverse_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Reverse); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Reverse_Optional_Marshal(m jsn.Marshaler, pv **Reverse) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Reverse_Marshal(m, *pv)
	} else if !enc {
		var v Reverse
		if err = Reverse_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Reverse_Marshal(m jsn.Marshaler, val *Reverse) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Reverse_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Reverse_Field_Reverses)
		if e0 == nil {
			e0 = ScannerMaker_Repeats_Marshal(m, &val.Reverses)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Reverse_Field_Reverses))
		}
		m.EndBlock()
	}
	return
}

const ScannerMaker_Type = "scanner_maker"

var ScannerMaker_Optional_Marshal = ScannerMaker_Marshal

type ScannerMaker_Slot struct{ Value *ScannerMaker }

func (at ScannerMaker_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at ScannerMaker_Slot) GetType() string              { return ScannerMaker_Type }
func (at ScannerMaker_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at ScannerMaker_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(ScannerMaker)
	return
}

func ScannerMaker_Marshal(m jsn.Marshaler, ptr *ScannerMaker) (err error) {
	slot := ScannerMaker_Slot{ptr}
	return slot.Marshal(m)
}

type ScannerMaker_Slice []ScannerMaker

func (op *ScannerMaker_Slice) GetType() string { return ScannerMaker_Type }

func (op *ScannerMaker_Slice) Marshal(m jsn.Marshaler) error {
	return ScannerMaker_Repeats_Marshal(m, (*[]ScannerMaker)(op))
}

func (op *ScannerMaker_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ScannerMaker_Slice) SetSize(cnt int) {
	var els []ScannerMaker
	if cnt >= 0 {
		els = make(ScannerMaker_Slice, cnt)
	}
	(*op) = els
}

func (op *ScannerMaker_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ScannerMaker_Marshal(m, &(*op)[i])
}

func ScannerMaker_Repeats_Marshal(m jsn.Marshaler, vals *[]ScannerMaker) error {
	return jsn.RepeatBlock(m, (*ScannerMaker_Slice)(vals))
}

func ScannerMaker_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ScannerMaker) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ScannerMaker_Repeats_Marshal(m, pv)
	}
	return
}

// Sequence makes a parser scanner.
type Sequence struct {
	Series []ScannerMaker `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ ScannerMaker = (*Sequence)(nil)

func (*Sequence) Compose() composer.Spec {
	return composer.Spec{
		Name: Sequence_Type,
		Uses: composer.Type_Flow,
	}
}

const Sequence_Type = "sequence"
const Sequence_Field_Series = "$SERIES"

func (op *Sequence) Marshal(m jsn.Marshaler) error {
	return Sequence_Marshal(m, op)
}

type Sequence_Slice []Sequence

func (op *Sequence_Slice) GetType() string { return Sequence_Type }

func (op *Sequence_Slice) Marshal(m jsn.Marshaler) error {
	return Sequence_Repeats_Marshal(m, (*[]Sequence)(op))
}

func (op *Sequence_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Sequence_Slice) SetSize(cnt int) {
	var els []Sequence
	if cnt >= 0 {
		els = make(Sequence_Slice, cnt)
	}
	(*op) = els
}

func (op *Sequence_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Sequence_Marshal(m, &(*op)[i])
}

func Sequence_Repeats_Marshal(m jsn.Marshaler, vals *[]Sequence) error {
	return jsn.RepeatBlock(m, (*Sequence_Slice)(vals))
}

func Sequence_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Sequence) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Sequence_Repeats_Marshal(m, pv)
	}
	return
}

type Sequence_Flow struct{ ptr *Sequence }

func (n Sequence_Flow) GetType() string      { return Sequence_Type }
func (n Sequence_Flow) GetLede() string      { return Sequence_Type }
func (n Sequence_Flow) GetFlow() interface{} { return n.ptr }
func (n Sequence_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Sequence); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Sequence_Optional_Marshal(m jsn.Marshaler, pv **Sequence) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Sequence_Marshal(m, *pv)
	} else if !enc {
		var v Sequence
		if err = Sequence_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Sequence_Marshal(m jsn.Marshaler, val *Sequence) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Sequence_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Sequence_Field_Series)
		if e0 == nil {
			e0 = ScannerMaker_Repeats_Marshal(m, &val.Series)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Sequence_Field_Series))
		}
		m.EndBlock()
	}
	return
}

// Words makes a parser scanner.
type Words struct {
	Words  []string `if:"label=word,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ ScannerMaker = (*Words)(nil)

func (*Words) Compose() composer.Spec {
	return composer.Spec{
		Name: Words_Type,
		Uses: composer.Type_Flow,
		Lede: "one",
	}
}

const Words_Type = "words"
const Words_Field_Words = "$WORDS"

func (op *Words) Marshal(m jsn.Marshaler) error {
	return Words_Marshal(m, op)
}

type Words_Slice []Words

func (op *Words_Slice) GetType() string { return Words_Type }

func (op *Words_Slice) Marshal(m jsn.Marshaler) error {
	return Words_Repeats_Marshal(m, (*[]Words)(op))
}

func (op *Words_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Words_Slice) SetSize(cnt int) {
	var els []Words
	if cnt >= 0 {
		els = make(Words_Slice, cnt)
	}
	(*op) = els
}

func (op *Words_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Words_Marshal(m, &(*op)[i])
}

func Words_Repeats_Marshal(m jsn.Marshaler, vals *[]Words) error {
	return jsn.RepeatBlock(m, (*Words_Slice)(vals))
}

func Words_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Words) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Words_Repeats_Marshal(m, pv)
	}
	return
}

type Words_Flow struct{ ptr *Words }

func (n Words_Flow) GetType() string      { return Words_Type }
func (n Words_Flow) GetLede() string      { return "one" }
func (n Words_Flow) GetFlow() interface{} { return n.ptr }
func (n Words_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Words); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Words_Optional_Marshal(m jsn.Marshaler, pv **Words) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Words_Marshal(m, *pv)
	} else if !enc {
		var v Words
		if err = Words_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Words_Marshal(m jsn.Marshaler, val *Words) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Words_Flow{val}); err == nil {
		e0 := m.MarshalKey("word", Words_Field_Words)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Repeats_Marshal(m, &val.Words)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Words_Field_Words))
		}
		m.EndBlock()
	}
	return
}

var Slots = []interface{}{
	(*GrammarMaker)(nil),
	(*ScannerMaker)(nil),
}

var Slats = []composer.Composer{
	(*Action)(nil),
	(*ChooseOne)(nil),
	(*Directive)(nil),
	(*Focus)(nil),
	(*Noun)(nil),
	(*Refine)(nil),
	(*Reverse)(nil),
	(*Sequence)(nil),
	(*Words)(nil),
}

var Signatures = map[uint64]interface{}{
	12048905879374467271: (*Action)(nil),    /* scanner_maker=Action: */
	1756442538083378424:  (*Focus)(nil),     /* scanner_maker=Focus:sequence: */
	6454124700650096920:  (*Directive)(nil), /* grammar_maker=Interpret name:with: */
	10964817074887037945: (*Noun)(nil),      /* scanner_maker=One noun: */
	16418039705711067622: (*ChooseOne)(nil), /* scanner_maker=One of: */
	16180319172078511701: (*Words)(nil),     /* scanner_maker=One word: */
	11402479949132197621: (*Refine)(nil),    /* scanner_maker=Refine sequence: */
	15857934419606450901: (*Reverse)(nil),   /* scanner_maker=Reverse: */
	10728359537834940094: (*Sequence)(nil),  /* scanner_maker=Sequence: */
}
