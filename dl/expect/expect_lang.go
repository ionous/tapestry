// Code generated by "makeops"; edit at your own risk.
package expect

import (
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/jsn"
	"git.sr.ht/~ionous/tapestry/rt"
	"github.com/ionous/errutil"
)

// ExpectLines
type ExpectLines struct {
	Lines  prim.Lines `if:"label=lines"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*ExpectLines)(nil)

func (*ExpectLines) Compose() composer.Spec {
	return composer.Spec{
		Name: ExpectLines_Type,
		Uses: composer.Type_Flow,
		Lede: "expect",
	}
}

const ExpectLines_Type = "expect_lines"
const ExpectLines_Field_Lines = "$LINES"

func (op *ExpectLines) Marshal(m jsn.Marshaler) error {
	return ExpectLines_Marshal(m, op)
}

type ExpectLines_Slice []ExpectLines

func (op *ExpectLines_Slice) GetType() string { return ExpectLines_Type }

func (op *ExpectLines_Slice) Marshal(m jsn.Marshaler) error {
	return ExpectLines_Repeats_Marshal(m, (*[]ExpectLines)(op))
}

func (op *ExpectLines_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ExpectLines_Slice) SetSize(cnt int) {
	var els []ExpectLines
	if cnt >= 0 {
		els = make(ExpectLines_Slice, cnt)
	}
	(*op) = els
}

func (op *ExpectLines_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ExpectLines_Marshal(m, &(*op)[i])
}

func ExpectLines_Repeats_Marshal(m jsn.Marshaler, vals *[]ExpectLines) error {
	return jsn.RepeatBlock(m, (*ExpectLines_Slice)(vals))
}

func ExpectLines_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ExpectLines) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ExpectLines_Repeats_Marshal(m, pv)
	}
	return
}

type ExpectLines_Flow struct{ ptr *ExpectLines }

func (n ExpectLines_Flow) GetType() string      { return ExpectLines_Type }
func (n ExpectLines_Flow) GetLede() string      { return "expect" }
func (n ExpectLines_Flow) GetFlow() interface{} { return n.ptr }
func (n ExpectLines_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ExpectLines); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ExpectLines_Optional_Marshal(m jsn.Marshaler, pv **ExpectLines) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ExpectLines_Marshal(m, *pv)
	} else if !enc {
		var v ExpectLines
		if err = ExpectLines_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ExpectLines_Marshal(m jsn.Marshaler, val *ExpectLines) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ExpectLines_Flow{val}); err == nil {
		e0 := m.MarshalKey("lines", ExpectLines_Field_Lines)
		if e0 == nil {
			e0 = prim.Lines_Marshal(m, &val.Lines)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ExpectLines_Field_Lines))
		}
		m.EndBlock()
	}
	return
}

// ExpectString
type ExpectString struct {
	String string `if:"label=string,type=text"`
	Kind   string `if:"label=kind,optional,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*ExpectString)(nil)

func (*ExpectString) Compose() composer.Spec {
	return composer.Spec{
		Name: ExpectString_Type,
		Uses: composer.Type_Flow,
		Lede: "expect",
	}
}

const ExpectString_Type = "expect_string"
const ExpectString_Field_String = "$STRING"
const ExpectString_Field_Kind = "$KIND"

func (op *ExpectString) Marshal(m jsn.Marshaler) error {
	return ExpectString_Marshal(m, op)
}

type ExpectString_Slice []ExpectString

func (op *ExpectString_Slice) GetType() string { return ExpectString_Type }

func (op *ExpectString_Slice) Marshal(m jsn.Marshaler) error {
	return ExpectString_Repeats_Marshal(m, (*[]ExpectString)(op))
}

func (op *ExpectString_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ExpectString_Slice) SetSize(cnt int) {
	var els []ExpectString
	if cnt >= 0 {
		els = make(ExpectString_Slice, cnt)
	}
	(*op) = els
}

func (op *ExpectString_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ExpectString_Marshal(m, &(*op)[i])
}

func ExpectString_Repeats_Marshal(m jsn.Marshaler, vals *[]ExpectString) error {
	return jsn.RepeatBlock(m, (*ExpectString_Slice)(vals))
}

func ExpectString_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ExpectString) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ExpectString_Repeats_Marshal(m, pv)
	}
	return
}

type ExpectString_Flow struct{ ptr *ExpectString }

func (n ExpectString_Flow) GetType() string      { return ExpectString_Type }
func (n ExpectString_Flow) GetLede() string      { return "expect" }
func (n ExpectString_Flow) GetFlow() interface{} { return n.ptr }
func (n ExpectString_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ExpectString); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ExpectString_Optional_Marshal(m jsn.Marshaler, pv **ExpectString) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ExpectString_Marshal(m, *pv)
	} else if !enc {
		var v ExpectString
		if err = ExpectString_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ExpectString_Marshal(m jsn.Marshaler, val *ExpectString) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ExpectString_Flow{val}); err == nil {
		e0 := m.MarshalKey("string", ExpectString_Field_String)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.String)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ExpectString_Field_String))
		}
		e1 := m.MarshalKey("kind", ExpectString_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ExpectString_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// ExpectText
type ExpectText struct {
	Text   rt.TextEval `if:"label=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*ExpectText)(nil)

func (*ExpectText) Compose() composer.Spec {
	return composer.Spec{
		Name: ExpectText_Type,
		Uses: composer.Type_Flow,
		Lede: "text",
	}
}

const ExpectText_Type = "expect_text"
const ExpectText_Field_Text = "$TEXT"

func (op *ExpectText) Marshal(m jsn.Marshaler) error {
	return ExpectText_Marshal(m, op)
}

type ExpectText_Slice []ExpectText

func (op *ExpectText_Slice) GetType() string { return ExpectText_Type }

func (op *ExpectText_Slice) Marshal(m jsn.Marshaler) error {
	return ExpectText_Repeats_Marshal(m, (*[]ExpectText)(op))
}

func (op *ExpectText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ExpectText_Slice) SetSize(cnt int) {
	var els []ExpectText
	if cnt >= 0 {
		els = make(ExpectText_Slice, cnt)
	}
	(*op) = els
}

func (op *ExpectText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ExpectText_Marshal(m, &(*op)[i])
}

func ExpectText_Repeats_Marshal(m jsn.Marshaler, vals *[]ExpectText) error {
	return jsn.RepeatBlock(m, (*ExpectText_Slice)(vals))
}

func ExpectText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ExpectText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ExpectText_Repeats_Marshal(m, pv)
	}
	return
}

type ExpectText_Flow struct{ ptr *ExpectText }

func (n ExpectText_Flow) GetType() string      { return ExpectText_Type }
func (n ExpectText_Flow) GetLede() string      { return "text" }
func (n ExpectText_Flow) GetFlow() interface{} { return n.ptr }
func (n ExpectText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ExpectText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ExpectText_Optional_Marshal(m jsn.Marshaler, pv **ExpectText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ExpectText_Marshal(m, *pv)
	} else if !enc {
		var v ExpectText
		if err = ExpectText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ExpectText_Marshal(m jsn.Marshaler, val *ExpectText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ExpectText_Flow{val}); err == nil {
		e0 := m.MarshalKey("text", ExpectText_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ExpectText_Field_Text))
		}
		m.EndBlock()
	}
	return
}

var Slats = []composer.Composer{
	(*ExpectLines)(nil),
	(*ExpectString)(nil),
	(*ExpectText)(nil),
}

var Signatures = map[uint64]interface{}{
	469594313115947985:   (*ExpectLines)(nil),  /* execute=Expect lines: */
	5505041336569015051:  (*ExpectString)(nil), /* execute=Expect string: */
	16349145873928144577: (*ExpectString)(nil), /* execute=Expect string:kind: */
	301090694538436767:   (*ExpectText)(nil),   /* execute=Text text: */
}
