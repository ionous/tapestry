// Code generated by "makeops"; edit at your own risk.
package core

import (
	"git.sr.ht/~ionous/iffy/dl/composer"
	"git.sr.ht/~ionous/iffy/dl/reader"
	"git.sr.ht/~ionous/iffy/dl/value"
	"git.sr.ht/~ionous/iffy/export/jsn"
	"git.sr.ht/~ionous/iffy/rt"
)

// Activity
type Activity struct {
	Exe []rt.Execute `if:"label=_"`
}

func (*Activity) Compose() composer.Spec {
	return composer.Spec{
		Name: Activity_Type,
		Uses: composer.Type_Flow,
		Lede: "act",
	}
}

const Activity_Type = "activity"

const Activity_Field_Exe = "$EXE"

func (op *Activity) Marshal(n jsn.Marshaler) {
	Activity_Marshal(n, op)
}

func Activity_Repeats_Marshal(n jsn.Marshaler, vals *[]Activity) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Activity_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Activity_Optional_Marshal(n jsn.Marshaler, val **Activity) {
	if *val != nil {
		Activity_Marshal(n, *val)
	}
}

func Activity_Marshal(n jsn.Marshaler, val *Activity) {
	n.MapValues("act", Activity_Type)
	n.MapKey("", Activity_Field_Exe)
	/* */ rt.Execute_Repeats_Marshal(n, &val.Exe)
	n.EndValues()
	return
}

// AllTrue Returns true if all of the evaluations are true.
type AllTrue struct {
	Test []rt.BoolEval `if:"label=_"`
}

func (*AllTrue) Compose() composer.Spec {
	return composer.Spec{
		Name: AllTrue_Type,
		Uses: composer.Type_Flow,
		Lede: "all_of",
	}
}

const AllTrue_Type = "all_true"

const AllTrue_Field_Test = "$TEST"

func (op *AllTrue) Marshal(n jsn.Marshaler) {
	AllTrue_Marshal(n, op)
}

func AllTrue_Repeats_Marshal(n jsn.Marshaler, vals *[]AllTrue) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			AllTrue_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func AllTrue_Optional_Marshal(n jsn.Marshaler, val **AllTrue) {
	if *val != nil {
		AllTrue_Marshal(n, *val)
	}
}

func AllTrue_Marshal(n jsn.Marshaler, val *AllTrue) {
	n.MapValues("all_of", AllTrue_Type)
	n.MapKey("", AllTrue_Field_Test)
	/* */ rt.BoolEval_Repeats_Marshal(n, &val.Test)
	n.EndValues()
	return
}

// Always Returns true.
type Always struct {
}

func (*Always) Compose() composer.Spec {
	return composer.Spec{
		Name: Always_Type,
		Uses: composer.Type_Flow,
	}
}

const Always_Type = "always"

func (op *Always) Marshal(n jsn.Marshaler) {
	Always_Marshal(n, op)
}

func Always_Repeats_Marshal(n jsn.Marshaler, vals *[]Always) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Always_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Always_Optional_Marshal(n jsn.Marshaler, val **Always) {
	if *val != nil {
		Always_Marshal(n, *val)
	}
}

func Always_Marshal(n jsn.Marshaler, val *Always) {
	n.MapValues(Always_Type, Always_Type)
	n.EndValues()
	return
}

// AnyTrue Returns true if any of the evaluations are true.
type AnyTrue struct {
	Test []rt.BoolEval `if:"label=_"`
}

func (*AnyTrue) Compose() composer.Spec {
	return composer.Spec{
		Name: AnyTrue_Type,
		Uses: composer.Type_Flow,
		Lede: "any_of",
	}
}

const AnyTrue_Type = "any_true"

const AnyTrue_Field_Test = "$TEST"

func (op *AnyTrue) Marshal(n jsn.Marshaler) {
	AnyTrue_Marshal(n, op)
}

func AnyTrue_Repeats_Marshal(n jsn.Marshaler, vals *[]AnyTrue) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			AnyTrue_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func AnyTrue_Optional_Marshal(n jsn.Marshaler, val **AnyTrue) {
	if *val != nil {
		AnyTrue_Marshal(n, *val)
	}
}

func AnyTrue_Marshal(n jsn.Marshaler, val *AnyTrue) {
	n.MapValues("any_of", AnyTrue_Type)
	n.MapKey("", AnyTrue_Field_Test)
	/* */ rt.BoolEval_Repeats_Marshal(n, &val.Test)
	n.EndValues()
	return
}

// Assign Assigns a variable to a value.
type Assign struct {
	Var  value.VariableName `if:"label=_"`
	From rt.Assignment      `if:"label=be"`
}

func (*Assign) Compose() composer.Spec {
	return composer.Spec{
		Name: Assign_Type,
		Uses: composer.Type_Flow,
		Lede: "let",
	}
}

const Assign_Type = "assign"

const Assign_Field_Var = "$VAR"
const Assign_Field_From = "$FROM"

func (op *Assign) Marshal(n jsn.Marshaler) {
	Assign_Marshal(n, op)
}

func Assign_Repeats_Marshal(n jsn.Marshaler, vals *[]Assign) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Assign_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Assign_Optional_Marshal(n jsn.Marshaler, val **Assign) {
	if *val != nil {
		Assign_Marshal(n, *val)
	}
}

func Assign_Marshal(n jsn.Marshaler, val *Assign) {
	n.MapValues("let", Assign_Type)
	n.MapKey("", Assign_Field_Var)
	/* */ value.VariableName_Marshal(n, &val.Var)
	n.MapKey("be", Assign_Field_From)
	/* */ rt.Assignment_Marshal(n, &val.From)
	n.EndValues()
	return
}

// AtLeast The first value is greater than or equal to the second value.
type AtLeast struct {
}

func (*AtLeast) Compose() composer.Spec {
	return composer.Spec{
		Name: AtLeast_Type,
		Uses: composer.Type_Flow,
	}
}

const AtLeast_Type = "at_least"

func (op *AtLeast) Marshal(n jsn.Marshaler) {
	AtLeast_Marshal(n, op)
}

func AtLeast_Repeats_Marshal(n jsn.Marshaler, vals *[]AtLeast) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			AtLeast_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func AtLeast_Optional_Marshal(n jsn.Marshaler, val **AtLeast) {
	if *val != nil {
		AtLeast_Marshal(n, *val)
	}
}

func AtLeast_Marshal(n jsn.Marshaler, val *AtLeast) {
	n.MapValues(AtLeast_Type, AtLeast_Type)
	n.EndValues()
	return
}

// AtMost The first value is less than or equal to the second value.
type AtMost struct {
}

func (*AtMost) Compose() composer.Spec {
	return composer.Spec{
		Name: AtMost_Type,
		Uses: composer.Type_Flow,
	}
}

const AtMost_Type = "at_most"

func (op *AtMost) Marshal(n jsn.Marshaler) {
	AtMost_Marshal(n, op)
}

func AtMost_Repeats_Marshal(n jsn.Marshaler, vals *[]AtMost) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			AtMost_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func AtMost_Optional_Marshal(n jsn.Marshaler, val **AtMost) {
	if *val != nil {
		AtMost_Marshal(n, *val)
	}
}

func AtMost_Marshal(n jsn.Marshaler, val *AtMost) {
	n.MapValues(AtMost_Type, AtMost_Type)
	n.EndValues()
	return
}

// Blankline Add a single blank line following some text.
type Blankline struct {
}

func (*Blankline) Compose() composer.Spec {
	return composer.Spec{
		Name: Blankline_Type,
		Uses: composer.Type_Flow,
		Lede: "p",
	}
}

const Blankline_Type = "blankline"

func (op *Blankline) Marshal(n jsn.Marshaler) {
	Blankline_Marshal(n, op)
}

func Blankline_Repeats_Marshal(n jsn.Marshaler, vals *[]Blankline) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Blankline_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Blankline_Optional_Marshal(n jsn.Marshaler, val **Blankline) {
	if *val != nil {
		Blankline_Marshal(n, *val)
	}
}

func Blankline_Marshal(n jsn.Marshaler, val *Blankline) {
	n.MapValues("p", Blankline_Type)
	n.EndValues()
	return
}

// BoolValue Specify an explicit true or false value.
type BoolValue struct {
	Bool bool `if:"label=_,type=bool"`
}

func (*BoolValue) Compose() composer.Spec {
	return composer.Spec{
		Name: BoolValue_Type,
		Uses: composer.Type_Flow,
		Lede: "bool",
	}
}

const BoolValue_Type = "bool_value"

const BoolValue_Field_Bool = "$BOOL"

func (op *BoolValue) Marshal(n jsn.Marshaler) {
	BoolValue_Marshal(n, op)
}

func BoolValue_Repeats_Marshal(n jsn.Marshaler, vals *[]BoolValue) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			BoolValue_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func BoolValue_Optional_Marshal(n jsn.Marshaler, val **BoolValue) {
	if *val != nil {
		BoolValue_Marshal(n, *val)
	}
}

func BoolValue_Marshal(n jsn.Marshaler, val *BoolValue) {
	n.MapValues("bool", BoolValue_Type)
	n.MapKey("", BoolValue_Field_Bool)
	/* */ value.Bool_Override_Marshal(n, &val.Bool)
	n.EndValues()
	return
}

// BracketText Sandwiches text printed during a block and puts them inside parenthesis &#x27;()&#x27;.
type BracketText struct {
	Do Activity `if:"label=_"`
}

func (*BracketText) Compose() composer.Spec {
	return composer.Spec{
		Name: BracketText_Type,
		Uses: composer.Type_Flow,
		Lede: "brackets",
	}
}

const BracketText_Type = "bracket_text"

const BracketText_Field_Do = "$DO"

func (op *BracketText) Marshal(n jsn.Marshaler) {
	BracketText_Marshal(n, op)
}

func BracketText_Repeats_Marshal(n jsn.Marshaler, vals *[]BracketText) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			BracketText_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func BracketText_Optional_Marshal(n jsn.Marshaler, val **BracketText) {
	if *val != nil {
		BracketText_Marshal(n, *val)
	}
}

func BracketText_Marshal(n jsn.Marshaler, val *BracketText) {
	n.MapValues("brackets", BracketText_Type)
	n.MapKey("", BracketText_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.EndValues()
	return
}

const Brancher_Type = "brancher"

var Brancher_Optional_Marshal = Brancher_Marshal

func Brancher_Marshal(n jsn.Marshaler, ptr *Brancher) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

func Brancher_Repeats_Marshal(n jsn.Marshaler, vals *[]Brancher) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Brancher_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

// Break In a repeating loop, exit the loop.
type Break struct {
}

func (*Break) Compose() composer.Spec {
	return composer.Spec{
		Name: Break_Type,
		Uses: composer.Type_Flow,
	}
}

const Break_Type = "break"

func (op *Break) Marshal(n jsn.Marshaler) {
	Break_Marshal(n, op)
}

func Break_Repeats_Marshal(n jsn.Marshaler, vals *[]Break) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Break_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Break_Optional_Marshal(n jsn.Marshaler, val **Break) {
	if *val != nil {
		Break_Marshal(n, *val)
	}
}

func Break_Marshal(n jsn.Marshaler, val *Break) {
	n.MapValues(Break_Type, Break_Type)
	n.EndValues()
	return
}

// BufferText
type BufferText struct {
	Do Activity `if:"label=_"`
}

func (*BufferText) Compose() composer.Spec {
	return composer.Spec{
		Name: BufferText_Type,
		Uses: composer.Type_Flow,
		Lede: "buffers",
	}
}

const BufferText_Type = "buffer_text"

const BufferText_Field_Do = "$DO"

func (op *BufferText) Marshal(n jsn.Marshaler) {
	BufferText_Marshal(n, op)
}

func BufferText_Repeats_Marshal(n jsn.Marshaler, vals *[]BufferText) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			BufferText_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func BufferText_Optional_Marshal(n jsn.Marshaler, val **BufferText) {
	if *val != nil {
		BufferText_Marshal(n, *val)
	}
}

func BufferText_Marshal(n jsn.Marshaler, val *BufferText) {
	n.MapValues("buffers", BufferText_Type)
	n.MapKey("", BufferText_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.EndValues()
	return
}

// CallArg Runtime version of argument
type CallArg struct {
	Name string        `if:"label=_,type=text"`
	From rt.Assignment `if:"label=from"`
}

func (*CallArg) Compose() composer.Spec {
	return composer.Spec{
		Name: CallArg_Type,
		Uses: composer.Type_Flow,
		Lede: "inarg",
	}
}

const CallArg_Type = "call_arg"

const CallArg_Field_Name = "$NAME"
const CallArg_Field_From = "$FROM"

func (op *CallArg) Marshal(n jsn.Marshaler) {
	CallArg_Marshal(n, op)
}

func CallArg_Repeats_Marshal(n jsn.Marshaler, vals *[]CallArg) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CallArg_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CallArg_Optional_Marshal(n jsn.Marshaler, val **CallArg) {
	if *val != nil {
		CallArg_Marshal(n, *val)
	}
}

func CallArg_Marshal(n jsn.Marshaler, val *CallArg) {
	n.MapValues("inarg", CallArg_Type)
	n.MapKey("", CallArg_Field_Name)
	/* */ value.Text_Override_Marshal(n, &val.Name)
	n.MapKey("from", CallArg_Field_From)
	/* */ rt.Assignment_Marshal(n, &val.From)
	n.EndValues()
	return
}

// CallArgs Runtime version of arguments
type CallArgs struct {
	Args []CallArg `if:"label=_"`
}

func (*CallArgs) Compose() composer.Spec {
	return composer.Spec{
		Name: CallArgs_Type,
		Uses: composer.Type_Flow,
		Lede: "inargs",
	}
}

const CallArgs_Type = "call_args"

const CallArgs_Field_Args = "$ARGS"

func (op *CallArgs) Marshal(n jsn.Marshaler) {
	CallArgs_Marshal(n, op)
}

func CallArgs_Repeats_Marshal(n jsn.Marshaler, vals *[]CallArgs) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CallArgs_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CallArgs_Optional_Marshal(n jsn.Marshaler, val **CallArgs) {
	if *val != nil {
		CallArgs_Marshal(n, *val)
	}
}

func CallArgs_Marshal(n jsn.Marshaler, val *CallArgs) {
	n.MapValues("inargs", CallArgs_Type)
	n.MapKey("", CallArgs_Field_Args)
	/* */ CallArg_Repeats_Marshal(n, &val.Args)
	n.EndValues()
	return
}

// CallCycle Runtime version of cycle_text
type CallCycle struct {
	At    reader.Position `if:"internal"`
	Parts []rt.TextEval   `if:"label=_"`
}

func (*CallCycle) Compose() composer.Spec {
	return composer.Spec{
		Name: CallCycle_Type,
		Uses: composer.Type_Flow,
		Lede: "cycle",
	}
}

const CallCycle_Type = "call_cycle"

const CallCycle_Field_Parts = "$PARTS"

func (op *CallCycle) Marshal(n jsn.Marshaler) {
	CallCycle_Marshal(n, op)
}

func CallCycle_Repeats_Marshal(n jsn.Marshaler, vals *[]CallCycle) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CallCycle_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CallCycle_Optional_Marshal(n jsn.Marshaler, val **CallCycle) {
	if *val != nil {
		CallCycle_Marshal(n, *val)
	}
}

func CallCycle_Marshal(n jsn.Marshaler, val *CallCycle) {
	n.SetCursor(val.At.Offset)
	n.MapValues("cycle", CallCycle_Type)
	n.MapKey("", CallCycle_Field_Parts)
	/* */ rt.TextEval_Repeats_Marshal(n, &val.Parts)
	n.EndValues()
	return
}

// CallMake Runtime version of make
type CallMake struct {
	Kind      string   `if:"label=_,type=text"`
	Arguments CallArgs `if:"label=args"`
}

func (*CallMake) Compose() composer.Spec {
	return composer.Spec{
		Name: CallMake_Type,
		Uses: composer.Type_Flow,
	}
}

const CallMake_Type = "call_make"

const CallMake_Field_Kind = "$KIND"
const CallMake_Field_Arguments = "$ARGUMENTS"

func (op *CallMake) Marshal(n jsn.Marshaler) {
	CallMake_Marshal(n, op)
}

func CallMake_Repeats_Marshal(n jsn.Marshaler, vals *[]CallMake) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CallMake_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CallMake_Optional_Marshal(n jsn.Marshaler, val **CallMake) {
	if *val != nil {
		CallMake_Marshal(n, *val)
	}
}

func CallMake_Marshal(n jsn.Marshaler, val *CallMake) {
	n.MapValues(CallMake_Type, CallMake_Type)
	n.MapKey("", CallMake_Field_Kind)
	/* */ value.Text_Override_Marshal(n, &val.Kind)
	n.MapKey("args", CallMake_Field_Arguments)
	/* */ CallArgs_Marshal(n, &val.Arguments)
	n.EndValues()
	return
}

// CallPattern Runtime version of determine
type CallPattern struct {
	Pattern   value.PatternName `if:"label=_"`
	Arguments CallArgs          `if:"label=args"`
}

func (*CallPattern) Compose() composer.Spec {
	return composer.Spec{
		Name: CallPattern_Type,
		Uses: composer.Type_Flow,
	}
}

const CallPattern_Type = "call_pattern"

const CallPattern_Field_Pattern = "$PATTERN"
const CallPattern_Field_Arguments = "$ARGUMENTS"

func (op *CallPattern) Marshal(n jsn.Marshaler) {
	CallPattern_Marshal(n, op)
}

func CallPattern_Repeats_Marshal(n jsn.Marshaler, vals *[]CallPattern) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CallPattern_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CallPattern_Optional_Marshal(n jsn.Marshaler, val **CallPattern) {
	if *val != nil {
		CallPattern_Marshal(n, *val)
	}
}

func CallPattern_Marshal(n jsn.Marshaler, val *CallPattern) {
	n.MapValues(CallPattern_Type, CallPattern_Type)
	n.MapKey("", CallPattern_Field_Pattern)
	/* */ value.PatternName_Marshal(n, &val.Pattern)
	n.MapKey("args", CallPattern_Field_Arguments)
	/* */ CallArgs_Marshal(n, &val.Arguments)
	n.EndValues()
	return
}

// CallSend Runtime version of send
type CallSend struct {
	Event     string          `if:"label=_,type=text"`
	Path      rt.TextListEval `if:"label=to"`
	Arguments CallArgs        `if:"label=args"`
}

func (*CallSend) Compose() composer.Spec {
	return composer.Spec{
		Name: CallSend_Type,
		Uses: composer.Type_Flow,
	}
}

const CallSend_Type = "call_send"

const CallSend_Field_Event = "$EVENT"
const CallSend_Field_Path = "$PATH"
const CallSend_Field_Arguments = "$ARGUMENTS"

func (op *CallSend) Marshal(n jsn.Marshaler) {
	CallSend_Marshal(n, op)
}

func CallSend_Repeats_Marshal(n jsn.Marshaler, vals *[]CallSend) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CallSend_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CallSend_Optional_Marshal(n jsn.Marshaler, val **CallSend) {
	if *val != nil {
		CallSend_Marshal(n, *val)
	}
}

func CallSend_Marshal(n jsn.Marshaler, val *CallSend) {
	n.MapValues(CallSend_Type, CallSend_Type)
	n.MapKey("", CallSend_Field_Event)
	/* */ value.Text_Override_Marshal(n, &val.Event)
	n.MapKey("to", CallSend_Field_Path)
	/* */ rt.TextListEval_Marshal(n, &val.Path)
	n.MapKey("args", CallSend_Field_Arguments)
	/* */ CallArgs_Marshal(n, &val.Arguments)
	n.EndValues()
	return
}

// CallShuffle Runtime version of shuffle_text
type CallShuffle struct {
	At      reader.Position `if:"internal"`
	Parts   []rt.TextEval   `if:"label=_"`
	Indices Shuffler        `if:"internal"`
}

func (*CallShuffle) Compose() composer.Spec {
	return composer.Spec{
		Name: CallShuffle_Type,
		Uses: composer.Type_Flow,
		Lede: "shuffle",
	}
}

const CallShuffle_Type = "call_shuffle"

const CallShuffle_Field_Parts = "$PARTS"

func (op *CallShuffle) Marshal(n jsn.Marshaler) {
	CallShuffle_Marshal(n, op)
}

func CallShuffle_Repeats_Marshal(n jsn.Marshaler, vals *[]CallShuffle) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CallShuffle_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CallShuffle_Optional_Marshal(n jsn.Marshaler, val **CallShuffle) {
	if *val != nil {
		CallShuffle_Marshal(n, *val)
	}
}

func CallShuffle_Marshal(n jsn.Marshaler, val *CallShuffle) {
	n.SetCursor(val.At.Offset)
	n.MapValues("shuffle", CallShuffle_Type)
	n.MapKey("", CallShuffle_Field_Parts)
	/* */ rt.TextEval_Repeats_Marshal(n, &val.Parts)
	n.EndValues()
	return
}

// CallTerminal Runtime version of stopping_text
type CallTerminal struct {
	At    reader.Position `if:"internal"`
	Parts []rt.TextEval   `if:"label=_"`
}

func (*CallTerminal) Compose() composer.Spec {
	return composer.Spec{
		Name: CallTerminal_Type,
		Uses: composer.Type_Flow,
		Lede: "stopping",
	}
}

const CallTerminal_Type = "call_terminal"

const CallTerminal_Field_Parts = "$PARTS"

func (op *CallTerminal) Marshal(n jsn.Marshaler) {
	CallTerminal_Marshal(n, op)
}

func CallTerminal_Repeats_Marshal(n jsn.Marshaler, vals *[]CallTerminal) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CallTerminal_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CallTerminal_Optional_Marshal(n jsn.Marshaler, val **CallTerminal) {
	if *val != nil {
		CallTerminal_Marshal(n, *val)
	}
}

func CallTerminal_Marshal(n jsn.Marshaler, val *CallTerminal) {
	n.SetCursor(val.At.Offset)
	n.MapValues("stopping", CallTerminal_Type)
	n.MapKey("", CallTerminal_Field_Parts)
	/* */ rt.TextEval_Repeats_Marshal(n, &val.Parts)
	n.EndValues()
	return
}

// CallTrigger Runtime version of count_of
type CallTrigger struct {
	At      reader.Position `if:"internal"`
	Trigger Trigger         `if:"label=_"`
	Num     rt.NumberEval   `if:"label=num"`
}

func (*CallTrigger) Compose() composer.Spec {
	return composer.Spec{
		Name: CallTrigger_Type,
		Uses: composer.Type_Flow,
		Lede: "trigger",
	}
}

const CallTrigger_Type = "call_trigger"

const CallTrigger_Field_Trigger = "$TRIGGER"
const CallTrigger_Field_Num = "$NUM"

func (op *CallTrigger) Marshal(n jsn.Marshaler) {
	CallTrigger_Marshal(n, op)
}

func CallTrigger_Repeats_Marshal(n jsn.Marshaler, vals *[]CallTrigger) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CallTrigger_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CallTrigger_Optional_Marshal(n jsn.Marshaler, val **CallTrigger) {
	if *val != nil {
		CallTrigger_Marshal(n, *val)
	}
}

func CallTrigger_Marshal(n jsn.Marshaler, val *CallTrigger) {
	n.SetCursor(val.At.Offset)
	n.MapValues("trigger", CallTrigger_Type)
	n.MapKey("", CallTrigger_Field_Trigger)
	/* */ Trigger_Marshal(n, &val.Trigger)
	n.MapKey("num", CallTrigger_Field_Num)
	/* */ rt.NumberEval_Marshal(n, &val.Num)
	n.EndValues()
	return
}

// Capitalize Returns new text, with the first letter turned into uppercase.
type Capitalize struct {
	Text rt.TextEval `if:"label=_"`
}

func (*Capitalize) Compose() composer.Spec {
	return composer.Spec{
		Name: Capitalize_Type,
		Uses: composer.Type_Flow,
	}
}

const Capitalize_Type = "capitalize"

const Capitalize_Field_Text = "$TEXT"

func (op *Capitalize) Marshal(n jsn.Marshaler) {
	Capitalize_Marshal(n, op)
}

func Capitalize_Repeats_Marshal(n jsn.Marshaler, vals *[]Capitalize) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Capitalize_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Capitalize_Optional_Marshal(n jsn.Marshaler, val **Capitalize) {
	if *val != nil {
		Capitalize_Marshal(n, *val)
	}
}

func Capitalize_Marshal(n jsn.Marshaler, val *Capitalize) {
	n.MapValues(Capitalize_Type, Capitalize_Type)
	n.MapKey("", Capitalize_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// ChooseAction An if statement.
type ChooseAction struct {
	If   rt.BoolEval `if:"label=_"`
	Do   Activity    `if:"label=do"`
	Else Brancher    `if:"label=else,optional"`
}

func (*ChooseAction) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseAction_Type,
		Uses: composer.Type_Flow,
		Lede: "if",
	}
}

const ChooseAction_Type = "choose_action"

const ChooseAction_Field_If = "$IF"
const ChooseAction_Field_Do = "$DO"
const ChooseAction_Field_Else = "$ELSE"

func (op *ChooseAction) Marshal(n jsn.Marshaler) {
	ChooseAction_Marshal(n, op)
}

func ChooseAction_Repeats_Marshal(n jsn.Marshaler, vals *[]ChooseAction) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			ChooseAction_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func ChooseAction_Optional_Marshal(n jsn.Marshaler, val **ChooseAction) {
	if *val != nil {
		ChooseAction_Marshal(n, *val)
	}
}

func ChooseAction_Marshal(n jsn.Marshaler, val *ChooseAction) {
	n.MapValues("if", ChooseAction_Type)
	n.MapKey("", ChooseAction_Field_If)
	/* */ rt.BoolEval_Marshal(n, &val.If)
	n.MapKey("do", ChooseAction_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.MapKey("else", ChooseAction_Field_Else)
	/* */ Brancher_Optional_Marshal(n, &val.Else)
	n.EndValues()
	return
}

// ChooseMore
type ChooseMore struct {
	If   rt.BoolEval `if:"label=_"`
	Do   Activity    `if:"label=do"`
	Else Brancher    `if:"label=else,optional"`
}

func (*ChooseMore) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseMore_Type,
		Uses: composer.Type_Flow,
		Lede: "else_if",
	}
}

const ChooseMore_Type = "choose_more"

const ChooseMore_Field_If = "$IF"
const ChooseMore_Field_Do = "$DO"
const ChooseMore_Field_Else = "$ELSE"

func (op *ChooseMore) Marshal(n jsn.Marshaler) {
	ChooseMore_Marshal(n, op)
}

func ChooseMore_Repeats_Marshal(n jsn.Marshaler, vals *[]ChooseMore) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			ChooseMore_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func ChooseMore_Optional_Marshal(n jsn.Marshaler, val **ChooseMore) {
	if *val != nil {
		ChooseMore_Marshal(n, *val)
	}
}

func ChooseMore_Marshal(n jsn.Marshaler, val *ChooseMore) {
	n.MapValues("else_if", ChooseMore_Type)
	n.MapKey("", ChooseMore_Field_If)
	/* */ rt.BoolEval_Marshal(n, &val.If)
	n.MapKey("do", ChooseMore_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.MapKey("else", ChooseMore_Field_Else)
	/* */ Brancher_Optional_Marshal(n, &val.Else)
	n.EndValues()
	return
}

// ChooseMoreValue
type ChooseMoreValue struct {
	Assign string        `if:"label=_,type=text"`
	From   rt.Assignment `if:"label=from"`
	Filter rt.BoolEval   `if:"label=and"`
	Do     Activity      `if:"label=do"`
	Else   Brancher      `if:"label=else,optional"`
}

func (*ChooseMoreValue) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseMoreValue_Type,
		Uses: composer.Type_Flow,
		Lede: "else_if",
	}
}

const ChooseMoreValue_Type = "choose_more_value"

const ChooseMoreValue_Field_Assign = "$ASSIGN"
const ChooseMoreValue_Field_From = "$FROM"
const ChooseMoreValue_Field_Filter = "$FILTER"
const ChooseMoreValue_Field_Do = "$DO"
const ChooseMoreValue_Field_Else = "$ELSE"

func (op *ChooseMoreValue) Marshal(n jsn.Marshaler) {
	ChooseMoreValue_Marshal(n, op)
}

func ChooseMoreValue_Repeats_Marshal(n jsn.Marshaler, vals *[]ChooseMoreValue) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			ChooseMoreValue_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func ChooseMoreValue_Optional_Marshal(n jsn.Marshaler, val **ChooseMoreValue) {
	if *val != nil {
		ChooseMoreValue_Marshal(n, *val)
	}
}

func ChooseMoreValue_Marshal(n jsn.Marshaler, val *ChooseMoreValue) {
	n.MapValues("else_if", ChooseMoreValue_Type)
	n.MapKey("", ChooseMoreValue_Field_Assign)
	/* */ value.Text_Override_Marshal(n, &val.Assign)
	n.MapKey("from", ChooseMoreValue_Field_From)
	/* */ rt.Assignment_Marshal(n, &val.From)
	n.MapKey("and", ChooseMoreValue_Field_Filter)
	/* */ rt.BoolEval_Marshal(n, &val.Filter)
	n.MapKey("do", ChooseMoreValue_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.MapKey("else", ChooseMoreValue_Field_Else)
	/* */ Brancher_Optional_Marshal(n, &val.Else)
	n.EndValues()
	return
}

// ChooseNothingElse
type ChooseNothingElse struct {
	Do Activity `if:"label=_"`
}

func (*ChooseNothingElse) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseNothingElse_Type,
		Uses: composer.Type_Flow,
		Lede: "else_do",
	}
}

const ChooseNothingElse_Type = "choose_nothing_else"

const ChooseNothingElse_Field_Do = "$DO"

func (op *ChooseNothingElse) Marshal(n jsn.Marshaler) {
	ChooseNothingElse_Marshal(n, op)
}

func ChooseNothingElse_Repeats_Marshal(n jsn.Marshaler, vals *[]ChooseNothingElse) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			ChooseNothingElse_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func ChooseNothingElse_Optional_Marshal(n jsn.Marshaler, val **ChooseNothingElse) {
	if *val != nil {
		ChooseNothingElse_Marshal(n, *val)
	}
}

func ChooseNothingElse_Marshal(n jsn.Marshaler, val *ChooseNothingElse) {
	n.MapValues("else_do", ChooseNothingElse_Type)
	n.MapKey("", ChooseNothingElse_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.EndValues()
	return
}

// ChooseNum Pick one of two numbers based on a boolean test.
type ChooseNum struct {
	If    rt.BoolEval   `if:"label=if"`
	True  rt.NumberEval `if:"label=then"`
	False rt.NumberEval `if:"label=else"`
}

func (*ChooseNum) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseNum_Type,
		Uses: composer.Type_Flow,
		Lede: "num",
	}
}

const ChooseNum_Type = "choose_num"

const ChooseNum_Field_If = "$IF"
const ChooseNum_Field_True = "$TRUE"
const ChooseNum_Field_False = "$FALSE"

func (op *ChooseNum) Marshal(n jsn.Marshaler) {
	ChooseNum_Marshal(n, op)
}

func ChooseNum_Repeats_Marshal(n jsn.Marshaler, vals *[]ChooseNum) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			ChooseNum_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func ChooseNum_Optional_Marshal(n jsn.Marshaler, val **ChooseNum) {
	if *val != nil {
		ChooseNum_Marshal(n, *val)
	}
}

func ChooseNum_Marshal(n jsn.Marshaler, val *ChooseNum) {
	n.MapValues("num", ChooseNum_Type)
	n.MapKey("if", ChooseNum_Field_If)
	/* */ rt.BoolEval_Marshal(n, &val.If)
	n.MapKey("then", ChooseNum_Field_True)
	/* */ rt.NumberEval_Marshal(n, &val.True)
	n.MapKey("else", ChooseNum_Field_False)
	/* */ rt.NumberEval_Marshal(n, &val.False)
	n.EndValues()
	return
}

// ChooseText Pick one of two strings based on a boolean test.
type ChooseText struct {
	If    rt.BoolEval `if:"label=if"`
	True  rt.TextEval `if:"label=then"`
	False rt.TextEval `if:"label=else"`
}

func (*ChooseText) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseText_Type,
		Uses: composer.Type_Flow,
		Lede: "txt",
	}
}

const ChooseText_Type = "choose_text"

const ChooseText_Field_If = "$IF"
const ChooseText_Field_True = "$TRUE"
const ChooseText_Field_False = "$FALSE"

func (op *ChooseText) Marshal(n jsn.Marshaler) {
	ChooseText_Marshal(n, op)
}

func ChooseText_Repeats_Marshal(n jsn.Marshaler, vals *[]ChooseText) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			ChooseText_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func ChooseText_Optional_Marshal(n jsn.Marshaler, val **ChooseText) {
	if *val != nil {
		ChooseText_Marshal(n, *val)
	}
}

func ChooseText_Marshal(n jsn.Marshaler, val *ChooseText) {
	n.MapValues("txt", ChooseText_Type)
	n.MapKey("if", ChooseText_Field_If)
	/* */ rt.BoolEval_Marshal(n, &val.If)
	n.MapKey("then", ChooseText_Field_True)
	/* */ rt.TextEval_Marshal(n, &val.True)
	n.MapKey("else", ChooseText_Field_False)
	/* */ rt.TextEval_Marshal(n, &val.False)
	n.EndValues()
	return
}

// ChooseValue An if statement with local assignment.
type ChooseValue struct {
	Assign string        `if:"label=_,type=text"`
	From   rt.Assignment `if:"label=from"`
	Filter rt.BoolEval   `if:"label=and"`
	Do     Activity      `if:"label=do"`
	Else   Brancher      `if:"label=else,optional"`
}

func (*ChooseValue) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseValue_Type,
		Uses: composer.Type_Flow,
		Lede: "if",
	}
}

const ChooseValue_Type = "choose_value"

const ChooseValue_Field_Assign = "$ASSIGN"
const ChooseValue_Field_From = "$FROM"
const ChooseValue_Field_Filter = "$FILTER"
const ChooseValue_Field_Do = "$DO"
const ChooseValue_Field_Else = "$ELSE"

func (op *ChooseValue) Marshal(n jsn.Marshaler) {
	ChooseValue_Marshal(n, op)
}

func ChooseValue_Repeats_Marshal(n jsn.Marshaler, vals *[]ChooseValue) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			ChooseValue_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func ChooseValue_Optional_Marshal(n jsn.Marshaler, val **ChooseValue) {
	if *val != nil {
		ChooseValue_Marshal(n, *val)
	}
}

func ChooseValue_Marshal(n jsn.Marshaler, val *ChooseValue) {
	n.MapValues("if", ChooseValue_Type)
	n.MapKey("", ChooseValue_Field_Assign)
	/* */ value.Text_Override_Marshal(n, &val.Assign)
	n.MapKey("from", ChooseValue_Field_From)
	/* */ rt.Assignment_Marshal(n, &val.From)
	n.MapKey("and", ChooseValue_Field_Filter)
	/* */ rt.BoolEval_Marshal(n, &val.Filter)
	n.MapKey("do", ChooseValue_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.MapKey("else", ChooseValue_Field_Else)
	/* */ Brancher_Optional_Marshal(n, &val.Else)
	n.EndValues()
	return
}

// CommaText Separates words with commas, and &#x27;and&#x27;.
type CommaText struct {
	Do Activity `if:"label=_"`
}

func (*CommaText) Compose() composer.Spec {
	return composer.Spec{
		Name: CommaText_Type,
		Uses: composer.Type_Flow,
		Lede: "commas",
	}
}

const CommaText_Type = "comma_text"

const CommaText_Field_Do = "$DO"

func (op *CommaText) Marshal(n jsn.Marshaler) {
	CommaText_Marshal(n, op)
}

func CommaText_Repeats_Marshal(n jsn.Marshaler, vals *[]CommaText) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CommaText_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CommaText_Optional_Marshal(n jsn.Marshaler, val **CommaText) {
	if *val != nil {
		CommaText_Marshal(n, *val)
	}
}

func CommaText_Marshal(n jsn.Marshaler, val *CommaText) {
	n.MapValues("commas", CommaText_Type)
	n.MapKey("", CommaText_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.EndValues()
	return
}

const Comparator_Type = "comparator"

var Comparator_Optional_Marshal = Comparator_Marshal

func Comparator_Marshal(n jsn.Marshaler, ptr *Comparator) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

func Comparator_Repeats_Marshal(n jsn.Marshaler, vals *[]Comparator) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Comparator_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

// CompareNum True if eq,ne,gt,lt,ge,le two numbers.
type CompareNum struct {
	A  rt.NumberEval `if:"label=_"`
	Is Comparator    `if:"label=is"`
	B  rt.NumberEval `if:"label=num"`
}

func (*CompareNum) Compose() composer.Spec {
	return composer.Spec{
		Name: CompareNum_Type,
		Uses: composer.Type_Flow,
		Lede: "cmp",
	}
}

const CompareNum_Type = "compare_num"

const CompareNum_Field_A = "$A"
const CompareNum_Field_Is = "$IS"
const CompareNum_Field_B = "$B"

func (op *CompareNum) Marshal(n jsn.Marshaler) {
	CompareNum_Marshal(n, op)
}

func CompareNum_Repeats_Marshal(n jsn.Marshaler, vals *[]CompareNum) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CompareNum_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CompareNum_Optional_Marshal(n jsn.Marshaler, val **CompareNum) {
	if *val != nil {
		CompareNum_Marshal(n, *val)
	}
}

func CompareNum_Marshal(n jsn.Marshaler, val *CompareNum) {
	n.MapValues("cmp", CompareNum_Type)
	n.MapKey("", CompareNum_Field_A)
	/* */ rt.NumberEval_Marshal(n, &val.A)
	n.MapKey("is", CompareNum_Field_Is)
	/* */ Comparator_Marshal(n, &val.Is)
	n.MapKey("num", CompareNum_Field_B)
	/* */ rt.NumberEval_Marshal(n, &val.B)
	n.EndValues()
	return
}

// CompareText True if eq,ne,gt,lt,ge,le two strings ( lexical. )
type CompareText struct {
	A  rt.TextEval `if:"label=_"`
	Is Comparator  `if:"label=is"`
	B  rt.TextEval `if:"label=txt"`
}

func (*CompareText) Compose() composer.Spec {
	return composer.Spec{
		Name: CompareText_Type,
		Uses: composer.Type_Flow,
		Lede: "cmp",
	}
}

const CompareText_Type = "compare_text"

const CompareText_Field_A = "$A"
const CompareText_Field_Is = "$IS"
const CompareText_Field_B = "$B"

func (op *CompareText) Marshal(n jsn.Marshaler) {
	CompareText_Marshal(n, op)
}

func CompareText_Repeats_Marshal(n jsn.Marshaler, vals *[]CompareText) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			CompareText_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func CompareText_Optional_Marshal(n jsn.Marshaler, val **CompareText) {
	if *val != nil {
		CompareText_Marshal(n, *val)
	}
}

func CompareText_Marshal(n jsn.Marshaler, val *CompareText) {
	n.MapValues("cmp", CompareText_Type)
	n.MapKey("", CompareText_Field_A)
	/* */ rt.TextEval_Marshal(n, &val.A)
	n.MapKey("is", CompareText_Field_Is)
	/* */ Comparator_Marshal(n, &val.Is)
	n.MapKey("txt", CompareText_Field_B)
	/* */ rt.TextEval_Marshal(n, &val.B)
	n.EndValues()
	return
}

// DiffOf Subtract two numbers.
type DiffOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by,optional"`
}

func (*DiffOf) Compose() composer.Spec {
	return composer.Spec{
		Name: DiffOf_Type,
		Uses: composer.Type_Flow,
		Lede: "dec",
	}
}

const DiffOf_Type = "diff_of"

const DiffOf_Field_A = "$A"
const DiffOf_Field_B = "$B"

func (op *DiffOf) Marshal(n jsn.Marshaler) {
	DiffOf_Marshal(n, op)
}

func DiffOf_Repeats_Marshal(n jsn.Marshaler, vals *[]DiffOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			DiffOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func DiffOf_Optional_Marshal(n jsn.Marshaler, val **DiffOf) {
	if *val != nil {
		DiffOf_Marshal(n, *val)
	}
}

func DiffOf_Marshal(n jsn.Marshaler, val *DiffOf) {
	n.MapValues("dec", DiffOf_Type)
	n.MapKey("", DiffOf_Field_A)
	/* */ rt.NumberEval_Marshal(n, &val.A)
	n.MapKey("by", DiffOf_Field_B)
	/* */ rt.NumberEval_Optional_Marshal(n, &val.B)
	n.EndValues()
	return
}

// During Decide whether a pattern is running.
type During struct {
	Pattern value.PatternName `if:"label=_"`
}

func (*During) Compose() composer.Spec {
	return composer.Spec{
		Name: During_Type,
		Uses: composer.Type_Flow,
	}
}

const During_Type = "during"

const During_Field_Pattern = "$PATTERN"

func (op *During) Marshal(n jsn.Marshaler) {
	During_Marshal(n, op)
}

func During_Repeats_Marshal(n jsn.Marshaler, vals *[]During) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			During_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func During_Optional_Marshal(n jsn.Marshaler, val **During) {
	if *val != nil {
		During_Marshal(n, *val)
	}
}

func During_Marshal(n jsn.Marshaler, val *During) {
	n.MapValues(During_Type, During_Type)
	n.MapKey("", During_Field_Pattern)
	/* */ value.PatternName_Marshal(n, &val.Pattern)
	n.EndValues()
	return
}

// Equal Two values exactly match.
type Equal struct {
}

func (*Equal) Compose() composer.Spec {
	return composer.Spec{
		Name: Equal_Type,
		Uses: composer.Type_Flow,
		Lede: "equals",
	}
}

const Equal_Type = "equal"

func (op *Equal) Marshal(n jsn.Marshaler) {
	Equal_Marshal(n, op)
}

func Equal_Repeats_Marshal(n jsn.Marshaler, vals *[]Equal) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Equal_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Equal_Optional_Marshal(n jsn.Marshaler, val **Equal) {
	if *val != nil {
		Equal_Marshal(n, *val)
	}
}

func Equal_Marshal(n jsn.Marshaler, val *Equal) {
	n.MapValues("equals", Equal_Type)
	n.EndValues()
	return
}

// FromBool Assigns the calculated boolean value.
type FromBool struct {
	Val rt.BoolEval `if:"label=_"`
}

func (*FromBool) Compose() composer.Spec {
	return composer.Spec{
		Name: FromBool_Type,
		Uses: composer.Type_Flow,
	}
}

const FromBool_Type = "from_bool"

const FromBool_Field_Val = "$VAL"

func (op *FromBool) Marshal(n jsn.Marshaler) {
	FromBool_Marshal(n, op)
}

func FromBool_Repeats_Marshal(n jsn.Marshaler, vals *[]FromBool) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromBool_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromBool_Optional_Marshal(n jsn.Marshaler, val **FromBool) {
	if *val != nil {
		FromBool_Marshal(n, *val)
	}
}

func FromBool_Marshal(n jsn.Marshaler, val *FromBool) {
	n.MapValues(FromBool_Type, FromBool_Type)
	n.MapKey("", FromBool_Field_Val)
	/* */ rt.BoolEval_Marshal(n, &val.Val)
	n.EndValues()
	return
}

// FromNum Assigns the calculated number.
type FromNum struct {
	Val rt.NumberEval `if:"label=_"`
}

func (*FromNum) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNum_Type,
		Uses: composer.Type_Flow,
	}
}

const FromNum_Type = "from_num"

const FromNum_Field_Val = "$VAL"

func (op *FromNum) Marshal(n jsn.Marshaler) {
	FromNum_Marshal(n, op)
}

func FromNum_Repeats_Marshal(n jsn.Marshaler, vals *[]FromNum) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromNum_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromNum_Optional_Marshal(n jsn.Marshaler, val **FromNum) {
	if *val != nil {
		FromNum_Marshal(n, *val)
	}
}

func FromNum_Marshal(n jsn.Marshaler, val *FromNum) {
	n.MapValues(FromNum_Type, FromNum_Type)
	n.MapKey("", FromNum_Field_Val)
	/* */ rt.NumberEval_Marshal(n, &val.Val)
	n.EndValues()
	return
}

// FromNumbers Assigns the calculated numbers.
type FromNumbers struct {
	Vals rt.NumListEval `if:"label=_"`
}

func (*FromNumbers) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNumbers_Type,
		Uses: composer.Type_Flow,
		Lede: "from_nums",
	}
}

const FromNumbers_Type = "from_numbers"

const FromNumbers_Field_Vals = "$VALS"

func (op *FromNumbers) Marshal(n jsn.Marshaler) {
	FromNumbers_Marshal(n, op)
}

func FromNumbers_Repeats_Marshal(n jsn.Marshaler, vals *[]FromNumbers) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromNumbers_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromNumbers_Optional_Marshal(n jsn.Marshaler, val **FromNumbers) {
	if *val != nil {
		FromNumbers_Marshal(n, *val)
	}
}

func FromNumbers_Marshal(n jsn.Marshaler, val *FromNumbers) {
	n.MapValues("from_nums", FromNumbers_Type)
	n.MapKey("", FromNumbers_Field_Vals)
	/* */ rt.NumListEval_Marshal(n, &val.Vals)
	n.EndValues()
	return
}

// FromObj Targets an object with a computed name.
type FromObj struct {
	Object rt.TextEval `if:"label=_"`
}

func (*FromObj) Compose() composer.Spec {
	return composer.Spec{
		Name: FromObj_Type,
		Uses: composer.Type_Flow,
	}
}

const FromObj_Type = "from_obj"

const FromObj_Field_Object = "$OBJECT"

func (op *FromObj) Marshal(n jsn.Marshaler) {
	FromObj_Marshal(n, op)
}

func FromObj_Repeats_Marshal(n jsn.Marshaler, vals *[]FromObj) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromObj_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromObj_Optional_Marshal(n jsn.Marshaler, val **FromObj) {
	if *val != nil {
		FromObj_Marshal(n, *val)
	}
}

func FromObj_Marshal(n jsn.Marshaler, val *FromObj) {
	n.MapValues(FromObj_Type, FromObj_Type)
	n.MapKey("", FromObj_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.EndValues()
	return
}

// FromRec Targets a record stored in a record.
type FromRec struct {
	Rec rt.RecordEval `if:"label=_"`
}

func (*FromRec) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRec_Type,
		Uses: composer.Type_Flow,
	}
}

const FromRec_Type = "from_rec"

const FromRec_Field_Rec = "$REC"

func (op *FromRec) Marshal(n jsn.Marshaler) {
	FromRec_Marshal(n, op)
}

func FromRec_Repeats_Marshal(n jsn.Marshaler, vals *[]FromRec) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromRec_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromRec_Optional_Marshal(n jsn.Marshaler, val **FromRec) {
	if *val != nil {
		FromRec_Marshal(n, *val)
	}
}

func FromRec_Marshal(n jsn.Marshaler, val *FromRec) {
	n.MapValues(FromRec_Type, FromRec_Type)
	n.MapKey("", FromRec_Field_Rec)
	/* */ rt.RecordEval_Marshal(n, &val.Rec)
	n.EndValues()
	return
}

// FromRecord Assigns the calculated record.
type FromRecord struct {
	Val rt.RecordEval `if:"label=_"`
}

func (*FromRecord) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecord_Type,
		Uses: composer.Type_Flow,
		Lede: "from_rec",
	}
}

const FromRecord_Type = "from_record"

const FromRecord_Field_Val = "$VAL"

func (op *FromRecord) Marshal(n jsn.Marshaler) {
	FromRecord_Marshal(n, op)
}

func FromRecord_Repeats_Marshal(n jsn.Marshaler, vals *[]FromRecord) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromRecord_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromRecord_Optional_Marshal(n jsn.Marshaler, val **FromRecord) {
	if *val != nil {
		FromRecord_Marshal(n, *val)
	}
}

func FromRecord_Marshal(n jsn.Marshaler, val *FromRecord) {
	n.MapValues("from_rec", FromRecord_Type)
	n.MapKey("", FromRecord_Field_Val)
	/* */ rt.RecordEval_Marshal(n, &val.Val)
	n.EndValues()
	return
}

// FromRecords Assigns the calculated records.
type FromRecords struct {
	Vals rt.RecordListEval `if:"label=_"`
}

func (*FromRecords) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecords_Type,
		Uses: composer.Type_Flow,
		Lede: "from_recs",
	}
}

const FromRecords_Type = "from_records"

const FromRecords_Field_Vals = "$VALS"

func (op *FromRecords) Marshal(n jsn.Marshaler) {
	FromRecords_Marshal(n, op)
}

func FromRecords_Repeats_Marshal(n jsn.Marshaler, vals *[]FromRecords) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromRecords_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromRecords_Optional_Marshal(n jsn.Marshaler, val **FromRecords) {
	if *val != nil {
		FromRecords_Marshal(n, *val)
	}
}

func FromRecords_Marshal(n jsn.Marshaler, val *FromRecords) {
	n.MapValues("from_recs", FromRecords_Type)
	n.MapKey("", FromRecords_Field_Vals)
	/* */ rt.RecordListEval_Marshal(n, &val.Vals)
	n.EndValues()
	return
}

const FromSourceFields_Type = "from_source_fields"

var FromSourceFields_Optional_Marshal = FromSourceFields_Marshal

func FromSourceFields_Marshal(n jsn.Marshaler, ptr *FromSourceFields) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

func FromSourceFields_Repeats_Marshal(n jsn.Marshaler, vals *[]FromSourceFields) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromSourceFields_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

// FromText Assigns the calculated piece of text.
type FromText struct {
	Val rt.TextEval `if:"label=_"`
}

func (*FromText) Compose() composer.Spec {
	return composer.Spec{
		Name: FromText_Type,
		Uses: composer.Type_Flow,
		Lede: "from_txt",
	}
}

const FromText_Type = "from_text"

const FromText_Field_Val = "$VAL"

func (op *FromText) Marshal(n jsn.Marshaler) {
	FromText_Marshal(n, op)
}

func FromText_Repeats_Marshal(n jsn.Marshaler, vals *[]FromText) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromText_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromText_Optional_Marshal(n jsn.Marshaler, val **FromText) {
	if *val != nil {
		FromText_Marshal(n, *val)
	}
}

func FromText_Marshal(n jsn.Marshaler, val *FromText) {
	n.MapValues("from_txt", FromText_Type)
	n.MapKey("", FromText_Field_Val)
	/* */ rt.TextEval_Marshal(n, &val.Val)
	n.EndValues()
	return
}

// FromTexts Assigns the calculated texts.
type FromTexts struct {
	Vals rt.TextListEval `if:"label=_"`
}

func (*FromTexts) Compose() composer.Spec {
	return composer.Spec{
		Name: FromTexts_Type,
		Uses: composer.Type_Flow,
		Lede: "from_txts",
	}
}

const FromTexts_Type = "from_texts"

const FromTexts_Field_Vals = "$VALS"

func (op *FromTexts) Marshal(n jsn.Marshaler) {
	FromTexts_Marshal(n, op)
}

func FromTexts_Repeats_Marshal(n jsn.Marshaler, vals *[]FromTexts) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromTexts_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromTexts_Optional_Marshal(n jsn.Marshaler, val **FromTexts) {
	if *val != nil {
		FromTexts_Marshal(n, *val)
	}
}

func FromTexts_Marshal(n jsn.Marshaler, val *FromTexts) {
	n.MapValues("from_txts", FromTexts_Type)
	n.MapKey("", FromTexts_Field_Vals)
	/* */ rt.TextListEval_Marshal(n, &val.Vals)
	n.EndValues()
	return
}

// FromVar Targets a record stored in a variable.
type FromVar struct {
	Var value.VariableName `if:"label=_"`
}

func (*FromVar) Compose() composer.Spec {
	return composer.Spec{
		Name: FromVar_Type,
		Uses: composer.Type_Flow,
	}
}

const FromVar_Type = "from_var"

const FromVar_Field_Var = "$VAR"

func (op *FromVar) Marshal(n jsn.Marshaler) {
	FromVar_Marshal(n, op)
}

func FromVar_Repeats_Marshal(n jsn.Marshaler, vals *[]FromVar) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			FromVar_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func FromVar_Optional_Marshal(n jsn.Marshaler, val **FromVar) {
	if *val != nil {
		FromVar_Marshal(n, *val)
	}
}

func FromVar_Marshal(n jsn.Marshaler, val *FromVar) {
	n.MapValues(FromVar_Type, FromVar_Type)
	n.MapKey("", FromVar_Field_Var)
	/* */ value.VariableName_Marshal(n, &val.Var)
	n.EndValues()
	return
}

// GetAtField Get a value from a record.
type GetAtField struct {
	Field string           `if:"label=_,type=text"`
	From  FromSourceFields `if:"label=from"`
}

func (*GetAtField) Compose() composer.Spec {
	return composer.Spec{
		Name: GetAtField_Type,
		Uses: composer.Type_Flow,
		Lede: "get",
	}
}

const GetAtField_Type = "get_at_field"

const GetAtField_Field_Field = "$FIELD"
const GetAtField_Field_From = "$FROM"

func (op *GetAtField) Marshal(n jsn.Marshaler) {
	GetAtField_Marshal(n, op)
}

func GetAtField_Repeats_Marshal(n jsn.Marshaler, vals *[]GetAtField) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			GetAtField_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func GetAtField_Optional_Marshal(n jsn.Marshaler, val **GetAtField) {
	if *val != nil {
		GetAtField_Marshal(n, *val)
	}
}

func GetAtField_Marshal(n jsn.Marshaler, val *GetAtField) {
	n.MapValues("get", GetAtField_Type)
	n.MapKey("", GetAtField_Field_Field)
	/* */ value.Text_Override_Marshal(n, &val.Field)
	n.MapKey("from", GetAtField_Field_From)
	/* */ FromSourceFields_Marshal(n, &val.From)
	n.EndValues()
	return
}

// GetVar Get Variable: Return the value of the named variable.
type GetVar struct {
	Name value.VariableName `if:"label=_"`
}

func (*GetVar) Compose() composer.Spec {
	return composer.Spec{
		Name: GetVar_Type,
		Uses: composer.Type_Flow,
		Lede: "var",
	}
}

const GetVar_Type = "get_var"

const GetVar_Field_Name = "$NAME"

func (op *GetVar) Marshal(n jsn.Marshaler) {
	GetVar_Marshal(n, op)
}

func GetVar_Repeats_Marshal(n jsn.Marshaler, vals *[]GetVar) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			GetVar_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func GetVar_Optional_Marshal(n jsn.Marshaler, val **GetVar) {
	if *val != nil {
		GetVar_Marshal(n, *val)
	}
}

func GetVar_Marshal(n jsn.Marshaler, val *GetVar) {
	n.MapValues("var", GetVar_Type)
	n.MapKey("", GetVar_Field_Name)
	/* */ value.VariableName_Marshal(n, &val.Name)
	n.EndValues()
	return
}

// GreaterThan The first value is larger than the second value.
type GreaterThan struct {
}

func (*GreaterThan) Compose() composer.Spec {
	return composer.Spec{
		Name: GreaterThan_Type,
		Uses: composer.Type_Flow,
	}
}

const GreaterThan_Type = "greater_than"

func (op *GreaterThan) Marshal(n jsn.Marshaler) {
	GreaterThan_Marshal(n, op)
}

func GreaterThan_Repeats_Marshal(n jsn.Marshaler, vals *[]GreaterThan) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			GreaterThan_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func GreaterThan_Optional_Marshal(n jsn.Marshaler, val **GreaterThan) {
	if *val != nil {
		GreaterThan_Marshal(n, *val)
	}
}

func GreaterThan_Marshal(n jsn.Marshaler, val *GreaterThan) {
	n.MapValues(GreaterThan_Type, GreaterThan_Type)
	n.EndValues()
	return
}

// HasDominion
type HasDominion struct {
	Name string `if:"label=_,type=text"`
}

func (*HasDominion) Compose() composer.Spec {
	return composer.Spec{
		Name: HasDominion_Type,
		Uses: composer.Type_Flow,
	}
}

const HasDominion_Type = "has_dominion"

const HasDominion_Field_Name = "$NAME"

func (op *HasDominion) Marshal(n jsn.Marshaler) {
	HasDominion_Marshal(n, op)
}

func HasDominion_Repeats_Marshal(n jsn.Marshaler, vals *[]HasDominion) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			HasDominion_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func HasDominion_Optional_Marshal(n jsn.Marshaler, val **HasDominion) {
	if *val != nil {
		HasDominion_Marshal(n, *val)
	}
}

func HasDominion_Marshal(n jsn.Marshaler, val *HasDominion) {
	n.MapValues(HasDominion_Type, HasDominion_Type)
	n.MapKey("", HasDominion_Field_Name)
	/* */ value.Text_Override_Marshal(n, &val.Name)
	n.EndValues()
	return
}

// HasTrait Return true if the object is currently in the requested state.
type HasTrait struct {
	Object rt.TextEval `if:"label=obj"`
	Trait  rt.TextEval `if:"label=trait"`
}

func (*HasTrait) Compose() composer.Spec {
	return composer.Spec{
		Name: HasTrait_Type,
		Uses: composer.Type_Flow,
		Lede: "get",
	}
}

const HasTrait_Type = "has_trait"

const HasTrait_Field_Object = "$OBJECT"
const HasTrait_Field_Trait = "$TRAIT"

func (op *HasTrait) Marshal(n jsn.Marshaler) {
	HasTrait_Marshal(n, op)
}

func HasTrait_Repeats_Marshal(n jsn.Marshaler, vals *[]HasTrait) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			HasTrait_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func HasTrait_Optional_Marshal(n jsn.Marshaler, val **HasTrait) {
	if *val != nil {
		HasTrait_Marshal(n, *val)
	}
}

func HasTrait_Marshal(n jsn.Marshaler, val *HasTrait) {
	n.MapValues("get", HasTrait_Type)
	n.MapKey("obj", HasTrait_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.MapKey("trait", HasTrait_Field_Trait)
	/* */ rt.TextEval_Marshal(n, &val.Trait)
	n.EndValues()
	return
}

// IdOf A unique object identifier.
type IdOf struct {
	Object rt.TextEval `if:"label=_"`
}

func (*IdOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IdOf_Type,
		Uses: composer.Type_Flow,
	}
}

const IdOf_Type = "id_of"

const IdOf_Field_Object = "$OBJECT"

func (op *IdOf) Marshal(n jsn.Marshaler) {
	IdOf_Marshal(n, op)
}

func IdOf_Repeats_Marshal(n jsn.Marshaler, vals *[]IdOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			IdOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func IdOf_Optional_Marshal(n jsn.Marshaler, val **IdOf) {
	if *val != nil {
		IdOf_Marshal(n, *val)
	}
}

func IdOf_Marshal(n jsn.Marshaler, val *IdOf) {
	n.MapValues(IdOf_Type, IdOf_Type)
	n.MapKey("", IdOf_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.EndValues()
	return
}

// Includes True if text contains text.
type Includes struct {
	Text rt.TextEval `if:"label=_"`
	Part rt.TextEval `if:"label=part"`
}

func (*Includes) Compose() composer.Spec {
	return composer.Spec{
		Name: Includes_Type,
		Uses: composer.Type_Flow,
		Lede: "contains",
	}
}

const Includes_Type = "includes"

const Includes_Field_Text = "$TEXT"
const Includes_Field_Part = "$PART"

func (op *Includes) Marshal(n jsn.Marshaler) {
	Includes_Marshal(n, op)
}

func Includes_Repeats_Marshal(n jsn.Marshaler, vals *[]Includes) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Includes_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Includes_Optional_Marshal(n jsn.Marshaler, val **Includes) {
	if *val != nil {
		Includes_Marshal(n, *val)
	}
}

func Includes_Marshal(n jsn.Marshaler, val *Includes) {
	n.MapValues("contains", Includes_Type)
	n.MapKey("", Includes_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.MapKey("part", Includes_Field_Part)
	/* */ rt.TextEval_Marshal(n, &val.Part)
	n.EndValues()
	return
}

// IntoObj Targets an object with a computed name.
type IntoObj struct {
	Object rt.TextEval `if:"label=_"`
}

func (*IntoObj) Compose() composer.Spec {
	return composer.Spec{
		Name: IntoObj_Type,
		Uses: composer.Type_Flow,
		Lede: "obj",
	}
}

const IntoObj_Type = "into_obj"

const IntoObj_Field_Object = "$OBJECT"

func (op *IntoObj) Marshal(n jsn.Marshaler) {
	IntoObj_Marshal(n, op)
}

func IntoObj_Repeats_Marshal(n jsn.Marshaler, vals *[]IntoObj) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			IntoObj_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func IntoObj_Optional_Marshal(n jsn.Marshaler, val **IntoObj) {
	if *val != nil {
		IntoObj_Marshal(n, *val)
	}
}

func IntoObj_Marshal(n jsn.Marshaler, val *IntoObj) {
	n.MapValues("obj", IntoObj_Type)
	n.MapKey("", IntoObj_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.EndValues()
	return
}

const IntoTargetFields_Type = "into_target_fields"

var IntoTargetFields_Optional_Marshal = IntoTargetFields_Marshal

func IntoTargetFields_Marshal(n jsn.Marshaler, ptr *IntoTargetFields) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

func IntoTargetFields_Repeats_Marshal(n jsn.Marshaler, vals *[]IntoTargetFields) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			IntoTargetFields_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

// IntoVar Targets an object or record stored in a variable
type IntoVar struct {
	Var value.VariableName `if:"label=_"`
}

func (*IntoVar) Compose() composer.Spec {
	return composer.Spec{
		Name: IntoVar_Type,
		Uses: composer.Type_Flow,
		Lede: "var",
	}
}

const IntoVar_Type = "into_var"

const IntoVar_Field_Var = "$VAR"

func (op *IntoVar) Marshal(n jsn.Marshaler) {
	IntoVar_Marshal(n, op)
}

func IntoVar_Repeats_Marshal(n jsn.Marshaler, vals *[]IntoVar) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			IntoVar_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func IntoVar_Optional_Marshal(n jsn.Marshaler, val **IntoVar) {
	if *val != nil {
		IntoVar_Marshal(n, *val)
	}
}

func IntoVar_Marshal(n jsn.Marshaler, val *IntoVar) {
	n.MapValues("var", IntoVar_Type)
	n.MapKey("", IntoVar_Field_Var)
	/* */ value.VariableName_Marshal(n, &val.Var)
	n.EndValues()
	return
}

// IsEmpty True if the text is empty.
type IsEmpty struct {
	Text rt.TextEval `if:"label=empty"`
}

func (*IsEmpty) Compose() composer.Spec {
	return composer.Spec{
		Name: IsEmpty_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const IsEmpty_Type = "is_empty"

const IsEmpty_Field_Text = "$TEXT"

func (op *IsEmpty) Marshal(n jsn.Marshaler) {
	IsEmpty_Marshal(n, op)
}

func IsEmpty_Repeats_Marshal(n jsn.Marshaler, vals *[]IsEmpty) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			IsEmpty_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func IsEmpty_Optional_Marshal(n jsn.Marshaler, val **IsEmpty) {
	if *val != nil {
		IsEmpty_Marshal(n, *val)
	}
}

func IsEmpty_Marshal(n jsn.Marshaler, val *IsEmpty) {
	n.MapValues("is", IsEmpty_Type)
	n.MapKey("empty", IsEmpty_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// IsExactKindOf True if the object is exactly the named kind.
type IsExactKindOf struct {
	Object rt.TextEval `if:"label=_"`
	Kind   string      `if:"label=is_exactly,type=text"`
}

func (*IsExactKindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IsExactKindOf_Type,
		Uses: composer.Type_Flow,
		Lede: "kind_of",
	}
}

const IsExactKindOf_Type = "is_exact_kind_of"

const IsExactKindOf_Field_Object = "$OBJECT"
const IsExactKindOf_Field_Kind = "$KIND"

func (op *IsExactKindOf) Marshal(n jsn.Marshaler) {
	IsExactKindOf_Marshal(n, op)
}

func IsExactKindOf_Repeats_Marshal(n jsn.Marshaler, vals *[]IsExactKindOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			IsExactKindOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func IsExactKindOf_Optional_Marshal(n jsn.Marshaler, val **IsExactKindOf) {
	if *val != nil {
		IsExactKindOf_Marshal(n, *val)
	}
}

func IsExactKindOf_Marshal(n jsn.Marshaler, val *IsExactKindOf) {
	n.MapValues("kind_of", IsExactKindOf_Type)
	n.MapKey("", IsExactKindOf_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.MapKey("is_exactly", IsExactKindOf_Field_Kind)
	/* */ value.Text_Override_Marshal(n, &val.Kind)
	n.EndValues()
	return
}

// IsKindOf True if the object is compatible with the named kind.
type IsKindOf struct {
	Object rt.TextEval `if:"label=_"`
	Kind   string      `if:"label=is,type=text"`
}

func (*IsKindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IsKindOf_Type,
		Uses: composer.Type_Flow,
		Lede: "kind_of",
	}
}

const IsKindOf_Type = "is_kind_of"

const IsKindOf_Field_Object = "$OBJECT"
const IsKindOf_Field_Kind = "$KIND"

func (op *IsKindOf) Marshal(n jsn.Marshaler) {
	IsKindOf_Marshal(n, op)
}

func IsKindOf_Repeats_Marshal(n jsn.Marshaler, vals *[]IsKindOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			IsKindOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func IsKindOf_Optional_Marshal(n jsn.Marshaler, val **IsKindOf) {
	if *val != nil {
		IsKindOf_Marshal(n, *val)
	}
}

func IsKindOf_Marshal(n jsn.Marshaler, val *IsKindOf) {
	n.MapValues("kind_of", IsKindOf_Type)
	n.MapKey("", IsKindOf_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.MapKey("is", IsKindOf_Field_Kind)
	/* */ value.Text_Override_Marshal(n, &val.Kind)
	n.EndValues()
	return
}

// Join Returns multiple pieces of text as a single new piece of text.
type Join struct {
	Sep   rt.TextEval   `if:"label=_"`
	Parts []rt.TextEval `if:"label=parts"`
}

func (*Join) Compose() composer.Spec {
	return composer.Spec{
		Name: Join_Type,
		Uses: composer.Type_Flow,
	}
}

const Join_Type = "join"

const Join_Field_Sep = "$SEP"
const Join_Field_Parts = "$PARTS"

func (op *Join) Marshal(n jsn.Marshaler) {
	Join_Marshal(n, op)
}

func Join_Repeats_Marshal(n jsn.Marshaler, vals *[]Join) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Join_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Join_Optional_Marshal(n jsn.Marshaler, val **Join) {
	if *val != nil {
		Join_Marshal(n, *val)
	}
}

func Join_Marshal(n jsn.Marshaler, val *Join) {
	n.MapValues(Join_Type, Join_Type)
	n.MapKey("", Join_Field_Sep)
	/* */ rt.TextEval_Marshal(n, &val.Sep)
	n.MapKey("parts", Join_Field_Parts)
	/* */ rt.TextEval_Repeats_Marshal(n, &val.Parts)
	n.EndValues()
	return
}

// KindOf Friendly name of the object&#x27;s kind.
type KindOf struct {
	Object rt.TextEval `if:"label=_"`
}

func (*KindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: KindOf_Type,
		Uses: composer.Type_Flow,
	}
}

const KindOf_Type = "kind_of"

const KindOf_Field_Object = "$OBJECT"

func (op *KindOf) Marshal(n jsn.Marshaler) {
	KindOf_Marshal(n, op)
}

func KindOf_Repeats_Marshal(n jsn.Marshaler, vals *[]KindOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			KindOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func KindOf_Optional_Marshal(n jsn.Marshaler, val **KindOf) {
	if *val != nil {
		KindOf_Marshal(n, *val)
	}
}

func KindOf_Marshal(n jsn.Marshaler, val *KindOf) {
	n.MapValues(KindOf_Type, KindOf_Type)
	n.MapKey("", KindOf_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.EndValues()
	return
}

// KindsOf A list of compatible kinds.
type KindsOf struct {
	Kind string `if:"label=_,type=text"`
}

func (*KindsOf) Compose() composer.Spec {
	return composer.Spec{
		Name: KindsOf_Type,
		Uses: composer.Type_Flow,
	}
}

const KindsOf_Type = "kinds_of"

const KindsOf_Field_Kind = "$KIND"

func (op *KindsOf) Marshal(n jsn.Marshaler) {
	KindsOf_Marshal(n, op)
}

func KindsOf_Repeats_Marshal(n jsn.Marshaler, vals *[]KindsOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			KindsOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func KindsOf_Optional_Marshal(n jsn.Marshaler, val **KindsOf) {
	if *val != nil {
		KindsOf_Marshal(n, *val)
	}
}

func KindsOf_Marshal(n jsn.Marshaler, val *KindsOf) {
	n.MapValues(KindsOf_Type, KindsOf_Type)
	n.MapKey("", KindsOf_Field_Kind)
	/* */ value.Text_Override_Marshal(n, &val.Kind)
	n.EndValues()
	return
}

// LessThan The first value is less than the second value.
type LessThan struct {
}

func (*LessThan) Compose() composer.Spec {
	return composer.Spec{
		Name: LessThan_Type,
		Uses: composer.Type_Flow,
	}
}

const LessThan_Type = "less_than"

func (op *LessThan) Marshal(n jsn.Marshaler) {
	LessThan_Marshal(n, op)
}

func LessThan_Repeats_Marshal(n jsn.Marshaler, vals *[]LessThan) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			LessThan_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func LessThan_Optional_Marshal(n jsn.Marshaler, val **LessThan) {
	if *val != nil {
		LessThan_Marshal(n, *val)
	}
}

func LessThan_Marshal(n jsn.Marshaler, val *LessThan) {
	n.MapValues(LessThan_Type, LessThan_Type)
	n.EndValues()
	return
}

// MakeLowercase Returns new text, with every letter turned into lowercase. For example, &#x27;shout&#x27; from &#x27;SHOUT&#x27;.
type MakeLowercase struct {
	Text rt.TextEval `if:"label=_"`
}

func (*MakeLowercase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeLowercase_Type,
		Uses: composer.Type_Flow,
		Lede: "lower",
	}
}

const MakeLowercase_Type = "make_lowercase"

const MakeLowercase_Field_Text = "$TEXT"

func (op *MakeLowercase) Marshal(n jsn.Marshaler) {
	MakeLowercase_Marshal(n, op)
}

func MakeLowercase_Repeats_Marshal(n jsn.Marshaler, vals *[]MakeLowercase) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			MakeLowercase_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func MakeLowercase_Optional_Marshal(n jsn.Marshaler, val **MakeLowercase) {
	if *val != nil {
		MakeLowercase_Marshal(n, *val)
	}
}

func MakeLowercase_Marshal(n jsn.Marshaler, val *MakeLowercase) {
	n.MapValues("lower", MakeLowercase_Type)
	n.MapKey("", MakeLowercase_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// MakeReversed Returns new text flipped back to front. For example, &#x27;elppA&#x27; from &#x27;Apple&#x27;, or &#x27;noon&#x27; from &#x27;noon&#x27;.
type MakeReversed struct {
	Text rt.TextEval `if:"label=_"`
}

func (*MakeReversed) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeReversed_Type,
		Uses: composer.Type_Flow,
		Lede: "reverse",
	}
}

const MakeReversed_Type = "make_reversed"

const MakeReversed_Field_Text = "$TEXT"

func (op *MakeReversed) Marshal(n jsn.Marshaler) {
	MakeReversed_Marshal(n, op)
}

func MakeReversed_Repeats_Marshal(n jsn.Marshaler, vals *[]MakeReversed) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			MakeReversed_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func MakeReversed_Optional_Marshal(n jsn.Marshaler, val **MakeReversed) {
	if *val != nil {
		MakeReversed_Marshal(n, *val)
	}
}

func MakeReversed_Marshal(n jsn.Marshaler, val *MakeReversed) {
	n.MapValues("reverse", MakeReversed_Type)
	n.MapKey("", MakeReversed_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// MakeSentenceCase Returns new text, start each sentence with a capital letter. For example, &#x27;Empire Apple.&#x27; from &#x27;Empire apple.&#x27;.
type MakeSentenceCase struct {
	Text rt.TextEval `if:"label=_"`
}

func (*MakeSentenceCase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeSentenceCase_Type,
		Uses: composer.Type_Flow,
		Lede: "sentence",
	}
}

const MakeSentenceCase_Type = "make_sentence_case"

const MakeSentenceCase_Field_Text = "$TEXT"

func (op *MakeSentenceCase) Marshal(n jsn.Marshaler) {
	MakeSentenceCase_Marshal(n, op)
}

func MakeSentenceCase_Repeats_Marshal(n jsn.Marshaler, vals *[]MakeSentenceCase) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			MakeSentenceCase_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func MakeSentenceCase_Optional_Marshal(n jsn.Marshaler, val **MakeSentenceCase) {
	if *val != nil {
		MakeSentenceCase_Marshal(n, *val)
	}
}

func MakeSentenceCase_Marshal(n jsn.Marshaler, val *MakeSentenceCase) {
	n.MapValues("sentence", MakeSentenceCase_Type)
	n.MapKey("", MakeSentenceCase_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// MakeTitleCase Returns new text, starting each word with a capital letter. For example, &#x27;Empire Apple&#x27; from &#x27;empire apple&#x27;.
type MakeTitleCase struct {
	Text rt.TextEval `if:"label=_"`
}

func (*MakeTitleCase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeTitleCase_Type,
		Uses: composer.Type_Flow,
		Lede: "title",
	}
}

const MakeTitleCase_Type = "make_title_case"

const MakeTitleCase_Field_Text = "$TEXT"

func (op *MakeTitleCase) Marshal(n jsn.Marshaler) {
	MakeTitleCase_Marshal(n, op)
}

func MakeTitleCase_Repeats_Marshal(n jsn.Marshaler, vals *[]MakeTitleCase) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			MakeTitleCase_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func MakeTitleCase_Optional_Marshal(n jsn.Marshaler, val **MakeTitleCase) {
	if *val != nil {
		MakeTitleCase_Marshal(n, *val)
	}
}

func MakeTitleCase_Marshal(n jsn.Marshaler, val *MakeTitleCase) {
	n.MapValues("title", MakeTitleCase_Type)
	n.MapKey("", MakeTitleCase_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// MakeUppercase Returns new text, with every letter turned into uppercase. For example, &#x27;APPLE&#x27; from &#x27;apple&#x27;.
type MakeUppercase struct {
	Text rt.TextEval `if:"label=_"`
}

func (*MakeUppercase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeUppercase_Type,
		Uses: composer.Type_Flow,
		Lede: "upper",
	}
}

const MakeUppercase_Type = "make_uppercase"

const MakeUppercase_Field_Text = "$TEXT"

func (op *MakeUppercase) Marshal(n jsn.Marshaler) {
	MakeUppercase_Marshal(n, op)
}

func MakeUppercase_Repeats_Marshal(n jsn.Marshaler, vals *[]MakeUppercase) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			MakeUppercase_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func MakeUppercase_Optional_Marshal(n jsn.Marshaler, val **MakeUppercase) {
	if *val != nil {
		MakeUppercase_Marshal(n, *val)
	}
}

func MakeUppercase_Marshal(n jsn.Marshaler, val *MakeUppercase) {
	n.MapValues("upper", MakeUppercase_Type)
	n.MapKey("", MakeUppercase_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// Matches Determine whether the specified text is similar to the specified regular expression.
type Matches struct {
	Text    rt.TextEval `if:"label=_"`
	Pattern string      `if:"label=to,type=text"`
	Cache   MatchCache  `if:"internal"`
}

func (*Matches) Compose() composer.Spec {
	return composer.Spec{
		Name: Matches_Type,
		Uses: composer.Type_Flow,
	}
}

const Matches_Type = "matches"

const Matches_Field_Text = "$TEXT"
const Matches_Field_Pattern = "$PATTERN"

func (op *Matches) Marshal(n jsn.Marshaler) {
	Matches_Marshal(n, op)
}

func Matches_Repeats_Marshal(n jsn.Marshaler, vals *[]Matches) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Matches_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Matches_Optional_Marshal(n jsn.Marshaler, val **Matches) {
	if *val != nil {
		Matches_Marshal(n, *val)
	}
}

func Matches_Marshal(n jsn.Marshaler, val *Matches) {
	n.MapValues(Matches_Type, Matches_Type)
	n.MapKey("", Matches_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.MapKey("to", Matches_Field_Pattern)
	/* */ value.Text_Override_Marshal(n, &val.Pattern)
	n.EndValues()
	return
}

// NameOf Full name of the object.
type NameOf struct {
	Object rt.TextEval `if:"label=_"`
}

func (*NameOf) Compose() composer.Spec {
	return composer.Spec{
		Name: NameOf_Type,
		Uses: composer.Type_Flow,
	}
}

const NameOf_Type = "name_of"

const NameOf_Field_Object = "$OBJECT"

func (op *NameOf) Marshal(n jsn.Marshaler) {
	NameOf_Marshal(n, op)
}

func NameOf_Repeats_Marshal(n jsn.Marshaler, vals *[]NameOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			NameOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func NameOf_Optional_Marshal(n jsn.Marshaler, val **NameOf) {
	if *val != nil {
		NameOf_Marshal(n, *val)
	}
}

func NameOf_Marshal(n jsn.Marshaler, val *NameOf) {
	n.MapValues(NameOf_Type, NameOf_Type)
	n.MapKey("", NameOf_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.EndValues()
	return
}

// Never Returns false.
type Never struct {
}

func (*Never) Compose() composer.Spec {
	return composer.Spec{
		Name: Never_Type,
		Uses: composer.Type_Flow,
		Lede: "always",
	}
}

const Never_Type = "never"

func (op *Never) Marshal(n jsn.Marshaler) {
	Never_Marshal(n, op)
}

func Never_Repeats_Marshal(n jsn.Marshaler, vals *[]Never) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Never_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Never_Optional_Marshal(n jsn.Marshaler, val **Never) {
	if *val != nil {
		Never_Marshal(n, *val)
	}
}

func Never_Marshal(n jsn.Marshaler, val *Never) {
	n.MapValues("always", Never_Type)
	n.EndValues()
	return
}

// Newline Start a new line.
type Newline struct {
}

func (*Newline) Compose() composer.Spec {
	return composer.Spec{
		Name: Newline_Type,
		Uses: composer.Type_Flow,
		Lede: "br",
	}
}

const Newline_Type = "newline"

func (op *Newline) Marshal(n jsn.Marshaler) {
	Newline_Marshal(n, op)
}

func Newline_Repeats_Marshal(n jsn.Marshaler, vals *[]Newline) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Newline_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Newline_Optional_Marshal(n jsn.Marshaler, val **Newline) {
	if *val != nil {
		Newline_Marshal(n, *val)
	}
}

func Newline_Marshal(n jsn.Marshaler, val *Newline) {
	n.MapValues("br", Newline_Type)
	n.EndValues()
	return
}

// Next In a repeating loop, try the next iteration of the loop.
type Next struct {
}

func (*Next) Compose() composer.Spec {
	return composer.Spec{
		Name: Next_Type,
		Uses: composer.Type_Flow,
	}
}

const Next_Type = "next"

func (op *Next) Marshal(n jsn.Marshaler) {
	Next_Marshal(n, op)
}

func Next_Repeats_Marshal(n jsn.Marshaler, vals *[]Next) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Next_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Next_Optional_Marshal(n jsn.Marshaler, val **Next) {
	if *val != nil {
		Next_Marshal(n, *val)
	}
}

func Next_Marshal(n jsn.Marshaler, val *Next) {
	n.MapValues(Next_Type, Next_Type)
	n.EndValues()
	return
}

// Not Returns the opposite value.
type Not struct {
	Test rt.BoolEval `if:"label=_"`
}

func (*Not) Compose() composer.Spec {
	return composer.Spec{
		Name: Not_Type,
		Uses: composer.Type_Flow,
	}
}

const Not_Type = "not"

const Not_Field_Test = "$TEST"

func (op *Not) Marshal(n jsn.Marshaler) {
	Not_Marshal(n, op)
}

func Not_Repeats_Marshal(n jsn.Marshaler, vals *[]Not) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Not_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Not_Optional_Marshal(n jsn.Marshaler, val **Not) {
	if *val != nil {
		Not_Marshal(n, *val)
	}
}

func Not_Marshal(n jsn.Marshaler, val *Not) {
	n.MapValues(Not_Type, Not_Type)
	n.MapKey("", Not_Field_Test)
	/* */ rt.BoolEval_Marshal(n, &val.Test)
	n.EndValues()
	return
}

// NumValue Specify a particular number.
type NumValue struct {
	Num float64 `if:"label=_,type=number"`
}

func (*NumValue) Compose() composer.Spec {
	return composer.Spec{
		Name: NumValue_Type,
		Uses: composer.Type_Flow,
		Lede: "num",
	}
}

const NumValue_Type = "num_value"

const NumValue_Field_Num = "$NUM"

func (op *NumValue) Marshal(n jsn.Marshaler) {
	NumValue_Marshal(n, op)
}

func NumValue_Repeats_Marshal(n jsn.Marshaler, vals *[]NumValue) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			NumValue_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func NumValue_Optional_Marshal(n jsn.Marshaler, val **NumValue) {
	if *val != nil {
		NumValue_Marshal(n, *val)
	}
}

func NumValue_Marshal(n jsn.Marshaler, val *NumValue) {
	n.MapValues("num", NumValue_Type)
	n.MapKey("", NumValue_Field_Num)
	/* */ value.Number_Override_Marshal(n, &val.Num)
	n.EndValues()
	return
}

// Numbers Number List: Specify a list of numbers.
type Numbers struct {
	Values []float64 `if:"label=_,type=number"`
}

func (*Numbers) Compose() composer.Spec {
	return composer.Spec{
		Name: Numbers_Type,
		Uses: composer.Type_Flow,
		Lede: "nums",
	}
}

const Numbers_Type = "numbers"

const Numbers_Field_Values = "$VALUES"

func (op *Numbers) Marshal(n jsn.Marshaler) {
	Numbers_Marshal(n, op)
}

func Numbers_Repeats_Marshal(n jsn.Marshaler, vals *[]Numbers) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Numbers_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Numbers_Optional_Marshal(n jsn.Marshaler, val **Numbers) {
	if *val != nil {
		Numbers_Marshal(n, *val)
	}
}

func Numbers_Marshal(n jsn.Marshaler, val *Numbers) {
	n.MapValues("nums", Numbers_Type)
	n.MapKey("", Numbers_Field_Values)
	/* */ value.Number_Override_Repeats_Marshal(n, &val.Values)
	n.EndValues()
	return
}

// ObjectExists Returns whether there is a object of the specified name.
type ObjectExists struct {
	Object rt.TextEval `if:"label=valid"`
}

func (*ObjectExists) Compose() composer.Spec {
	return composer.Spec{
		Name: ObjectExists_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const ObjectExists_Type = "object_exists"

const ObjectExists_Field_Object = "$OBJECT"

func (op *ObjectExists) Marshal(n jsn.Marshaler) {
	ObjectExists_Marshal(n, op)
}

func ObjectExists_Repeats_Marshal(n jsn.Marshaler, vals *[]ObjectExists) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			ObjectExists_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func ObjectExists_Optional_Marshal(n jsn.Marshaler, val **ObjectExists) {
	if *val != nil {
		ObjectExists_Marshal(n, *val)
	}
}

func ObjectExists_Marshal(n jsn.Marshaler, val *ObjectExists) {
	n.MapValues("is", ObjectExists_Type)
	n.MapKey("valid", ObjectExists_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.EndValues()
	return
}

// Pluralize Returns the plural form of a singular word. (ex. apples for apple. )
type Pluralize struct {
	Text rt.TextEval `if:"label=of"`
}

func (*Pluralize) Compose() composer.Spec {
	return composer.Spec{
		Name: Pluralize_Type,
		Uses: composer.Type_Flow,
		Lede: "plural",
	}
}

const Pluralize_Type = "pluralize"

const Pluralize_Field_Text = "$TEXT"

func (op *Pluralize) Marshal(n jsn.Marshaler) {
	Pluralize_Marshal(n, op)
}

func Pluralize_Repeats_Marshal(n jsn.Marshaler, vals *[]Pluralize) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Pluralize_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Pluralize_Optional_Marshal(n jsn.Marshaler, val **Pluralize) {
	if *val != nil {
		Pluralize_Marshal(n, *val)
	}
}

func Pluralize_Marshal(n jsn.Marshaler, val *Pluralize) {
	n.MapValues("plural", Pluralize_Type)
	n.MapKey("of", Pluralize_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// PrintNum Writes a number using numerals, eg. &#x27;1&#x27;.
type PrintNum struct {
	Num rt.NumberEval `if:"label=_"`
}

func (*PrintNum) Compose() composer.Spec {
	return composer.Spec{
		Name: PrintNum_Type,
		Uses: composer.Type_Flow,
		Lede: "numeral",
	}
}

const PrintNum_Type = "print_num"

const PrintNum_Field_Num = "$NUM"

func (op *PrintNum) Marshal(n jsn.Marshaler) {
	PrintNum_Marshal(n, op)
}

func PrintNum_Repeats_Marshal(n jsn.Marshaler, vals *[]PrintNum) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			PrintNum_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func PrintNum_Optional_Marshal(n jsn.Marshaler, val **PrintNum) {
	if *val != nil {
		PrintNum_Marshal(n, *val)
	}
}

func PrintNum_Marshal(n jsn.Marshaler, val *PrintNum) {
	n.MapValues("numeral", PrintNum_Type)
	n.MapKey("", PrintNum_Field_Num)
	/* */ rt.NumberEval_Marshal(n, &val.Num)
	n.EndValues()
	return
}

// PrintNumWord Writes a number in plain english: eg. &#x27;one&#x27;
type PrintNumWord struct {
	Num rt.NumberEval `if:"label=words"`
}

func (*PrintNumWord) Compose() composer.Spec {
	return composer.Spec{
		Name: PrintNumWord_Type,
		Uses: composer.Type_Flow,
		Lede: "numeral",
	}
}

const PrintNumWord_Type = "print_num_word"

const PrintNumWord_Field_Num = "$NUM"

func (op *PrintNumWord) Marshal(n jsn.Marshaler) {
	PrintNumWord_Marshal(n, op)
}

func PrintNumWord_Repeats_Marshal(n jsn.Marshaler, vals *[]PrintNumWord) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			PrintNumWord_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func PrintNumWord_Optional_Marshal(n jsn.Marshaler, val **PrintNumWord) {
	if *val != nil {
		PrintNumWord_Marshal(n, *val)
	}
}

func PrintNumWord_Marshal(n jsn.Marshaler, val *PrintNumWord) {
	n.MapValues("numeral", PrintNumWord_Type)
	n.MapKey("words", PrintNumWord_Field_Num)
	/* */ rt.NumberEval_Marshal(n, &val.Num)
	n.EndValues()
	return
}

// ProductOf Multiply two numbers.
type ProductOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by"`
}

func (*ProductOf) Compose() composer.Spec {
	return composer.Spec{
		Name: ProductOf_Type,
		Uses: composer.Type_Flow,
		Lede: "mul",
	}
}

const ProductOf_Type = "product_of"

const ProductOf_Field_A = "$A"
const ProductOf_Field_B = "$B"

func (op *ProductOf) Marshal(n jsn.Marshaler) {
	ProductOf_Marshal(n, op)
}

func ProductOf_Repeats_Marshal(n jsn.Marshaler, vals *[]ProductOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			ProductOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func ProductOf_Optional_Marshal(n jsn.Marshaler, val **ProductOf) {
	if *val != nil {
		ProductOf_Marshal(n, *val)
	}
}

func ProductOf_Marshal(n jsn.Marshaler, val *ProductOf) {
	n.MapValues("mul", ProductOf_Type)
	n.MapKey("", ProductOf_Field_A)
	/* */ rt.NumberEval_Marshal(n, &val.A)
	n.MapKey("by", ProductOf_Field_B)
	/* */ rt.NumberEval_Marshal(n, &val.B)
	n.EndValues()
	return
}

// PutAtField Put a value into the field of an record or object
type PutAtField struct {
	Into    IntoTargetFields `if:"label=_"`
	From    rt.Assignment    `if:"label=from"`
	AtField string           `if:"label=at,type=text"`
}

func (*PutAtField) Compose() composer.Spec {
	return composer.Spec{
		Name: PutAtField_Type,
		Uses: composer.Type_Flow,
		Lede: "put",
	}
}

const PutAtField_Type = "put_at_field"

const PutAtField_Field_Into = "$INTO"
const PutAtField_Field_From = "$FROM"
const PutAtField_Field_AtField = "$AT_FIELD"

func (op *PutAtField) Marshal(n jsn.Marshaler) {
	PutAtField_Marshal(n, op)
}

func PutAtField_Repeats_Marshal(n jsn.Marshaler, vals *[]PutAtField) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			PutAtField_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func PutAtField_Optional_Marshal(n jsn.Marshaler, val **PutAtField) {
	if *val != nil {
		PutAtField_Marshal(n, *val)
	}
}

func PutAtField_Marshal(n jsn.Marshaler, val *PutAtField) {
	n.MapValues("put", PutAtField_Type)
	n.MapKey("", PutAtField_Field_Into)
	/* */ IntoTargetFields_Marshal(n, &val.Into)
	n.MapKey("from", PutAtField_Field_From)
	/* */ rt.Assignment_Marshal(n, &val.From)
	n.MapKey("at", PutAtField_Field_AtField)
	/* */ value.Text_Override_Marshal(n, &val.AtField)
	n.EndValues()
	return
}

// QuotientOf Divide one number by another.
type QuotientOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by"`
}

func (*QuotientOf) Compose() composer.Spec {
	return composer.Spec{
		Name: QuotientOf_Type,
		Uses: composer.Type_Flow,
		Lede: "div",
	}
}

const QuotientOf_Type = "quotient_of"

const QuotientOf_Field_A = "$A"
const QuotientOf_Field_B = "$B"

func (op *QuotientOf) Marshal(n jsn.Marshaler) {
	QuotientOf_Marshal(n, op)
}

func QuotientOf_Repeats_Marshal(n jsn.Marshaler, vals *[]QuotientOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			QuotientOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func QuotientOf_Optional_Marshal(n jsn.Marshaler, val **QuotientOf) {
	if *val != nil {
		QuotientOf_Marshal(n, *val)
	}
}

func QuotientOf_Marshal(n jsn.Marshaler, val *QuotientOf) {
	n.MapValues("div", QuotientOf_Type)
	n.MapKey("", QuotientOf_Field_A)
	/* */ rt.NumberEval_Marshal(n, &val.A)
	n.MapKey("by", QuotientOf_Field_B)
	/* */ rt.NumberEval_Marshal(n, &val.B)
	n.EndValues()
	return
}

// RemainderOf Divide one number by another, and return the remainder.
type RemainderOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by"`
}

func (*RemainderOf) Compose() composer.Spec {
	return composer.Spec{
		Name: RemainderOf_Type,
		Uses: composer.Type_Flow,
		Lede: "mod",
	}
}

const RemainderOf_Type = "remainder_of"

const RemainderOf_Field_A = "$A"
const RemainderOf_Field_B = "$B"

func (op *RemainderOf) Marshal(n jsn.Marshaler) {
	RemainderOf_Marshal(n, op)
}

func RemainderOf_Repeats_Marshal(n jsn.Marshaler, vals *[]RemainderOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			RemainderOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func RemainderOf_Optional_Marshal(n jsn.Marshaler, val **RemainderOf) {
	if *val != nil {
		RemainderOf_Marshal(n, *val)
	}
}

func RemainderOf_Marshal(n jsn.Marshaler, val *RemainderOf) {
	n.MapValues("mod", RemainderOf_Type)
	n.MapKey("", RemainderOf_Field_A)
	/* */ rt.NumberEval_Marshal(n, &val.A)
	n.MapKey("by", RemainderOf_Field_B)
	/* */ rt.NumberEval_Marshal(n, &val.B)
	n.EndValues()
	return
}

// Response Generate text in a replaceable manner.
type Response struct {
	Name string      `if:"label=_,type=text"`
	Text rt.TextEval `if:"label=text,optional"`
}

func (*Response) Compose() composer.Spec {
	return composer.Spec{
		Name: Response_Type,
		Uses: composer.Type_Flow,
	}
}

const Response_Type = "response"

const Response_Field_Name = "$NAME"
const Response_Field_Text = "$TEXT"

func (op *Response) Marshal(n jsn.Marshaler) {
	Response_Marshal(n, op)
}

func Response_Repeats_Marshal(n jsn.Marshaler, vals *[]Response) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Response_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Response_Optional_Marshal(n jsn.Marshaler, val **Response) {
	if *val != nil {
		Response_Marshal(n, *val)
	}
}

func Response_Marshal(n jsn.Marshaler, val *Response) {
	n.MapValues(Response_Type, Response_Type)
	n.MapKey("", Response_Field_Name)
	/* */ value.Text_Override_Marshal(n, &val.Name)
	n.MapKey("text", Response_Field_Text)
	/* */ rt.TextEval_Optional_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// Row A single line as part of a group of lines.
type Row struct {
	Do Activity `if:"label=_"`
}

func (*Row) Compose() composer.Spec {
	return composer.Spec{
		Name: Row_Type,
		Uses: composer.Type_Flow,
	}
}

const Row_Type = "row"

const Row_Field_Do = "$DO"

func (op *Row) Marshal(n jsn.Marshaler) {
	Row_Marshal(n, op)
}

func Row_Repeats_Marshal(n jsn.Marshaler, vals *[]Row) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Row_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Row_Optional_Marshal(n jsn.Marshaler, val **Row) {
	if *val != nil {
		Row_Marshal(n, *val)
	}
}

func Row_Marshal(n jsn.Marshaler, val *Row) {
	n.MapValues(Row_Type, Row_Type)
	n.MapKey("", Row_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.EndValues()
	return
}

// Rows Group text into successive lines.
type Rows struct {
	Do Activity `if:"label=_"`
}

func (*Rows) Compose() composer.Spec {
	return composer.Spec{
		Name: Rows_Type,
		Uses: composer.Type_Flow,
	}
}

const Rows_Type = "rows"

const Rows_Field_Do = "$DO"

func (op *Rows) Marshal(n jsn.Marshaler) {
	Rows_Marshal(n, op)
}

func Rows_Repeats_Marshal(n jsn.Marshaler, vals *[]Rows) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Rows_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Rows_Optional_Marshal(n jsn.Marshaler, val **Rows) {
	if *val != nil {
		Rows_Marshal(n, *val)
	}
}

func Rows_Marshal(n jsn.Marshaler, val *Rows) {
	n.MapValues(Rows_Type, Rows_Type)
	n.MapKey("", Rows_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.EndValues()
	return
}

// SayText Print some bit of text to the player.
type SayText struct {
	Text rt.TextEval `if:"label=_"`
}

func (*SayText) Compose() composer.Spec {
	return composer.Spec{
		Name: SayText_Type,
		Uses: composer.Type_Flow,
		Lede: "say",
	}
}

const SayText_Type = "say_text"

const SayText_Field_Text = "$TEXT"

func (op *SayText) Marshal(n jsn.Marshaler) {
	SayText_Marshal(n, op)
}

func SayText_Repeats_Marshal(n jsn.Marshaler, vals *[]SayText) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			SayText_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func SayText_Optional_Marshal(n jsn.Marshaler, val **SayText) {
	if *val != nil {
		SayText_Marshal(n, *val)
	}
}

func SayText_Marshal(n jsn.Marshaler, val *SayText) {
	n.MapValues("say", SayText_Type)
	n.MapKey("", SayText_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// SetTrait Put an object into a particular state.
type SetTrait struct {
	Object rt.TextEval `if:"label=obj"`
	Trait  rt.TextEval `if:"label=trait"`
}

func (*SetTrait) Compose() composer.Spec {
	return composer.Spec{
		Name: SetTrait_Type,
		Uses: composer.Type_Flow,
		Lede: "put",
	}
}

const SetTrait_Type = "set_trait"

const SetTrait_Field_Object = "$OBJECT"
const SetTrait_Field_Trait = "$TRAIT"

func (op *SetTrait) Marshal(n jsn.Marshaler) {
	SetTrait_Marshal(n, op)
}

func SetTrait_Repeats_Marshal(n jsn.Marshaler, vals *[]SetTrait) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			SetTrait_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func SetTrait_Optional_Marshal(n jsn.Marshaler, val **SetTrait) {
	if *val != nil {
		SetTrait_Marshal(n, *val)
	}
}

func SetTrait_Marshal(n jsn.Marshaler, val *SetTrait) {
	n.MapValues("put", SetTrait_Type)
	n.MapKey("obj", SetTrait_Field_Object)
	/* */ rt.TextEval_Marshal(n, &val.Object)
	n.MapKey("trait", SetTrait_Field_Trait)
	/* */ rt.TextEval_Marshal(n, &val.Trait)
	n.EndValues()
	return
}

// Singularize Returns the singular form of a plural word. (ex. apple for apples )
type Singularize struct {
	Text rt.TextEval `if:"label=of"`
}

func (*Singularize) Compose() composer.Spec {
	return composer.Spec{
		Name: Singularize_Type,
		Uses: composer.Type_Flow,
		Lede: "singular",
	}
}

const Singularize_Type = "singularize"

const Singularize_Field_Text = "$TEXT"

func (op *Singularize) Marshal(n jsn.Marshaler) {
	Singularize_Marshal(n, op)
}

func Singularize_Repeats_Marshal(n jsn.Marshaler, vals *[]Singularize) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Singularize_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Singularize_Optional_Marshal(n jsn.Marshaler, val **Singularize) {
	if *val != nil {
		Singularize_Marshal(n, *val)
	}
}

func Singularize_Marshal(n jsn.Marshaler, val *Singularize) {
	n.MapValues("singular", Singularize_Type)
	n.MapKey("of", Singularize_Field_Text)
	/* */ rt.TextEval_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// SlashText Separates words with left-leaning slashes &#x27;/&#x27;.
type SlashText struct {
	Do Activity `if:"label=_"`
}

func (*SlashText) Compose() composer.Spec {
	return composer.Spec{
		Name: SlashText_Type,
		Uses: composer.Type_Flow,
		Lede: "slashes",
	}
}

const SlashText_Type = "slash_text"

const SlashText_Field_Do = "$DO"

func (op *SlashText) Marshal(n jsn.Marshaler) {
	SlashText_Marshal(n, op)
}

func SlashText_Repeats_Marshal(n jsn.Marshaler, vals *[]SlashText) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			SlashText_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func SlashText_Optional_Marshal(n jsn.Marshaler, val **SlashText) {
	if *val != nil {
		SlashText_Marshal(n, *val)
	}
}

func SlashText_Marshal(n jsn.Marshaler, val *SlashText) {
	n.MapValues("slashes", SlashText_Type)
	n.MapKey("", SlashText_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.EndValues()
	return
}

// Softline Start a new line ( if not already at a new line. )
type Softline struct {
}

func (*Softline) Compose() composer.Spec {
	return composer.Spec{
		Name: Softline_Type,
		Uses: composer.Type_Flow,
		Lede: "wbr",
	}
}

const Softline_Type = "softline"

func (op *Softline) Marshal(n jsn.Marshaler) {
	Softline_Marshal(n, op)
}

func Softline_Repeats_Marshal(n jsn.Marshaler, vals *[]Softline) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Softline_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Softline_Optional_Marshal(n jsn.Marshaler, val **Softline) {
	if *val != nil {
		Softline_Marshal(n, *val)
	}
}

func Softline_Marshal(n jsn.Marshaler, val *Softline) {
	n.MapValues("wbr", Softline_Type)
	n.EndValues()
	return
}

// SpanText Writes text with spaces between words.
type SpanText struct {
	Do Activity `if:"label=_"`
}

func (*SpanText) Compose() composer.Spec {
	return composer.Spec{
		Name: SpanText_Type,
		Uses: composer.Type_Flow,
		Lede: "spaces",
	}
}

const SpanText_Type = "span_text"

const SpanText_Field_Do = "$DO"

func (op *SpanText) Marshal(n jsn.Marshaler) {
	SpanText_Marshal(n, op)
}

func SpanText_Repeats_Marshal(n jsn.Marshaler, vals *[]SpanText) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			SpanText_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func SpanText_Optional_Marshal(n jsn.Marshaler, val **SpanText) {
	if *val != nil {
		SpanText_Marshal(n, *val)
	}
}

func SpanText_Marshal(n jsn.Marshaler, val *SpanText) {
	n.MapValues("spaces", SpanText_Type)
	n.MapKey("", SpanText_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.EndValues()
	return
}

// SumOf Add two numbers.
type SumOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by,optional"`
}

func (*SumOf) Compose() composer.Spec {
	return composer.Spec{
		Name: SumOf_Type,
		Uses: composer.Type_Flow,
		Lede: "inc",
	}
}

const SumOf_Type = "sum_of"

const SumOf_Field_A = "$A"
const SumOf_Field_B = "$B"

func (op *SumOf) Marshal(n jsn.Marshaler) {
	SumOf_Marshal(n, op)
}

func SumOf_Repeats_Marshal(n jsn.Marshaler, vals *[]SumOf) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			SumOf_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func SumOf_Optional_Marshal(n jsn.Marshaler, val **SumOf) {
	if *val != nil {
		SumOf_Marshal(n, *val)
	}
}

func SumOf_Marshal(n jsn.Marshaler, val *SumOf) {
	n.MapValues("inc", SumOf_Type)
	n.MapKey("", SumOf_Field_A)
	/* */ rt.NumberEval_Marshal(n, &val.A)
	n.MapKey("by", SumOf_Field_B)
	/* */ rt.NumberEval_Optional_Marshal(n, &val.B)
	n.EndValues()
	return
}

// TextValue Specify a small bit of text.
type TextValue struct {
	Text string `if:"label=_,type=text"`
}

func (*TextValue) Compose() composer.Spec {
	return composer.Spec{
		Name: TextValue_Type,
		Uses: composer.Type_Flow,
		Lede: "txt",
	}
}

const TextValue_Type = "text_value"

const TextValue_Field_Text = "$TEXT"

func (op *TextValue) Marshal(n jsn.Marshaler) {
	TextValue_Marshal(n, op)
}

func TextValue_Repeats_Marshal(n jsn.Marshaler, vals *[]TextValue) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			TextValue_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func TextValue_Optional_Marshal(n jsn.Marshaler, val **TextValue) {
	if *val != nil {
		TextValue_Marshal(n, *val)
	}
}

func TextValue_Marshal(n jsn.Marshaler, val *TextValue) {
	n.MapValues("txt", TextValue_Type)
	n.MapKey("", TextValue_Field_Text)
	/* */ value.Text_Override_Marshal(n, &val.Text)
	n.EndValues()
	return
}

// Texts Text List: Specifies a set of string values.
type Texts struct {
	Values []string `if:"label=_,type=text"`
}

func (*Texts) Compose() composer.Spec {
	return composer.Spec{
		Name: Texts_Type,
		Uses: composer.Type_Flow,
		Lede: "txts",
	}
}

const Texts_Type = "texts"

const Texts_Field_Values = "$VALUES"

func (op *Texts) Marshal(n jsn.Marshaler) {
	Texts_Marshal(n, op)
}

func Texts_Repeats_Marshal(n jsn.Marshaler, vals *[]Texts) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Texts_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Texts_Optional_Marshal(n jsn.Marshaler, val **Texts) {
	if *val != nil {
		Texts_Marshal(n, *val)
	}
}

func Texts_Marshal(n jsn.Marshaler, val *Texts) {
	n.MapValues("txts", Texts_Type)
	n.MapKey("", Texts_Field_Values)
	/* */ value.Text_Override_Repeats_Marshal(n, &val.Values)
	n.EndValues()
	return
}

const Trigger_Type = "trigger"

var Trigger_Optional_Marshal = Trigger_Marshal

func Trigger_Marshal(n jsn.Marshaler, ptr *Trigger) {
	if slat := *ptr; slat != nil {
		slat.(jsn.Marshalee).Marshal(n)
	}
	return
}

func Trigger_Repeats_Marshal(n jsn.Marshaler, vals *[]Trigger) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Trigger_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

// TriggerCycle
type TriggerCycle struct {
}

func (*TriggerCycle) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerCycle_Type,
		Uses: composer.Type_Flow,
		Lede: "every",
	}
}

const TriggerCycle_Type = "trigger_cycle"

func (op *TriggerCycle) Marshal(n jsn.Marshaler) {
	TriggerCycle_Marshal(n, op)
}

func TriggerCycle_Repeats_Marshal(n jsn.Marshaler, vals *[]TriggerCycle) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			TriggerCycle_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func TriggerCycle_Optional_Marshal(n jsn.Marshaler, val **TriggerCycle) {
	if *val != nil {
		TriggerCycle_Marshal(n, *val)
	}
}

func TriggerCycle_Marshal(n jsn.Marshaler, val *TriggerCycle) {
	n.MapValues("every", TriggerCycle_Type)
	n.EndValues()
	return
}

// TriggerOnce
type TriggerOnce struct {
}

func (*TriggerOnce) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerOnce_Type,
		Uses: composer.Type_Flow,
		Lede: "at",
	}
}

const TriggerOnce_Type = "trigger_once"

func (op *TriggerOnce) Marshal(n jsn.Marshaler) {
	TriggerOnce_Marshal(n, op)
}

func TriggerOnce_Repeats_Marshal(n jsn.Marshaler, vals *[]TriggerOnce) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			TriggerOnce_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func TriggerOnce_Optional_Marshal(n jsn.Marshaler, val **TriggerOnce) {
	if *val != nil {
		TriggerOnce_Marshal(n, *val)
	}
}

func TriggerOnce_Marshal(n jsn.Marshaler, val *TriggerOnce) {
	n.MapValues("at", TriggerOnce_Type)
	n.EndValues()
	return
}

// TriggerSwitch
type TriggerSwitch struct {
}

func (*TriggerSwitch) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerSwitch_Type,
		Uses: composer.Type_Flow,
		Lede: "after",
	}
}

const TriggerSwitch_Type = "trigger_switch"

func (op *TriggerSwitch) Marshal(n jsn.Marshaler) {
	TriggerSwitch_Marshal(n, op)
}

func TriggerSwitch_Repeats_Marshal(n jsn.Marshaler, vals *[]TriggerSwitch) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			TriggerSwitch_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func TriggerSwitch_Optional_Marshal(n jsn.Marshaler, val **TriggerSwitch) {
	if *val != nil {
		TriggerSwitch_Marshal(n, *val)
	}
}

func TriggerSwitch_Marshal(n jsn.Marshaler, val *TriggerSwitch) {
	n.MapValues("after", TriggerSwitch_Type)
	n.EndValues()
	return
}

// Unequal The first value doesn&#x27;t equal the second value.
type Unequal struct {
}

func (*Unequal) Compose() composer.Spec {
	return composer.Spec{
		Name: Unequal_Type,
		Uses: composer.Type_Flow,
		Lede: "other_than",
	}
}

const Unequal_Type = "unequal"

func (op *Unequal) Marshal(n jsn.Marshaler) {
	Unequal_Marshal(n, op)
}

func Unequal_Repeats_Marshal(n jsn.Marshaler, vals *[]Unequal) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			Unequal_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func Unequal_Optional_Marshal(n jsn.Marshaler, val **Unequal) {
	if *val != nil {
		Unequal_Marshal(n, *val)
	}
}

func Unequal_Marshal(n jsn.Marshaler, val *Unequal) {
	n.MapValues("other_than", Unequal_Type)
	n.EndValues()
	return
}

// While Keep running a series of actions while a condition is true.
type While struct {
	True rt.BoolEval `if:"label=_"`
	Do   Activity    `if:"label=do"`
}

func (*While) Compose() composer.Spec {
	return composer.Spec{
		Name: While_Type,
		Uses: composer.Type_Flow,
		Lede: "repeating",
	}
}

const While_Type = "while"

const While_Field_True = "$TRUE"
const While_Field_Do = "$DO"

func (op *While) Marshal(n jsn.Marshaler) {
	While_Marshal(n, op)
}

func While_Repeats_Marshal(n jsn.Marshaler, vals *[]While) {
	if cnt := len(*vals); cnt > 0 { // generated code collapses optional and empty.
		n.RepeatValues(cnt)
		for _, el := range *vals {
			While_Marshal(n, &el)
		}
		n.EndValues()
	}
	return
}

func While_Optional_Marshal(n jsn.Marshaler, val **While) {
	if *val != nil {
		While_Marshal(n, *val)
	}
}

func While_Marshal(n jsn.Marshaler, val *While) {
	n.MapValues("repeating", While_Type)
	n.MapKey("", While_Field_True)
	/* */ rt.BoolEval_Marshal(n, &val.True)
	n.MapKey("do", While_Field_Do)
	/* */ Activity_Marshal(n, &val.Do)
	n.EndValues()
	return
}

var Slots = []interface{}{
	(*Brancher)(nil),
	(*Comparator)(nil),
	(*FromSourceFields)(nil),
	(*IntoTargetFields)(nil),
	(*Trigger)(nil),
}

var Slats = []composer.Composer{
	(*Activity)(nil),
	(*AllTrue)(nil),
	(*Always)(nil),
	(*AnyTrue)(nil),
	(*Assign)(nil),
	(*AtLeast)(nil),
	(*AtMost)(nil),
	(*Blankline)(nil),
	(*BoolValue)(nil),
	(*BracketText)(nil),
	(*Break)(nil),
	(*BufferText)(nil),
	(*CallArg)(nil),
	(*CallArgs)(nil),
	(*CallCycle)(nil),
	(*CallMake)(nil),
	(*CallPattern)(nil),
	(*CallSend)(nil),
	(*CallShuffle)(nil),
	(*CallTerminal)(nil),
	(*CallTrigger)(nil),
	(*Capitalize)(nil),
	(*ChooseAction)(nil),
	(*ChooseMore)(nil),
	(*ChooseMoreValue)(nil),
	(*ChooseNothingElse)(nil),
	(*ChooseNum)(nil),
	(*ChooseText)(nil),
	(*ChooseValue)(nil),
	(*CommaText)(nil),
	(*CompareNum)(nil),
	(*CompareText)(nil),
	(*DiffOf)(nil),
	(*During)(nil),
	(*Equal)(nil),
	(*FromBool)(nil),
	(*FromNum)(nil),
	(*FromNumbers)(nil),
	(*FromObj)(nil),
	(*FromRec)(nil),
	(*FromRecord)(nil),
	(*FromRecords)(nil),
	(*FromText)(nil),
	(*FromTexts)(nil),
	(*FromVar)(nil),
	(*GetAtField)(nil),
	(*GetVar)(nil),
	(*GreaterThan)(nil),
	(*HasDominion)(nil),
	(*HasTrait)(nil),
	(*IdOf)(nil),
	(*Includes)(nil),
	(*IntoObj)(nil),
	(*IntoVar)(nil),
	(*IsEmpty)(nil),
	(*IsExactKindOf)(nil),
	(*IsKindOf)(nil),
	(*Join)(nil),
	(*KindOf)(nil),
	(*KindsOf)(nil),
	(*LessThan)(nil),
	(*MakeLowercase)(nil),
	(*MakeReversed)(nil),
	(*MakeSentenceCase)(nil),
	(*MakeTitleCase)(nil),
	(*MakeUppercase)(nil),
	(*Matches)(nil),
	(*NameOf)(nil),
	(*Never)(nil),
	(*Newline)(nil),
	(*Next)(nil),
	(*Not)(nil),
	(*NumValue)(nil),
	(*Numbers)(nil),
	(*ObjectExists)(nil),
	(*Pluralize)(nil),
	(*PrintNum)(nil),
	(*PrintNumWord)(nil),
	(*ProductOf)(nil),
	(*PutAtField)(nil),
	(*QuotientOf)(nil),
	(*RemainderOf)(nil),
	(*Response)(nil),
	(*Row)(nil),
	(*Rows)(nil),
	(*SayText)(nil),
	(*SetTrait)(nil),
	(*Singularize)(nil),
	(*SlashText)(nil),
	(*Softline)(nil),
	(*SpanText)(nil),
	(*SumOf)(nil),
	(*TextValue)(nil),
	(*Texts)(nil),
	(*TriggerCycle)(nil),
	(*TriggerOnce)(nil),
	(*TriggerSwitch)(nil),
	(*Unequal)(nil),
	(*While)(nil),
}
