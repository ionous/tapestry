// Code generated by "makeops"; edit at your own risk.
package core

import (
	"git.sr.ht/~ionous/iffy/dl/composer"
	"git.sr.ht/~ionous/iffy/dl/reader"
	"git.sr.ht/~ionous/iffy/dl/value"
	"git.sr.ht/~ionous/iffy/jsn"
	"git.sr.ht/~ionous/iffy/rt"
	"github.com/ionous/errutil"
)

// Activity
// User implements: Execute.
type Activity struct {
	Exe []rt.Execute `if:"label=_"`
}

func (*Activity) Compose() composer.Spec {
	return composer.Spec{
		Name: Activity_Type,
		Uses: composer.Type_Flow,
		Lede: "act",
	}
}

const Activity_Type = "activity"

const Activity_Field_Exe = "$EXE"

func (op *Activity) Marshal(m jsn.Marshaler) error {
	return Activity_Marshal(m, op)
}

type Activity_Slice []Activity

func (op *Activity_Slice) GetType() string { return Activity_Type }
func (op *Activity_Slice) GetSize() int    { return len(*op) }
func (op *Activity_Slice) SetSize(cnt int) { (*op) = make(Activity_Slice, cnt) }

func Activity_Repeats_Marshal(m jsn.Marshaler, vals *[]Activity) (err error) {
	if err = m.MarshalBlock((*Activity_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Activity_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Activity_Optional_Marshal(m jsn.Marshaler, pv **Activity) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Activity_Marshal(m, *pv)
	} else if !enc {
		var v Activity
		if err = Activity_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Activity_Marshal(m jsn.Marshaler, val *Activity) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("act", Activity_Type, val)); err == nil {
		e0 := m.MarshalKey("", Activity_Field_Exe)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Activity_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

// AllTrue Returns true if all of the evaluations are true.
// User implements: BoolEval.
type AllTrue struct {
	Test []rt.BoolEval `if:"label=_"`
}

func (*AllTrue) Compose() composer.Spec {
	return composer.Spec{
		Name: AllTrue_Type,
		Uses: composer.Type_Flow,
	}
}

const AllTrue_Type = "all_true"

const AllTrue_Field_Test = "$TEST"

func (op *AllTrue) Marshal(m jsn.Marshaler) error {
	return AllTrue_Marshal(m, op)
}

type AllTrue_Slice []AllTrue

func (op *AllTrue_Slice) GetType() string { return AllTrue_Type }
func (op *AllTrue_Slice) GetSize() int    { return len(*op) }
func (op *AllTrue_Slice) SetSize(cnt int) { (*op) = make(AllTrue_Slice, cnt) }

func AllTrue_Repeats_Marshal(m jsn.Marshaler, vals *[]AllTrue) (err error) {
	if err = m.MarshalBlock((*AllTrue_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := AllTrue_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func AllTrue_Optional_Marshal(m jsn.Marshaler, pv **AllTrue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AllTrue_Marshal(m, *pv)
	} else if !enc {
		var v AllTrue
		if err = AllTrue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AllTrue_Marshal(m jsn.Marshaler, val *AllTrue) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(AllTrue_Type, AllTrue_Type, val)); err == nil {
		e0 := m.MarshalKey("", AllTrue_Field_Test)
		if e0 == nil {
			e0 = rt.BoolEval_Repeats_Marshal(m, &val.Test)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AllTrue_Field_Test))
		}
		m.EndBlock()
	}
	return
}

// Always Returns true.
// User implements: BoolEval.
type Always struct {
}

func (*Always) Compose() composer.Spec {
	return composer.Spec{
		Name: Always_Type,
		Uses: composer.Type_Flow,
	}
}

const Always_Type = "always"

func (op *Always) Marshal(m jsn.Marshaler) error {
	return Always_Marshal(m, op)
}

type Always_Slice []Always

func (op *Always_Slice) GetType() string { return Always_Type }
func (op *Always_Slice) GetSize() int    { return len(*op) }
func (op *Always_Slice) SetSize(cnt int) { (*op) = make(Always_Slice, cnt) }

func Always_Repeats_Marshal(m jsn.Marshaler, vals *[]Always) (err error) {
	if err = m.MarshalBlock((*Always_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Always_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Always_Optional_Marshal(m jsn.Marshaler, pv **Always) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Always_Marshal(m, *pv)
	} else if !enc {
		var v Always
		if err = Always_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Always_Marshal(m jsn.Marshaler, val *Always) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Always_Type, Always_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// AnyTrue Returns true if any of the evaluations are true.
// User implements: BoolEval.
type AnyTrue struct {
	Test []rt.BoolEval `if:"label=_"`
}

func (*AnyTrue) Compose() composer.Spec {
	return composer.Spec{
		Name: AnyTrue_Type,
		Uses: composer.Type_Flow,
	}
}

const AnyTrue_Type = "any_true"

const AnyTrue_Field_Test = "$TEST"

func (op *AnyTrue) Marshal(m jsn.Marshaler) error {
	return AnyTrue_Marshal(m, op)
}

type AnyTrue_Slice []AnyTrue

func (op *AnyTrue_Slice) GetType() string { return AnyTrue_Type }
func (op *AnyTrue_Slice) GetSize() int    { return len(*op) }
func (op *AnyTrue_Slice) SetSize(cnt int) { (*op) = make(AnyTrue_Slice, cnt) }

func AnyTrue_Repeats_Marshal(m jsn.Marshaler, vals *[]AnyTrue) (err error) {
	if err = m.MarshalBlock((*AnyTrue_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := AnyTrue_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func AnyTrue_Optional_Marshal(m jsn.Marshaler, pv **AnyTrue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AnyTrue_Marshal(m, *pv)
	} else if !enc {
		var v AnyTrue
		if err = AnyTrue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AnyTrue_Marshal(m jsn.Marshaler, val *AnyTrue) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(AnyTrue_Type, AnyTrue_Type, val)); err == nil {
		e0 := m.MarshalKey("", AnyTrue_Field_Test)
		if e0 == nil {
			e0 = rt.BoolEval_Repeats_Marshal(m, &val.Test)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AnyTrue_Field_Test))
		}
		m.EndBlock()
	}
	return
}

// Assign Assigns a variable to a value.
// User implements: Execute.
type Assign struct {
	Var  value.VariableName `if:"label=_"`
	From rt.Assignment      `if:"label=be"`
}

func (*Assign) Compose() composer.Spec {
	return composer.Spec{
		Name: Assign_Type,
		Uses: composer.Type_Flow,
		Lede: "let",
	}
}

const Assign_Type = "assign"

const Assign_Field_Var = "$VAR"
const Assign_Field_From = "$FROM"

func (op *Assign) Marshal(m jsn.Marshaler) error {
	return Assign_Marshal(m, op)
}

type Assign_Slice []Assign

func (op *Assign_Slice) GetType() string { return Assign_Type }
func (op *Assign_Slice) GetSize() int    { return len(*op) }
func (op *Assign_Slice) SetSize(cnt int) { (*op) = make(Assign_Slice, cnt) }

func Assign_Repeats_Marshal(m jsn.Marshaler, vals *[]Assign) (err error) {
	if err = m.MarshalBlock((*Assign_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Assign_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Assign_Optional_Marshal(m jsn.Marshaler, pv **Assign) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Assign_Marshal(m, *pv)
	} else if !enc {
		var v Assign
		if err = Assign_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Assign_Marshal(m jsn.Marshaler, val *Assign) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("let", Assign_Type, val)); err == nil {
		e0 := m.MarshalKey("", Assign_Field_Var)
		if e0 == nil {
			e0 = value.VariableName_Marshal(m, &val.Var)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Assign_Field_Var))
		}
		e1 := m.MarshalKey("be", Assign_Field_From)
		if e1 == nil {
			e1 = rt.Assignment_Marshal(m, &val.From)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Assign_Field_From))
		}
		m.EndBlock()
	}
	return
}

// AtLeast The first value is greater than or equal to the second value.
// User implements: Comparator.
type AtLeast struct {
}

func (*AtLeast) Compose() composer.Spec {
	return composer.Spec{
		Name: AtLeast_Type,
		Uses: composer.Type_Flow,
	}
}

const AtLeast_Type = "at_least"

func (op *AtLeast) Marshal(m jsn.Marshaler) error {
	return AtLeast_Marshal(m, op)
}

type AtLeast_Slice []AtLeast

func (op *AtLeast_Slice) GetType() string { return AtLeast_Type }
func (op *AtLeast_Slice) GetSize() int    { return len(*op) }
func (op *AtLeast_Slice) SetSize(cnt int) { (*op) = make(AtLeast_Slice, cnt) }

func AtLeast_Repeats_Marshal(m jsn.Marshaler, vals *[]AtLeast) (err error) {
	if err = m.MarshalBlock((*AtLeast_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := AtLeast_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func AtLeast_Optional_Marshal(m jsn.Marshaler, pv **AtLeast) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AtLeast_Marshal(m, *pv)
	} else if !enc {
		var v AtLeast
		if err = AtLeast_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AtLeast_Marshal(m jsn.Marshaler, val *AtLeast) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(AtLeast_Type, AtLeast_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// AtMost The first value is less than or equal to the second value.
// User implements: Comparator.
type AtMost struct {
}

func (*AtMost) Compose() composer.Spec {
	return composer.Spec{
		Name: AtMost_Type,
		Uses: composer.Type_Flow,
	}
}

const AtMost_Type = "at_most"

func (op *AtMost) Marshal(m jsn.Marshaler) error {
	return AtMost_Marshal(m, op)
}

type AtMost_Slice []AtMost

func (op *AtMost_Slice) GetType() string { return AtMost_Type }
func (op *AtMost_Slice) GetSize() int    { return len(*op) }
func (op *AtMost_Slice) SetSize(cnt int) { (*op) = make(AtMost_Slice, cnt) }

func AtMost_Repeats_Marshal(m jsn.Marshaler, vals *[]AtMost) (err error) {
	if err = m.MarshalBlock((*AtMost_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := AtMost_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func AtMost_Optional_Marshal(m jsn.Marshaler, pv **AtMost) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AtMost_Marshal(m, *pv)
	} else if !enc {
		var v AtMost
		if err = AtMost_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AtMost_Marshal(m jsn.Marshaler, val *AtMost) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(AtMost_Type, AtMost_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// Blankline Add a single blank line following some text.
// User implements: Execute.
type Blankline struct {
}

func (*Blankline) Compose() composer.Spec {
	return composer.Spec{
		Name: Blankline_Type,
		Uses: composer.Type_Flow,
		Lede: "p",
	}
}

const Blankline_Type = "blankline"

func (op *Blankline) Marshal(m jsn.Marshaler) error {
	return Blankline_Marshal(m, op)
}

type Blankline_Slice []Blankline

func (op *Blankline_Slice) GetType() string { return Blankline_Type }
func (op *Blankline_Slice) GetSize() int    { return len(*op) }
func (op *Blankline_Slice) SetSize(cnt int) { (*op) = make(Blankline_Slice, cnt) }

func Blankline_Repeats_Marshal(m jsn.Marshaler, vals *[]Blankline) (err error) {
	if err = m.MarshalBlock((*Blankline_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Blankline_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Blankline_Optional_Marshal(m jsn.Marshaler, pv **Blankline) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Blankline_Marshal(m, *pv)
	} else if !enc {
		var v Blankline
		if err = Blankline_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Blankline_Marshal(m jsn.Marshaler, val *Blankline) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("p", Blankline_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// BoolValue Specify an explicit true or false value.
// User implements: BoolEval.
type BoolValue struct {
	Bool bool `if:"label=_,type=bool"`
}

func (*BoolValue) Compose() composer.Spec {
	return composer.Spec{
		Name: BoolValue_Type,
		Uses: composer.Type_Flow,
		Lede: "bool",
	}
}

const BoolValue_Type = "bool_value"

const BoolValue_Field_Bool = "$BOOL"

func (op *BoolValue) Marshal(m jsn.Marshaler) error {
	return BoolValue_Marshal(m, op)
}

type BoolValue_Slice []BoolValue

func (op *BoolValue_Slice) GetType() string { return BoolValue_Type }
func (op *BoolValue_Slice) GetSize() int    { return len(*op) }
func (op *BoolValue_Slice) SetSize(cnt int) { (*op) = make(BoolValue_Slice, cnt) }

func BoolValue_Repeats_Marshal(m jsn.Marshaler, vals *[]BoolValue) (err error) {
	if err = m.MarshalBlock((*BoolValue_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := BoolValue_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func BoolValue_Optional_Marshal(m jsn.Marshaler, pv **BoolValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BoolValue_Marshal(m, *pv)
	} else if !enc {
		var v BoolValue
		if err = BoolValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BoolValue_Marshal(m jsn.Marshaler, val *BoolValue) (err error) {
	if fn, ok := m.CustomizedMarshal(BoolValue_Type); ok {
		err = fn(m, val)
	} else {
		err = BoolValue_DefaultMarshal(m, val)
	}
	return
}
func BoolValue_DefaultMarshal(m jsn.Marshaler, val *BoolValue) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("bool", BoolValue_Type, val)); err == nil {
		e0 := m.MarshalKey("", BoolValue_Field_Bool)
		if e0 == nil {
			e0 = value.Bool_Unboxed_Marshal(m, &val.Bool)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", BoolValue_Field_Bool))
		}
		m.EndBlock()
	}
	return
}

// BracketText Sandwiches text printed during a block and puts them inside parenthesis &#x27;()&#x27;.
// User implements: TextEval.
type BracketText struct {
	Do Activity `if:"label=_"`
}

func (*BracketText) Compose() composer.Spec {
	return composer.Spec{
		Name: BracketText_Type,
		Uses: composer.Type_Flow,
		Lede: "brackets",
	}
}

const BracketText_Type = "bracket_text"

const BracketText_Field_Do = "$DO"

func (op *BracketText) Marshal(m jsn.Marshaler) error {
	return BracketText_Marshal(m, op)
}

type BracketText_Slice []BracketText

func (op *BracketText_Slice) GetType() string { return BracketText_Type }
func (op *BracketText_Slice) GetSize() int    { return len(*op) }
func (op *BracketText_Slice) SetSize(cnt int) { (*op) = make(BracketText_Slice, cnt) }

func BracketText_Repeats_Marshal(m jsn.Marshaler, vals *[]BracketText) (err error) {
	if err = m.MarshalBlock((*BracketText_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := BracketText_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func BracketText_Optional_Marshal(m jsn.Marshaler, pv **BracketText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BracketText_Marshal(m, *pv)
	} else if !enc {
		var v BracketText
		if err = BracketText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BracketText_Marshal(m jsn.Marshaler, val *BracketText) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("brackets", BracketText_Type, val)); err == nil {
		e0 := m.MarshalKey("", BracketText_Field_Do)
		if e0 == nil {
			e0 = Activity_Marshal(m, &val.Do)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", BracketText_Field_Do))
		}
		m.EndBlock()
	}
	return
}

const Brancher_Type = "brancher"

var Brancher_Optional_Marshal = Brancher_Marshal

type Brancher_Slot struct{ ptr *Brancher }

func (At Brancher_Slot) GetType() string              { return Brancher_Type }
func (at Brancher_Slot) GetSlot() (interface{}, bool) { return at.ptr, at.ptr != nil }
func (at Brancher_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(Brancher)
	return
}

func Brancher_Marshal(m jsn.Marshaler, ptr *Brancher) (err error) {
	if err = m.MarshalBlock(Brancher_Slot{ptr}); err == nil {
		if e := (*ptr).(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
			m.Error(e)
		}
		m.EndBlock()
	}
	return
}

type Brancher_Slice []Brancher

func (op *Brancher_Slice) GetType() string { return Brancher_Type }
func (op *Brancher_Slice) GetSize() int    { return len(*op) }
func (op *Brancher_Slice) SetSize(cnt int) { (*op) = make(Brancher_Slice, cnt) }

func Brancher_Repeats_Marshal(m jsn.Marshaler, vals *[]Brancher) (err error) {
	if err = m.MarshalBlock((*Brancher_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Brancher_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// Break In a repeating loop, exit the loop.
// User implements: Execute.
type Break struct {
}

func (*Break) Compose() composer.Spec {
	return composer.Spec{
		Name: Break_Type,
		Uses: composer.Type_Flow,
	}
}

const Break_Type = "break"

func (op *Break) Marshal(m jsn.Marshaler) error {
	return Break_Marshal(m, op)
}

type Break_Slice []Break

func (op *Break_Slice) GetType() string { return Break_Type }
func (op *Break_Slice) GetSize() int    { return len(*op) }
func (op *Break_Slice) SetSize(cnt int) { (*op) = make(Break_Slice, cnt) }

func Break_Repeats_Marshal(m jsn.Marshaler, vals *[]Break) (err error) {
	if err = m.MarshalBlock((*Break_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Break_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Break_Optional_Marshal(m jsn.Marshaler, pv **Break) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Break_Marshal(m, *pv)
	} else if !enc {
		var v Break
		if err = Break_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Break_Marshal(m jsn.Marshaler, val *Break) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Break_Type, Break_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// BufferText
// User implements: TextEval.
type BufferText struct {
	Do Activity `if:"label=_"`
}

func (*BufferText) Compose() composer.Spec {
	return composer.Spec{
		Name: BufferText_Type,
		Uses: composer.Type_Flow,
		Lede: "buffers",
	}
}

const BufferText_Type = "buffer_text"

const BufferText_Field_Do = "$DO"

func (op *BufferText) Marshal(m jsn.Marshaler) error {
	return BufferText_Marshal(m, op)
}

type BufferText_Slice []BufferText

func (op *BufferText_Slice) GetType() string { return BufferText_Type }
func (op *BufferText_Slice) GetSize() int    { return len(*op) }
func (op *BufferText_Slice) SetSize(cnt int) { (*op) = make(BufferText_Slice, cnt) }

func BufferText_Repeats_Marshal(m jsn.Marshaler, vals *[]BufferText) (err error) {
	if err = m.MarshalBlock((*BufferText_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := BufferText_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func BufferText_Optional_Marshal(m jsn.Marshaler, pv **BufferText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BufferText_Marshal(m, *pv)
	} else if !enc {
		var v BufferText
		if err = BufferText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BufferText_Marshal(m jsn.Marshaler, val *BufferText) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("buffers", BufferText_Type, val)); err == nil {
		e0 := m.MarshalKey("", BufferText_Field_Do)
		if e0 == nil {
			e0 = Activity_Marshal(m, &val.Do)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", BufferText_Field_Do))
		}
		m.EndBlock()
	}
	return
}

// CallArg Runtime version of argument
type CallArg struct {
	Name string        `if:"label=_,type=text"`
	From rt.Assignment `if:"label=from"`
}

func (*CallArg) Compose() composer.Spec {
	return composer.Spec{
		Name: CallArg_Type,
		Uses: composer.Type_Flow,
		Lede: "inarg",
	}
}

const CallArg_Type = "call_arg"

const CallArg_Field_Name = "$NAME"
const CallArg_Field_From = "$FROM"

func (op *CallArg) Marshal(m jsn.Marshaler) error {
	return CallArg_Marshal(m, op)
}

type CallArg_Slice []CallArg

func (op *CallArg_Slice) GetType() string { return CallArg_Type }
func (op *CallArg_Slice) GetSize() int    { return len(*op) }
func (op *CallArg_Slice) SetSize(cnt int) { (*op) = make(CallArg_Slice, cnt) }

func CallArg_Repeats_Marshal(m jsn.Marshaler, vals *[]CallArg) (err error) {
	if err = m.MarshalBlock((*CallArg_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CallArg_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CallArg_Optional_Marshal(m jsn.Marshaler, pv **CallArg) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallArg_Marshal(m, *pv)
	} else if !enc {
		var v CallArg
		if err = CallArg_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallArg_Marshal(m jsn.Marshaler, val *CallArg) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("inarg", CallArg_Type, val)); err == nil {
		e0 := m.MarshalKey("", CallArg_Field_Name)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallArg_Field_Name))
		}
		e1 := m.MarshalKey("from", CallArg_Field_From)
		if e1 == nil {
			e1 = rt.Assignment_Marshal(m, &val.From)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallArg_Field_From))
		}
		m.EndBlock()
	}
	return
}

// CallArgs Runtime version of arguments
type CallArgs struct {
	Args []CallArg `if:"label=_"`
}

func (*CallArgs) Compose() composer.Spec {
	return composer.Spec{
		Name: CallArgs_Type,
		Uses: composer.Type_Flow,
		Lede: "inargs",
	}
}

const CallArgs_Type = "call_args"

const CallArgs_Field_Args = "$ARGS"

func (op *CallArgs) Marshal(m jsn.Marshaler) error {
	return CallArgs_Marshal(m, op)
}

type CallArgs_Slice []CallArgs

func (op *CallArgs_Slice) GetType() string { return CallArgs_Type }
func (op *CallArgs_Slice) GetSize() int    { return len(*op) }
func (op *CallArgs_Slice) SetSize(cnt int) { (*op) = make(CallArgs_Slice, cnt) }

func CallArgs_Repeats_Marshal(m jsn.Marshaler, vals *[]CallArgs) (err error) {
	if err = m.MarshalBlock((*CallArgs_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CallArgs_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CallArgs_Optional_Marshal(m jsn.Marshaler, pv **CallArgs) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallArgs_Marshal(m, *pv)
	} else if !enc {
		var v CallArgs
		if err = CallArgs_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallArgs_Marshal(m jsn.Marshaler, val *CallArgs) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("inargs", CallArgs_Type, val)); err == nil {
		e0 := m.MarshalKey("", CallArgs_Field_Args)
		if e0 == nil {
			e0 = CallArg_Repeats_Marshal(m, &val.Args)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallArgs_Field_Args))
		}
		m.EndBlock()
	}
	return
}

// CallCycle Runtime version of cycle_text
// User implements: TextEval.
type CallCycle struct {
	At    reader.Position `if:"internal"`
	Parts []rt.TextEval   `if:"label=_"`
}

func (*CallCycle) Compose() composer.Spec {
	return composer.Spec{
		Name: CallCycle_Type,
		Uses: composer.Type_Flow,
		Lede: "cycle",
	}
}

const CallCycle_Type = "call_cycle"

const CallCycle_Field_Parts = "$PARTS"

func (op *CallCycle) Marshal(m jsn.Marshaler) error {
	return CallCycle_Marshal(m, op)
}

type CallCycle_Slice []CallCycle

func (op *CallCycle_Slice) GetType() string { return CallCycle_Type }
func (op *CallCycle_Slice) GetSize() int    { return len(*op) }
func (op *CallCycle_Slice) SetSize(cnt int) { (*op) = make(CallCycle_Slice, cnt) }

func CallCycle_Repeats_Marshal(m jsn.Marshaler, vals *[]CallCycle) (err error) {
	if err = m.MarshalBlock((*CallCycle_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CallCycle_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CallCycle_Optional_Marshal(m jsn.Marshaler, pv **CallCycle) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallCycle_Marshal(m, *pv)
	} else if !enc {
		var v CallCycle
		if err = CallCycle_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallCycle_Marshal(m jsn.Marshaler, val *CallCycle) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(jsn.MakeFlow("cycle", CallCycle_Type, val)); err == nil {
		e1 := m.MarshalKey("", CallCycle_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallCycle_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// CallMake Runtime version of make
// User implements: RecordEval.
type CallMake struct {
	Kind      string   `if:"label=_,type=text"`
	Arguments CallArgs `if:"label=args"`
}

func (*CallMake) Compose() composer.Spec {
	return composer.Spec{
		Name: CallMake_Type,
		Uses: composer.Type_Flow,
	}
}

const CallMake_Type = "call_make"

const CallMake_Field_Kind = "$KIND"
const CallMake_Field_Arguments = "$ARGUMENTS"

func (op *CallMake) Marshal(m jsn.Marshaler) error {
	return CallMake_Marshal(m, op)
}

type CallMake_Slice []CallMake

func (op *CallMake_Slice) GetType() string { return CallMake_Type }
func (op *CallMake_Slice) GetSize() int    { return len(*op) }
func (op *CallMake_Slice) SetSize(cnt int) { (*op) = make(CallMake_Slice, cnt) }

func CallMake_Repeats_Marshal(m jsn.Marshaler, vals *[]CallMake) (err error) {
	if err = m.MarshalBlock((*CallMake_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CallMake_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CallMake_Optional_Marshal(m jsn.Marshaler, pv **CallMake) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallMake_Marshal(m, *pv)
	} else if !enc {
		var v CallMake
		if err = CallMake_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallMake_Marshal(m jsn.Marshaler, val *CallMake) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(CallMake_Type, CallMake_Type, val)); err == nil {
		e0 := m.MarshalKey("", CallMake_Field_Kind)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallMake_Field_Kind))
		}
		e1 := m.MarshalKey("args", CallMake_Field_Arguments)
		if e1 == nil {
			e1 = CallArgs_Marshal(m, &val.Arguments)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallMake_Field_Arguments))
		}
		m.EndBlock()
	}
	return
}

// CallPattern Runtime version of determine
// User implements: Execute, BoolEval, NumberEval, TextEval, RecordEval, NumListEval, TextListEval, RecordListEval.
type CallPattern struct {
	Pattern   value.PatternName `if:"label=_"`
	Arguments CallArgs          `if:"label=args"`
}

func (*CallPattern) Compose() composer.Spec {
	return composer.Spec{
		Name: CallPattern_Type,
		Uses: composer.Type_Flow,
	}
}

const CallPattern_Type = "call_pattern"

const CallPattern_Field_Pattern = "$PATTERN"
const CallPattern_Field_Arguments = "$ARGUMENTS"

func (op *CallPattern) Marshal(m jsn.Marshaler) error {
	return CallPattern_Marshal(m, op)
}

type CallPattern_Slice []CallPattern

func (op *CallPattern_Slice) GetType() string { return CallPattern_Type }
func (op *CallPattern_Slice) GetSize() int    { return len(*op) }
func (op *CallPattern_Slice) SetSize(cnt int) { (*op) = make(CallPattern_Slice, cnt) }

func CallPattern_Repeats_Marshal(m jsn.Marshaler, vals *[]CallPattern) (err error) {
	if err = m.MarshalBlock((*CallPattern_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CallPattern_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CallPattern_Optional_Marshal(m jsn.Marshaler, pv **CallPattern) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallPattern_Marshal(m, *pv)
	} else if !enc {
		var v CallPattern
		if err = CallPattern_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallPattern_Marshal(m jsn.Marshaler, val *CallPattern) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(CallPattern_Type, CallPattern_Type, val)); err == nil {
		e0 := m.MarshalKey("", CallPattern_Field_Pattern)
		if e0 == nil {
			e0 = value.PatternName_Marshal(m, &val.Pattern)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallPattern_Field_Pattern))
		}
		e1 := m.MarshalKey("args", CallPattern_Field_Arguments)
		if e1 == nil {
			e1 = CallArgs_Marshal(m, &val.Arguments)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallPattern_Field_Arguments))
		}
		m.EndBlock()
	}
	return
}

// CallSend Runtime version of send
// User implements: Execute, BoolEval.
type CallSend struct {
	Event     string          `if:"label=_,type=text"`
	Path      rt.TextListEval `if:"label=to"`
	Arguments CallArgs        `if:"label=args"`
}

func (*CallSend) Compose() composer.Spec {
	return composer.Spec{
		Name: CallSend_Type,
		Uses: composer.Type_Flow,
	}
}

const CallSend_Type = "call_send"

const CallSend_Field_Event = "$EVENT"
const CallSend_Field_Path = "$PATH"
const CallSend_Field_Arguments = "$ARGUMENTS"

func (op *CallSend) Marshal(m jsn.Marshaler) error {
	return CallSend_Marshal(m, op)
}

type CallSend_Slice []CallSend

func (op *CallSend_Slice) GetType() string { return CallSend_Type }
func (op *CallSend_Slice) GetSize() int    { return len(*op) }
func (op *CallSend_Slice) SetSize(cnt int) { (*op) = make(CallSend_Slice, cnt) }

func CallSend_Repeats_Marshal(m jsn.Marshaler, vals *[]CallSend) (err error) {
	if err = m.MarshalBlock((*CallSend_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CallSend_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CallSend_Optional_Marshal(m jsn.Marshaler, pv **CallSend) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallSend_Marshal(m, *pv)
	} else if !enc {
		var v CallSend
		if err = CallSend_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallSend_Marshal(m jsn.Marshaler, val *CallSend) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(CallSend_Type, CallSend_Type, val)); err == nil {
		e0 := m.MarshalKey("", CallSend_Field_Event)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Event)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallSend_Field_Event))
		}
		e1 := m.MarshalKey("to", CallSend_Field_Path)
		if e1 == nil {
			e1 = rt.TextListEval_Marshal(m, &val.Path)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallSend_Field_Path))
		}
		e2 := m.MarshalKey("args", CallSend_Field_Arguments)
		if e2 == nil {
			e2 = CallArgs_Marshal(m, &val.Arguments)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CallSend_Field_Arguments))
		}
		m.EndBlock()
	}
	return
}

// CallShuffle Runtime version of shuffle_text
// User implements: TextEval.
type CallShuffle struct {
	At      reader.Position `if:"internal"`
	Parts   []rt.TextEval   `if:"label=_"`
	Indices Shuffler        `if:"internal"`
}

func (*CallShuffle) Compose() composer.Spec {
	return composer.Spec{
		Name: CallShuffle_Type,
		Uses: composer.Type_Flow,
		Lede: "shuffle",
	}
}

const CallShuffle_Type = "call_shuffle"

const CallShuffle_Field_Parts = "$PARTS"

func (op *CallShuffle) Marshal(m jsn.Marshaler) error {
	return CallShuffle_Marshal(m, op)
}

type CallShuffle_Slice []CallShuffle

func (op *CallShuffle_Slice) GetType() string { return CallShuffle_Type }
func (op *CallShuffle_Slice) GetSize() int    { return len(*op) }
func (op *CallShuffle_Slice) SetSize(cnt int) { (*op) = make(CallShuffle_Slice, cnt) }

func CallShuffle_Repeats_Marshal(m jsn.Marshaler, vals *[]CallShuffle) (err error) {
	if err = m.MarshalBlock((*CallShuffle_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CallShuffle_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CallShuffle_Optional_Marshal(m jsn.Marshaler, pv **CallShuffle) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallShuffle_Marshal(m, *pv)
	} else if !enc {
		var v CallShuffle
		if err = CallShuffle_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallShuffle_Marshal(m jsn.Marshaler, val *CallShuffle) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(jsn.MakeFlow("shuffle", CallShuffle_Type, val)); err == nil {
		e1 := m.MarshalKey("", CallShuffle_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallShuffle_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// CallTerminal Runtime version of stopping_text
// User implements: TextEval.
type CallTerminal struct {
	At    reader.Position `if:"internal"`
	Parts []rt.TextEval   `if:"label=_"`
}

func (*CallTerminal) Compose() composer.Spec {
	return composer.Spec{
		Name: CallTerminal_Type,
		Uses: composer.Type_Flow,
		Lede: "stopping",
	}
}

const CallTerminal_Type = "call_terminal"

const CallTerminal_Field_Parts = "$PARTS"

func (op *CallTerminal) Marshal(m jsn.Marshaler) error {
	return CallTerminal_Marshal(m, op)
}

type CallTerminal_Slice []CallTerminal

func (op *CallTerminal_Slice) GetType() string { return CallTerminal_Type }
func (op *CallTerminal_Slice) GetSize() int    { return len(*op) }
func (op *CallTerminal_Slice) SetSize(cnt int) { (*op) = make(CallTerminal_Slice, cnt) }

func CallTerminal_Repeats_Marshal(m jsn.Marshaler, vals *[]CallTerminal) (err error) {
	if err = m.MarshalBlock((*CallTerminal_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CallTerminal_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CallTerminal_Optional_Marshal(m jsn.Marshaler, pv **CallTerminal) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallTerminal_Marshal(m, *pv)
	} else if !enc {
		var v CallTerminal
		if err = CallTerminal_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallTerminal_Marshal(m jsn.Marshaler, val *CallTerminal) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(jsn.MakeFlow("stopping", CallTerminal_Type, val)); err == nil {
		e1 := m.MarshalKey("", CallTerminal_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallTerminal_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// CallTrigger Runtime version of count_of
// User implements: BoolEval.
type CallTrigger struct {
	At      reader.Position `if:"internal"`
	Trigger Trigger         `if:"label=_"`
	Num     rt.NumberEval   `if:"label=num"`
}

func (*CallTrigger) Compose() composer.Spec {
	return composer.Spec{
		Name: CallTrigger_Type,
		Uses: composer.Type_Flow,
		Lede: "trigger",
	}
}

const CallTrigger_Type = "call_trigger"

const CallTrigger_Field_Trigger = "$TRIGGER"
const CallTrigger_Field_Num = "$NUM"

func (op *CallTrigger) Marshal(m jsn.Marshaler) error {
	return CallTrigger_Marshal(m, op)
}

type CallTrigger_Slice []CallTrigger

func (op *CallTrigger_Slice) GetType() string { return CallTrigger_Type }
func (op *CallTrigger_Slice) GetSize() int    { return len(*op) }
func (op *CallTrigger_Slice) SetSize(cnt int) { (*op) = make(CallTrigger_Slice, cnt) }

func CallTrigger_Repeats_Marshal(m jsn.Marshaler, vals *[]CallTrigger) (err error) {
	if err = m.MarshalBlock((*CallTrigger_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CallTrigger_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CallTrigger_Optional_Marshal(m jsn.Marshaler, pv **CallTrigger) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallTrigger_Marshal(m, *pv)
	} else if !enc {
		var v CallTrigger
		if err = CallTrigger_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallTrigger_Marshal(m jsn.Marshaler, val *CallTrigger) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(jsn.MakeFlow("trigger", CallTrigger_Type, val)); err == nil {
		e1 := m.MarshalKey("", CallTrigger_Field_Trigger)
		if e1 == nil {
			e1 = Trigger_Marshal(m, &val.Trigger)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallTrigger_Field_Trigger))
		}
		e2 := m.MarshalKey("num", CallTrigger_Field_Num)
		if e2 == nil {
			e2 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CallTrigger_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// Capitalize Returns new text, with the first letter turned into uppercase.
// User implements: TextEval.
type Capitalize struct {
	Text rt.TextEval `if:"label=_"`
}

func (*Capitalize) Compose() composer.Spec {
	return composer.Spec{
		Name: Capitalize_Type,
		Uses: composer.Type_Flow,
	}
}

const Capitalize_Type = "capitalize"

const Capitalize_Field_Text = "$TEXT"

func (op *Capitalize) Marshal(m jsn.Marshaler) error {
	return Capitalize_Marshal(m, op)
}

type Capitalize_Slice []Capitalize

func (op *Capitalize_Slice) GetType() string { return Capitalize_Type }
func (op *Capitalize_Slice) GetSize() int    { return len(*op) }
func (op *Capitalize_Slice) SetSize(cnt int) { (*op) = make(Capitalize_Slice, cnt) }

func Capitalize_Repeats_Marshal(m jsn.Marshaler, vals *[]Capitalize) (err error) {
	if err = m.MarshalBlock((*Capitalize_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Capitalize_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Capitalize_Optional_Marshal(m jsn.Marshaler, pv **Capitalize) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Capitalize_Marshal(m, *pv)
	} else if !enc {
		var v Capitalize
		if err = Capitalize_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Capitalize_Marshal(m jsn.Marshaler, val *Capitalize) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Capitalize_Type, Capitalize_Type, val)); err == nil {
		e0 := m.MarshalKey("", Capitalize_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Capitalize_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// ChooseAction An if statement.
// User implements: Execute, Brancher.
type ChooseAction struct {
	If   rt.BoolEval `if:"label=_"`
	Do   Activity    `if:"label=do"`
	Else Brancher    `if:"label=else,optional"`
}

func (*ChooseAction) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseAction_Type,
		Uses: composer.Type_Flow,
		Lede: "if",
	}
}

const ChooseAction_Type = "choose_action"

const ChooseAction_Field_If = "$IF"
const ChooseAction_Field_Do = "$DO"
const ChooseAction_Field_Else = "$ELSE"

func (op *ChooseAction) Marshal(m jsn.Marshaler) error {
	return ChooseAction_Marshal(m, op)
}

type ChooseAction_Slice []ChooseAction

func (op *ChooseAction_Slice) GetType() string { return ChooseAction_Type }
func (op *ChooseAction_Slice) GetSize() int    { return len(*op) }
func (op *ChooseAction_Slice) SetSize(cnt int) { (*op) = make(ChooseAction_Slice, cnt) }

func ChooseAction_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseAction) (err error) {
	if err = m.MarshalBlock((*ChooseAction_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := ChooseAction_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func ChooseAction_Optional_Marshal(m jsn.Marshaler, pv **ChooseAction) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseAction_Marshal(m, *pv)
	} else if !enc {
		var v ChooseAction
		if err = ChooseAction_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseAction_Marshal(m jsn.Marshaler, val *ChooseAction) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("if", ChooseAction_Type, val)); err == nil {
		e0 := m.MarshalKey("", ChooseAction_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseAction_Field_If))
		}
		e1 := m.MarshalKey("do", ChooseAction_Field_Do)
		if e1 == nil {
			e1 = Activity_Marshal(m, &val.Do)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseAction_Field_Do))
		}
		e2 := m.MarshalKey("else", ChooseAction_Field_Else)
		if e2 == nil {
			e2 = Brancher_Optional_Marshal(m, &val.Else)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseAction_Field_Else))
		}
		m.EndBlock()
	}
	return
}

// ChooseMore
// User implements: Brancher.
type ChooseMore struct {
	If   rt.BoolEval `if:"label=_"`
	Do   Activity    `if:"label=do"`
	Else Brancher    `if:"label=else,optional"`
}

func (*ChooseMore) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseMore_Type,
		Uses: composer.Type_Flow,
		Lede: "else_if",
	}
}

const ChooseMore_Type = "choose_more"

const ChooseMore_Field_If = "$IF"
const ChooseMore_Field_Do = "$DO"
const ChooseMore_Field_Else = "$ELSE"

func (op *ChooseMore) Marshal(m jsn.Marshaler) error {
	return ChooseMore_Marshal(m, op)
}

type ChooseMore_Slice []ChooseMore

func (op *ChooseMore_Slice) GetType() string { return ChooseMore_Type }
func (op *ChooseMore_Slice) GetSize() int    { return len(*op) }
func (op *ChooseMore_Slice) SetSize(cnt int) { (*op) = make(ChooseMore_Slice, cnt) }

func ChooseMore_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseMore) (err error) {
	if err = m.MarshalBlock((*ChooseMore_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := ChooseMore_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func ChooseMore_Optional_Marshal(m jsn.Marshaler, pv **ChooseMore) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseMore_Marshal(m, *pv)
	} else if !enc {
		var v ChooseMore
		if err = ChooseMore_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseMore_Marshal(m jsn.Marshaler, val *ChooseMore) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("else_if", ChooseMore_Type, val)); err == nil {
		e0 := m.MarshalKey("", ChooseMore_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseMore_Field_If))
		}
		e1 := m.MarshalKey("do", ChooseMore_Field_Do)
		if e1 == nil {
			e1 = Activity_Marshal(m, &val.Do)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseMore_Field_Do))
		}
		e2 := m.MarshalKey("else", ChooseMore_Field_Else)
		if e2 == nil {
			e2 = Brancher_Optional_Marshal(m, &val.Else)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseMore_Field_Else))
		}
		m.EndBlock()
	}
	return
}

// ChooseMoreValue
// User implements: Brancher.
type ChooseMoreValue struct {
	Assign string        `if:"label=_,type=text"`
	From   rt.Assignment `if:"label=from"`
	Filter rt.BoolEval   `if:"label=and"`
	Do     Activity      `if:"label=do"`
	Else   Brancher      `if:"label=else,optional"`
}

func (*ChooseMoreValue) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseMoreValue_Type,
		Uses: composer.Type_Flow,
		Lede: "else_if",
	}
}

const ChooseMoreValue_Type = "choose_more_value"

const ChooseMoreValue_Field_Assign = "$ASSIGN"
const ChooseMoreValue_Field_From = "$FROM"
const ChooseMoreValue_Field_Filter = "$FILTER"
const ChooseMoreValue_Field_Do = "$DO"
const ChooseMoreValue_Field_Else = "$ELSE"

func (op *ChooseMoreValue) Marshal(m jsn.Marshaler) error {
	return ChooseMoreValue_Marshal(m, op)
}

type ChooseMoreValue_Slice []ChooseMoreValue

func (op *ChooseMoreValue_Slice) GetType() string { return ChooseMoreValue_Type }
func (op *ChooseMoreValue_Slice) GetSize() int    { return len(*op) }
func (op *ChooseMoreValue_Slice) SetSize(cnt int) { (*op) = make(ChooseMoreValue_Slice, cnt) }

func ChooseMoreValue_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseMoreValue) (err error) {
	if err = m.MarshalBlock((*ChooseMoreValue_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := ChooseMoreValue_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func ChooseMoreValue_Optional_Marshal(m jsn.Marshaler, pv **ChooseMoreValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseMoreValue_Marshal(m, *pv)
	} else if !enc {
		var v ChooseMoreValue
		if err = ChooseMoreValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseMoreValue_Marshal(m jsn.Marshaler, val *ChooseMoreValue) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("else_if", ChooseMoreValue_Type, val)); err == nil {
		e0 := m.MarshalKey("", ChooseMoreValue_Field_Assign)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Assign)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseMoreValue_Field_Assign))
		}
		e1 := m.MarshalKey("from", ChooseMoreValue_Field_From)
		if e1 == nil {
			e1 = rt.Assignment_Marshal(m, &val.From)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseMoreValue_Field_From))
		}
		e2 := m.MarshalKey("and", ChooseMoreValue_Field_Filter)
		if e2 == nil {
			e2 = rt.BoolEval_Marshal(m, &val.Filter)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseMoreValue_Field_Filter))
		}
		e3 := m.MarshalKey("do", ChooseMoreValue_Field_Do)
		if e3 == nil {
			e3 = Activity_Marshal(m, &val.Do)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", ChooseMoreValue_Field_Do))
		}
		e4 := m.MarshalKey("else", ChooseMoreValue_Field_Else)
		if e4 == nil {
			e4 = Brancher_Optional_Marshal(m, &val.Else)
		}
		if e4 != nil && e4 != jsn.Missing {
			m.Error(errutil.New(e4, "in flow at", ChooseMoreValue_Field_Else))
		}
		m.EndBlock()
	}
	return
}

// ChooseNothingElse
// User implements: Brancher.
type ChooseNothingElse struct {
	Do Activity `if:"label=_"`
}

func (*ChooseNothingElse) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseNothingElse_Type,
		Uses: composer.Type_Flow,
		Lede: "else_do",
	}
}

const ChooseNothingElse_Type = "choose_nothing_else"

const ChooseNothingElse_Field_Do = "$DO"

func (op *ChooseNothingElse) Marshal(m jsn.Marshaler) error {
	return ChooseNothingElse_Marshal(m, op)
}

type ChooseNothingElse_Slice []ChooseNothingElse

func (op *ChooseNothingElse_Slice) GetType() string { return ChooseNothingElse_Type }
func (op *ChooseNothingElse_Slice) GetSize() int    { return len(*op) }
func (op *ChooseNothingElse_Slice) SetSize(cnt int) { (*op) = make(ChooseNothingElse_Slice, cnt) }

func ChooseNothingElse_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseNothingElse) (err error) {
	if err = m.MarshalBlock((*ChooseNothingElse_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := ChooseNothingElse_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func ChooseNothingElse_Optional_Marshal(m jsn.Marshaler, pv **ChooseNothingElse) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseNothingElse_Marshal(m, *pv)
	} else if !enc {
		var v ChooseNothingElse
		if err = ChooseNothingElse_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseNothingElse_Marshal(m jsn.Marshaler, val *ChooseNothingElse) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("else_do", ChooseNothingElse_Type, val)); err == nil {
		e0 := m.MarshalKey("", ChooseNothingElse_Field_Do)
		if e0 == nil {
			e0 = Activity_Marshal(m, &val.Do)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseNothingElse_Field_Do))
		}
		m.EndBlock()
	}
	return
}

// ChooseNum Pick one of two numbers based on a boolean test.
// User implements: NumberEval.
type ChooseNum struct {
	If    rt.BoolEval   `if:"label=if"`
	True  rt.NumberEval `if:"label=then"`
	False rt.NumberEval `if:"label=else"`
}

func (*ChooseNum) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseNum_Type,
		Uses: composer.Type_Flow,
		Lede: "num",
	}
}

const ChooseNum_Type = "choose_num"

const ChooseNum_Field_If = "$IF"
const ChooseNum_Field_True = "$TRUE"
const ChooseNum_Field_False = "$FALSE"

func (op *ChooseNum) Marshal(m jsn.Marshaler) error {
	return ChooseNum_Marshal(m, op)
}

type ChooseNum_Slice []ChooseNum

func (op *ChooseNum_Slice) GetType() string { return ChooseNum_Type }
func (op *ChooseNum_Slice) GetSize() int    { return len(*op) }
func (op *ChooseNum_Slice) SetSize(cnt int) { (*op) = make(ChooseNum_Slice, cnt) }

func ChooseNum_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseNum) (err error) {
	if err = m.MarshalBlock((*ChooseNum_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := ChooseNum_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func ChooseNum_Optional_Marshal(m jsn.Marshaler, pv **ChooseNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseNum_Marshal(m, *pv)
	} else if !enc {
		var v ChooseNum
		if err = ChooseNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseNum_Marshal(m jsn.Marshaler, val *ChooseNum) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("num", ChooseNum_Type, val)); err == nil {
		e0 := m.MarshalKey("if", ChooseNum_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseNum_Field_If))
		}
		e1 := m.MarshalKey("then", ChooseNum_Field_True)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.True)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseNum_Field_True))
		}
		e2 := m.MarshalKey("else", ChooseNum_Field_False)
		if e2 == nil {
			e2 = rt.NumberEval_Marshal(m, &val.False)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseNum_Field_False))
		}
		m.EndBlock()
	}
	return
}

// ChooseText Pick one of two strings based on a boolean test.
// User implements: TextEval.
type ChooseText struct {
	If    rt.BoolEval `if:"label=if"`
	True  rt.TextEval `if:"label=then"`
	False rt.TextEval `if:"label=else"`
}

func (*ChooseText) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseText_Type,
		Uses: composer.Type_Flow,
		Lede: "txt",
	}
}

const ChooseText_Type = "choose_text"

const ChooseText_Field_If = "$IF"
const ChooseText_Field_True = "$TRUE"
const ChooseText_Field_False = "$FALSE"

func (op *ChooseText) Marshal(m jsn.Marshaler) error {
	return ChooseText_Marshal(m, op)
}

type ChooseText_Slice []ChooseText

func (op *ChooseText_Slice) GetType() string { return ChooseText_Type }
func (op *ChooseText_Slice) GetSize() int    { return len(*op) }
func (op *ChooseText_Slice) SetSize(cnt int) { (*op) = make(ChooseText_Slice, cnt) }

func ChooseText_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseText) (err error) {
	if err = m.MarshalBlock((*ChooseText_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := ChooseText_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func ChooseText_Optional_Marshal(m jsn.Marshaler, pv **ChooseText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseText_Marshal(m, *pv)
	} else if !enc {
		var v ChooseText
		if err = ChooseText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseText_Marshal(m jsn.Marshaler, val *ChooseText) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("txt", ChooseText_Type, val)); err == nil {
		e0 := m.MarshalKey("if", ChooseText_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseText_Field_If))
		}
		e1 := m.MarshalKey("then", ChooseText_Field_True)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.True)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseText_Field_True))
		}
		e2 := m.MarshalKey("else", ChooseText_Field_False)
		if e2 == nil {
			e2 = rt.TextEval_Marshal(m, &val.False)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseText_Field_False))
		}
		m.EndBlock()
	}
	return
}

// ChooseValue An if statement with local assignment.
// User implements: Execute, Brancher.
type ChooseValue struct {
	Assign string        `if:"label=_,type=text"`
	From   rt.Assignment `if:"label=from"`
	Filter rt.BoolEval   `if:"label=and"`
	Do     Activity      `if:"label=do"`
	Else   Brancher      `if:"label=else,optional"`
}

func (*ChooseValue) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseValue_Type,
		Uses: composer.Type_Flow,
		Lede: "if",
	}
}

const ChooseValue_Type = "choose_value"

const ChooseValue_Field_Assign = "$ASSIGN"
const ChooseValue_Field_From = "$FROM"
const ChooseValue_Field_Filter = "$FILTER"
const ChooseValue_Field_Do = "$DO"
const ChooseValue_Field_Else = "$ELSE"

func (op *ChooseValue) Marshal(m jsn.Marshaler) error {
	return ChooseValue_Marshal(m, op)
}

type ChooseValue_Slice []ChooseValue

func (op *ChooseValue_Slice) GetType() string { return ChooseValue_Type }
func (op *ChooseValue_Slice) GetSize() int    { return len(*op) }
func (op *ChooseValue_Slice) SetSize(cnt int) { (*op) = make(ChooseValue_Slice, cnt) }

func ChooseValue_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseValue) (err error) {
	if err = m.MarshalBlock((*ChooseValue_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := ChooseValue_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func ChooseValue_Optional_Marshal(m jsn.Marshaler, pv **ChooseValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseValue_Marshal(m, *pv)
	} else if !enc {
		var v ChooseValue
		if err = ChooseValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseValue_Marshal(m jsn.Marshaler, val *ChooseValue) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("if", ChooseValue_Type, val)); err == nil {
		e0 := m.MarshalKey("", ChooseValue_Field_Assign)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Assign)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseValue_Field_Assign))
		}
		e1 := m.MarshalKey("from", ChooseValue_Field_From)
		if e1 == nil {
			e1 = rt.Assignment_Marshal(m, &val.From)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseValue_Field_From))
		}
		e2 := m.MarshalKey("and", ChooseValue_Field_Filter)
		if e2 == nil {
			e2 = rt.BoolEval_Marshal(m, &val.Filter)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseValue_Field_Filter))
		}
		e3 := m.MarshalKey("do", ChooseValue_Field_Do)
		if e3 == nil {
			e3 = Activity_Marshal(m, &val.Do)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", ChooseValue_Field_Do))
		}
		e4 := m.MarshalKey("else", ChooseValue_Field_Else)
		if e4 == nil {
			e4 = Brancher_Optional_Marshal(m, &val.Else)
		}
		if e4 != nil && e4 != jsn.Missing {
			m.Error(errutil.New(e4, "in flow at", ChooseValue_Field_Else))
		}
		m.EndBlock()
	}
	return
}

// CommaText Separates words with commas, and &#x27;and&#x27;.
// User implements: TextEval.
type CommaText struct {
	Do Activity `if:"label=_"`
}

func (*CommaText) Compose() composer.Spec {
	return composer.Spec{
		Name: CommaText_Type,
		Uses: composer.Type_Flow,
		Lede: "commas",
	}
}

const CommaText_Type = "comma_text"

const CommaText_Field_Do = "$DO"

func (op *CommaText) Marshal(m jsn.Marshaler) error {
	return CommaText_Marshal(m, op)
}

type CommaText_Slice []CommaText

func (op *CommaText_Slice) GetType() string { return CommaText_Type }
func (op *CommaText_Slice) GetSize() int    { return len(*op) }
func (op *CommaText_Slice) SetSize(cnt int) { (*op) = make(CommaText_Slice, cnt) }

func CommaText_Repeats_Marshal(m jsn.Marshaler, vals *[]CommaText) (err error) {
	if err = m.MarshalBlock((*CommaText_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CommaText_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CommaText_Optional_Marshal(m jsn.Marshaler, pv **CommaText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CommaText_Marshal(m, *pv)
	} else if !enc {
		var v CommaText
		if err = CommaText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CommaText_Marshal(m jsn.Marshaler, val *CommaText) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("commas", CommaText_Type, val)); err == nil {
		e0 := m.MarshalKey("", CommaText_Field_Do)
		if e0 == nil {
			e0 = Activity_Marshal(m, &val.Do)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CommaText_Field_Do))
		}
		m.EndBlock()
	}
	return
}

const Comparator_Type = "comparator"

var Comparator_Optional_Marshal = Comparator_Marshal

type Comparator_Slot struct{ ptr *Comparator }

func (At Comparator_Slot) GetType() string              { return Comparator_Type }
func (at Comparator_Slot) GetSlot() (interface{}, bool) { return at.ptr, at.ptr != nil }
func (at Comparator_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(Comparator)
	return
}

func Comparator_Marshal(m jsn.Marshaler, ptr *Comparator) (err error) {
	if err = m.MarshalBlock(Comparator_Slot{ptr}); err == nil {
		if e := (*ptr).(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
			m.Error(e)
		}
		m.EndBlock()
	}
	return
}

type Comparator_Slice []Comparator

func (op *Comparator_Slice) GetType() string { return Comparator_Type }
func (op *Comparator_Slice) GetSize() int    { return len(*op) }
func (op *Comparator_Slice) SetSize(cnt int) { (*op) = make(Comparator_Slice, cnt) }

func Comparator_Repeats_Marshal(m jsn.Marshaler, vals *[]Comparator) (err error) {
	if err = m.MarshalBlock((*Comparator_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Comparator_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// CompareNum True if eq,ne,gt,lt,ge,le two numbers.
// User implements: BoolEval.
type CompareNum struct {
	A  rt.NumberEval `if:"label=_"`
	Is Comparator    `if:"label=is"`
	B  rt.NumberEval `if:"label=num"`
}

func (*CompareNum) Compose() composer.Spec {
	return composer.Spec{
		Name: CompareNum_Type,
		Uses: composer.Type_Flow,
		Lede: "cmp",
	}
}

const CompareNum_Type = "compare_num"

const CompareNum_Field_A = "$A"
const CompareNum_Field_Is = "$IS"
const CompareNum_Field_B = "$B"

func (op *CompareNum) Marshal(m jsn.Marshaler) error {
	return CompareNum_Marshal(m, op)
}

type CompareNum_Slice []CompareNum

func (op *CompareNum_Slice) GetType() string { return CompareNum_Type }
func (op *CompareNum_Slice) GetSize() int    { return len(*op) }
func (op *CompareNum_Slice) SetSize(cnt int) { (*op) = make(CompareNum_Slice, cnt) }

func CompareNum_Repeats_Marshal(m jsn.Marshaler, vals *[]CompareNum) (err error) {
	if err = m.MarshalBlock((*CompareNum_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CompareNum_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CompareNum_Optional_Marshal(m jsn.Marshaler, pv **CompareNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CompareNum_Marshal(m, *pv)
	} else if !enc {
		var v CompareNum
		if err = CompareNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CompareNum_Marshal(m jsn.Marshaler, val *CompareNum) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("cmp", CompareNum_Type, val)); err == nil {
		e0 := m.MarshalKey("", CompareNum_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CompareNum_Field_A))
		}
		e1 := m.MarshalKey("is", CompareNum_Field_Is)
		if e1 == nil {
			e1 = Comparator_Marshal(m, &val.Is)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CompareNum_Field_Is))
		}
		e2 := m.MarshalKey("num", CompareNum_Field_B)
		if e2 == nil {
			e2 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CompareNum_Field_B))
		}
		m.EndBlock()
	}
	return
}

// CompareText True if eq,ne,gt,lt,ge,le two strings ( lexical. )
// User implements: BoolEval.
type CompareText struct {
	A  rt.TextEval `if:"label=_"`
	Is Comparator  `if:"label=is"`
	B  rt.TextEval `if:"label=txt"`
}

func (*CompareText) Compose() composer.Spec {
	return composer.Spec{
		Name: CompareText_Type,
		Uses: composer.Type_Flow,
		Lede: "cmp",
	}
}

const CompareText_Type = "compare_text"

const CompareText_Field_A = "$A"
const CompareText_Field_Is = "$IS"
const CompareText_Field_B = "$B"

func (op *CompareText) Marshal(m jsn.Marshaler) error {
	return CompareText_Marshal(m, op)
}

type CompareText_Slice []CompareText

func (op *CompareText_Slice) GetType() string { return CompareText_Type }
func (op *CompareText_Slice) GetSize() int    { return len(*op) }
func (op *CompareText_Slice) SetSize(cnt int) { (*op) = make(CompareText_Slice, cnt) }

func CompareText_Repeats_Marshal(m jsn.Marshaler, vals *[]CompareText) (err error) {
	if err = m.MarshalBlock((*CompareText_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := CompareText_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func CompareText_Optional_Marshal(m jsn.Marshaler, pv **CompareText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CompareText_Marshal(m, *pv)
	} else if !enc {
		var v CompareText
		if err = CompareText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CompareText_Marshal(m jsn.Marshaler, val *CompareText) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("cmp", CompareText_Type, val)); err == nil {
		e0 := m.MarshalKey("", CompareText_Field_A)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CompareText_Field_A))
		}
		e1 := m.MarshalKey("is", CompareText_Field_Is)
		if e1 == nil {
			e1 = Comparator_Marshal(m, &val.Is)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CompareText_Field_Is))
		}
		e2 := m.MarshalKey("txt", CompareText_Field_B)
		if e2 == nil {
			e2 = rt.TextEval_Marshal(m, &val.B)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CompareText_Field_B))
		}
		m.EndBlock()
	}
	return
}

// DiffOf Subtract two numbers.
// User implements: NumberEval.
type DiffOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by,optional"`
}

func (*DiffOf) Compose() composer.Spec {
	return composer.Spec{
		Name: DiffOf_Type,
		Uses: composer.Type_Flow,
		Lede: "dec",
	}
}

const DiffOf_Type = "diff_of"

const DiffOf_Field_A = "$A"
const DiffOf_Field_B = "$B"

func (op *DiffOf) Marshal(m jsn.Marshaler) error {
	return DiffOf_Marshal(m, op)
}

type DiffOf_Slice []DiffOf

func (op *DiffOf_Slice) GetType() string { return DiffOf_Type }
func (op *DiffOf_Slice) GetSize() int    { return len(*op) }
func (op *DiffOf_Slice) SetSize(cnt int) { (*op) = make(DiffOf_Slice, cnt) }

func DiffOf_Repeats_Marshal(m jsn.Marshaler, vals *[]DiffOf) (err error) {
	if err = m.MarshalBlock((*DiffOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := DiffOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func DiffOf_Optional_Marshal(m jsn.Marshaler, pv **DiffOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DiffOf_Marshal(m, *pv)
	} else if !enc {
		var v DiffOf
		if err = DiffOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DiffOf_Marshal(m jsn.Marshaler, val *DiffOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("dec", DiffOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", DiffOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DiffOf_Field_A))
		}
		e1 := m.MarshalKey("by", DiffOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Optional_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DiffOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

// During Decide whether a pattern is running.
// User implements: BoolEval, NumberEval.
type During struct {
	Pattern value.PatternName `if:"label=_"`
}

func (*During) Compose() composer.Spec {
	return composer.Spec{
		Name: During_Type,
		Uses: composer.Type_Flow,
	}
}

const During_Type = "during"

const During_Field_Pattern = "$PATTERN"

func (op *During) Marshal(m jsn.Marshaler) error {
	return During_Marshal(m, op)
}

type During_Slice []During

func (op *During_Slice) GetType() string { return During_Type }
func (op *During_Slice) GetSize() int    { return len(*op) }
func (op *During_Slice) SetSize(cnt int) { (*op) = make(During_Slice, cnt) }

func During_Repeats_Marshal(m jsn.Marshaler, vals *[]During) (err error) {
	if err = m.MarshalBlock((*During_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := During_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func During_Optional_Marshal(m jsn.Marshaler, pv **During) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = During_Marshal(m, *pv)
	} else if !enc {
		var v During
		if err = During_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func During_Marshal(m jsn.Marshaler, val *During) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(During_Type, During_Type, val)); err == nil {
		e0 := m.MarshalKey("", During_Field_Pattern)
		if e0 == nil {
			e0 = value.PatternName_Marshal(m, &val.Pattern)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", During_Field_Pattern))
		}
		m.EndBlock()
	}
	return
}

// Equal Two values exactly match.
// User implements: Comparator.
type Equal struct {
}

func (*Equal) Compose() composer.Spec {
	return composer.Spec{
		Name: Equal_Type,
		Uses: composer.Type_Flow,
		Lede: "equals",
	}
}

const Equal_Type = "equal"

func (op *Equal) Marshal(m jsn.Marshaler) error {
	return Equal_Marshal(m, op)
}

type Equal_Slice []Equal

func (op *Equal_Slice) GetType() string { return Equal_Type }
func (op *Equal_Slice) GetSize() int    { return len(*op) }
func (op *Equal_Slice) SetSize(cnt int) { (*op) = make(Equal_Slice, cnt) }

func Equal_Repeats_Marshal(m jsn.Marshaler, vals *[]Equal) (err error) {
	if err = m.MarshalBlock((*Equal_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Equal_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Equal_Optional_Marshal(m jsn.Marshaler, pv **Equal) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Equal_Marshal(m, *pv)
	} else if !enc {
		var v Equal
		if err = Equal_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Equal_Marshal(m jsn.Marshaler, val *Equal) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("equals", Equal_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// FromBool Assigns the calculated boolean value.
// User implements: Assignment.
type FromBool struct {
	Val rt.BoolEval `if:"label=_"`
}

func (*FromBool) Compose() composer.Spec {
	return composer.Spec{
		Name: FromBool_Type,
		Uses: composer.Type_Flow,
	}
}

const FromBool_Type = "from_bool"

const FromBool_Field_Val = "$VAL"

func (op *FromBool) Marshal(m jsn.Marshaler) error {
	return FromBool_Marshal(m, op)
}

type FromBool_Slice []FromBool

func (op *FromBool_Slice) GetType() string { return FromBool_Type }
func (op *FromBool_Slice) GetSize() int    { return len(*op) }
func (op *FromBool_Slice) SetSize(cnt int) { (*op) = make(FromBool_Slice, cnt) }

func FromBool_Repeats_Marshal(m jsn.Marshaler, vals *[]FromBool) (err error) {
	if err = m.MarshalBlock((*FromBool_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromBool_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromBool_Optional_Marshal(m jsn.Marshaler, pv **FromBool) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromBool_Marshal(m, *pv)
	} else if !enc {
		var v FromBool
		if err = FromBool_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromBool_Marshal(m jsn.Marshaler, val *FromBool) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(FromBool_Type, FromBool_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromBool_Field_Val)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromBool_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromNum Assigns the calculated number.
// User implements: Assignment.
type FromNum struct {
	Val rt.NumberEval `if:"label=_"`
}

func (*FromNum) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNum_Type,
		Uses: composer.Type_Flow,
	}
}

const FromNum_Type = "from_num"

const FromNum_Field_Val = "$VAL"

func (op *FromNum) Marshal(m jsn.Marshaler) error {
	return FromNum_Marshal(m, op)
}

type FromNum_Slice []FromNum

func (op *FromNum_Slice) GetType() string { return FromNum_Type }
func (op *FromNum_Slice) GetSize() int    { return len(*op) }
func (op *FromNum_Slice) SetSize(cnt int) { (*op) = make(FromNum_Slice, cnt) }

func FromNum_Repeats_Marshal(m jsn.Marshaler, vals *[]FromNum) (err error) {
	if err = m.MarshalBlock((*FromNum_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromNum_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromNum_Optional_Marshal(m jsn.Marshaler, pv **FromNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromNum_Marshal(m, *pv)
	} else if !enc {
		var v FromNum
		if err = FromNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromNum_Marshal(m jsn.Marshaler, val *FromNum) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(FromNum_Type, FromNum_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromNum_Field_Val)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromNum_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromNumbers Assigns the calculated numbers.
// User implements: Assignment.
type FromNumbers struct {
	Vals rt.NumListEval `if:"label=_"`
}

func (*FromNumbers) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNumbers_Type,
		Uses: composer.Type_Flow,
		Lede: "from_nums",
	}
}

const FromNumbers_Type = "from_numbers"

const FromNumbers_Field_Vals = "$VALS"

func (op *FromNumbers) Marshal(m jsn.Marshaler) error {
	return FromNumbers_Marshal(m, op)
}

type FromNumbers_Slice []FromNumbers

func (op *FromNumbers_Slice) GetType() string { return FromNumbers_Type }
func (op *FromNumbers_Slice) GetSize() int    { return len(*op) }
func (op *FromNumbers_Slice) SetSize(cnt int) { (*op) = make(FromNumbers_Slice, cnt) }

func FromNumbers_Repeats_Marshal(m jsn.Marshaler, vals *[]FromNumbers) (err error) {
	if err = m.MarshalBlock((*FromNumbers_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromNumbers_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromNumbers_Optional_Marshal(m jsn.Marshaler, pv **FromNumbers) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromNumbers_Marshal(m, *pv)
	} else if !enc {
		var v FromNumbers
		if err = FromNumbers_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromNumbers_Marshal(m jsn.Marshaler, val *FromNumbers) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("from_nums", FromNumbers_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromNumbers_Field_Vals)
		if e0 == nil {
			e0 = rt.NumListEval_Marshal(m, &val.Vals)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromNumbers_Field_Vals))
		}
		m.EndBlock()
	}
	return
}

// FromObj Targets an object with a computed name.
// User implements: FromSourceFields.
type FromObj struct {
	Object rt.TextEval `if:"label=_"`
}

func (*FromObj) Compose() composer.Spec {
	return composer.Spec{
		Name: FromObj_Type,
		Uses: composer.Type_Flow,
		Lede: "obj_fields",
	}
}

const FromObj_Type = "from_obj"

const FromObj_Field_Object = "$OBJECT"

func (op *FromObj) Marshal(m jsn.Marshaler) error {
	return FromObj_Marshal(m, op)
}

type FromObj_Slice []FromObj

func (op *FromObj_Slice) GetType() string { return FromObj_Type }
func (op *FromObj_Slice) GetSize() int    { return len(*op) }
func (op *FromObj_Slice) SetSize(cnt int) { (*op) = make(FromObj_Slice, cnt) }

func FromObj_Repeats_Marshal(m jsn.Marshaler, vals *[]FromObj) (err error) {
	if err = m.MarshalBlock((*FromObj_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromObj_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromObj_Optional_Marshal(m jsn.Marshaler, pv **FromObj) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromObj_Marshal(m, *pv)
	} else if !enc {
		var v FromObj
		if err = FromObj_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromObj_Marshal(m jsn.Marshaler, val *FromObj) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("obj_fields", FromObj_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromObj_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromObj_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// FromRec Targets a record stored in a record.
// User implements: FromSourceFields.
type FromRec struct {
	Rec rt.RecordEval `if:"label=_"`
}

func (*FromRec) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRec_Type,
		Uses: composer.Type_Flow,
		Lede: "rec_fields",
	}
}

const FromRec_Type = "from_rec"

const FromRec_Field_Rec = "$REC"

func (op *FromRec) Marshal(m jsn.Marshaler) error {
	return FromRec_Marshal(m, op)
}

type FromRec_Slice []FromRec

func (op *FromRec_Slice) GetType() string { return FromRec_Type }
func (op *FromRec_Slice) GetSize() int    { return len(*op) }
func (op *FromRec_Slice) SetSize(cnt int) { (*op) = make(FromRec_Slice, cnt) }

func FromRec_Repeats_Marshal(m jsn.Marshaler, vals *[]FromRec) (err error) {
	if err = m.MarshalBlock((*FromRec_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromRec_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromRec_Optional_Marshal(m jsn.Marshaler, pv **FromRec) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromRec_Marshal(m, *pv)
	} else if !enc {
		var v FromRec
		if err = FromRec_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromRec_Marshal(m jsn.Marshaler, val *FromRec) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("rec_fields", FromRec_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromRec_Field_Rec)
		if e0 == nil {
			e0 = rt.RecordEval_Marshal(m, &val.Rec)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromRec_Field_Rec))
		}
		m.EndBlock()
	}
	return
}

// FromRecord Assigns the calculated record.
// User implements: Assignment.
type FromRecord struct {
	Val rt.RecordEval `if:"label=_"`
}

func (*FromRecord) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecord_Type,
		Uses: composer.Type_Flow,
		Lede: "from_rec",
	}
}

const FromRecord_Type = "from_record"

const FromRecord_Field_Val = "$VAL"

func (op *FromRecord) Marshal(m jsn.Marshaler) error {
	return FromRecord_Marshal(m, op)
}

type FromRecord_Slice []FromRecord

func (op *FromRecord_Slice) GetType() string { return FromRecord_Type }
func (op *FromRecord_Slice) GetSize() int    { return len(*op) }
func (op *FromRecord_Slice) SetSize(cnt int) { (*op) = make(FromRecord_Slice, cnt) }

func FromRecord_Repeats_Marshal(m jsn.Marshaler, vals *[]FromRecord) (err error) {
	if err = m.MarshalBlock((*FromRecord_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromRecord_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromRecord_Optional_Marshal(m jsn.Marshaler, pv **FromRecord) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromRecord_Marshal(m, *pv)
	} else if !enc {
		var v FromRecord
		if err = FromRecord_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromRecord_Marshal(m jsn.Marshaler, val *FromRecord) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("from_rec", FromRecord_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromRecord_Field_Val)
		if e0 == nil {
			e0 = rt.RecordEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromRecord_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromRecords Assigns the calculated records.
// User implements: Assignment.
type FromRecords struct {
	Vals rt.RecordListEval `if:"label=_"`
}

func (*FromRecords) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecords_Type,
		Uses: composer.Type_Flow,
		Lede: "from_recs",
	}
}

const FromRecords_Type = "from_records"

const FromRecords_Field_Vals = "$VALS"

func (op *FromRecords) Marshal(m jsn.Marshaler) error {
	return FromRecords_Marshal(m, op)
}

type FromRecords_Slice []FromRecords

func (op *FromRecords_Slice) GetType() string { return FromRecords_Type }
func (op *FromRecords_Slice) GetSize() int    { return len(*op) }
func (op *FromRecords_Slice) SetSize(cnt int) { (*op) = make(FromRecords_Slice, cnt) }

func FromRecords_Repeats_Marshal(m jsn.Marshaler, vals *[]FromRecords) (err error) {
	if err = m.MarshalBlock((*FromRecords_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromRecords_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromRecords_Optional_Marshal(m jsn.Marshaler, pv **FromRecords) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromRecords_Marshal(m, *pv)
	} else if !enc {
		var v FromRecords
		if err = FromRecords_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromRecords_Marshal(m jsn.Marshaler, val *FromRecords) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("from_recs", FromRecords_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromRecords_Field_Vals)
		if e0 == nil {
			e0 = rt.RecordListEval_Marshal(m, &val.Vals)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromRecords_Field_Vals))
		}
		m.EndBlock()
	}
	return
}

const FromSourceFields_Type = "from_source_fields"

var FromSourceFields_Optional_Marshal = FromSourceFields_Marshal

type FromSourceFields_Slot struct{ ptr *FromSourceFields }

func (At FromSourceFields_Slot) GetType() string              { return FromSourceFields_Type }
func (at FromSourceFields_Slot) GetSlot() (interface{}, bool) { return at.ptr, at.ptr != nil }
func (at FromSourceFields_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(FromSourceFields)
	return
}

func FromSourceFields_Marshal(m jsn.Marshaler, ptr *FromSourceFields) (err error) {
	if err = m.MarshalBlock(FromSourceFields_Slot{ptr}); err == nil {
		if e := (*ptr).(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
			m.Error(e)
		}
		m.EndBlock()
	}
	return
}

type FromSourceFields_Slice []FromSourceFields

func (op *FromSourceFields_Slice) GetType() string { return FromSourceFields_Type }
func (op *FromSourceFields_Slice) GetSize() int    { return len(*op) }
func (op *FromSourceFields_Slice) SetSize(cnt int) { (*op) = make(FromSourceFields_Slice, cnt) }

func FromSourceFields_Repeats_Marshal(m jsn.Marshaler, vals *[]FromSourceFields) (err error) {
	if err = m.MarshalBlock((*FromSourceFields_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromSourceFields_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// FromText Assigns the calculated piece of text.
// User implements: Assignment.
type FromText struct {
	Val rt.TextEval `if:"label=_"`
}

func (*FromText) Compose() composer.Spec {
	return composer.Spec{
		Name: FromText_Type,
		Uses: composer.Type_Flow,
		Lede: "from_txt",
	}
}

const FromText_Type = "from_text"

const FromText_Field_Val = "$VAL"

func (op *FromText) Marshal(m jsn.Marshaler) error {
	return FromText_Marshal(m, op)
}

type FromText_Slice []FromText

func (op *FromText_Slice) GetType() string { return FromText_Type }
func (op *FromText_Slice) GetSize() int    { return len(*op) }
func (op *FromText_Slice) SetSize(cnt int) { (*op) = make(FromText_Slice, cnt) }

func FromText_Repeats_Marshal(m jsn.Marshaler, vals *[]FromText) (err error) {
	if err = m.MarshalBlock((*FromText_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromText_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromText_Optional_Marshal(m jsn.Marshaler, pv **FromText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromText_Marshal(m, *pv)
	} else if !enc {
		var v FromText
		if err = FromText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromText_Marshal(m jsn.Marshaler, val *FromText) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("from_txt", FromText_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromText_Field_Val)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromText_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromTexts Assigns the calculated texts.
// User implements: Assignment.
type FromTexts struct {
	Vals rt.TextListEval `if:"label=_"`
}

func (*FromTexts) Compose() composer.Spec {
	return composer.Spec{
		Name: FromTexts_Type,
		Uses: composer.Type_Flow,
		Lede: "from_txts",
	}
}

const FromTexts_Type = "from_texts"

const FromTexts_Field_Vals = "$VALS"

func (op *FromTexts) Marshal(m jsn.Marshaler) error {
	return FromTexts_Marshal(m, op)
}

type FromTexts_Slice []FromTexts

func (op *FromTexts_Slice) GetType() string { return FromTexts_Type }
func (op *FromTexts_Slice) GetSize() int    { return len(*op) }
func (op *FromTexts_Slice) SetSize(cnt int) { (*op) = make(FromTexts_Slice, cnt) }

func FromTexts_Repeats_Marshal(m jsn.Marshaler, vals *[]FromTexts) (err error) {
	if err = m.MarshalBlock((*FromTexts_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromTexts_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromTexts_Optional_Marshal(m jsn.Marshaler, pv **FromTexts) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromTexts_Marshal(m, *pv)
	} else if !enc {
		var v FromTexts
		if err = FromTexts_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromTexts_Marshal(m jsn.Marshaler, val *FromTexts) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("from_txts", FromTexts_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromTexts_Field_Vals)
		if e0 == nil {
			e0 = rt.TextListEval_Marshal(m, &val.Vals)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromTexts_Field_Vals))
		}
		m.EndBlock()
	}
	return
}

// FromVar Targets a record stored in a variable.
// User implements: FromSourceFields.
type FromVar struct {
	Var value.VariableName `if:"label=_"`
}

func (*FromVar) Compose() composer.Spec {
	return composer.Spec{
		Name: FromVar_Type,
		Uses: composer.Type_Flow,
		Lede: "var_fields",
	}
}

const FromVar_Type = "from_var"

const FromVar_Field_Var = "$VAR"

func (op *FromVar) Marshal(m jsn.Marshaler) error {
	return FromVar_Marshal(m, op)
}

type FromVar_Slice []FromVar

func (op *FromVar_Slice) GetType() string { return FromVar_Type }
func (op *FromVar_Slice) GetSize() int    { return len(*op) }
func (op *FromVar_Slice) SetSize(cnt int) { (*op) = make(FromVar_Slice, cnt) }

func FromVar_Repeats_Marshal(m jsn.Marshaler, vals *[]FromVar) (err error) {
	if err = m.MarshalBlock((*FromVar_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := FromVar_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func FromVar_Optional_Marshal(m jsn.Marshaler, pv **FromVar) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromVar_Marshal(m, *pv)
	} else if !enc {
		var v FromVar
		if err = FromVar_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromVar_Marshal(m jsn.Marshaler, val *FromVar) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("var_fields", FromVar_Type, val)); err == nil {
		e0 := m.MarshalKey("", FromVar_Field_Var)
		if e0 == nil {
			e0 = value.VariableName_Marshal(m, &val.Var)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromVar_Field_Var))
		}
		m.EndBlock()
	}
	return
}

// GetAtField Get a value from a record.
// User implements: Assignment, BoolEval, NumberEval, TextEval, RecordEval, NumListEval, TextListEval, RecordListEval.
type GetAtField struct {
	Field string           `if:"label=_,type=text"`
	From  FromSourceFields `if:"label=from"`
}

func (*GetAtField) Compose() composer.Spec {
	return composer.Spec{
		Name: GetAtField_Type,
		Uses: composer.Type_Flow,
		Lede: "get",
	}
}

const GetAtField_Type = "get_at_field"

const GetAtField_Field_Field = "$FIELD"
const GetAtField_Field_From = "$FROM"

func (op *GetAtField) Marshal(m jsn.Marshaler) error {
	return GetAtField_Marshal(m, op)
}

type GetAtField_Slice []GetAtField

func (op *GetAtField_Slice) GetType() string { return GetAtField_Type }
func (op *GetAtField_Slice) GetSize() int    { return len(*op) }
func (op *GetAtField_Slice) SetSize(cnt int) { (*op) = make(GetAtField_Slice, cnt) }

func GetAtField_Repeats_Marshal(m jsn.Marshaler, vals *[]GetAtField) (err error) {
	if err = m.MarshalBlock((*GetAtField_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := GetAtField_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func GetAtField_Optional_Marshal(m jsn.Marshaler, pv **GetAtField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = GetAtField_Marshal(m, *pv)
	} else if !enc {
		var v GetAtField
		if err = GetAtField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func GetAtField_Marshal(m jsn.Marshaler, val *GetAtField) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("get", GetAtField_Type, val)); err == nil {
		e0 := m.MarshalKey("", GetAtField_Field_Field)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Field)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", GetAtField_Field_Field))
		}
		e1 := m.MarshalKey("from", GetAtField_Field_From)
		if e1 == nil {
			e1 = FromSourceFields_Marshal(m, &val.From)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", GetAtField_Field_From))
		}
		m.EndBlock()
	}
	return
}

// GetVar Get Variable: Return the value of the named variable.
// User implements: Assignment, BoolEval, NumberEval, TextEval, RecordEval, NumListEval, TextListEval, RecordListEval.
type GetVar struct {
	Name value.VariableName `if:"label=_"`
}

func (*GetVar) Compose() composer.Spec {
	return composer.Spec{
		Name: GetVar_Type,
		Uses: composer.Type_Flow,
		Lede: "var",
	}
}

const GetVar_Type = "get_var"

const GetVar_Field_Name = "$NAME"

func (op *GetVar) Marshal(m jsn.Marshaler) error {
	return GetVar_Marshal(m, op)
}

type GetVar_Slice []GetVar

func (op *GetVar_Slice) GetType() string { return GetVar_Type }
func (op *GetVar_Slice) GetSize() int    { return len(*op) }
func (op *GetVar_Slice) SetSize(cnt int) { (*op) = make(GetVar_Slice, cnt) }

func GetVar_Repeats_Marshal(m jsn.Marshaler, vals *[]GetVar) (err error) {
	if err = m.MarshalBlock((*GetVar_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := GetVar_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func GetVar_Optional_Marshal(m jsn.Marshaler, pv **GetVar) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = GetVar_Marshal(m, *pv)
	} else if !enc {
		var v GetVar
		if err = GetVar_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func GetVar_Marshal(m jsn.Marshaler, val *GetVar) (err error) {
	if fn, ok := m.CustomizedMarshal(GetVar_Type); ok {
		err = fn(m, val)
	} else {
		err = GetVar_DefaultMarshal(m, val)
	}
	return
}
func GetVar_DefaultMarshal(m jsn.Marshaler, val *GetVar) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("var", GetVar_Type, val)); err == nil {
		e0 := m.MarshalKey("", GetVar_Field_Name)
		if e0 == nil {
			e0 = value.VariableName_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", GetVar_Field_Name))
		}
		m.EndBlock()
	}
	return
}

// GreaterThan The first value is larger than the second value.
// User implements: Comparator.
type GreaterThan struct {
}

func (*GreaterThan) Compose() composer.Spec {
	return composer.Spec{
		Name: GreaterThan_Type,
		Uses: composer.Type_Flow,
	}
}

const GreaterThan_Type = "greater_than"

func (op *GreaterThan) Marshal(m jsn.Marshaler) error {
	return GreaterThan_Marshal(m, op)
}

type GreaterThan_Slice []GreaterThan

func (op *GreaterThan_Slice) GetType() string { return GreaterThan_Type }
func (op *GreaterThan_Slice) GetSize() int    { return len(*op) }
func (op *GreaterThan_Slice) SetSize(cnt int) { (*op) = make(GreaterThan_Slice, cnt) }

func GreaterThan_Repeats_Marshal(m jsn.Marshaler, vals *[]GreaterThan) (err error) {
	if err = m.MarshalBlock((*GreaterThan_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := GreaterThan_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func GreaterThan_Optional_Marshal(m jsn.Marshaler, pv **GreaterThan) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = GreaterThan_Marshal(m, *pv)
	} else if !enc {
		var v GreaterThan
		if err = GreaterThan_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func GreaterThan_Marshal(m jsn.Marshaler, val *GreaterThan) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(GreaterThan_Type, GreaterThan_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// HasDominion
// User implements: BoolEval.
type HasDominion struct {
	Name string `if:"label=_,type=text"`
}

func (*HasDominion) Compose() composer.Spec {
	return composer.Spec{
		Name: HasDominion_Type,
		Uses: composer.Type_Flow,
	}
}

const HasDominion_Type = "has_dominion"

const HasDominion_Field_Name = "$NAME"

func (op *HasDominion) Marshal(m jsn.Marshaler) error {
	return HasDominion_Marshal(m, op)
}

type HasDominion_Slice []HasDominion

func (op *HasDominion_Slice) GetType() string { return HasDominion_Type }
func (op *HasDominion_Slice) GetSize() int    { return len(*op) }
func (op *HasDominion_Slice) SetSize(cnt int) { (*op) = make(HasDominion_Slice, cnt) }

func HasDominion_Repeats_Marshal(m jsn.Marshaler, vals *[]HasDominion) (err error) {
	if err = m.MarshalBlock((*HasDominion_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := HasDominion_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func HasDominion_Optional_Marshal(m jsn.Marshaler, pv **HasDominion) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = HasDominion_Marshal(m, *pv)
	} else if !enc {
		var v HasDominion
		if err = HasDominion_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func HasDominion_Marshal(m jsn.Marshaler, val *HasDominion) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(HasDominion_Type, HasDominion_Type, val)); err == nil {
		e0 := m.MarshalKey("", HasDominion_Field_Name)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", HasDominion_Field_Name))
		}
		m.EndBlock()
	}
	return
}

// HasTrait Return true if the object is currently in the requested state.
// User implements: BoolEval.
type HasTrait struct {
	Object rt.TextEval `if:"label=obj"`
	Trait  rt.TextEval `if:"label=trait"`
}

func (*HasTrait) Compose() composer.Spec {
	return composer.Spec{
		Name: HasTrait_Type,
		Uses: composer.Type_Flow,
		Lede: "get",
	}
}

const HasTrait_Type = "has_trait"

const HasTrait_Field_Object = "$OBJECT"
const HasTrait_Field_Trait = "$TRAIT"

func (op *HasTrait) Marshal(m jsn.Marshaler) error {
	return HasTrait_Marshal(m, op)
}

type HasTrait_Slice []HasTrait

func (op *HasTrait_Slice) GetType() string { return HasTrait_Type }
func (op *HasTrait_Slice) GetSize() int    { return len(*op) }
func (op *HasTrait_Slice) SetSize(cnt int) { (*op) = make(HasTrait_Slice, cnt) }

func HasTrait_Repeats_Marshal(m jsn.Marshaler, vals *[]HasTrait) (err error) {
	if err = m.MarshalBlock((*HasTrait_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := HasTrait_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func HasTrait_Optional_Marshal(m jsn.Marshaler, pv **HasTrait) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = HasTrait_Marshal(m, *pv)
	} else if !enc {
		var v HasTrait
		if err = HasTrait_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func HasTrait_Marshal(m jsn.Marshaler, val *HasTrait) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("get", HasTrait_Type, val)); err == nil {
		e0 := m.MarshalKey("obj", HasTrait_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", HasTrait_Field_Object))
		}
		e1 := m.MarshalKey("trait", HasTrait_Field_Trait)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Trait)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", HasTrait_Field_Trait))
		}
		m.EndBlock()
	}
	return
}

// IdOf A unique object identifier.
// User implements: TextEval.
type IdOf struct {
	Object rt.TextEval `if:"label=_"`
}

func (*IdOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IdOf_Type,
		Uses: composer.Type_Flow,
	}
}

const IdOf_Type = "id_of"

const IdOf_Field_Object = "$OBJECT"

func (op *IdOf) Marshal(m jsn.Marshaler) error {
	return IdOf_Marshal(m, op)
}

type IdOf_Slice []IdOf

func (op *IdOf_Slice) GetType() string { return IdOf_Type }
func (op *IdOf_Slice) GetSize() int    { return len(*op) }
func (op *IdOf_Slice) SetSize(cnt int) { (*op) = make(IdOf_Slice, cnt) }

func IdOf_Repeats_Marshal(m jsn.Marshaler, vals *[]IdOf) (err error) {
	if err = m.MarshalBlock((*IdOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := IdOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func IdOf_Optional_Marshal(m jsn.Marshaler, pv **IdOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IdOf_Marshal(m, *pv)
	} else if !enc {
		var v IdOf
		if err = IdOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IdOf_Marshal(m jsn.Marshaler, val *IdOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(IdOf_Type, IdOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", IdOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IdOf_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// Includes True if text contains text.
// User implements: BoolEval.
type Includes struct {
	Text rt.TextEval `if:"label=_"`
	Part rt.TextEval `if:"label=part"`
}

func (*Includes) Compose() composer.Spec {
	return composer.Spec{
		Name: Includes_Type,
		Uses: composer.Type_Flow,
		Lede: "contains",
	}
}

const Includes_Type = "includes"

const Includes_Field_Text = "$TEXT"
const Includes_Field_Part = "$PART"

func (op *Includes) Marshal(m jsn.Marshaler) error {
	return Includes_Marshal(m, op)
}

type Includes_Slice []Includes

func (op *Includes_Slice) GetType() string { return Includes_Type }
func (op *Includes_Slice) GetSize() int    { return len(*op) }
func (op *Includes_Slice) SetSize(cnt int) { (*op) = make(Includes_Slice, cnt) }

func Includes_Repeats_Marshal(m jsn.Marshaler, vals *[]Includes) (err error) {
	if err = m.MarshalBlock((*Includes_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Includes_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Includes_Optional_Marshal(m jsn.Marshaler, pv **Includes) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Includes_Marshal(m, *pv)
	} else if !enc {
		var v Includes
		if err = Includes_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Includes_Marshal(m jsn.Marshaler, val *Includes) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("contains", Includes_Type, val)); err == nil {
		e0 := m.MarshalKey("", Includes_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Includes_Field_Text))
		}
		e1 := m.MarshalKey("part", Includes_Field_Part)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Part)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Includes_Field_Part))
		}
		m.EndBlock()
	}
	return
}

// IntoObj Targets an object with a computed name.
// User implements: IntoTargetFields.
type IntoObj struct {
	Object rt.TextEval `if:"label=_"`
}

func (*IntoObj) Compose() composer.Spec {
	return composer.Spec{
		Name: IntoObj_Type,
		Uses: composer.Type_Flow,
		Lede: "obj_field",
	}
}

const IntoObj_Type = "into_obj"

const IntoObj_Field_Object = "$OBJECT"

func (op *IntoObj) Marshal(m jsn.Marshaler) error {
	return IntoObj_Marshal(m, op)
}

type IntoObj_Slice []IntoObj

func (op *IntoObj_Slice) GetType() string { return IntoObj_Type }
func (op *IntoObj_Slice) GetSize() int    { return len(*op) }
func (op *IntoObj_Slice) SetSize(cnt int) { (*op) = make(IntoObj_Slice, cnt) }

func IntoObj_Repeats_Marshal(m jsn.Marshaler, vals *[]IntoObj) (err error) {
	if err = m.MarshalBlock((*IntoObj_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := IntoObj_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func IntoObj_Optional_Marshal(m jsn.Marshaler, pv **IntoObj) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IntoObj_Marshal(m, *pv)
	} else if !enc {
		var v IntoObj
		if err = IntoObj_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IntoObj_Marshal(m jsn.Marshaler, val *IntoObj) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("obj_field", IntoObj_Type, val)); err == nil {
		e0 := m.MarshalKey("", IntoObj_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IntoObj_Field_Object))
		}
		m.EndBlock()
	}
	return
}

const IntoTargetFields_Type = "into_target_fields"

var IntoTargetFields_Optional_Marshal = IntoTargetFields_Marshal

type IntoTargetFields_Slot struct{ ptr *IntoTargetFields }

func (At IntoTargetFields_Slot) GetType() string              { return IntoTargetFields_Type }
func (at IntoTargetFields_Slot) GetSlot() (interface{}, bool) { return at.ptr, at.ptr != nil }
func (at IntoTargetFields_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(IntoTargetFields)
	return
}

func IntoTargetFields_Marshal(m jsn.Marshaler, ptr *IntoTargetFields) (err error) {
	if err = m.MarshalBlock(IntoTargetFields_Slot{ptr}); err == nil {
		if e := (*ptr).(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
			m.Error(e)
		}
		m.EndBlock()
	}
	return
}

type IntoTargetFields_Slice []IntoTargetFields

func (op *IntoTargetFields_Slice) GetType() string { return IntoTargetFields_Type }
func (op *IntoTargetFields_Slice) GetSize() int    { return len(*op) }
func (op *IntoTargetFields_Slice) SetSize(cnt int) { (*op) = make(IntoTargetFields_Slice, cnt) }

func IntoTargetFields_Repeats_Marshal(m jsn.Marshaler, vals *[]IntoTargetFields) (err error) {
	if err = m.MarshalBlock((*IntoTargetFields_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := IntoTargetFields_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// IntoVar Targets an object or record stored in a variable
// User implements: IntoTargetFields.
type IntoVar struct {
	Var value.VariableName `if:"label=_"`
}

func (*IntoVar) Compose() composer.Spec {
	return composer.Spec{
		Name: IntoVar_Type,
		Uses: composer.Type_Flow,
		Lede: "var_field",
	}
}

const IntoVar_Type = "into_var"

const IntoVar_Field_Var = "$VAR"

func (op *IntoVar) Marshal(m jsn.Marshaler) error {
	return IntoVar_Marshal(m, op)
}

type IntoVar_Slice []IntoVar

func (op *IntoVar_Slice) GetType() string { return IntoVar_Type }
func (op *IntoVar_Slice) GetSize() int    { return len(*op) }
func (op *IntoVar_Slice) SetSize(cnt int) { (*op) = make(IntoVar_Slice, cnt) }

func IntoVar_Repeats_Marshal(m jsn.Marshaler, vals *[]IntoVar) (err error) {
	if err = m.MarshalBlock((*IntoVar_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := IntoVar_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func IntoVar_Optional_Marshal(m jsn.Marshaler, pv **IntoVar) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IntoVar_Marshal(m, *pv)
	} else if !enc {
		var v IntoVar
		if err = IntoVar_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IntoVar_Marshal(m jsn.Marshaler, val *IntoVar) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("var_field", IntoVar_Type, val)); err == nil {
		e0 := m.MarshalKey("", IntoVar_Field_Var)
		if e0 == nil {
			e0 = value.VariableName_Marshal(m, &val.Var)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IntoVar_Field_Var))
		}
		m.EndBlock()
	}
	return
}

// IsEmpty True if the text is empty.
// User implements: BoolEval.
type IsEmpty struct {
	Text rt.TextEval `if:"label=empty"`
}

func (*IsEmpty) Compose() composer.Spec {
	return composer.Spec{
		Name: IsEmpty_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const IsEmpty_Type = "is_empty"

const IsEmpty_Field_Text = "$TEXT"

func (op *IsEmpty) Marshal(m jsn.Marshaler) error {
	return IsEmpty_Marshal(m, op)
}

type IsEmpty_Slice []IsEmpty

func (op *IsEmpty_Slice) GetType() string { return IsEmpty_Type }
func (op *IsEmpty_Slice) GetSize() int    { return len(*op) }
func (op *IsEmpty_Slice) SetSize(cnt int) { (*op) = make(IsEmpty_Slice, cnt) }

func IsEmpty_Repeats_Marshal(m jsn.Marshaler, vals *[]IsEmpty) (err error) {
	if err = m.MarshalBlock((*IsEmpty_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := IsEmpty_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func IsEmpty_Optional_Marshal(m jsn.Marshaler, pv **IsEmpty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IsEmpty_Marshal(m, *pv)
	} else if !enc {
		var v IsEmpty
		if err = IsEmpty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IsEmpty_Marshal(m jsn.Marshaler, val *IsEmpty) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("is", IsEmpty_Type, val)); err == nil {
		e0 := m.MarshalKey("empty", IsEmpty_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IsEmpty_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// IsExactKindOf True if the object is exactly the named kind.
// User implements: BoolEval.
type IsExactKindOf struct {
	Object rt.TextEval `if:"label=_"`
	Kind   string      `if:"label=is_exactly,type=text"`
}

func (*IsExactKindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IsExactKindOf_Type,
		Uses: composer.Type_Flow,
		Lede: "kind_of",
	}
}

const IsExactKindOf_Type = "is_exact_kind_of"

const IsExactKindOf_Field_Object = "$OBJECT"
const IsExactKindOf_Field_Kind = "$KIND"

func (op *IsExactKindOf) Marshal(m jsn.Marshaler) error {
	return IsExactKindOf_Marshal(m, op)
}

type IsExactKindOf_Slice []IsExactKindOf

func (op *IsExactKindOf_Slice) GetType() string { return IsExactKindOf_Type }
func (op *IsExactKindOf_Slice) GetSize() int    { return len(*op) }
func (op *IsExactKindOf_Slice) SetSize(cnt int) { (*op) = make(IsExactKindOf_Slice, cnt) }

func IsExactKindOf_Repeats_Marshal(m jsn.Marshaler, vals *[]IsExactKindOf) (err error) {
	if err = m.MarshalBlock((*IsExactKindOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := IsExactKindOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func IsExactKindOf_Optional_Marshal(m jsn.Marshaler, pv **IsExactKindOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IsExactKindOf_Marshal(m, *pv)
	} else if !enc {
		var v IsExactKindOf
		if err = IsExactKindOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IsExactKindOf_Marshal(m jsn.Marshaler, val *IsExactKindOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("kind_of", IsExactKindOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", IsExactKindOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IsExactKindOf_Field_Object))
		}
		e1 := m.MarshalKey("is_exactly", IsExactKindOf_Field_Kind)
		if e1 == nil {
			e1 = value.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", IsExactKindOf_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// IsKindOf True if the object is compatible with the named kind.
// User implements: BoolEval.
type IsKindOf struct {
	Object rt.TextEval `if:"label=_"`
	Kind   string      `if:"label=is,type=text"`
}

func (*IsKindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IsKindOf_Type,
		Uses: composer.Type_Flow,
		Lede: "kind_of",
	}
}

const IsKindOf_Type = "is_kind_of"

const IsKindOf_Field_Object = "$OBJECT"
const IsKindOf_Field_Kind = "$KIND"

func (op *IsKindOf) Marshal(m jsn.Marshaler) error {
	return IsKindOf_Marshal(m, op)
}

type IsKindOf_Slice []IsKindOf

func (op *IsKindOf_Slice) GetType() string { return IsKindOf_Type }
func (op *IsKindOf_Slice) GetSize() int    { return len(*op) }
func (op *IsKindOf_Slice) SetSize(cnt int) { (*op) = make(IsKindOf_Slice, cnt) }

func IsKindOf_Repeats_Marshal(m jsn.Marshaler, vals *[]IsKindOf) (err error) {
	if err = m.MarshalBlock((*IsKindOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := IsKindOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func IsKindOf_Optional_Marshal(m jsn.Marshaler, pv **IsKindOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IsKindOf_Marshal(m, *pv)
	} else if !enc {
		var v IsKindOf
		if err = IsKindOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IsKindOf_Marshal(m jsn.Marshaler, val *IsKindOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("kind_of", IsKindOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", IsKindOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IsKindOf_Field_Object))
		}
		e1 := m.MarshalKey("is", IsKindOf_Field_Kind)
		if e1 == nil {
			e1 = value.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", IsKindOf_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// Join Returns multiple pieces of text as a single new piece of text.
// User implements: TextEval.
type Join struct {
	Sep   rt.TextEval   `if:"label=_"`
	Parts []rt.TextEval `if:"label=parts"`
}

func (*Join) Compose() composer.Spec {
	return composer.Spec{
		Name: Join_Type,
		Uses: composer.Type_Flow,
	}
}

const Join_Type = "join"

const Join_Field_Sep = "$SEP"
const Join_Field_Parts = "$PARTS"

func (op *Join) Marshal(m jsn.Marshaler) error {
	return Join_Marshal(m, op)
}

type Join_Slice []Join

func (op *Join_Slice) GetType() string { return Join_Type }
func (op *Join_Slice) GetSize() int    { return len(*op) }
func (op *Join_Slice) SetSize(cnt int) { (*op) = make(Join_Slice, cnt) }

func Join_Repeats_Marshal(m jsn.Marshaler, vals *[]Join) (err error) {
	if err = m.MarshalBlock((*Join_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Join_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Join_Optional_Marshal(m jsn.Marshaler, pv **Join) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Join_Marshal(m, *pv)
	} else if !enc {
		var v Join
		if err = Join_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Join_Marshal(m jsn.Marshaler, val *Join) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Join_Type, Join_Type, val)); err == nil {
		e0 := m.MarshalKey("", Join_Field_Sep)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Sep)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Join_Field_Sep))
		}
		e1 := m.MarshalKey("parts", Join_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Join_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// KindOf Friendly name of the object&#x27;s kind.
// User implements: TextEval.
type KindOf struct {
	Object rt.TextEval `if:"label=_"`
}

func (*KindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: KindOf_Type,
		Uses: composer.Type_Flow,
	}
}

const KindOf_Type = "kind_of"

const KindOf_Field_Object = "$OBJECT"

func (op *KindOf) Marshal(m jsn.Marshaler) error {
	return KindOf_Marshal(m, op)
}

type KindOf_Slice []KindOf

func (op *KindOf_Slice) GetType() string { return KindOf_Type }
func (op *KindOf_Slice) GetSize() int    { return len(*op) }
func (op *KindOf_Slice) SetSize(cnt int) { (*op) = make(KindOf_Slice, cnt) }

func KindOf_Repeats_Marshal(m jsn.Marshaler, vals *[]KindOf) (err error) {
	if err = m.MarshalBlock((*KindOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := KindOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func KindOf_Optional_Marshal(m jsn.Marshaler, pv **KindOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindOf_Marshal(m, *pv)
	} else if !enc {
		var v KindOf
		if err = KindOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindOf_Marshal(m jsn.Marshaler, val *KindOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(KindOf_Type, KindOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", KindOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindOf_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// KindsOf A list of compatible kinds.
// User implements: TextListEval.
type KindsOf struct {
	Kind string `if:"label=_,type=text"`
}

func (*KindsOf) Compose() composer.Spec {
	return composer.Spec{
		Name: KindsOf_Type,
		Uses: composer.Type_Flow,
	}
}

const KindsOf_Type = "kinds_of"

const KindsOf_Field_Kind = "$KIND"

func (op *KindsOf) Marshal(m jsn.Marshaler) error {
	return KindsOf_Marshal(m, op)
}

type KindsOf_Slice []KindsOf

func (op *KindsOf_Slice) GetType() string { return KindsOf_Type }
func (op *KindsOf_Slice) GetSize() int    { return len(*op) }
func (op *KindsOf_Slice) SetSize(cnt int) { (*op) = make(KindsOf_Slice, cnt) }

func KindsOf_Repeats_Marshal(m jsn.Marshaler, vals *[]KindsOf) (err error) {
	if err = m.MarshalBlock((*KindsOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := KindsOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func KindsOf_Optional_Marshal(m jsn.Marshaler, pv **KindsOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindsOf_Marshal(m, *pv)
	} else if !enc {
		var v KindsOf
		if err = KindsOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindsOf_Marshal(m jsn.Marshaler, val *KindsOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(KindsOf_Type, KindsOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", KindsOf_Field_Kind)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindsOf_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// LessThan The first value is less than the second value.
// User implements: Comparator.
type LessThan struct {
}

func (*LessThan) Compose() composer.Spec {
	return composer.Spec{
		Name: LessThan_Type,
		Uses: composer.Type_Flow,
	}
}

const LessThan_Type = "less_than"

func (op *LessThan) Marshal(m jsn.Marshaler) error {
	return LessThan_Marshal(m, op)
}

type LessThan_Slice []LessThan

func (op *LessThan_Slice) GetType() string { return LessThan_Type }
func (op *LessThan_Slice) GetSize() int    { return len(*op) }
func (op *LessThan_Slice) SetSize(cnt int) { (*op) = make(LessThan_Slice, cnt) }

func LessThan_Repeats_Marshal(m jsn.Marshaler, vals *[]LessThan) (err error) {
	if err = m.MarshalBlock((*LessThan_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := LessThan_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func LessThan_Optional_Marshal(m jsn.Marshaler, pv **LessThan) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = LessThan_Marshal(m, *pv)
	} else if !enc {
		var v LessThan
		if err = LessThan_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func LessThan_Marshal(m jsn.Marshaler, val *LessThan) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(LessThan_Type, LessThan_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// MakeLowercase Returns new text, with every letter turned into lowercase. For example, &#x27;shout&#x27; from &#x27;SHOUT&#x27;.
// User implements: TextEval.
type MakeLowercase struct {
	Text rt.TextEval `if:"label=_"`
}

func (*MakeLowercase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeLowercase_Type,
		Uses: composer.Type_Flow,
		Lede: "lower",
	}
}

const MakeLowercase_Type = "make_lowercase"

const MakeLowercase_Field_Text = "$TEXT"

func (op *MakeLowercase) Marshal(m jsn.Marshaler) error {
	return MakeLowercase_Marshal(m, op)
}

type MakeLowercase_Slice []MakeLowercase

func (op *MakeLowercase_Slice) GetType() string { return MakeLowercase_Type }
func (op *MakeLowercase_Slice) GetSize() int    { return len(*op) }
func (op *MakeLowercase_Slice) SetSize(cnt int) { (*op) = make(MakeLowercase_Slice, cnt) }

func MakeLowercase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeLowercase) (err error) {
	if err = m.MarshalBlock((*MakeLowercase_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := MakeLowercase_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func MakeLowercase_Optional_Marshal(m jsn.Marshaler, pv **MakeLowercase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeLowercase_Marshal(m, *pv)
	} else if !enc {
		var v MakeLowercase
		if err = MakeLowercase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeLowercase_Marshal(m jsn.Marshaler, val *MakeLowercase) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("lower", MakeLowercase_Type, val)); err == nil {
		e0 := m.MarshalKey("", MakeLowercase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeLowercase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeReversed Returns new text flipped back to front. For example, &#x27;elppA&#x27; from &#x27;Apple&#x27;, or &#x27;noon&#x27; from &#x27;noon&#x27;.
// User implements: TextEval.
type MakeReversed struct {
	Text rt.TextEval `if:"label=text"`
}

func (*MakeReversed) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeReversed_Type,
		Uses: composer.Type_Flow,
		Lede: "reverse",
	}
}

const MakeReversed_Type = "make_reversed"

const MakeReversed_Field_Text = "$TEXT"

func (op *MakeReversed) Marshal(m jsn.Marshaler) error {
	return MakeReversed_Marshal(m, op)
}

type MakeReversed_Slice []MakeReversed

func (op *MakeReversed_Slice) GetType() string { return MakeReversed_Type }
func (op *MakeReversed_Slice) GetSize() int    { return len(*op) }
func (op *MakeReversed_Slice) SetSize(cnt int) { (*op) = make(MakeReversed_Slice, cnt) }

func MakeReversed_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeReversed) (err error) {
	if err = m.MarshalBlock((*MakeReversed_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := MakeReversed_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func MakeReversed_Optional_Marshal(m jsn.Marshaler, pv **MakeReversed) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeReversed_Marshal(m, *pv)
	} else if !enc {
		var v MakeReversed
		if err = MakeReversed_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeReversed_Marshal(m jsn.Marshaler, val *MakeReversed) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("reverse", MakeReversed_Type, val)); err == nil {
		e0 := m.MarshalKey("text", MakeReversed_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeReversed_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeSentenceCase Returns new text, start each sentence with a capital letter. For example, &#x27;Empire Apple.&#x27; from &#x27;Empire apple.&#x27;.
// User implements: TextEval.
type MakeSentenceCase struct {
	Text rt.TextEval `if:"label=_"`
}

func (*MakeSentenceCase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeSentenceCase_Type,
		Uses: composer.Type_Flow,
		Lede: "sentence",
	}
}

const MakeSentenceCase_Type = "make_sentence_case"

const MakeSentenceCase_Field_Text = "$TEXT"

func (op *MakeSentenceCase) Marshal(m jsn.Marshaler) error {
	return MakeSentenceCase_Marshal(m, op)
}

type MakeSentenceCase_Slice []MakeSentenceCase

func (op *MakeSentenceCase_Slice) GetType() string { return MakeSentenceCase_Type }
func (op *MakeSentenceCase_Slice) GetSize() int    { return len(*op) }
func (op *MakeSentenceCase_Slice) SetSize(cnt int) { (*op) = make(MakeSentenceCase_Slice, cnt) }

func MakeSentenceCase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeSentenceCase) (err error) {
	if err = m.MarshalBlock((*MakeSentenceCase_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := MakeSentenceCase_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func MakeSentenceCase_Optional_Marshal(m jsn.Marshaler, pv **MakeSentenceCase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeSentenceCase_Marshal(m, *pv)
	} else if !enc {
		var v MakeSentenceCase
		if err = MakeSentenceCase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeSentenceCase_Marshal(m jsn.Marshaler, val *MakeSentenceCase) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("sentence", MakeSentenceCase_Type, val)); err == nil {
		e0 := m.MarshalKey("", MakeSentenceCase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeSentenceCase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeTitleCase Returns new text, starting each word with a capital letter. For example, &#x27;Empire Apple&#x27; from &#x27;empire apple&#x27;.
// User implements: TextEval.
type MakeTitleCase struct {
	Text rt.TextEval `if:"label=_"`
}

func (*MakeTitleCase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeTitleCase_Type,
		Uses: composer.Type_Flow,
		Lede: "title",
	}
}

const MakeTitleCase_Type = "make_title_case"

const MakeTitleCase_Field_Text = "$TEXT"

func (op *MakeTitleCase) Marshal(m jsn.Marshaler) error {
	return MakeTitleCase_Marshal(m, op)
}

type MakeTitleCase_Slice []MakeTitleCase

func (op *MakeTitleCase_Slice) GetType() string { return MakeTitleCase_Type }
func (op *MakeTitleCase_Slice) GetSize() int    { return len(*op) }
func (op *MakeTitleCase_Slice) SetSize(cnt int) { (*op) = make(MakeTitleCase_Slice, cnt) }

func MakeTitleCase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeTitleCase) (err error) {
	if err = m.MarshalBlock((*MakeTitleCase_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := MakeTitleCase_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func MakeTitleCase_Optional_Marshal(m jsn.Marshaler, pv **MakeTitleCase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeTitleCase_Marshal(m, *pv)
	} else if !enc {
		var v MakeTitleCase
		if err = MakeTitleCase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeTitleCase_Marshal(m jsn.Marshaler, val *MakeTitleCase) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("title", MakeTitleCase_Type, val)); err == nil {
		e0 := m.MarshalKey("", MakeTitleCase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeTitleCase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeUppercase Returns new text, with every letter turned into uppercase. For example, &#x27;APPLE&#x27; from &#x27;apple&#x27;.
// User implements: TextEval.
type MakeUppercase struct {
	Text rt.TextEval `if:"label=_"`
}

func (*MakeUppercase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeUppercase_Type,
		Uses: composer.Type_Flow,
		Lede: "upper",
	}
}

const MakeUppercase_Type = "make_uppercase"

const MakeUppercase_Field_Text = "$TEXT"

func (op *MakeUppercase) Marshal(m jsn.Marshaler) error {
	return MakeUppercase_Marshal(m, op)
}

type MakeUppercase_Slice []MakeUppercase

func (op *MakeUppercase_Slice) GetType() string { return MakeUppercase_Type }
func (op *MakeUppercase_Slice) GetSize() int    { return len(*op) }
func (op *MakeUppercase_Slice) SetSize(cnt int) { (*op) = make(MakeUppercase_Slice, cnt) }

func MakeUppercase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeUppercase) (err error) {
	if err = m.MarshalBlock((*MakeUppercase_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := MakeUppercase_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func MakeUppercase_Optional_Marshal(m jsn.Marshaler, pv **MakeUppercase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeUppercase_Marshal(m, *pv)
	} else if !enc {
		var v MakeUppercase
		if err = MakeUppercase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeUppercase_Marshal(m jsn.Marshaler, val *MakeUppercase) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("upper", MakeUppercase_Type, val)); err == nil {
		e0 := m.MarshalKey("", MakeUppercase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeUppercase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// Matches Determine whether the specified text is similar to the specified regular expression.
// User implements: BoolEval.
type Matches struct {
	Text    rt.TextEval `if:"label=_"`
	Pattern string      `if:"label=to,type=text"`
	Cache   MatchCache  `if:"internal"`
}

func (*Matches) Compose() composer.Spec {
	return composer.Spec{
		Name: Matches_Type,
		Uses: composer.Type_Flow,
	}
}

const Matches_Type = "matches"

const Matches_Field_Text = "$TEXT"
const Matches_Field_Pattern = "$PATTERN"

func (op *Matches) Marshal(m jsn.Marshaler) error {
	return Matches_Marshal(m, op)
}

type Matches_Slice []Matches

func (op *Matches_Slice) GetType() string { return Matches_Type }
func (op *Matches_Slice) GetSize() int    { return len(*op) }
func (op *Matches_Slice) SetSize(cnt int) { (*op) = make(Matches_Slice, cnt) }

func Matches_Repeats_Marshal(m jsn.Marshaler, vals *[]Matches) (err error) {
	if err = m.MarshalBlock((*Matches_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Matches_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Matches_Optional_Marshal(m jsn.Marshaler, pv **Matches) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Matches_Marshal(m, *pv)
	} else if !enc {
		var v Matches
		if err = Matches_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Matches_Marshal(m jsn.Marshaler, val *Matches) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Matches_Type, Matches_Type, val)); err == nil {
		e0 := m.MarshalKey("", Matches_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Matches_Field_Text))
		}
		e1 := m.MarshalKey("to", Matches_Field_Pattern)
		if e1 == nil {
			e1 = value.Text_Unboxed_Marshal(m, &val.Pattern)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Matches_Field_Pattern))
		}
		m.EndBlock()
	}
	return
}

// NameOf Full name of the object.
// User implements: TextEval.
type NameOf struct {
	Object rt.TextEval `if:"label=_"`
}

func (*NameOf) Compose() composer.Spec {
	return composer.Spec{
		Name: NameOf_Type,
		Uses: composer.Type_Flow,
	}
}

const NameOf_Type = "name_of"

const NameOf_Field_Object = "$OBJECT"

func (op *NameOf) Marshal(m jsn.Marshaler) error {
	return NameOf_Marshal(m, op)
}

type NameOf_Slice []NameOf

func (op *NameOf_Slice) GetType() string { return NameOf_Type }
func (op *NameOf_Slice) GetSize() int    { return len(*op) }
func (op *NameOf_Slice) SetSize(cnt int) { (*op) = make(NameOf_Slice, cnt) }

func NameOf_Repeats_Marshal(m jsn.Marshaler, vals *[]NameOf) (err error) {
	if err = m.MarshalBlock((*NameOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := NameOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func NameOf_Optional_Marshal(m jsn.Marshaler, pv **NameOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NameOf_Marshal(m, *pv)
	} else if !enc {
		var v NameOf
		if err = NameOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NameOf_Marshal(m jsn.Marshaler, val *NameOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(NameOf_Type, NameOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", NameOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NameOf_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// Never Returns false.
// User implements: BoolEval.
type Never struct {
}

func (*Never) Compose() composer.Spec {
	return composer.Spec{
		Name: Never_Type,
		Uses: composer.Type_Flow,
	}
}

const Never_Type = "never"

func (op *Never) Marshal(m jsn.Marshaler) error {
	return Never_Marshal(m, op)
}

type Never_Slice []Never

func (op *Never_Slice) GetType() string { return Never_Type }
func (op *Never_Slice) GetSize() int    { return len(*op) }
func (op *Never_Slice) SetSize(cnt int) { (*op) = make(Never_Slice, cnt) }

func Never_Repeats_Marshal(m jsn.Marshaler, vals *[]Never) (err error) {
	if err = m.MarshalBlock((*Never_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Never_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Never_Optional_Marshal(m jsn.Marshaler, pv **Never) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Never_Marshal(m, *pv)
	} else if !enc {
		var v Never
		if err = Never_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Never_Marshal(m jsn.Marshaler, val *Never) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Never_Type, Never_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// Newline Start a new line.
// User implements: Execute.
type Newline struct {
}

func (*Newline) Compose() composer.Spec {
	return composer.Spec{
		Name: Newline_Type,
		Uses: composer.Type_Flow,
		Lede: "br",
	}
}

const Newline_Type = "newline"

func (op *Newline) Marshal(m jsn.Marshaler) error {
	return Newline_Marshal(m, op)
}

type Newline_Slice []Newline

func (op *Newline_Slice) GetType() string { return Newline_Type }
func (op *Newline_Slice) GetSize() int    { return len(*op) }
func (op *Newline_Slice) SetSize(cnt int) { (*op) = make(Newline_Slice, cnt) }

func Newline_Repeats_Marshal(m jsn.Marshaler, vals *[]Newline) (err error) {
	if err = m.MarshalBlock((*Newline_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Newline_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Newline_Optional_Marshal(m jsn.Marshaler, pv **Newline) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Newline_Marshal(m, *pv)
	} else if !enc {
		var v Newline
		if err = Newline_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Newline_Marshal(m jsn.Marshaler, val *Newline) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("br", Newline_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// Next In a repeating loop, try the next iteration of the loop.
// User implements: Execute.
type Next struct {
}

func (*Next) Compose() composer.Spec {
	return composer.Spec{
		Name: Next_Type,
		Uses: composer.Type_Flow,
	}
}

const Next_Type = "next"

func (op *Next) Marshal(m jsn.Marshaler) error {
	return Next_Marshal(m, op)
}

type Next_Slice []Next

func (op *Next_Slice) GetType() string { return Next_Type }
func (op *Next_Slice) GetSize() int    { return len(*op) }
func (op *Next_Slice) SetSize(cnt int) { (*op) = make(Next_Slice, cnt) }

func Next_Repeats_Marshal(m jsn.Marshaler, vals *[]Next) (err error) {
	if err = m.MarshalBlock((*Next_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Next_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Next_Optional_Marshal(m jsn.Marshaler, pv **Next) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Next_Marshal(m, *pv)
	} else if !enc {
		var v Next
		if err = Next_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Next_Marshal(m jsn.Marshaler, val *Next) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Next_Type, Next_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// Not Returns the opposite value.
// User implements: BoolEval.
type Not struct {
	Test rt.BoolEval `if:"label=_"`
}

func (*Not) Compose() composer.Spec {
	return composer.Spec{
		Name: Not_Type,
		Uses: composer.Type_Flow,
	}
}

const Not_Type = "not"

const Not_Field_Test = "$TEST"

func (op *Not) Marshal(m jsn.Marshaler) error {
	return Not_Marshal(m, op)
}

type Not_Slice []Not

func (op *Not_Slice) GetType() string { return Not_Type }
func (op *Not_Slice) GetSize() int    { return len(*op) }
func (op *Not_Slice) SetSize(cnt int) { (*op) = make(Not_Slice, cnt) }

func Not_Repeats_Marshal(m jsn.Marshaler, vals *[]Not) (err error) {
	if err = m.MarshalBlock((*Not_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Not_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Not_Optional_Marshal(m jsn.Marshaler, pv **Not) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Not_Marshal(m, *pv)
	} else if !enc {
		var v Not
		if err = Not_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Not_Marshal(m jsn.Marshaler, val *Not) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Not_Type, Not_Type, val)); err == nil {
		e0 := m.MarshalKey("", Not_Field_Test)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Test)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Not_Field_Test))
		}
		m.EndBlock()
	}
	return
}

// NumValue Specify a particular number.
// User implements: NumberEval.
type NumValue struct {
	Num float64 `if:"label=_,type=number"`
}

func (*NumValue) Compose() composer.Spec {
	return composer.Spec{
		Name: NumValue_Type,
		Uses: composer.Type_Flow,
		Lede: "num",
	}
}

const NumValue_Type = "num_value"

const NumValue_Field_Num = "$NUM"

func (op *NumValue) Marshal(m jsn.Marshaler) error {
	return NumValue_Marshal(m, op)
}

type NumValue_Slice []NumValue

func (op *NumValue_Slice) GetType() string { return NumValue_Type }
func (op *NumValue_Slice) GetSize() int    { return len(*op) }
func (op *NumValue_Slice) SetSize(cnt int) { (*op) = make(NumValue_Slice, cnt) }

func NumValue_Repeats_Marshal(m jsn.Marshaler, vals *[]NumValue) (err error) {
	if err = m.MarshalBlock((*NumValue_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := NumValue_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func NumValue_Optional_Marshal(m jsn.Marshaler, pv **NumValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NumValue_Marshal(m, *pv)
	} else if !enc {
		var v NumValue
		if err = NumValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NumValue_Marshal(m jsn.Marshaler, val *NumValue) (err error) {
	if fn, ok := m.CustomizedMarshal(NumValue_Type); ok {
		err = fn(m, val)
	} else {
		err = NumValue_DefaultMarshal(m, val)
	}
	return
}
func NumValue_DefaultMarshal(m jsn.Marshaler, val *NumValue) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("num", NumValue_Type, val)); err == nil {
		e0 := m.MarshalKey("", NumValue_Field_Num)
		if e0 == nil {
			e0 = value.Number_Unboxed_Marshal(m, &val.Num)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NumValue_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// Numbers Number List: Specify a list of numbers.
// User implements: NumListEval.
type Numbers struct {
	Values []float64 `if:"label=_,type=number"`
}

func (*Numbers) Compose() composer.Spec {
	return composer.Spec{
		Name: Numbers_Type,
		Uses: composer.Type_Flow,
		Lede: "nums",
	}
}

const Numbers_Type = "numbers"

const Numbers_Field_Values = "$VALUES"

func (op *Numbers) Marshal(m jsn.Marshaler) error {
	return Numbers_Marshal(m, op)
}

type Numbers_Slice []Numbers

func (op *Numbers_Slice) GetType() string { return Numbers_Type }
func (op *Numbers_Slice) GetSize() int    { return len(*op) }
func (op *Numbers_Slice) SetSize(cnt int) { (*op) = make(Numbers_Slice, cnt) }

func Numbers_Repeats_Marshal(m jsn.Marshaler, vals *[]Numbers) (err error) {
	if err = m.MarshalBlock((*Numbers_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Numbers_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Numbers_Optional_Marshal(m jsn.Marshaler, pv **Numbers) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Numbers_Marshal(m, *pv)
	} else if !enc {
		var v Numbers
		if err = Numbers_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Numbers_Marshal(m jsn.Marshaler, val *Numbers) (err error) {
	if fn, ok := m.CustomizedMarshal(Numbers_Type); ok {
		err = fn(m, val)
	} else {
		err = Numbers_DefaultMarshal(m, val)
	}
	return
}
func Numbers_DefaultMarshal(m jsn.Marshaler, val *Numbers) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("nums", Numbers_Type, val)); err == nil {
		e0 := m.MarshalKey("", Numbers_Field_Values)
		if e0 == nil {
			e0 = value.Number_Unboxed_Repeats_Marshal(m, &val.Values)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Numbers_Field_Values))
		}
		m.EndBlock()
	}
	return
}

// ObjectExists Returns whether there is a object of the specified name.
// User implements: BoolEval.
type ObjectExists struct {
	Object rt.TextEval `if:"label=valid"`
}

func (*ObjectExists) Compose() composer.Spec {
	return composer.Spec{
		Name: ObjectExists_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const ObjectExists_Type = "object_exists"

const ObjectExists_Field_Object = "$OBJECT"

func (op *ObjectExists) Marshal(m jsn.Marshaler) error {
	return ObjectExists_Marshal(m, op)
}

type ObjectExists_Slice []ObjectExists

func (op *ObjectExists_Slice) GetType() string { return ObjectExists_Type }
func (op *ObjectExists_Slice) GetSize() int    { return len(*op) }
func (op *ObjectExists_Slice) SetSize(cnt int) { (*op) = make(ObjectExists_Slice, cnt) }

func ObjectExists_Repeats_Marshal(m jsn.Marshaler, vals *[]ObjectExists) (err error) {
	if err = m.MarshalBlock((*ObjectExists_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := ObjectExists_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func ObjectExists_Optional_Marshal(m jsn.Marshaler, pv **ObjectExists) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ObjectExists_Marshal(m, *pv)
	} else if !enc {
		var v ObjectExists
		if err = ObjectExists_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ObjectExists_Marshal(m jsn.Marshaler, val *ObjectExists) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("is", ObjectExists_Type, val)); err == nil {
		e0 := m.MarshalKey("valid", ObjectExists_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ObjectExists_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// Pluralize Returns the plural form of a singular word. (ex. apples for apple. )
// User implements: TextEval.
type Pluralize struct {
	Text rt.TextEval `if:"label=of"`
}

func (*Pluralize) Compose() composer.Spec {
	return composer.Spec{
		Name: Pluralize_Type,
		Uses: composer.Type_Flow,
		Lede: "plural",
	}
}

const Pluralize_Type = "pluralize"

const Pluralize_Field_Text = "$TEXT"

func (op *Pluralize) Marshal(m jsn.Marshaler) error {
	return Pluralize_Marshal(m, op)
}

type Pluralize_Slice []Pluralize

func (op *Pluralize_Slice) GetType() string { return Pluralize_Type }
func (op *Pluralize_Slice) GetSize() int    { return len(*op) }
func (op *Pluralize_Slice) SetSize(cnt int) { (*op) = make(Pluralize_Slice, cnt) }

func Pluralize_Repeats_Marshal(m jsn.Marshaler, vals *[]Pluralize) (err error) {
	if err = m.MarshalBlock((*Pluralize_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Pluralize_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Pluralize_Optional_Marshal(m jsn.Marshaler, pv **Pluralize) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Pluralize_Marshal(m, *pv)
	} else if !enc {
		var v Pluralize
		if err = Pluralize_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Pluralize_Marshal(m jsn.Marshaler, val *Pluralize) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("plural", Pluralize_Type, val)); err == nil {
		e0 := m.MarshalKey("of", Pluralize_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Pluralize_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// PrintNum Writes a number using numerals, eg. &#x27;1&#x27;.
// User implements: TextEval.
type PrintNum struct {
	Num rt.NumberEval `if:"label=_"`
}

func (*PrintNum) Compose() composer.Spec {
	return composer.Spec{
		Name: PrintNum_Type,
		Uses: composer.Type_Flow,
		Lede: "numeral",
	}
}

const PrintNum_Type = "print_num"

const PrintNum_Field_Num = "$NUM"

func (op *PrintNum) Marshal(m jsn.Marshaler) error {
	return PrintNum_Marshal(m, op)
}

type PrintNum_Slice []PrintNum

func (op *PrintNum_Slice) GetType() string { return PrintNum_Type }
func (op *PrintNum_Slice) GetSize() int    { return len(*op) }
func (op *PrintNum_Slice) SetSize(cnt int) { (*op) = make(PrintNum_Slice, cnt) }

func PrintNum_Repeats_Marshal(m jsn.Marshaler, vals *[]PrintNum) (err error) {
	if err = m.MarshalBlock((*PrintNum_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := PrintNum_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func PrintNum_Optional_Marshal(m jsn.Marshaler, pv **PrintNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PrintNum_Marshal(m, *pv)
	} else if !enc {
		var v PrintNum
		if err = PrintNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PrintNum_Marshal(m jsn.Marshaler, val *PrintNum) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("numeral", PrintNum_Type, val)); err == nil {
		e0 := m.MarshalKey("", PrintNum_Field_Num)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PrintNum_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// PrintNumWord Writes a number in plain english: eg. &#x27;one&#x27;
// User implements: TextEval.
type PrintNumWord struct {
	Num rt.NumberEval `if:"label=words"`
}

func (*PrintNumWord) Compose() composer.Spec {
	return composer.Spec{
		Name: PrintNumWord_Type,
		Uses: composer.Type_Flow,
		Lede: "numeral",
	}
}

const PrintNumWord_Type = "print_num_word"

const PrintNumWord_Field_Num = "$NUM"

func (op *PrintNumWord) Marshal(m jsn.Marshaler) error {
	return PrintNumWord_Marshal(m, op)
}

type PrintNumWord_Slice []PrintNumWord

func (op *PrintNumWord_Slice) GetType() string { return PrintNumWord_Type }
func (op *PrintNumWord_Slice) GetSize() int    { return len(*op) }
func (op *PrintNumWord_Slice) SetSize(cnt int) { (*op) = make(PrintNumWord_Slice, cnt) }

func PrintNumWord_Repeats_Marshal(m jsn.Marshaler, vals *[]PrintNumWord) (err error) {
	if err = m.MarshalBlock((*PrintNumWord_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := PrintNumWord_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func PrintNumWord_Optional_Marshal(m jsn.Marshaler, pv **PrintNumWord) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PrintNumWord_Marshal(m, *pv)
	} else if !enc {
		var v PrintNumWord
		if err = PrintNumWord_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PrintNumWord_Marshal(m jsn.Marshaler, val *PrintNumWord) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("numeral", PrintNumWord_Type, val)); err == nil {
		e0 := m.MarshalKey("words", PrintNumWord_Field_Num)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PrintNumWord_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// ProductOf Multiply two numbers.
// User implements: NumberEval.
type ProductOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by"`
}

func (*ProductOf) Compose() composer.Spec {
	return composer.Spec{
		Name: ProductOf_Type,
		Uses: composer.Type_Flow,
		Lede: "mul",
	}
}

const ProductOf_Type = "product_of"

const ProductOf_Field_A = "$A"
const ProductOf_Field_B = "$B"

func (op *ProductOf) Marshal(m jsn.Marshaler) error {
	return ProductOf_Marshal(m, op)
}

type ProductOf_Slice []ProductOf

func (op *ProductOf_Slice) GetType() string { return ProductOf_Type }
func (op *ProductOf_Slice) GetSize() int    { return len(*op) }
func (op *ProductOf_Slice) SetSize(cnt int) { (*op) = make(ProductOf_Slice, cnt) }

func ProductOf_Repeats_Marshal(m jsn.Marshaler, vals *[]ProductOf) (err error) {
	if err = m.MarshalBlock((*ProductOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := ProductOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func ProductOf_Optional_Marshal(m jsn.Marshaler, pv **ProductOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ProductOf_Marshal(m, *pv)
	} else if !enc {
		var v ProductOf
		if err = ProductOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ProductOf_Marshal(m jsn.Marshaler, val *ProductOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("mul", ProductOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", ProductOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ProductOf_Field_A))
		}
		e1 := m.MarshalKey("by", ProductOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ProductOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

// PutAtField Put a value into the field of an record or object
// User implements: Execute.
type PutAtField struct {
	Into    IntoTargetFields `if:"label=_"`
	From    rt.Assignment    `if:"label=from"`
	AtField string           `if:"label=at,type=text"`
}

func (*PutAtField) Compose() composer.Spec {
	return composer.Spec{
		Name: PutAtField_Type,
		Uses: composer.Type_Flow,
		Lede: "put",
	}
}

const PutAtField_Type = "put_at_field"

const PutAtField_Field_Into = "$INTO"
const PutAtField_Field_From = "$FROM"
const PutAtField_Field_AtField = "$AT_FIELD"

func (op *PutAtField) Marshal(m jsn.Marshaler) error {
	return PutAtField_Marshal(m, op)
}

type PutAtField_Slice []PutAtField

func (op *PutAtField_Slice) GetType() string { return PutAtField_Type }
func (op *PutAtField_Slice) GetSize() int    { return len(*op) }
func (op *PutAtField_Slice) SetSize(cnt int) { (*op) = make(PutAtField_Slice, cnt) }

func PutAtField_Repeats_Marshal(m jsn.Marshaler, vals *[]PutAtField) (err error) {
	if err = m.MarshalBlock((*PutAtField_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := PutAtField_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func PutAtField_Optional_Marshal(m jsn.Marshaler, pv **PutAtField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PutAtField_Marshal(m, *pv)
	} else if !enc {
		var v PutAtField
		if err = PutAtField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PutAtField_Marshal(m jsn.Marshaler, val *PutAtField) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("put", PutAtField_Type, val)); err == nil {
		e0 := m.MarshalKey("", PutAtField_Field_Into)
		if e0 == nil {
			e0 = IntoTargetFields_Marshal(m, &val.Into)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PutAtField_Field_Into))
		}
		e1 := m.MarshalKey("from", PutAtField_Field_From)
		if e1 == nil {
			e1 = rt.Assignment_Marshal(m, &val.From)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", PutAtField_Field_From))
		}
		e2 := m.MarshalKey("at", PutAtField_Field_AtField)
		if e2 == nil {
			e2 = value.Text_Unboxed_Marshal(m, &val.AtField)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", PutAtField_Field_AtField))
		}
		m.EndBlock()
	}
	return
}

// QuotientOf Divide one number by another.
// User implements: NumberEval.
type QuotientOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by"`
}

func (*QuotientOf) Compose() composer.Spec {
	return composer.Spec{
		Name: QuotientOf_Type,
		Uses: composer.Type_Flow,
		Lede: "div",
	}
}

const QuotientOf_Type = "quotient_of"

const QuotientOf_Field_A = "$A"
const QuotientOf_Field_B = "$B"

func (op *QuotientOf) Marshal(m jsn.Marshaler) error {
	return QuotientOf_Marshal(m, op)
}

type QuotientOf_Slice []QuotientOf

func (op *QuotientOf_Slice) GetType() string { return QuotientOf_Type }
func (op *QuotientOf_Slice) GetSize() int    { return len(*op) }
func (op *QuotientOf_Slice) SetSize(cnt int) { (*op) = make(QuotientOf_Slice, cnt) }

func QuotientOf_Repeats_Marshal(m jsn.Marshaler, vals *[]QuotientOf) (err error) {
	if err = m.MarshalBlock((*QuotientOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := QuotientOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func QuotientOf_Optional_Marshal(m jsn.Marshaler, pv **QuotientOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = QuotientOf_Marshal(m, *pv)
	} else if !enc {
		var v QuotientOf
		if err = QuotientOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func QuotientOf_Marshal(m jsn.Marshaler, val *QuotientOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("div", QuotientOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", QuotientOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", QuotientOf_Field_A))
		}
		e1 := m.MarshalKey("by", QuotientOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", QuotientOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

// RemainderOf Divide one number by another, and return the remainder.
// User implements: NumberEval.
type RemainderOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by"`
}

func (*RemainderOf) Compose() composer.Spec {
	return composer.Spec{
		Name: RemainderOf_Type,
		Uses: composer.Type_Flow,
		Lede: "mod",
	}
}

const RemainderOf_Type = "remainder_of"

const RemainderOf_Field_A = "$A"
const RemainderOf_Field_B = "$B"

func (op *RemainderOf) Marshal(m jsn.Marshaler) error {
	return RemainderOf_Marshal(m, op)
}

type RemainderOf_Slice []RemainderOf

func (op *RemainderOf_Slice) GetType() string { return RemainderOf_Type }
func (op *RemainderOf_Slice) GetSize() int    { return len(*op) }
func (op *RemainderOf_Slice) SetSize(cnt int) { (*op) = make(RemainderOf_Slice, cnt) }

func RemainderOf_Repeats_Marshal(m jsn.Marshaler, vals *[]RemainderOf) (err error) {
	if err = m.MarshalBlock((*RemainderOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := RemainderOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func RemainderOf_Optional_Marshal(m jsn.Marshaler, pv **RemainderOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RemainderOf_Marshal(m, *pv)
	} else if !enc {
		var v RemainderOf
		if err = RemainderOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RemainderOf_Marshal(m jsn.Marshaler, val *RemainderOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("mod", RemainderOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", RemainderOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", RemainderOf_Field_A))
		}
		e1 := m.MarshalKey("by", RemainderOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", RemainderOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

// Response Generate text in a replaceable manner.
// User implements: TextEval.
type Response struct {
	Name string      `if:"label=_,type=text"`
	Text rt.TextEval `if:"label=text,optional"`
}

func (*Response) Compose() composer.Spec {
	return composer.Spec{
		Name: Response_Type,
		Uses: composer.Type_Flow,
	}
}

const Response_Type = "response"

const Response_Field_Name = "$NAME"
const Response_Field_Text = "$TEXT"

func (op *Response) Marshal(m jsn.Marshaler) error {
	return Response_Marshal(m, op)
}

type Response_Slice []Response

func (op *Response_Slice) GetType() string { return Response_Type }
func (op *Response_Slice) GetSize() int    { return len(*op) }
func (op *Response_Slice) SetSize(cnt int) { (*op) = make(Response_Slice, cnt) }

func Response_Repeats_Marshal(m jsn.Marshaler, vals *[]Response) (err error) {
	if err = m.MarshalBlock((*Response_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Response_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Response_Optional_Marshal(m jsn.Marshaler, pv **Response) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Response_Marshal(m, *pv)
	} else if !enc {
		var v Response
		if err = Response_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Response_Marshal(m jsn.Marshaler, val *Response) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Response_Type, Response_Type, val)); err == nil {
		e0 := m.MarshalKey("", Response_Field_Name)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Response_Field_Name))
		}
		e1 := m.MarshalKey("text", Response_Field_Text)
		if e1 == nil {
			e1 = rt.TextEval_Optional_Marshal(m, &val.Text)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Response_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// Row A single line as part of a group of lines.
// User implements: TextEval.
type Row struct {
	Do Activity `if:"label=_"`
}

func (*Row) Compose() composer.Spec {
	return composer.Spec{
		Name: Row_Type,
		Uses: composer.Type_Flow,
	}
}

const Row_Type = "row"

const Row_Field_Do = "$DO"

func (op *Row) Marshal(m jsn.Marshaler) error {
	return Row_Marshal(m, op)
}

type Row_Slice []Row

func (op *Row_Slice) GetType() string { return Row_Type }
func (op *Row_Slice) GetSize() int    { return len(*op) }
func (op *Row_Slice) SetSize(cnt int) { (*op) = make(Row_Slice, cnt) }

func Row_Repeats_Marshal(m jsn.Marshaler, vals *[]Row) (err error) {
	if err = m.MarshalBlock((*Row_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Row_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Row_Optional_Marshal(m jsn.Marshaler, pv **Row) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Row_Marshal(m, *pv)
	} else if !enc {
		var v Row
		if err = Row_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Row_Marshal(m jsn.Marshaler, val *Row) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Row_Type, Row_Type, val)); err == nil {
		e0 := m.MarshalKey("", Row_Field_Do)
		if e0 == nil {
			e0 = Activity_Marshal(m, &val.Do)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Row_Field_Do))
		}
		m.EndBlock()
	}
	return
}

// Rows Group text into successive lines.
// User implements: TextEval.
type Rows struct {
	Do Activity `if:"label=_"`
}

func (*Rows) Compose() composer.Spec {
	return composer.Spec{
		Name: Rows_Type,
		Uses: composer.Type_Flow,
	}
}

const Rows_Type = "rows"

const Rows_Field_Do = "$DO"

func (op *Rows) Marshal(m jsn.Marshaler) error {
	return Rows_Marshal(m, op)
}

type Rows_Slice []Rows

func (op *Rows_Slice) GetType() string { return Rows_Type }
func (op *Rows_Slice) GetSize() int    { return len(*op) }
func (op *Rows_Slice) SetSize(cnt int) { (*op) = make(Rows_Slice, cnt) }

func Rows_Repeats_Marshal(m jsn.Marshaler, vals *[]Rows) (err error) {
	if err = m.MarshalBlock((*Rows_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Rows_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Rows_Optional_Marshal(m jsn.Marshaler, pv **Rows) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Rows_Marshal(m, *pv)
	} else if !enc {
		var v Rows
		if err = Rows_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Rows_Marshal(m jsn.Marshaler, val *Rows) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow(Rows_Type, Rows_Type, val)); err == nil {
		e0 := m.MarshalKey("", Rows_Field_Do)
		if e0 == nil {
			e0 = Activity_Marshal(m, &val.Do)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Rows_Field_Do))
		}
		m.EndBlock()
	}
	return
}

// SayText Print some bit of text to the player.
// User implements: Execute.
type SayText struct {
	Text rt.TextEval `if:"label=_"`
}

func (*SayText) Compose() composer.Spec {
	return composer.Spec{
		Name: SayText_Type,
		Uses: composer.Type_Flow,
		Lede: "say",
	}
}

const SayText_Type = "say_text"

const SayText_Field_Text = "$TEXT"

func (op *SayText) Marshal(m jsn.Marshaler) error {
	return SayText_Marshal(m, op)
}

type SayText_Slice []SayText

func (op *SayText_Slice) GetType() string { return SayText_Type }
func (op *SayText_Slice) GetSize() int    { return len(*op) }
func (op *SayText_Slice) SetSize(cnt int) { (*op) = make(SayText_Slice, cnt) }

func SayText_Repeats_Marshal(m jsn.Marshaler, vals *[]SayText) (err error) {
	if err = m.MarshalBlock((*SayText_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := SayText_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func SayText_Optional_Marshal(m jsn.Marshaler, pv **SayText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SayText_Marshal(m, *pv)
	} else if !enc {
		var v SayText
		if err = SayText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SayText_Marshal(m jsn.Marshaler, val *SayText) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("say", SayText_Type, val)); err == nil {
		e0 := m.MarshalKey("", SayText_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SayText_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// SetTrait Put an object into a particular state.
// User implements: Execute.
type SetTrait struct {
	Object rt.TextEval `if:"label=obj"`
	Trait  rt.TextEval `if:"label=trait"`
}

func (*SetTrait) Compose() composer.Spec {
	return composer.Spec{
		Name: SetTrait_Type,
		Uses: composer.Type_Flow,
		Lede: "put",
	}
}

const SetTrait_Type = "set_trait"

const SetTrait_Field_Object = "$OBJECT"
const SetTrait_Field_Trait = "$TRAIT"

func (op *SetTrait) Marshal(m jsn.Marshaler) error {
	return SetTrait_Marshal(m, op)
}

type SetTrait_Slice []SetTrait

func (op *SetTrait_Slice) GetType() string { return SetTrait_Type }
func (op *SetTrait_Slice) GetSize() int    { return len(*op) }
func (op *SetTrait_Slice) SetSize(cnt int) { (*op) = make(SetTrait_Slice, cnt) }

func SetTrait_Repeats_Marshal(m jsn.Marshaler, vals *[]SetTrait) (err error) {
	if err = m.MarshalBlock((*SetTrait_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := SetTrait_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func SetTrait_Optional_Marshal(m jsn.Marshaler, pv **SetTrait) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SetTrait_Marshal(m, *pv)
	} else if !enc {
		var v SetTrait
		if err = SetTrait_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SetTrait_Marshal(m jsn.Marshaler, val *SetTrait) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("put", SetTrait_Type, val)); err == nil {
		e0 := m.MarshalKey("obj", SetTrait_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SetTrait_Field_Object))
		}
		e1 := m.MarshalKey("trait", SetTrait_Field_Trait)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Trait)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", SetTrait_Field_Trait))
		}
		m.EndBlock()
	}
	return
}

// Singularize Returns the singular form of a plural word. (ex. apple for apples )
// User implements: TextEval.
type Singularize struct {
	Text rt.TextEval `if:"label=of"`
}

func (*Singularize) Compose() composer.Spec {
	return composer.Spec{
		Name: Singularize_Type,
		Uses: composer.Type_Flow,
		Lede: "singular",
	}
}

const Singularize_Type = "singularize"

const Singularize_Field_Text = "$TEXT"

func (op *Singularize) Marshal(m jsn.Marshaler) error {
	return Singularize_Marshal(m, op)
}

type Singularize_Slice []Singularize

func (op *Singularize_Slice) GetType() string { return Singularize_Type }
func (op *Singularize_Slice) GetSize() int    { return len(*op) }
func (op *Singularize_Slice) SetSize(cnt int) { (*op) = make(Singularize_Slice, cnt) }

func Singularize_Repeats_Marshal(m jsn.Marshaler, vals *[]Singularize) (err error) {
	if err = m.MarshalBlock((*Singularize_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Singularize_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Singularize_Optional_Marshal(m jsn.Marshaler, pv **Singularize) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Singularize_Marshal(m, *pv)
	} else if !enc {
		var v Singularize
		if err = Singularize_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Singularize_Marshal(m jsn.Marshaler, val *Singularize) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("singular", Singularize_Type, val)); err == nil {
		e0 := m.MarshalKey("of", Singularize_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Singularize_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// SlashText Separates words with left-leaning slashes &#x27;/&#x27;.
// User implements: TextEval.
type SlashText struct {
	Do Activity `if:"label=_"`
}

func (*SlashText) Compose() composer.Spec {
	return composer.Spec{
		Name: SlashText_Type,
		Uses: composer.Type_Flow,
		Lede: "slashes",
	}
}

const SlashText_Type = "slash_text"

const SlashText_Field_Do = "$DO"

func (op *SlashText) Marshal(m jsn.Marshaler) error {
	return SlashText_Marshal(m, op)
}

type SlashText_Slice []SlashText

func (op *SlashText_Slice) GetType() string { return SlashText_Type }
func (op *SlashText_Slice) GetSize() int    { return len(*op) }
func (op *SlashText_Slice) SetSize(cnt int) { (*op) = make(SlashText_Slice, cnt) }

func SlashText_Repeats_Marshal(m jsn.Marshaler, vals *[]SlashText) (err error) {
	if err = m.MarshalBlock((*SlashText_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := SlashText_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func SlashText_Optional_Marshal(m jsn.Marshaler, pv **SlashText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SlashText_Marshal(m, *pv)
	} else if !enc {
		var v SlashText
		if err = SlashText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SlashText_Marshal(m jsn.Marshaler, val *SlashText) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("slashes", SlashText_Type, val)); err == nil {
		e0 := m.MarshalKey("", SlashText_Field_Do)
		if e0 == nil {
			e0 = Activity_Marshal(m, &val.Do)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SlashText_Field_Do))
		}
		m.EndBlock()
	}
	return
}

// Softline Start a new line ( if not already at a new line. )
// User implements: Execute.
type Softline struct {
}

func (*Softline) Compose() composer.Spec {
	return composer.Spec{
		Name: Softline_Type,
		Uses: composer.Type_Flow,
		Lede: "wbr",
	}
}

const Softline_Type = "softline"

func (op *Softline) Marshal(m jsn.Marshaler) error {
	return Softline_Marshal(m, op)
}

type Softline_Slice []Softline

func (op *Softline_Slice) GetType() string { return Softline_Type }
func (op *Softline_Slice) GetSize() int    { return len(*op) }
func (op *Softline_Slice) SetSize(cnt int) { (*op) = make(Softline_Slice, cnt) }

func Softline_Repeats_Marshal(m jsn.Marshaler, vals *[]Softline) (err error) {
	if err = m.MarshalBlock((*Softline_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Softline_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Softline_Optional_Marshal(m jsn.Marshaler, pv **Softline) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Softline_Marshal(m, *pv)
	} else if !enc {
		var v Softline
		if err = Softline_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Softline_Marshal(m jsn.Marshaler, val *Softline) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("wbr", Softline_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// SpanText Writes text with spaces between words.
// User implements: TextEval.
type SpanText struct {
	Do Activity `if:"label=_"`
}

func (*SpanText) Compose() composer.Spec {
	return composer.Spec{
		Name: SpanText_Type,
		Uses: composer.Type_Flow,
		Lede: "spaces",
	}
}

const SpanText_Type = "span_text"

const SpanText_Field_Do = "$DO"

func (op *SpanText) Marshal(m jsn.Marshaler) error {
	return SpanText_Marshal(m, op)
}

type SpanText_Slice []SpanText

func (op *SpanText_Slice) GetType() string { return SpanText_Type }
func (op *SpanText_Slice) GetSize() int    { return len(*op) }
func (op *SpanText_Slice) SetSize(cnt int) { (*op) = make(SpanText_Slice, cnt) }

func SpanText_Repeats_Marshal(m jsn.Marshaler, vals *[]SpanText) (err error) {
	if err = m.MarshalBlock((*SpanText_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := SpanText_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func SpanText_Optional_Marshal(m jsn.Marshaler, pv **SpanText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SpanText_Marshal(m, *pv)
	} else if !enc {
		var v SpanText
		if err = SpanText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SpanText_Marshal(m jsn.Marshaler, val *SpanText) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("spaces", SpanText_Type, val)); err == nil {
		e0 := m.MarshalKey("", SpanText_Field_Do)
		if e0 == nil {
			e0 = Activity_Marshal(m, &val.Do)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SpanText_Field_Do))
		}
		m.EndBlock()
	}
	return
}

// SumOf Add two numbers.
// User implements: NumberEval.
type SumOf struct {
	A rt.NumberEval `if:"label=_"`
	B rt.NumberEval `if:"label=by,optional"`
}

func (*SumOf) Compose() composer.Spec {
	return composer.Spec{
		Name: SumOf_Type,
		Uses: composer.Type_Flow,
		Lede: "inc",
	}
}

const SumOf_Type = "sum_of"

const SumOf_Field_A = "$A"
const SumOf_Field_B = "$B"

func (op *SumOf) Marshal(m jsn.Marshaler) error {
	return SumOf_Marshal(m, op)
}

type SumOf_Slice []SumOf

func (op *SumOf_Slice) GetType() string { return SumOf_Type }
func (op *SumOf_Slice) GetSize() int    { return len(*op) }
func (op *SumOf_Slice) SetSize(cnt int) { (*op) = make(SumOf_Slice, cnt) }

func SumOf_Repeats_Marshal(m jsn.Marshaler, vals *[]SumOf) (err error) {
	if err = m.MarshalBlock((*SumOf_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := SumOf_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func SumOf_Optional_Marshal(m jsn.Marshaler, pv **SumOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SumOf_Marshal(m, *pv)
	} else if !enc {
		var v SumOf
		if err = SumOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SumOf_Marshal(m jsn.Marshaler, val *SumOf) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("inc", SumOf_Type, val)); err == nil {
		e0 := m.MarshalKey("", SumOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SumOf_Field_A))
		}
		e1 := m.MarshalKey("by", SumOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Optional_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", SumOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

// TextValue Specify a small bit of text.
// User implements: TextEval.
type TextValue struct {
	Text string `if:"label=_,type=text"`
}

func (*TextValue) Compose() composer.Spec {
	return composer.Spec{
		Name: TextValue_Type,
		Uses: composer.Type_Flow,
		Lede: "txt",
	}
}

const TextValue_Type = "text_value"

const TextValue_Field_Text = "$TEXT"

func (op *TextValue) Marshal(m jsn.Marshaler) error {
	return TextValue_Marshal(m, op)
}

type TextValue_Slice []TextValue

func (op *TextValue_Slice) GetType() string { return TextValue_Type }
func (op *TextValue_Slice) GetSize() int    { return len(*op) }
func (op *TextValue_Slice) SetSize(cnt int) { (*op) = make(TextValue_Slice, cnt) }

func TextValue_Repeats_Marshal(m jsn.Marshaler, vals *[]TextValue) (err error) {
	if err = m.MarshalBlock((*TextValue_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := TextValue_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func TextValue_Optional_Marshal(m jsn.Marshaler, pv **TextValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TextValue_Marshal(m, *pv)
	} else if !enc {
		var v TextValue
		if err = TextValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TextValue_Marshal(m jsn.Marshaler, val *TextValue) (err error) {
	if fn, ok := m.CustomizedMarshal(TextValue_Type); ok {
		err = fn(m, val)
	} else {
		err = TextValue_DefaultMarshal(m, val)
	}
	return
}
func TextValue_DefaultMarshal(m jsn.Marshaler, val *TextValue) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("txt", TextValue_Type, val)); err == nil {
		e0 := m.MarshalKey("", TextValue_Field_Text)
		if e0 == nil {
			e0 = value.Text_Unboxed_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", TextValue_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// Texts Text List: Specifies a set of string values.
// User implements: TextListEval.
type Texts struct {
	Values []string `if:"label=_,type=text"`
}

func (*Texts) Compose() composer.Spec {
	return composer.Spec{
		Name: Texts_Type,
		Uses: composer.Type_Flow,
		Lede: "txts",
	}
}

const Texts_Type = "texts"

const Texts_Field_Values = "$VALUES"

func (op *Texts) Marshal(m jsn.Marshaler) error {
	return Texts_Marshal(m, op)
}

type Texts_Slice []Texts

func (op *Texts_Slice) GetType() string { return Texts_Type }
func (op *Texts_Slice) GetSize() int    { return len(*op) }
func (op *Texts_Slice) SetSize(cnt int) { (*op) = make(Texts_Slice, cnt) }

func Texts_Repeats_Marshal(m jsn.Marshaler, vals *[]Texts) (err error) {
	if err = m.MarshalBlock((*Texts_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Texts_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Texts_Optional_Marshal(m jsn.Marshaler, pv **Texts) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Texts_Marshal(m, *pv)
	} else if !enc {
		var v Texts
		if err = Texts_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Texts_Marshal(m jsn.Marshaler, val *Texts) (err error) {
	if fn, ok := m.CustomizedMarshal(Texts_Type); ok {
		err = fn(m, val)
	} else {
		err = Texts_DefaultMarshal(m, val)
	}
	return
}
func Texts_DefaultMarshal(m jsn.Marshaler, val *Texts) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("txts", Texts_Type, val)); err == nil {
		e0 := m.MarshalKey("", Texts_Field_Values)
		if e0 == nil {
			e0 = value.Text_Unboxed_Repeats_Marshal(m, &val.Values)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Texts_Field_Values))
		}
		m.EndBlock()
	}
	return
}

const Trigger_Type = "trigger"

var Trigger_Optional_Marshal = Trigger_Marshal

type Trigger_Slot struct{ ptr *Trigger }

func (At Trigger_Slot) GetType() string              { return Trigger_Type }
func (at Trigger_Slot) GetSlot() (interface{}, bool) { return at.ptr, at.ptr != nil }
func (at Trigger_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.ptr), okay = v.(Trigger)
	return
}

func Trigger_Marshal(m jsn.Marshaler, ptr *Trigger) (err error) {
	if err = m.MarshalBlock(Trigger_Slot{ptr}); err == nil {
		if e := (*ptr).(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
			m.Error(e)
		}
		m.EndBlock()
	}
	return
}

type Trigger_Slice []Trigger

func (op *Trigger_Slice) GetType() string { return Trigger_Type }
func (op *Trigger_Slice) GetSize() int    { return len(*op) }
func (op *Trigger_Slice) SetSize(cnt int) { (*op) = make(Trigger_Slice, cnt) }

func Trigger_Repeats_Marshal(m jsn.Marshaler, vals *[]Trigger) (err error) {
	if err = m.MarshalBlock((*Trigger_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Trigger_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// TriggerCycle
// User implements: Trigger.
type TriggerCycle struct {
}

func (*TriggerCycle) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerCycle_Type,
		Uses: composer.Type_Flow,
		Lede: "every",
	}
}

const TriggerCycle_Type = "trigger_cycle"

func (op *TriggerCycle) Marshal(m jsn.Marshaler) error {
	return TriggerCycle_Marshal(m, op)
}

type TriggerCycle_Slice []TriggerCycle

func (op *TriggerCycle_Slice) GetType() string { return TriggerCycle_Type }
func (op *TriggerCycle_Slice) GetSize() int    { return len(*op) }
func (op *TriggerCycle_Slice) SetSize(cnt int) { (*op) = make(TriggerCycle_Slice, cnt) }

func TriggerCycle_Repeats_Marshal(m jsn.Marshaler, vals *[]TriggerCycle) (err error) {
	if err = m.MarshalBlock((*TriggerCycle_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := TriggerCycle_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func TriggerCycle_Optional_Marshal(m jsn.Marshaler, pv **TriggerCycle) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TriggerCycle_Marshal(m, *pv)
	} else if !enc {
		var v TriggerCycle
		if err = TriggerCycle_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TriggerCycle_Marshal(m jsn.Marshaler, val *TriggerCycle) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("every", TriggerCycle_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// TriggerOnce
// User implements: Trigger.
type TriggerOnce struct {
}

func (*TriggerOnce) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerOnce_Type,
		Uses: composer.Type_Flow,
		Lede: "at",
	}
}

const TriggerOnce_Type = "trigger_once"

func (op *TriggerOnce) Marshal(m jsn.Marshaler) error {
	return TriggerOnce_Marshal(m, op)
}

type TriggerOnce_Slice []TriggerOnce

func (op *TriggerOnce_Slice) GetType() string { return TriggerOnce_Type }
func (op *TriggerOnce_Slice) GetSize() int    { return len(*op) }
func (op *TriggerOnce_Slice) SetSize(cnt int) { (*op) = make(TriggerOnce_Slice, cnt) }

func TriggerOnce_Repeats_Marshal(m jsn.Marshaler, vals *[]TriggerOnce) (err error) {
	if err = m.MarshalBlock((*TriggerOnce_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := TriggerOnce_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func TriggerOnce_Optional_Marshal(m jsn.Marshaler, pv **TriggerOnce) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TriggerOnce_Marshal(m, *pv)
	} else if !enc {
		var v TriggerOnce
		if err = TriggerOnce_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TriggerOnce_Marshal(m jsn.Marshaler, val *TriggerOnce) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("at", TriggerOnce_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// TriggerSwitch
// User implements: Trigger.
type TriggerSwitch struct {
}

func (*TriggerSwitch) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerSwitch_Type,
		Uses: composer.Type_Flow,
		Lede: "after",
	}
}

const TriggerSwitch_Type = "trigger_switch"

func (op *TriggerSwitch) Marshal(m jsn.Marshaler) error {
	return TriggerSwitch_Marshal(m, op)
}

type TriggerSwitch_Slice []TriggerSwitch

func (op *TriggerSwitch_Slice) GetType() string { return TriggerSwitch_Type }
func (op *TriggerSwitch_Slice) GetSize() int    { return len(*op) }
func (op *TriggerSwitch_Slice) SetSize(cnt int) { (*op) = make(TriggerSwitch_Slice, cnt) }

func TriggerSwitch_Repeats_Marshal(m jsn.Marshaler, vals *[]TriggerSwitch) (err error) {
	if err = m.MarshalBlock((*TriggerSwitch_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := TriggerSwitch_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func TriggerSwitch_Optional_Marshal(m jsn.Marshaler, pv **TriggerSwitch) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TriggerSwitch_Marshal(m, *pv)
	} else if !enc {
		var v TriggerSwitch
		if err = TriggerSwitch_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TriggerSwitch_Marshal(m jsn.Marshaler, val *TriggerSwitch) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("after", TriggerSwitch_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// Unequal The first value doesn&#x27;t equal the second value.
// User implements: Comparator.
type Unequal struct {
}

func (*Unequal) Compose() composer.Spec {
	return composer.Spec{
		Name: Unequal_Type,
		Uses: composer.Type_Flow,
		Lede: "other_than",
	}
}

const Unequal_Type = "unequal"

func (op *Unequal) Marshal(m jsn.Marshaler) error {
	return Unequal_Marshal(m, op)
}

type Unequal_Slice []Unequal

func (op *Unequal_Slice) GetType() string { return Unequal_Type }
func (op *Unequal_Slice) GetSize() int    { return len(*op) }
func (op *Unequal_Slice) SetSize(cnt int) { (*op) = make(Unequal_Slice, cnt) }

func Unequal_Repeats_Marshal(m jsn.Marshaler, vals *[]Unequal) (err error) {
	if err = m.MarshalBlock((*Unequal_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Unequal_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Unequal_Optional_Marshal(m jsn.Marshaler, pv **Unequal) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Unequal_Marshal(m, *pv)
	} else if !enc {
		var v Unequal
		if err = Unequal_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Unequal_Marshal(m jsn.Marshaler, val *Unequal) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("other_than", Unequal_Type, val)); err == nil {
		m.EndBlock()
	}
	return
}

// While Keep running a series of actions while a condition is true.
// User implements: Execute.
type While struct {
	True rt.BoolEval `if:"label=_"`
	Do   Activity    `if:"label=do"`
}

func (*While) Compose() composer.Spec {
	return composer.Spec{
		Name: While_Type,
		Uses: composer.Type_Flow,
		Lede: "repeating",
	}
}

const While_Type = "while"

const While_Field_True = "$TRUE"
const While_Field_Do = "$DO"

func (op *While) Marshal(m jsn.Marshaler) error {
	return While_Marshal(m, op)
}

type While_Slice []While

func (op *While_Slice) GetType() string { return While_Type }
func (op *While_Slice) GetSize() int    { return len(*op) }
func (op *While_Slice) SetSize(cnt int) { (*op) = make(While_Slice, cnt) }

func While_Repeats_Marshal(m jsn.Marshaler, vals *[]While) (err error) {
	if err = m.MarshalBlock((*While_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := While_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func While_Optional_Marshal(m jsn.Marshaler, pv **While) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = While_Marshal(m, *pv)
	} else if !enc {
		var v While
		if err = While_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func While_Marshal(m jsn.Marshaler, val *While) (err error) {
	if err = m.MarshalBlock(jsn.MakeFlow("repeating", While_Type, val)); err == nil {
		e0 := m.MarshalKey("", While_Field_True)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.True)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", While_Field_True))
		}
		e1 := m.MarshalKey("do", While_Field_Do)
		if e1 == nil {
			e1 = Activity_Marshal(m, &val.Do)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", While_Field_Do))
		}
		m.EndBlock()
	}
	return
}

var Slots = []interface{}{
	(*Brancher)(nil),
	(*Comparator)(nil),
	(*FromSourceFields)(nil),
	(*IntoTargetFields)(nil),
	(*Trigger)(nil),
}

var Slats = []composer.Composer{
	(*Activity)(nil),
	(*AllTrue)(nil),
	(*Always)(nil),
	(*AnyTrue)(nil),
	(*Assign)(nil),
	(*AtLeast)(nil),
	(*AtMost)(nil),
	(*Blankline)(nil),
	(*BoolValue)(nil),
	(*BracketText)(nil),
	(*Break)(nil),
	(*BufferText)(nil),
	(*CallArg)(nil),
	(*CallArgs)(nil),
	(*CallCycle)(nil),
	(*CallMake)(nil),
	(*CallPattern)(nil),
	(*CallSend)(nil),
	(*CallShuffle)(nil),
	(*CallTerminal)(nil),
	(*CallTrigger)(nil),
	(*Capitalize)(nil),
	(*ChooseAction)(nil),
	(*ChooseMore)(nil),
	(*ChooseMoreValue)(nil),
	(*ChooseNothingElse)(nil),
	(*ChooseNum)(nil),
	(*ChooseText)(nil),
	(*ChooseValue)(nil),
	(*CommaText)(nil),
	(*CompareNum)(nil),
	(*CompareText)(nil),
	(*DiffOf)(nil),
	(*During)(nil),
	(*Equal)(nil),
	(*FromBool)(nil),
	(*FromNum)(nil),
	(*FromNumbers)(nil),
	(*FromObj)(nil),
	(*FromRec)(nil),
	(*FromRecord)(nil),
	(*FromRecords)(nil),
	(*FromText)(nil),
	(*FromTexts)(nil),
	(*FromVar)(nil),
	(*GetAtField)(nil),
	(*GetVar)(nil),
	(*GreaterThan)(nil),
	(*HasDominion)(nil),
	(*HasTrait)(nil),
	(*IdOf)(nil),
	(*Includes)(nil),
	(*IntoObj)(nil),
	(*IntoVar)(nil),
	(*IsEmpty)(nil),
	(*IsExactKindOf)(nil),
	(*IsKindOf)(nil),
	(*Join)(nil),
	(*KindOf)(nil),
	(*KindsOf)(nil),
	(*LessThan)(nil),
	(*MakeLowercase)(nil),
	(*MakeReversed)(nil),
	(*MakeSentenceCase)(nil),
	(*MakeTitleCase)(nil),
	(*MakeUppercase)(nil),
	(*Matches)(nil),
	(*NameOf)(nil),
	(*Never)(nil),
	(*Newline)(nil),
	(*Next)(nil),
	(*Not)(nil),
	(*NumValue)(nil),
	(*Numbers)(nil),
	(*ObjectExists)(nil),
	(*Pluralize)(nil),
	(*PrintNum)(nil),
	(*PrintNumWord)(nil),
	(*ProductOf)(nil),
	(*PutAtField)(nil),
	(*QuotientOf)(nil),
	(*RemainderOf)(nil),
	(*Response)(nil),
	(*Row)(nil),
	(*Rows)(nil),
	(*SayText)(nil),
	(*SetTrait)(nil),
	(*Singularize)(nil),
	(*SlashText)(nil),
	(*Softline)(nil),
	(*SpanText)(nil),
	(*SumOf)(nil),
	(*TextValue)(nil),
	(*Texts)(nil),
	(*TriggerCycle)(nil),
	(*TriggerOnce)(nil),
	(*TriggerSwitch)(nil),
	(*Unequal)(nil),
	(*While)(nil),
}

var Signatures = map[uint64]interface{}{
	9563969450495003011:  (*Activity)(nil),          /* Act: */
	5766132082989451290:  (*AllTrue)(nil),           /* AllTrue: */
	3551738626604328996:  (*Always)(nil),            /* Always */
	5530004915832666773:  (*AnyTrue)(nil),           /* AnyTrue: */
	964848420644943929:   (*Assign)(nil),            /* Let:be: */
	8393987310376781689:  (*AtLeast)(nil),           /* AtLeast */
	6318029524925488119:  (*AtMost)(nil),            /* AtMost */
	12638241076625424335: (*Blankline)(nil),         /* P */
	1736897526516691909:  (*BoolValue)(nil),         /* Bool: */
	296659450533921070:   (*BracketText)(nil),       /* Brackets: */
	5769182059867686040:  (*Break)(nil),             /* Break */
	1468716792759951334:  (*BufferText)(nil),        /* Buffers: */
	12587790669191301162: (*CallArg)(nil),           /* Inarg:from: */
	5369402786275276311:  (*CallArgs)(nil),          /* Inargs: */
	13830472648721021489: (*CallCycle)(nil),         /* Cycle: */
	15946925553828934364: (*CallMake)(nil),          /* CallMake:args: */
	15968985848252216970: (*CallPattern)(nil),       /* CallPattern:args: */
	9001627797986963633:  (*CallSend)(nil),          /* CallSend:to:args: */
	4094744094015329372:  (*CallShuffle)(nil),       /* Shuffle: */
	397325548209379145:   (*CallTerminal)(nil),      /* Stopping: */
	6201894317097750905:  (*CallTrigger)(nil),       /* Trigger:num: */
	11297042870903436571: (*Capitalize)(nil),        /* Capitalize: */
	801098075024283221:   (*ChooseAction)(nil),      /* If:do: */
	16837911797943566414: (*ChooseAction)(nil),      /* If:do:else: */
	6647835788319785576:  (*ChooseMore)(nil),        /* ElseIf:do: */
	8891784798413013545:  (*ChooseMore)(nil),        /* ElseIf:do:else: */
	8118318284549648335:  (*ChooseMoreValue)(nil),   /* ElseIf:from:and:do: */
	15789793076434728188: (*ChooseMoreValue)(nil),   /* ElseIf:from:and:do:else: */
	10400553141435587369: (*ChooseNothingElse)(nil), /* ElseDo: */
	6975806637395575556:  (*ChooseNum)(nil),         /* Num if:then:else: */
	3873612904538163080:  (*ChooseText)(nil),        /* Txt if:then:else: */
	1980715091726959140:  (*ChooseValue)(nil),       /* If:from:and:do: */
	7009621164357801941:  (*ChooseValue)(nil),       /* If:from:and:do:else: */
	10071311581658796529: (*CommaText)(nil),         /* Commas: */
	16120682472252114465: (*CompareNum)(nil),        /* Cmp:is:num: */
	7447576730273512137:  (*CompareText)(nil),       /* Cmp:is:txt: */
	15006778405246945707: (*DiffOf)(nil),            /* Dec: */
	15857313894902256996: (*DiffOf)(nil),            /* Dec:by: */
	8764800739954063190:  (*During)(nil),            /* During: */
	1753806270445300148:  (*Equal)(nil),             /* Equals */
	12958508767616079733: (*FromBool)(nil),          /* FromBool: */
	1549912768528741755:  (*FromNum)(nil),           /* FromNum: */
	10142847724583857470: (*FromNumbers)(nil),       /* FromNums: */
	10710451369001919943: (*FromObj)(nil),           /* ObjFields: */
	2612904280306907934:  (*FromRec)(nil),           /* RecFields: */
	14222179384726139225: (*FromRecord)(nil),        /* FromRec: */
	15883210900960895884: (*FromRecords)(nil),       /* FromRecs: */
	10911058166184667263: (*FromText)(nil),          /* FromTxt: */
	6711291326309402106:  (*FromTexts)(nil),         /* FromTxts: */
	12398042414257414931: (*FromVar)(nil),           /* VarFields: */
	1388232177254779715:  (*GetAtField)(nil),        /* Get:from: */
	14151708642469140140: (*GetVar)(nil),            /* Var: */
	60595651907097662:    (*GreaterThan)(nil),       /* GreaterThan */
	7228360982355755098:  (*HasDominion)(nil),       /* HasDominion: */
	17664170115517891482: (*HasTrait)(nil),          /* Get obj:trait: */
	10727511238220812609: (*IdOf)(nil),              /* IdOf: */
	1080512400466662143:  (*Includes)(nil),          /* Contains:part: */
	9915543600215807772:  (*IntoObj)(nil),           /* ObjField: */
	16034994987020741904: (*IntoVar)(nil),           /* VarField: */
	3262909017575450402:  (*IsEmpty)(nil),           /* Is empty: */
	9266285462670386846:  (*IsExactKindOf)(nil),     /* KindOf:isExactly: */
	8240640059307590354:  (*IsKindOf)(nil),          /* KindOf:is: */
	8856805864711625497:  (*Join)(nil),              /* Join:parts: */
	11296148874053869044: (*KindOf)(nil),            /* KindOf: */
	17605671480000835281: (*KindsOf)(nil),           /* KindsOf: */
	13322186486440282691: (*LessThan)(nil),          /* LessThan */
	13496033380132251392: (*MakeLowercase)(nil),     /* Lower: */
	1041569095092303606:  (*MakeReversed)(nil),      /* Reverse text: */
	1183160597042696586:  (*MakeSentenceCase)(nil),  /* Sentence: */
	14218506878958151209: (*MakeTitleCase)(nil),     /* Title: */
	6358042897234725735:  (*MakeUppercase)(nil),     /* Upper: */
	2713245075151573181:  (*Matches)(nil),           /* Matches:to: */
	3843862012941569591:  (*NameOf)(nil),            /* NameOf: */
	10058766148349444137: (*Never)(nil),             /* Never */
	653943369825436213:   (*Newline)(nil),           /* Br */
	1134746331002594312:  (*Next)(nil),              /* Next */
	7387800900385408432:  (*Not)(nil),               /* Not: */
	9668407916590545547:  (*NumValue)(nil),          /* Num: */
	17428560025310008846: (*Numbers)(nil),           /* Nums: */
	5910595103012063731:  (*ObjectExists)(nil),      /* Is valid: */
	737548260315376446:   (*Pluralize)(nil),         /* Plural of: */
	14901128508397332453: (*PrintNum)(nil),          /* Numeral: */
	16124696221349267254: (*PrintNumWord)(nil),      /* Numeral words: */
	6997154239603411150:  (*ProductOf)(nil),         /* Mul:by: */
	4203536933166593903:  (*PutAtField)(nil),        /* Put:from:at: */
	9642860352247282847:  (*QuotientOf)(nil),        /* Div:by: */
	17855808514151565940: (*RemainderOf)(nil),       /* Mod:by: */
	7052086945096604332:  (*Response)(nil),          /* Response: */
	4774612926507711811:  (*Response)(nil),          /* Response:text: */
	14613688398311225843: (*Row)(nil),               /* Row: */
	3616198808268747974:  (*Rows)(nil),              /* Rows: */
	3730533159734531406:  (*SayText)(nil),           /* Say: */
	4615224243559596965:  (*SetTrait)(nil),          /* Put obj:trait: */
	17621435589152331937: (*Singularize)(nil),       /* Singular of: */
	2005944222973282288:  (*SlashText)(nil),         /* Slashes: */
	8407401479373948554:  (*Softline)(nil),          /* Wbr */
	13947012081139838056: (*SpanText)(nil),          /* Spaces: */
	2338774282197734279:  (*SumOf)(nil),             /* Inc: */
	13375523970040178104: (*SumOf)(nil),             /* Inc:by: */
	15892234395983060559: (*TextValue)(nil),         /* Txt: */
	10570907516103306122: (*Texts)(nil),             /* Txts: */
	15065524158993996740: (*TriggerCycle)(nil),      /* Every */
	650855941173987400:   (*TriggerOnce)(nil),       /* At */
	15543013144495859017: (*TriggerSwitch)(nil),     /* After */
	320693597002023882:   (*Unequal)(nil),           /* OtherThan */
	11869639038566752997: (*While)(nil),             /* Repeating:do: */
}
