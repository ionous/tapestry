// Code generated by "makeops"; edit at your own risk.
package core

import (
	"git.sr.ht/~ionous/tapestry/dl/assign"
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/jsn"
	"git.sr.ht/~ionous/tapestry/rt"
	"github.com/ionous/errutil"
)

// AbsValue
type AbsValue struct {
	Value  rt.NumberEval `if:"label=value"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*AbsValue)(nil)

func (*AbsValue) Compose() composer.Spec {
	return composer.Spec{
		Name: AbsValue_Type,
		Uses: composer.Type_Flow,
		Lede: "absolute",
	}
}

const AbsValue_Type = "abs_value"
const AbsValue_Field_Value = "$VALUE"

func (op *AbsValue) Marshal(m jsn.Marshaler) error {
	return AbsValue_Marshal(m, op)
}

type AbsValue_Slice []AbsValue

func (op *AbsValue_Slice) GetType() string { return AbsValue_Type }

func (op *AbsValue_Slice) Marshal(m jsn.Marshaler) error {
	return AbsValue_Repeats_Marshal(m, (*[]AbsValue)(op))
}

func (op *AbsValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AbsValue_Slice) SetSize(cnt int) {
	var els []AbsValue
	if cnt >= 0 {
		els = make(AbsValue_Slice, cnt)
	}
	(*op) = els
}

func (op *AbsValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AbsValue_Marshal(m, &(*op)[i])
}

func AbsValue_Repeats_Marshal(m jsn.Marshaler, vals *[]AbsValue) error {
	return jsn.RepeatBlock(m, (*AbsValue_Slice)(vals))
}

func AbsValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AbsValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AbsValue_Repeats_Marshal(m, pv)
	}
	return
}

type AbsValue_Flow struct{ ptr *AbsValue }

func (n AbsValue_Flow) GetType() string      { return AbsValue_Type }
func (n AbsValue_Flow) GetLede() string      { return "absolute" }
func (n AbsValue_Flow) GetFlow() interface{} { return n.ptr }
func (n AbsValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AbsValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AbsValue_Optional_Marshal(m jsn.Marshaler, pv **AbsValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AbsValue_Marshal(m, *pv)
	} else if !enc {
		var v AbsValue
		if err = AbsValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AbsValue_Marshal(m jsn.Marshaler, val *AbsValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AbsValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("value", AbsValue_Field_Value)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AbsValue_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// AddValue Add two numbers.
type AddValue struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=value"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*AddValue)(nil)

func (*AddValue) Compose() composer.Spec {
	return composer.Spec{
		Name: AddValue_Type,
		Uses: composer.Type_Flow,
		Lede: "add",
	}
}

const AddValue_Type = "add_value"
const AddValue_Field_A = "$A"
const AddValue_Field_B = "$B"

func (op *AddValue) Marshal(m jsn.Marshaler) error {
	return AddValue_Marshal(m, op)
}

type AddValue_Slice []AddValue

func (op *AddValue_Slice) GetType() string { return AddValue_Type }

func (op *AddValue_Slice) Marshal(m jsn.Marshaler) error {
	return AddValue_Repeats_Marshal(m, (*[]AddValue)(op))
}

func (op *AddValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AddValue_Slice) SetSize(cnt int) {
	var els []AddValue
	if cnt >= 0 {
		els = make(AddValue_Slice, cnt)
	}
	(*op) = els
}

func (op *AddValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AddValue_Marshal(m, &(*op)[i])
}

func AddValue_Repeats_Marshal(m jsn.Marshaler, vals *[]AddValue) error {
	return jsn.RepeatBlock(m, (*AddValue_Slice)(vals))
}

func AddValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AddValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AddValue_Repeats_Marshal(m, pv)
	}
	return
}

type AddValue_Flow struct{ ptr *AddValue }

func (n AddValue_Flow) GetType() string      { return AddValue_Type }
func (n AddValue_Flow) GetLede() string      { return "add" }
func (n AddValue_Flow) GetFlow() interface{} { return n.ptr }
func (n AddValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AddValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AddValue_Optional_Marshal(m jsn.Marshaler, pv **AddValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AddValue_Marshal(m, *pv)
	} else if !enc {
		var v AddValue
		if err = AddValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AddValue_Marshal(m jsn.Marshaler, val *AddValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AddValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AddValue_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AddValue_Field_A))
		}
		e1 := m.MarshalKey("value", AddValue_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", AddValue_Field_B))
		}
		m.EndBlock()
	}
	return
}

// AllTrue Returns true if all of the evaluations are true.
type AllTrue struct {
	Test   []rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*AllTrue)(nil)

func (*AllTrue) Compose() composer.Spec {
	return composer.Spec{
		Name: AllTrue_Type,
		Uses: composer.Type_Flow,
	}
}

const AllTrue_Type = "all_true"
const AllTrue_Field_Test = "$TEST"

func (op *AllTrue) Marshal(m jsn.Marshaler) error {
	return AllTrue_Marshal(m, op)
}

type AllTrue_Slice []AllTrue

func (op *AllTrue_Slice) GetType() string { return AllTrue_Type }

func (op *AllTrue_Slice) Marshal(m jsn.Marshaler) error {
	return AllTrue_Repeats_Marshal(m, (*[]AllTrue)(op))
}

func (op *AllTrue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AllTrue_Slice) SetSize(cnt int) {
	var els []AllTrue
	if cnt >= 0 {
		els = make(AllTrue_Slice, cnt)
	}
	(*op) = els
}

func (op *AllTrue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AllTrue_Marshal(m, &(*op)[i])
}

func AllTrue_Repeats_Marshal(m jsn.Marshaler, vals *[]AllTrue) error {
	return jsn.RepeatBlock(m, (*AllTrue_Slice)(vals))
}

func AllTrue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AllTrue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AllTrue_Repeats_Marshal(m, pv)
	}
	return
}

type AllTrue_Flow struct{ ptr *AllTrue }

func (n AllTrue_Flow) GetType() string      { return AllTrue_Type }
func (n AllTrue_Flow) GetLede() string      { return AllTrue_Type }
func (n AllTrue_Flow) GetFlow() interface{} { return n.ptr }
func (n AllTrue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AllTrue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AllTrue_Optional_Marshal(m jsn.Marshaler, pv **AllTrue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AllTrue_Marshal(m, *pv)
	} else if !enc {
		var v AllTrue
		if err = AllTrue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AllTrue_Marshal(m jsn.Marshaler, val *AllTrue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AllTrue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AllTrue_Field_Test)
		if e0 == nil {
			e0 = rt.BoolEval_Repeats_Marshal(m, &val.Test)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AllTrue_Field_Test))
		}
		m.EndBlock()
	}
	return
}

// Always Returns true.
type Always struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Always)(nil)

func (*Always) Compose() composer.Spec {
	return composer.Spec{
		Name: Always_Type,
		Uses: composer.Type_Flow,
	}
}

const Always_Type = "always"

func (op *Always) Marshal(m jsn.Marshaler) error {
	return Always_Marshal(m, op)
}

type Always_Slice []Always

func (op *Always_Slice) GetType() string { return Always_Type }

func (op *Always_Slice) Marshal(m jsn.Marshaler) error {
	return Always_Repeats_Marshal(m, (*[]Always)(op))
}

func (op *Always_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Always_Slice) SetSize(cnt int) {
	var els []Always
	if cnt >= 0 {
		els = make(Always_Slice, cnt)
	}
	(*op) = els
}

func (op *Always_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Always_Marshal(m, &(*op)[i])
}

func Always_Repeats_Marshal(m jsn.Marshaler, vals *[]Always) error {
	return jsn.RepeatBlock(m, (*Always_Slice)(vals))
}

func Always_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Always) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Always_Repeats_Marshal(m, pv)
	}
	return
}

type Always_Flow struct{ ptr *Always }

func (n Always_Flow) GetType() string      { return Always_Type }
func (n Always_Flow) GetLede() string      { return Always_Type }
func (n Always_Flow) GetFlow() interface{} { return n.ptr }
func (n Always_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Always); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Always_Optional_Marshal(m jsn.Marshaler, pv **Always) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Always_Marshal(m, *pv)
	} else if !enc {
		var v Always
		if err = Always_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Always_Marshal(m jsn.Marshaler, val *Always) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Always_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// AnyTrue Returns true if any of the evaluations are true.
type AnyTrue struct {
	Test   []rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*AnyTrue)(nil)

func (*AnyTrue) Compose() composer.Spec {
	return composer.Spec{
		Name: AnyTrue_Type,
		Uses: composer.Type_Flow,
	}
}

const AnyTrue_Type = "any_true"
const AnyTrue_Field_Test = "$TEST"

func (op *AnyTrue) Marshal(m jsn.Marshaler) error {
	return AnyTrue_Marshal(m, op)
}

type AnyTrue_Slice []AnyTrue

func (op *AnyTrue_Slice) GetType() string { return AnyTrue_Type }

func (op *AnyTrue_Slice) Marshal(m jsn.Marshaler) error {
	return AnyTrue_Repeats_Marshal(m, (*[]AnyTrue)(op))
}

func (op *AnyTrue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AnyTrue_Slice) SetSize(cnt int) {
	var els []AnyTrue
	if cnt >= 0 {
		els = make(AnyTrue_Slice, cnt)
	}
	(*op) = els
}

func (op *AnyTrue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AnyTrue_Marshal(m, &(*op)[i])
}

func AnyTrue_Repeats_Marshal(m jsn.Marshaler, vals *[]AnyTrue) error {
	return jsn.RepeatBlock(m, (*AnyTrue_Slice)(vals))
}

func AnyTrue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AnyTrue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AnyTrue_Repeats_Marshal(m, pv)
	}
	return
}

type AnyTrue_Flow struct{ ptr *AnyTrue }

func (n AnyTrue_Flow) GetType() string      { return AnyTrue_Type }
func (n AnyTrue_Flow) GetLede() string      { return AnyTrue_Type }
func (n AnyTrue_Flow) GetFlow() interface{} { return n.ptr }
func (n AnyTrue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AnyTrue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AnyTrue_Optional_Marshal(m jsn.Marshaler, pv **AnyTrue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AnyTrue_Marshal(m, *pv)
	} else if !enc {
		var v AnyTrue
		if err = AnyTrue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AnyTrue_Marshal(m jsn.Marshaler, val *AnyTrue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AnyTrue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AnyTrue_Field_Test)
		if e0 == nil {
			e0 = rt.BoolEval_Repeats_Marshal(m, &val.Test)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AnyTrue_Field_Test))
		}
		m.EndBlock()
	}
	return
}

// Blankline Add a single blank line following some text.
type Blankline struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Blankline)(nil)

func (*Blankline) Compose() composer.Spec {
	return composer.Spec{
		Name: Blankline_Type,
		Uses: composer.Type_Flow,
		Lede: "p",
	}
}

const Blankline_Type = "blankline"

func (op *Blankline) Marshal(m jsn.Marshaler) error {
	return Blankline_Marshal(m, op)
}

type Blankline_Slice []Blankline

func (op *Blankline_Slice) GetType() string { return Blankline_Type }

func (op *Blankline_Slice) Marshal(m jsn.Marshaler) error {
	return Blankline_Repeats_Marshal(m, (*[]Blankline)(op))
}

func (op *Blankline_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Blankline_Slice) SetSize(cnt int) {
	var els []Blankline
	if cnt >= 0 {
		els = make(Blankline_Slice, cnt)
	}
	(*op) = els
}

func (op *Blankline_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Blankline_Marshal(m, &(*op)[i])
}

func Blankline_Repeats_Marshal(m jsn.Marshaler, vals *[]Blankline) error {
	return jsn.RepeatBlock(m, (*Blankline_Slice)(vals))
}

func Blankline_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Blankline) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Blankline_Repeats_Marshal(m, pv)
	}
	return
}

type Blankline_Flow struct{ ptr *Blankline }

func (n Blankline_Flow) GetType() string      { return Blankline_Type }
func (n Blankline_Flow) GetLede() string      { return "p" }
func (n Blankline_Flow) GetFlow() interface{} { return n.ptr }
func (n Blankline_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Blankline); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Blankline_Optional_Marshal(m jsn.Marshaler, pv **Blankline) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Blankline_Marshal(m, *pv)
	} else if !enc {
		var v Blankline
		if err = Blankline_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Blankline_Marshal(m jsn.Marshaler, val *Blankline) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Blankline_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// BracketText Sandwiches text printed during a block and puts them inside parenthesis '()'.
type BracketText struct {
	Exe    []rt.Execute `if:"label=do"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*BracketText)(nil)

func (*BracketText) Compose() composer.Spec {
	return composer.Spec{
		Name: BracketText_Type,
		Uses: composer.Type_Flow,
		Lede: "brackets",
	}
}

const BracketText_Type = "bracket_text"
const BracketText_Field_Exe = "$EXE"

func (op *BracketText) Marshal(m jsn.Marshaler) error {
	return BracketText_Marshal(m, op)
}

type BracketText_Slice []BracketText

func (op *BracketText_Slice) GetType() string { return BracketText_Type }

func (op *BracketText_Slice) Marshal(m jsn.Marshaler) error {
	return BracketText_Repeats_Marshal(m, (*[]BracketText)(op))
}

func (op *BracketText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *BracketText_Slice) SetSize(cnt int) {
	var els []BracketText
	if cnt >= 0 {
		els = make(BracketText_Slice, cnt)
	}
	(*op) = els
}

func (op *BracketText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return BracketText_Marshal(m, &(*op)[i])
}

func BracketText_Repeats_Marshal(m jsn.Marshaler, vals *[]BracketText) error {
	return jsn.RepeatBlock(m, (*BracketText_Slice)(vals))
}

func BracketText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]BracketText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = BracketText_Repeats_Marshal(m, pv)
	}
	return
}

type BracketText_Flow struct{ ptr *BracketText }

func (n BracketText_Flow) GetType() string      { return BracketText_Type }
func (n BracketText_Flow) GetLede() string      { return "brackets" }
func (n BracketText_Flow) GetFlow() interface{} { return n.ptr }
func (n BracketText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*BracketText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func BracketText_Optional_Marshal(m jsn.Marshaler, pv **BracketText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BracketText_Marshal(m, *pv)
	} else if !enc {
		var v BracketText
		if err = BracketText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BracketText_Marshal(m jsn.Marshaler, val *BracketText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(BracketText_Flow{val}); err == nil {
		e0 := m.MarshalKey("do", BracketText_Field_Exe)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", BracketText_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

const Brancher_Type = "brancher"

var Brancher_Optional_Marshal = Brancher_Marshal

type Brancher_Slot struct{ Value *Brancher }

func (at Brancher_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Brancher_Slot) GetType() string              { return Brancher_Type }
func (at Brancher_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Brancher_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Brancher)
	return
}

func Brancher_Marshal(m jsn.Marshaler, ptr *Brancher) (err error) {
	slot := Brancher_Slot{ptr}
	return slot.Marshal(m)
}

type Brancher_Slice []Brancher

func (op *Brancher_Slice) GetType() string { return Brancher_Type }

func (op *Brancher_Slice) Marshal(m jsn.Marshaler) error {
	return Brancher_Repeats_Marshal(m, (*[]Brancher)(op))
}

func (op *Brancher_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Brancher_Slice) SetSize(cnt int) {
	var els []Brancher
	if cnt >= 0 {
		els = make(Brancher_Slice, cnt)
	}
	(*op) = els
}

func (op *Brancher_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Brancher_Marshal(m, &(*op)[i])
}

func Brancher_Repeats_Marshal(m jsn.Marshaler, vals *[]Brancher) error {
	return jsn.RepeatBlock(m, (*Brancher_Slice)(vals))
}

func Brancher_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Brancher) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Brancher_Repeats_Marshal(m, pv)
	}
	return
}

// Break In a repeating loop, exit the loop;
// or, in a rule, stop processing rules.
type Break struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Break)(nil)

func (*Break) Compose() composer.Spec {
	return composer.Spec{
		Name: Break_Type,
		Uses: composer.Type_Flow,
	}
}

const Break_Type = "break"

func (op *Break) Marshal(m jsn.Marshaler) error {
	return Break_Marshal(m, op)
}

type Break_Slice []Break

func (op *Break_Slice) GetType() string { return Break_Type }

func (op *Break_Slice) Marshal(m jsn.Marshaler) error {
	return Break_Repeats_Marshal(m, (*[]Break)(op))
}

func (op *Break_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Break_Slice) SetSize(cnt int) {
	var els []Break
	if cnt >= 0 {
		els = make(Break_Slice, cnt)
	}
	(*op) = els
}

func (op *Break_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Break_Marshal(m, &(*op)[i])
}

func Break_Repeats_Marshal(m jsn.Marshaler, vals *[]Break) error {
	return jsn.RepeatBlock(m, (*Break_Slice)(vals))
}

func Break_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Break) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Break_Repeats_Marshal(m, pv)
	}
	return
}

type Break_Flow struct{ ptr *Break }

func (n Break_Flow) GetType() string      { return Break_Type }
func (n Break_Flow) GetLede() string      { return Break_Type }
func (n Break_Flow) GetFlow() interface{} { return n.ptr }
func (n Break_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Break); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Break_Optional_Marshal(m jsn.Marshaler, pv **Break) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Break_Marshal(m, *pv)
	} else if !enc {
		var v Break
		if err = Break_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Break_Marshal(m jsn.Marshaler, val *Break) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Break_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// BufferText
type BufferText struct {
	Exe    []rt.Execute `if:"label=do"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*BufferText)(nil)

func (*BufferText) Compose() composer.Spec {
	return composer.Spec{
		Name: BufferText_Type,
		Uses: composer.Type_Flow,
		Lede: "buffers",
	}
}

const BufferText_Type = "buffer_text"
const BufferText_Field_Exe = "$EXE"

func (op *BufferText) Marshal(m jsn.Marshaler) error {
	return BufferText_Marshal(m, op)
}

type BufferText_Slice []BufferText

func (op *BufferText_Slice) GetType() string { return BufferText_Type }

func (op *BufferText_Slice) Marshal(m jsn.Marshaler) error {
	return BufferText_Repeats_Marshal(m, (*[]BufferText)(op))
}

func (op *BufferText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *BufferText_Slice) SetSize(cnt int) {
	var els []BufferText
	if cnt >= 0 {
		els = make(BufferText_Slice, cnt)
	}
	(*op) = els
}

func (op *BufferText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return BufferText_Marshal(m, &(*op)[i])
}

func BufferText_Repeats_Marshal(m jsn.Marshaler, vals *[]BufferText) error {
	return jsn.RepeatBlock(m, (*BufferText_Slice)(vals))
}

func BufferText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]BufferText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = BufferText_Repeats_Marshal(m, pv)
	}
	return
}

type BufferText_Flow struct{ ptr *BufferText }

func (n BufferText_Flow) GetType() string      { return BufferText_Type }
func (n BufferText_Flow) GetLede() string      { return "buffers" }
func (n BufferText_Flow) GetFlow() interface{} { return n.ptr }
func (n BufferText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*BufferText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func BufferText_Optional_Marshal(m jsn.Marshaler, pv **BufferText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BufferText_Marshal(m, *pv)
	} else if !enc {
		var v BufferText
		if err = BufferText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BufferText_Marshal(m jsn.Marshaler, val *BufferText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(BufferText_Flow{val}); err == nil {
		e0 := m.MarshalKey("do", BufferText_Field_Exe)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", BufferText_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

// CallCycle Runtime version of cycle_text.
type CallCycle struct {
	Name   string        `if:"label=_,type=text"`
	Parts  []rt.TextEval `if:"label=over"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*CallCycle)(nil)

func (*CallCycle) Compose() composer.Spec {
	return composer.Spec{
		Name: CallCycle_Type,
		Uses: composer.Type_Flow,
		Lede: "cycle",
	}
}

const CallCycle_Type = "call_cycle"
const CallCycle_Field_Name = "$NAME"
const CallCycle_Field_Parts = "$PARTS"

func (op *CallCycle) Marshal(m jsn.Marshaler) error {
	return CallCycle_Marshal(m, op)
}

type CallCycle_Slice []CallCycle

func (op *CallCycle_Slice) GetType() string { return CallCycle_Type }

func (op *CallCycle_Slice) Marshal(m jsn.Marshaler) error {
	return CallCycle_Repeats_Marshal(m, (*[]CallCycle)(op))
}

func (op *CallCycle_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallCycle_Slice) SetSize(cnt int) {
	var els []CallCycle
	if cnt >= 0 {
		els = make(CallCycle_Slice, cnt)
	}
	(*op) = els
}

func (op *CallCycle_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallCycle_Marshal(m, &(*op)[i])
}

func CallCycle_Repeats_Marshal(m jsn.Marshaler, vals *[]CallCycle) error {
	return jsn.RepeatBlock(m, (*CallCycle_Slice)(vals))
}

func CallCycle_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallCycle) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallCycle_Repeats_Marshal(m, pv)
	}
	return
}

type CallCycle_Flow struct{ ptr *CallCycle }

func (n CallCycle_Flow) GetType() string      { return CallCycle_Type }
func (n CallCycle_Flow) GetLede() string      { return "cycle" }
func (n CallCycle_Flow) GetFlow() interface{} { return n.ptr }
func (n CallCycle_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallCycle); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallCycle_Optional_Marshal(m jsn.Marshaler, pv **CallCycle) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallCycle_Marshal(m, *pv)
	} else if !enc {
		var v CallCycle
		if err = CallCycle_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallCycle_Marshal(m jsn.Marshaler, val *CallCycle) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallCycle_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallCycle_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallCycle_Field_Name))
		}
		e1 := m.MarshalKey("over", CallCycle_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallCycle_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// CallShuffle Runtime version of shuffle_text.
type CallShuffle struct {
	Name    string        `if:"label=_,type=text"`
	Parts   []rt.TextEval `if:"label=over"`
	Indices Shuffler      `if:"internal"`
	Markup  map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*CallShuffle)(nil)

func (*CallShuffle) Compose() composer.Spec {
	return composer.Spec{
		Name: CallShuffle_Type,
		Uses: composer.Type_Flow,
		Lede: "shuffle",
	}
}

const CallShuffle_Type = "call_shuffle"
const CallShuffle_Field_Name = "$NAME"
const CallShuffle_Field_Parts = "$PARTS"

func (op *CallShuffle) Marshal(m jsn.Marshaler) error {
	return CallShuffle_Marshal(m, op)
}

type CallShuffle_Slice []CallShuffle

func (op *CallShuffle_Slice) GetType() string { return CallShuffle_Type }

func (op *CallShuffle_Slice) Marshal(m jsn.Marshaler) error {
	return CallShuffle_Repeats_Marshal(m, (*[]CallShuffle)(op))
}

func (op *CallShuffle_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallShuffle_Slice) SetSize(cnt int) {
	var els []CallShuffle
	if cnt >= 0 {
		els = make(CallShuffle_Slice, cnt)
	}
	(*op) = els
}

func (op *CallShuffle_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallShuffle_Marshal(m, &(*op)[i])
}

func CallShuffle_Repeats_Marshal(m jsn.Marshaler, vals *[]CallShuffle) error {
	return jsn.RepeatBlock(m, (*CallShuffle_Slice)(vals))
}

func CallShuffle_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallShuffle) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallShuffle_Repeats_Marshal(m, pv)
	}
	return
}

type CallShuffle_Flow struct{ ptr *CallShuffle }

func (n CallShuffle_Flow) GetType() string      { return CallShuffle_Type }
func (n CallShuffle_Flow) GetLede() string      { return "shuffle" }
func (n CallShuffle_Flow) GetFlow() interface{} { return n.ptr }
func (n CallShuffle_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallShuffle); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallShuffle_Optional_Marshal(m jsn.Marshaler, pv **CallShuffle) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallShuffle_Marshal(m, *pv)
	} else if !enc {
		var v CallShuffle
		if err = CallShuffle_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallShuffle_Marshal(m jsn.Marshaler, val *CallShuffle) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallShuffle_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallShuffle_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallShuffle_Field_Name))
		}
		e1 := m.MarshalKey("over", CallShuffle_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallShuffle_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// CallTerminal Runtime version of stopping_text.
type CallTerminal struct {
	Name   string        `if:"label=_,type=text"`
	Parts  []rt.TextEval `if:"label=over"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*CallTerminal)(nil)

func (*CallTerminal) Compose() composer.Spec {
	return composer.Spec{
		Name: CallTerminal_Type,
		Uses: composer.Type_Flow,
		Lede: "stopping",
	}
}

const CallTerminal_Type = "call_terminal"
const CallTerminal_Field_Name = "$NAME"
const CallTerminal_Field_Parts = "$PARTS"

func (op *CallTerminal) Marshal(m jsn.Marshaler) error {
	return CallTerminal_Marshal(m, op)
}

type CallTerminal_Slice []CallTerminal

func (op *CallTerminal_Slice) GetType() string { return CallTerminal_Type }

func (op *CallTerminal_Slice) Marshal(m jsn.Marshaler) error {
	return CallTerminal_Repeats_Marshal(m, (*[]CallTerminal)(op))
}

func (op *CallTerminal_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallTerminal_Slice) SetSize(cnt int) {
	var els []CallTerminal
	if cnt >= 0 {
		els = make(CallTerminal_Slice, cnt)
	}
	(*op) = els
}

func (op *CallTerminal_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallTerminal_Marshal(m, &(*op)[i])
}

func CallTerminal_Repeats_Marshal(m jsn.Marshaler, vals *[]CallTerminal) error {
	return jsn.RepeatBlock(m, (*CallTerminal_Slice)(vals))
}

func CallTerminal_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallTerminal) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallTerminal_Repeats_Marshal(m, pv)
	}
	return
}

type CallTerminal_Flow struct{ ptr *CallTerminal }

func (n CallTerminal_Flow) GetType() string      { return CallTerminal_Type }
func (n CallTerminal_Flow) GetLede() string      { return "stopping" }
func (n CallTerminal_Flow) GetFlow() interface{} { return n.ptr }
func (n CallTerminal_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallTerminal); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallTerminal_Optional_Marshal(m jsn.Marshaler, pv **CallTerminal) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallTerminal_Marshal(m, *pv)
	} else if !enc {
		var v CallTerminal
		if err = CallTerminal_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallTerminal_Marshal(m jsn.Marshaler, val *CallTerminal) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallTerminal_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallTerminal_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallTerminal_Field_Name))
		}
		e1 := m.MarshalKey("over", CallTerminal_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallTerminal_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// CallTrigger Runtime version of count_of.
type CallTrigger struct {
	Name    string        `if:"label=_,type=text"`
	Trigger Trigger       `if:"label=on"`
	Num     rt.NumberEval `if:"label=num"`
	Markup  map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*CallTrigger)(nil)

func (*CallTrigger) Compose() composer.Spec {
	return composer.Spec{
		Name: CallTrigger_Type,
		Uses: composer.Type_Flow,
		Lede: "trigger",
	}
}

const CallTrigger_Type = "call_trigger"
const CallTrigger_Field_Name = "$NAME"
const CallTrigger_Field_Trigger = "$TRIGGER"
const CallTrigger_Field_Num = "$NUM"

func (op *CallTrigger) Marshal(m jsn.Marshaler) error {
	return CallTrigger_Marshal(m, op)
}

type CallTrigger_Slice []CallTrigger

func (op *CallTrigger_Slice) GetType() string { return CallTrigger_Type }

func (op *CallTrigger_Slice) Marshal(m jsn.Marshaler) error {
	return CallTrigger_Repeats_Marshal(m, (*[]CallTrigger)(op))
}

func (op *CallTrigger_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallTrigger_Slice) SetSize(cnt int) {
	var els []CallTrigger
	if cnt >= 0 {
		els = make(CallTrigger_Slice, cnt)
	}
	(*op) = els
}

func (op *CallTrigger_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallTrigger_Marshal(m, &(*op)[i])
}

func CallTrigger_Repeats_Marshal(m jsn.Marshaler, vals *[]CallTrigger) error {
	return jsn.RepeatBlock(m, (*CallTrigger_Slice)(vals))
}

func CallTrigger_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallTrigger) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallTrigger_Repeats_Marshal(m, pv)
	}
	return
}

type CallTrigger_Flow struct{ ptr *CallTrigger }

func (n CallTrigger_Flow) GetType() string      { return CallTrigger_Type }
func (n CallTrigger_Flow) GetLede() string      { return "trigger" }
func (n CallTrigger_Flow) GetFlow() interface{} { return n.ptr }
func (n CallTrigger_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallTrigger); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallTrigger_Optional_Marshal(m jsn.Marshaler, pv **CallTrigger) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallTrigger_Marshal(m, *pv)
	} else if !enc {
		var v CallTrigger
		if err = CallTrigger_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallTrigger_Marshal(m jsn.Marshaler, val *CallTrigger) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallTrigger_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallTrigger_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallTrigger_Field_Name))
		}
		e1 := m.MarshalKey("on", CallTrigger_Field_Trigger)
		if e1 == nil {
			e1 = Trigger_Marshal(m, &val.Trigger)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallTrigger_Field_Trigger))
		}
		e2 := m.MarshalKey("num", CallTrigger_Field_Num)
		if e2 == nil {
			e2 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CallTrigger_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// Capitalize Returns new text, with the first letter turned into uppercase.
type Capitalize struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Capitalize)(nil)

func (*Capitalize) Compose() composer.Spec {
	return composer.Spec{
		Name: Capitalize_Type,
		Uses: composer.Type_Flow,
	}
}

const Capitalize_Type = "capitalize"
const Capitalize_Field_Text = "$TEXT"

func (op *Capitalize) Marshal(m jsn.Marshaler) error {
	return Capitalize_Marshal(m, op)
}

type Capitalize_Slice []Capitalize

func (op *Capitalize_Slice) GetType() string { return Capitalize_Type }

func (op *Capitalize_Slice) Marshal(m jsn.Marshaler) error {
	return Capitalize_Repeats_Marshal(m, (*[]Capitalize)(op))
}

func (op *Capitalize_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Capitalize_Slice) SetSize(cnt int) {
	var els []Capitalize
	if cnt >= 0 {
		els = make(Capitalize_Slice, cnt)
	}
	(*op) = els
}

func (op *Capitalize_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Capitalize_Marshal(m, &(*op)[i])
}

func Capitalize_Repeats_Marshal(m jsn.Marshaler, vals *[]Capitalize) error {
	return jsn.RepeatBlock(m, (*Capitalize_Slice)(vals))
}

func Capitalize_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Capitalize) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Capitalize_Repeats_Marshal(m, pv)
	}
	return
}

type Capitalize_Flow struct{ ptr *Capitalize }

func (n Capitalize_Flow) GetType() string      { return Capitalize_Type }
func (n Capitalize_Flow) GetLede() string      { return Capitalize_Type }
func (n Capitalize_Flow) GetFlow() interface{} { return n.ptr }
func (n Capitalize_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Capitalize); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Capitalize_Optional_Marshal(m jsn.Marshaler, pv **Capitalize) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Capitalize_Marshal(m, *pv)
	} else if !enc {
		var v Capitalize
		if err = Capitalize_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Capitalize_Marshal(m jsn.Marshaler, val *Capitalize) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Capitalize_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Capitalize_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Capitalize_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// ChooseBranch An if statement.
// The provided local fields are evaluated before the if test itself.
type ChooseBranch struct {
	If     rt.BoolEval  `if:"label=_"`
	Args   []assign.Arg `if:"label=assuming,optional"`
	Exe    []rt.Execute `if:"label=do"`
	Else   Brancher     `if:"label=else,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*ChooseBranch)(nil)
var _ Brancher = (*ChooseBranch)(nil)

func (*ChooseBranch) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseBranch_Type,
		Uses: composer.Type_Flow,
		Lede: "if",
	}
}

const ChooseBranch_Type = "choose_branch"
const ChooseBranch_Field_If = "$IF"
const ChooseBranch_Field_Args = "$ARGS"
const ChooseBranch_Field_Exe = "$EXE"
const ChooseBranch_Field_Else = "$ELSE"

func (op *ChooseBranch) Marshal(m jsn.Marshaler) error {
	return ChooseBranch_Marshal(m, op)
}

type ChooseBranch_Slice []ChooseBranch

func (op *ChooseBranch_Slice) GetType() string { return ChooseBranch_Type }

func (op *ChooseBranch_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseBranch_Repeats_Marshal(m, (*[]ChooseBranch)(op))
}

func (op *ChooseBranch_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseBranch_Slice) SetSize(cnt int) {
	var els []ChooseBranch
	if cnt >= 0 {
		els = make(ChooseBranch_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseBranch_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseBranch_Marshal(m, &(*op)[i])
}

func ChooseBranch_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseBranch) error {
	return jsn.RepeatBlock(m, (*ChooseBranch_Slice)(vals))
}

func ChooseBranch_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseBranch) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseBranch_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseBranch_Flow struct{ ptr *ChooseBranch }

func (n ChooseBranch_Flow) GetType() string      { return ChooseBranch_Type }
func (n ChooseBranch_Flow) GetLede() string      { return "if" }
func (n ChooseBranch_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseBranch_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseBranch); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseBranch_Optional_Marshal(m jsn.Marshaler, pv **ChooseBranch) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseBranch_Marshal(m, *pv)
	} else if !enc {
		var v ChooseBranch
		if err = ChooseBranch_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseBranch_Marshal(m jsn.Marshaler, val *ChooseBranch) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseBranch_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ChooseBranch_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseBranch_Field_If))
		}
		e1 := m.MarshalKey("assuming", ChooseBranch_Field_Args)
		if e1 == nil {
			e1 = assign.Arg_Optional_Repeats_Marshal(m, &val.Args)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseBranch_Field_Args))
		}
		e2 := m.MarshalKey("do", ChooseBranch_Field_Exe)
		if e2 == nil {
			e2 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseBranch_Field_Exe))
		}
		e3 := m.MarshalKey("else", ChooseBranch_Field_Else)
		if e3 == nil {
			e3 = Brancher_Optional_Marshal(m, &val.Else)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", ChooseBranch_Field_Else))
		}
		m.EndBlock()
	}
	return
}

// ChooseNothingElse
type ChooseNothingElse struct {
	Exe    []rt.Execute `if:"label=do"`
	Markup map[string]any
}

// User implemented slots:
var _ Brancher = (*ChooseNothingElse)(nil)

func (*ChooseNothingElse) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseNothingElse_Type,
		Uses: composer.Type_Flow,
		Lede: "finally",
	}
}

const ChooseNothingElse_Type = "choose_nothing_else"
const ChooseNothingElse_Field_Exe = "$EXE"

func (op *ChooseNothingElse) Marshal(m jsn.Marshaler) error {
	return ChooseNothingElse_Marshal(m, op)
}

type ChooseNothingElse_Slice []ChooseNothingElse

func (op *ChooseNothingElse_Slice) GetType() string { return ChooseNothingElse_Type }

func (op *ChooseNothingElse_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseNothingElse_Repeats_Marshal(m, (*[]ChooseNothingElse)(op))
}

func (op *ChooseNothingElse_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseNothingElse_Slice) SetSize(cnt int) {
	var els []ChooseNothingElse
	if cnt >= 0 {
		els = make(ChooseNothingElse_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseNothingElse_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseNothingElse_Marshal(m, &(*op)[i])
}

func ChooseNothingElse_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseNothingElse) error {
	return jsn.RepeatBlock(m, (*ChooseNothingElse_Slice)(vals))
}

func ChooseNothingElse_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseNothingElse) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseNothingElse_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseNothingElse_Flow struct{ ptr *ChooseNothingElse }

func (n ChooseNothingElse_Flow) GetType() string      { return ChooseNothingElse_Type }
func (n ChooseNothingElse_Flow) GetLede() string      { return "finally" }
func (n ChooseNothingElse_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseNothingElse_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseNothingElse); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseNothingElse_Optional_Marshal(m jsn.Marshaler, pv **ChooseNothingElse) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseNothingElse_Marshal(m, *pv)
	} else if !enc {
		var v ChooseNothingElse
		if err = ChooseNothingElse_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseNothingElse_Marshal(m jsn.Marshaler, val *ChooseNothingElse) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseNothingElse_Flow{val}); err == nil {
		e0 := m.MarshalKey("do", ChooseNothingElse_Field_Exe)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseNothingElse_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

// ChooseNum Pick one of two numbers based on a boolean test.
type ChooseNum struct {
	If     rt.BoolEval   `if:"label=if"`
	True   rt.NumberEval `if:"label=then"`
	False  rt.NumberEval `if:"label=else,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*ChooseNum)(nil)

func (*ChooseNum) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseNum_Type,
		Uses: composer.Type_Flow,
		Lede: "num",
	}
}

const ChooseNum_Type = "choose_num"
const ChooseNum_Field_If = "$IF"
const ChooseNum_Field_True = "$TRUE"
const ChooseNum_Field_False = "$FALSE"

func (op *ChooseNum) Marshal(m jsn.Marshaler) error {
	return ChooseNum_Marshal(m, op)
}

type ChooseNum_Slice []ChooseNum

func (op *ChooseNum_Slice) GetType() string { return ChooseNum_Type }

func (op *ChooseNum_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseNum_Repeats_Marshal(m, (*[]ChooseNum)(op))
}

func (op *ChooseNum_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseNum_Slice) SetSize(cnt int) {
	var els []ChooseNum
	if cnt >= 0 {
		els = make(ChooseNum_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseNum_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseNum_Marshal(m, &(*op)[i])
}

func ChooseNum_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseNum) error {
	return jsn.RepeatBlock(m, (*ChooseNum_Slice)(vals))
}

func ChooseNum_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseNum) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseNum_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseNum_Flow struct{ ptr *ChooseNum }

func (n ChooseNum_Flow) GetType() string      { return ChooseNum_Type }
func (n ChooseNum_Flow) GetLede() string      { return "num" }
func (n ChooseNum_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseNum_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseNum); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseNum_Optional_Marshal(m jsn.Marshaler, pv **ChooseNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseNum_Marshal(m, *pv)
	} else if !enc {
		var v ChooseNum
		if err = ChooseNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseNum_Marshal(m jsn.Marshaler, val *ChooseNum) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseNum_Flow{val}); err == nil {
		e0 := m.MarshalKey("if", ChooseNum_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseNum_Field_If))
		}
		e1 := m.MarshalKey("then", ChooseNum_Field_True)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.True)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseNum_Field_True))
		}
		e2 := m.MarshalKey("else", ChooseNum_Field_False)
		if e2 == nil {
			e2 = rt.NumberEval_Optional_Marshal(m, &val.False)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseNum_Field_False))
		}
		m.EndBlock()
	}
	return
}

// ChooseText Pick one of two strings based on a boolean test.
type ChooseText struct {
	If     rt.BoolEval `if:"label=if"`
	True   rt.TextEval `if:"label=then"`
	False  rt.TextEval `if:"label=else,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*ChooseText)(nil)

func (*ChooseText) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseText_Type,
		Uses: composer.Type_Flow,
		Lede: "txt",
	}
}

const ChooseText_Type = "choose_text"
const ChooseText_Field_If = "$IF"
const ChooseText_Field_True = "$TRUE"
const ChooseText_Field_False = "$FALSE"

func (op *ChooseText) Marshal(m jsn.Marshaler) error {
	return ChooseText_Marshal(m, op)
}

type ChooseText_Slice []ChooseText

func (op *ChooseText_Slice) GetType() string { return ChooseText_Type }

func (op *ChooseText_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseText_Repeats_Marshal(m, (*[]ChooseText)(op))
}

func (op *ChooseText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseText_Slice) SetSize(cnt int) {
	var els []ChooseText
	if cnt >= 0 {
		els = make(ChooseText_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseText_Marshal(m, &(*op)[i])
}

func ChooseText_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseText) error {
	return jsn.RepeatBlock(m, (*ChooseText_Slice)(vals))
}

func ChooseText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseText_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseText_Flow struct{ ptr *ChooseText }

func (n ChooseText_Flow) GetType() string      { return ChooseText_Type }
func (n ChooseText_Flow) GetLede() string      { return "txt" }
func (n ChooseText_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseText_Optional_Marshal(m jsn.Marshaler, pv **ChooseText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseText_Marshal(m, *pv)
	} else if !enc {
		var v ChooseText
		if err = ChooseText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseText_Marshal(m jsn.Marshaler, val *ChooseText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseText_Flow{val}); err == nil {
		e0 := m.MarshalKey("if", ChooseText_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseText_Field_If))
		}
		e1 := m.MarshalKey("then", ChooseText_Field_True)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.True)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseText_Field_True))
		}
		e2 := m.MarshalKey("else", ChooseText_Field_False)
		if e2 == nil {
			e2 = rt.TextEval_Optional_Marshal(m, &val.False)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseText_Field_False))
		}
		m.EndBlock()
	}
	return
}

// CommaText Separates words with commas, and 'and'.
type CommaText struct {
	Exe    []rt.Execute `if:"label=do"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*CommaText)(nil)

func (*CommaText) Compose() composer.Spec {
	return composer.Spec{
		Name: CommaText_Type,
		Uses: composer.Type_Flow,
		Lede: "commas",
	}
}

const CommaText_Type = "comma_text"
const CommaText_Field_Exe = "$EXE"

func (op *CommaText) Marshal(m jsn.Marshaler) error {
	return CommaText_Marshal(m, op)
}

type CommaText_Slice []CommaText

func (op *CommaText_Slice) GetType() string { return CommaText_Type }

func (op *CommaText_Slice) Marshal(m jsn.Marshaler) error {
	return CommaText_Repeats_Marshal(m, (*[]CommaText)(op))
}

func (op *CommaText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CommaText_Slice) SetSize(cnt int) {
	var els []CommaText
	if cnt >= 0 {
		els = make(CommaText_Slice, cnt)
	}
	(*op) = els
}

func (op *CommaText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CommaText_Marshal(m, &(*op)[i])
}

func CommaText_Repeats_Marshal(m jsn.Marshaler, vals *[]CommaText) error {
	return jsn.RepeatBlock(m, (*CommaText_Slice)(vals))
}

func CommaText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CommaText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CommaText_Repeats_Marshal(m, pv)
	}
	return
}

type CommaText_Flow struct{ ptr *CommaText }

func (n CommaText_Flow) GetType() string      { return CommaText_Type }
func (n CommaText_Flow) GetLede() string      { return "commas" }
func (n CommaText_Flow) GetFlow() interface{} { return n.ptr }
func (n CommaText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CommaText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CommaText_Optional_Marshal(m jsn.Marshaler, pv **CommaText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CommaText_Marshal(m, *pv)
	} else if !enc {
		var v CommaText
		if err = CommaText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CommaText_Marshal(m jsn.Marshaler, val *CommaText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CommaText_Flow{val}); err == nil {
		e0 := m.MarshalKey("do", CommaText_Field_Exe)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CommaText_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

// CompareNum True if eq,ne,gt,lt,ge,le two numbers.
type CompareNum struct {
	A         rt.NumberEval `if:"label=_"`
	Is        Comparison    `if:"label=matching"`
	B         rt.NumberEval `if:"label=num"`
	Tolerance float64       `if:"label=within,optional,type=number"`
	Markup    map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*CompareNum)(nil)

func (*CompareNum) Compose() composer.Spec {
	return composer.Spec{
		Name: CompareNum_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const CompareNum_Type = "compare_num"
const CompareNum_Field_A = "$A"
const CompareNum_Field_Is = "$IS"
const CompareNum_Field_B = "$B"
const CompareNum_Field_Tolerance = "$TOLERANCE"

func (op *CompareNum) Marshal(m jsn.Marshaler) error {
	return CompareNum_Marshal(m, op)
}

type CompareNum_Slice []CompareNum

func (op *CompareNum_Slice) GetType() string { return CompareNum_Type }

func (op *CompareNum_Slice) Marshal(m jsn.Marshaler) error {
	return CompareNum_Repeats_Marshal(m, (*[]CompareNum)(op))
}

func (op *CompareNum_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CompareNum_Slice) SetSize(cnt int) {
	var els []CompareNum
	if cnt >= 0 {
		els = make(CompareNum_Slice, cnt)
	}
	(*op) = els
}

func (op *CompareNum_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CompareNum_Marshal(m, &(*op)[i])
}

func CompareNum_Repeats_Marshal(m jsn.Marshaler, vals *[]CompareNum) error {
	return jsn.RepeatBlock(m, (*CompareNum_Slice)(vals))
}

func CompareNum_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CompareNum) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CompareNum_Repeats_Marshal(m, pv)
	}
	return
}

type CompareNum_Flow struct{ ptr *CompareNum }

func (n CompareNum_Flow) GetType() string      { return CompareNum_Type }
func (n CompareNum_Flow) GetLede() string      { return "is" }
func (n CompareNum_Flow) GetFlow() interface{} { return n.ptr }
func (n CompareNum_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CompareNum); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CompareNum_Optional_Marshal(m jsn.Marshaler, pv **CompareNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CompareNum_Marshal(m, *pv)
	} else if !enc {
		var v CompareNum
		if err = CompareNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CompareNum_Marshal(m jsn.Marshaler, val *CompareNum) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CompareNum_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CompareNum_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CompareNum_Field_A))
		}
		e1 := m.MarshalKey("matching", CompareNum_Field_Is)
		if e1 == nil {
			e1 = Comparison_Marshal(m, &val.Is)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CompareNum_Field_Is))
		}
		e2 := m.MarshalKey("num", CompareNum_Field_B)
		if e2 == nil {
			e2 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CompareNum_Field_B))
		}
		e3 := m.MarshalKey("within", CompareNum_Field_Tolerance)
		if e3 == nil {
			e3 = prim.Number_Unboxed_Optional_Marshal(m, &val.Tolerance)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", CompareNum_Field_Tolerance))
		}
		m.EndBlock()
	}
	return
}

// CompareText True if eq,ne,gt,lt,ge,le two strings ( lexical. ).
type CompareText struct {
	A      rt.TextEval `if:"label=_"`
	Is     Comparison  `if:"label=matching"`
	B      rt.TextEval `if:"label=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*CompareText)(nil)

func (*CompareText) Compose() composer.Spec {
	return composer.Spec{
		Name: CompareText_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const CompareText_Type = "compare_text"
const CompareText_Field_A = "$A"
const CompareText_Field_Is = "$IS"
const CompareText_Field_B = "$B"

func (op *CompareText) Marshal(m jsn.Marshaler) error {
	return CompareText_Marshal(m, op)
}

type CompareText_Slice []CompareText

func (op *CompareText_Slice) GetType() string { return CompareText_Type }

func (op *CompareText_Slice) Marshal(m jsn.Marshaler) error {
	return CompareText_Repeats_Marshal(m, (*[]CompareText)(op))
}

func (op *CompareText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CompareText_Slice) SetSize(cnt int) {
	var els []CompareText
	if cnt >= 0 {
		els = make(CompareText_Slice, cnt)
	}
	(*op) = els
}

func (op *CompareText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CompareText_Marshal(m, &(*op)[i])
}

func CompareText_Repeats_Marshal(m jsn.Marshaler, vals *[]CompareText) error {
	return jsn.RepeatBlock(m, (*CompareText_Slice)(vals))
}

func CompareText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CompareText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CompareText_Repeats_Marshal(m, pv)
	}
	return
}

type CompareText_Flow struct{ ptr *CompareText }

func (n CompareText_Flow) GetType() string      { return CompareText_Type }
func (n CompareText_Flow) GetLede() string      { return "is" }
func (n CompareText_Flow) GetFlow() interface{} { return n.ptr }
func (n CompareText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CompareText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CompareText_Optional_Marshal(m jsn.Marshaler, pv **CompareText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CompareText_Marshal(m, *pv)
	} else if !enc {
		var v CompareText
		if err = CompareText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CompareText_Marshal(m jsn.Marshaler, val *CompareText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CompareText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CompareText_Field_A)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CompareText_Field_A))
		}
		e1 := m.MarshalKey("matching", CompareText_Field_Is)
		if e1 == nil {
			e1 = Comparison_Marshal(m, &val.Is)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CompareText_Field_Is))
		}
		e2 := m.MarshalKey("text", CompareText_Field_B)
		if e2 == nil {
			e2 = rt.TextEval_Marshal(m, &val.B)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CompareText_Field_B))
		}
		m.EndBlock()
	}
	return
}

// CompareValue True if eq,ne,gt,lt,ge,le two numbers.
type CompareValue struct {
	A      rt.Assignment `if:"label=_"`
	Is     Comparison    `if:"label=matching"`
	B      rt.Assignment `if:"label=value"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*CompareValue)(nil)

func (*CompareValue) Compose() composer.Spec {
	return composer.Spec{
		Name: CompareValue_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const CompareValue_Type = "compare_value"
const CompareValue_Field_A = "$A"
const CompareValue_Field_Is = "$IS"
const CompareValue_Field_B = "$B"

func (op *CompareValue) Marshal(m jsn.Marshaler) error {
	return CompareValue_Marshal(m, op)
}

type CompareValue_Slice []CompareValue

func (op *CompareValue_Slice) GetType() string { return CompareValue_Type }

func (op *CompareValue_Slice) Marshal(m jsn.Marshaler) error {
	return CompareValue_Repeats_Marshal(m, (*[]CompareValue)(op))
}

func (op *CompareValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CompareValue_Slice) SetSize(cnt int) {
	var els []CompareValue
	if cnt >= 0 {
		els = make(CompareValue_Slice, cnt)
	}
	(*op) = els
}

func (op *CompareValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CompareValue_Marshal(m, &(*op)[i])
}

func CompareValue_Repeats_Marshal(m jsn.Marshaler, vals *[]CompareValue) error {
	return jsn.RepeatBlock(m, (*CompareValue_Slice)(vals))
}

func CompareValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CompareValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CompareValue_Repeats_Marshal(m, pv)
	}
	return
}

type CompareValue_Flow struct{ ptr *CompareValue }

func (n CompareValue_Flow) GetType() string      { return CompareValue_Type }
func (n CompareValue_Flow) GetLede() string      { return "is" }
func (n CompareValue_Flow) GetFlow() interface{} { return n.ptr }
func (n CompareValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CompareValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CompareValue_Optional_Marshal(m jsn.Marshaler, pv **CompareValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CompareValue_Marshal(m, *pv)
	} else if !enc {
		var v CompareValue
		if err = CompareValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CompareValue_Marshal(m jsn.Marshaler, val *CompareValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CompareValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CompareValue_Field_A)
		if e0 == nil {
			e0 = rt.Assignment_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CompareValue_Field_A))
		}
		e1 := m.MarshalKey("matching", CompareValue_Field_Is)
		if e1 == nil {
			e1 = Comparison_Marshal(m, &val.Is)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CompareValue_Field_Is))
		}
		e2 := m.MarshalKey("value", CompareValue_Field_B)
		if e2 == nil {
			e2 = rt.Assignment_Marshal(m, &val.B)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CompareValue_Field_B))
		}
		m.EndBlock()
	}
	return
}

// Comparison requires a predefined string.
type Comparison struct {
	Str string
}

func (op *Comparison) String() string {
	return op.Str
}

const Comparison_EqualTo = "$EQUAL_TO"
const Comparison_OtherThan = "$OTHER_THAN"
const Comparison_GreaterThan = "$GREATER_THAN"
const Comparison_LessThan = "$LESS_THAN"
const Comparison_AtLeast = "$AT_LEAST"
const Comparison_AtMost = "$AT_MOST"

func (*Comparison) Compose() composer.Spec {
	return composer.Spec{
		Name: Comparison_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			Comparison_EqualTo, Comparison_OtherThan, Comparison_GreaterThan, Comparison_LessThan, Comparison_AtLeast, Comparison_AtMost,
		},
		Strings: []string{
			"equal_to", "other_than", "greater_than", "less_than", "at_least", "at_most",
		},
	}
}

const Comparison_Type = "comparison"

func (op *Comparison) Marshal(m jsn.Marshaler) error {
	return Comparison_Marshal(m, op)
}

func Comparison_Optional_Marshal(m jsn.Marshaler, val *Comparison) (err error) {
	var zero Comparison
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Comparison_Marshal(m, val)
	}
	return
}

func Comparison_Marshal(m jsn.Marshaler, val *Comparison) (err error) {
	return m.MarshalValue(Comparison_Type, jsn.MakeEnum(val, &val.Str))
}

type Comparison_Slice []Comparison

func (op *Comparison_Slice) GetType() string { return Comparison_Type }

func (op *Comparison_Slice) Marshal(m jsn.Marshaler) error {
	return Comparison_Repeats_Marshal(m, (*[]Comparison)(op))
}

func (op *Comparison_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Comparison_Slice) SetSize(cnt int) {
	var els []Comparison
	if cnt >= 0 {
		els = make(Comparison_Slice, cnt)
	}
	(*op) = els
}

func (op *Comparison_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Comparison_Marshal(m, &(*op)[i])
}

func Comparison_Repeats_Marshal(m jsn.Marshaler, vals *[]Comparison) error {
	return jsn.RepeatBlock(m, (*Comparison_Slice)(vals))
}

func Comparison_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Comparison) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Comparison_Repeats_Marshal(m, pv)
	}
	return
}

// Continue In a repeating loop, try the next iteration of the loop;
// or, in a rule, continue to the next rule.
type Continue struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Continue)(nil)

func (*Continue) Compose() composer.Spec {
	return composer.Spec{
		Name: Continue_Type,
		Uses: composer.Type_Flow,
	}
}

const Continue_Type = "continue"

func (op *Continue) Marshal(m jsn.Marshaler) error {
	return Continue_Marshal(m, op)
}

type Continue_Slice []Continue

func (op *Continue_Slice) GetType() string { return Continue_Type }

func (op *Continue_Slice) Marshal(m jsn.Marshaler) error {
	return Continue_Repeats_Marshal(m, (*[]Continue)(op))
}

func (op *Continue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Continue_Slice) SetSize(cnt int) {
	var els []Continue
	if cnt >= 0 {
		els = make(Continue_Slice, cnt)
	}
	(*op) = els
}

func (op *Continue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Continue_Marshal(m, &(*op)[i])
}

func Continue_Repeats_Marshal(m jsn.Marshaler, vals *[]Continue) error {
	return jsn.RepeatBlock(m, (*Continue_Slice)(vals))
}

func Continue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Continue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Continue_Repeats_Marshal(m, pv)
	}
	return
}

type Continue_Flow struct{ ptr *Continue }

func (n Continue_Flow) GetType() string      { return Continue_Type }
func (n Continue_Flow) GetLede() string      { return Continue_Type }
func (n Continue_Flow) GetFlow() interface{} { return n.ptr }
func (n Continue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Continue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Continue_Optional_Marshal(m jsn.Marshaler, pv **Continue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Continue_Marshal(m, *pv)
	} else if !enc {
		var v Continue
		if err = Continue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Continue_Marshal(m jsn.Marshaler, val *Continue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Continue_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// Decrement Decrease the value of a number held in by a variable or object field.
// Returns the new value of the number.
type Decrement struct {
	Target assign.Address `if:"label=_"`
	Step   rt.NumberEval  `if:"label=by,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*Decrement)(nil)
var _ rt.Execute = (*Decrement)(nil)

func (*Decrement) Compose() composer.Spec {
	return composer.Spec{
		Name: Decrement_Type,
		Uses: composer.Type_Flow,
		Lede: "decrease",
	}
}

const Decrement_Type = "decrement"
const Decrement_Field_Target = "$TARGET"
const Decrement_Field_Step = "$STEP"

func (op *Decrement) Marshal(m jsn.Marshaler) error {
	return Decrement_Marshal(m, op)
}

type Decrement_Slice []Decrement

func (op *Decrement_Slice) GetType() string { return Decrement_Type }

func (op *Decrement_Slice) Marshal(m jsn.Marshaler) error {
	return Decrement_Repeats_Marshal(m, (*[]Decrement)(op))
}

func (op *Decrement_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Decrement_Slice) SetSize(cnt int) {
	var els []Decrement
	if cnt >= 0 {
		els = make(Decrement_Slice, cnt)
	}
	(*op) = els
}

func (op *Decrement_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Decrement_Marshal(m, &(*op)[i])
}

func Decrement_Repeats_Marshal(m jsn.Marshaler, vals *[]Decrement) error {
	return jsn.RepeatBlock(m, (*Decrement_Slice)(vals))
}

func Decrement_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Decrement) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Decrement_Repeats_Marshal(m, pv)
	}
	return
}

type Decrement_Flow struct{ ptr *Decrement }

func (n Decrement_Flow) GetType() string      { return Decrement_Type }
func (n Decrement_Flow) GetLede() string      { return "decrease" }
func (n Decrement_Flow) GetFlow() interface{} { return n.ptr }
func (n Decrement_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Decrement); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Decrement_Optional_Marshal(m jsn.Marshaler, pv **Decrement) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Decrement_Marshal(m, *pv)
	} else if !enc {
		var v Decrement
		if err = Decrement_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Decrement_Marshal(m jsn.Marshaler, val *Decrement) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Decrement_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Decrement_Field_Target)
		if e0 == nil {
			e0 = assign.Address_Marshal(m, &val.Target)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Decrement_Field_Target))
		}
		e1 := m.MarshalKey("by", Decrement_Field_Step)
		if e1 == nil {
			e1 = rt.NumberEval_Optional_Marshal(m, &val.Step)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Decrement_Field_Step))
		}
		m.EndBlock()
	}
	return
}

// DecrementAspect Increases the value of a trait held by an object aspect.
// Returns the new value of the trait.
type DecrementAspect struct {
	Target rt.TextEval   `if:"label=_"`
	Aspect rt.TextEval   `if:"label=aspect"`
	Step   rt.NumberEval `if:"label=by,optional"`
	Clamp  rt.BoolEval   `if:"label=clamp,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*DecrementAspect)(nil)
var _ rt.Execute = (*DecrementAspect)(nil)

func (*DecrementAspect) Compose() composer.Spec {
	return composer.Spec{
		Name: DecrementAspect_Type,
		Uses: composer.Type_Flow,
		Lede: "decrease",
	}
}

const DecrementAspect_Type = "decrement_aspect"
const DecrementAspect_Field_Target = "$TARGET"
const DecrementAspect_Field_Aspect = "$ASPECT"
const DecrementAspect_Field_Step = "$STEP"
const DecrementAspect_Field_Clamp = "$CLAMP"

func (op *DecrementAspect) Marshal(m jsn.Marshaler) error {
	return DecrementAspect_Marshal(m, op)
}

type DecrementAspect_Slice []DecrementAspect

func (op *DecrementAspect_Slice) GetType() string { return DecrementAspect_Type }

func (op *DecrementAspect_Slice) Marshal(m jsn.Marshaler) error {
	return DecrementAspect_Repeats_Marshal(m, (*[]DecrementAspect)(op))
}

func (op *DecrementAspect_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DecrementAspect_Slice) SetSize(cnt int) {
	var els []DecrementAspect
	if cnt >= 0 {
		els = make(DecrementAspect_Slice, cnt)
	}
	(*op) = els
}

func (op *DecrementAspect_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DecrementAspect_Marshal(m, &(*op)[i])
}

func DecrementAspect_Repeats_Marshal(m jsn.Marshaler, vals *[]DecrementAspect) error {
	return jsn.RepeatBlock(m, (*DecrementAspect_Slice)(vals))
}

func DecrementAspect_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DecrementAspect) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DecrementAspect_Repeats_Marshal(m, pv)
	}
	return
}

type DecrementAspect_Flow struct{ ptr *DecrementAspect }

func (n DecrementAspect_Flow) GetType() string      { return DecrementAspect_Type }
func (n DecrementAspect_Flow) GetLede() string      { return "decrease" }
func (n DecrementAspect_Flow) GetFlow() interface{} { return n.ptr }
func (n DecrementAspect_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DecrementAspect); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DecrementAspect_Optional_Marshal(m jsn.Marshaler, pv **DecrementAspect) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DecrementAspect_Marshal(m, *pv)
	} else if !enc {
		var v DecrementAspect
		if err = DecrementAspect_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DecrementAspect_Marshal(m jsn.Marshaler, val *DecrementAspect) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DecrementAspect_Flow{val}); err == nil {
		e0 := m.MarshalKey("", DecrementAspect_Field_Target)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Target)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DecrementAspect_Field_Target))
		}
		e1 := m.MarshalKey("aspect", DecrementAspect_Field_Aspect)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Aspect)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DecrementAspect_Field_Aspect))
		}
		e2 := m.MarshalKey("by", DecrementAspect_Field_Step)
		if e2 == nil {
			e2 = rt.NumberEval_Optional_Marshal(m, &val.Step)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", DecrementAspect_Field_Step))
		}
		e3 := m.MarshalKey("clamp", DecrementAspect_Field_Clamp)
		if e3 == nil {
			e3 = rt.BoolEval_Optional_Marshal(m, &val.Clamp)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", DecrementAspect_Field_Clamp))
		}
		m.EndBlock()
	}
	return
}

// DivideValue Divide one number by another.
type DivideValue struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=value"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*DivideValue)(nil)

func (*DivideValue) Compose() composer.Spec {
	return composer.Spec{
		Name: DivideValue_Type,
		Uses: composer.Type_Flow,
		Lede: "divide",
	}
}

const DivideValue_Type = "divide_value"
const DivideValue_Field_A = "$A"
const DivideValue_Field_B = "$B"

func (op *DivideValue) Marshal(m jsn.Marshaler) error {
	return DivideValue_Marshal(m, op)
}

type DivideValue_Slice []DivideValue

func (op *DivideValue_Slice) GetType() string { return DivideValue_Type }

func (op *DivideValue_Slice) Marshal(m jsn.Marshaler) error {
	return DivideValue_Repeats_Marshal(m, (*[]DivideValue)(op))
}

func (op *DivideValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DivideValue_Slice) SetSize(cnt int) {
	var els []DivideValue
	if cnt >= 0 {
		els = make(DivideValue_Slice, cnt)
	}
	(*op) = els
}

func (op *DivideValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DivideValue_Marshal(m, &(*op)[i])
}

func DivideValue_Repeats_Marshal(m jsn.Marshaler, vals *[]DivideValue) error {
	return jsn.RepeatBlock(m, (*DivideValue_Slice)(vals))
}

func DivideValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DivideValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DivideValue_Repeats_Marshal(m, pv)
	}
	return
}

type DivideValue_Flow struct{ ptr *DivideValue }

func (n DivideValue_Flow) GetType() string      { return DivideValue_Type }
func (n DivideValue_Flow) GetLede() string      { return "divide" }
func (n DivideValue_Flow) GetFlow() interface{} { return n.ptr }
func (n DivideValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DivideValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DivideValue_Optional_Marshal(m jsn.Marshaler, pv **DivideValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DivideValue_Marshal(m, *pv)
	} else if !enc {
		var v DivideValue
		if err = DivideValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DivideValue_Marshal(m jsn.Marshaler, val *DivideValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DivideValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", DivideValue_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DivideValue_Field_A))
		}
		e1 := m.MarshalKey("value", DivideValue_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DivideValue_Field_B))
		}
		m.EndBlock()
	}
	return
}

// During Decide whether a pattern is running.
type During struct {
	PatternName string `if:"label=_,type=text"`
	Markup      map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*During)(nil)
var _ rt.NumberEval = (*During)(nil)

func (*During) Compose() composer.Spec {
	return composer.Spec{
		Name: During_Type,
		Uses: composer.Type_Flow,
	}
}

const During_Type = "during"
const During_Field_PatternName = "$PATTERN_NAME"

func (op *During) Marshal(m jsn.Marshaler) error {
	return During_Marshal(m, op)
}

type During_Slice []During

func (op *During_Slice) GetType() string { return During_Type }

func (op *During_Slice) Marshal(m jsn.Marshaler) error {
	return During_Repeats_Marshal(m, (*[]During)(op))
}

func (op *During_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *During_Slice) SetSize(cnt int) {
	var els []During
	if cnt >= 0 {
		els = make(During_Slice, cnt)
	}
	(*op) = els
}

func (op *During_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return During_Marshal(m, &(*op)[i])
}

func During_Repeats_Marshal(m jsn.Marshaler, vals *[]During) error {
	return jsn.RepeatBlock(m, (*During_Slice)(vals))
}

func During_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]During) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = During_Repeats_Marshal(m, pv)
	}
	return
}

type During_Flow struct{ ptr *During }

func (n During_Flow) GetType() string      { return During_Type }
func (n During_Flow) GetLede() string      { return During_Type }
func (n During_Flow) GetFlow() interface{} { return n.ptr }
func (n During_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*During); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func During_Optional_Marshal(m jsn.Marshaler, pv **During) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = During_Marshal(m, *pv)
	} else if !enc {
		var v During
		if err = During_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func During_Marshal(m jsn.Marshaler, val *During) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(During_Flow{val}); err == nil {
		e0 := m.MarshalKey("", During_Field_PatternName)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.PatternName)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", During_Field_PatternName))
		}
		m.EndBlock()
	}
	return
}

// FieldsOfKind List of the field names of a kind.
type FieldsOfKind struct {
	KindName rt.TextEval `if:"label=of"`
	Markup   map[string]any
}

// User implemented slots:
var _ rt.TextListEval = (*FieldsOfKind)(nil)

func (*FieldsOfKind) Compose() composer.Spec {
	return composer.Spec{
		Name: FieldsOfKind_Type,
		Uses: composer.Type_Flow,
		Lede: "fields",
	}
}

const FieldsOfKind_Type = "fields_of_kind"
const FieldsOfKind_Field_KindName = "$KIND_NAME"

func (op *FieldsOfKind) Marshal(m jsn.Marshaler) error {
	return FieldsOfKind_Marshal(m, op)
}

type FieldsOfKind_Slice []FieldsOfKind

func (op *FieldsOfKind_Slice) GetType() string { return FieldsOfKind_Type }

func (op *FieldsOfKind_Slice) Marshal(m jsn.Marshaler) error {
	return FieldsOfKind_Repeats_Marshal(m, (*[]FieldsOfKind)(op))
}

func (op *FieldsOfKind_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FieldsOfKind_Slice) SetSize(cnt int) {
	var els []FieldsOfKind
	if cnt >= 0 {
		els = make(FieldsOfKind_Slice, cnt)
	}
	(*op) = els
}

func (op *FieldsOfKind_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FieldsOfKind_Marshal(m, &(*op)[i])
}

func FieldsOfKind_Repeats_Marshal(m jsn.Marshaler, vals *[]FieldsOfKind) error {
	return jsn.RepeatBlock(m, (*FieldsOfKind_Slice)(vals))
}

func FieldsOfKind_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FieldsOfKind) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FieldsOfKind_Repeats_Marshal(m, pv)
	}
	return
}

type FieldsOfKind_Flow struct{ ptr *FieldsOfKind }

func (n FieldsOfKind_Flow) GetType() string      { return FieldsOfKind_Type }
func (n FieldsOfKind_Flow) GetLede() string      { return "fields" }
func (n FieldsOfKind_Flow) GetFlow() interface{} { return n.ptr }
func (n FieldsOfKind_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FieldsOfKind); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FieldsOfKind_Optional_Marshal(m jsn.Marshaler, pv **FieldsOfKind) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FieldsOfKind_Marshal(m, *pv)
	} else if !enc {
		var v FieldsOfKind
		if err = FieldsOfKind_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FieldsOfKind_Marshal(m jsn.Marshaler, val *FieldsOfKind) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FieldsOfKind_Flow{val}); err == nil {
		e0 := m.MarshalKey("of", FieldsOfKind_Field_KindName)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.KindName)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FieldsOfKind_Field_KindName))
		}
		m.EndBlock()
	}
	return
}

// HasDominion
type HasDominion struct {
	Name   string `if:"label=domain,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*HasDominion)(nil)

func (*HasDominion) Compose() composer.Spec {
	return composer.Spec{
		Name: HasDominion_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const HasDominion_Type = "has_dominion"
const HasDominion_Field_Name = "$NAME"

func (op *HasDominion) Marshal(m jsn.Marshaler) error {
	return HasDominion_Marshal(m, op)
}

type HasDominion_Slice []HasDominion

func (op *HasDominion_Slice) GetType() string { return HasDominion_Type }

func (op *HasDominion_Slice) Marshal(m jsn.Marshaler) error {
	return HasDominion_Repeats_Marshal(m, (*[]HasDominion)(op))
}

func (op *HasDominion_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *HasDominion_Slice) SetSize(cnt int) {
	var els []HasDominion
	if cnt >= 0 {
		els = make(HasDominion_Slice, cnt)
	}
	(*op) = els
}

func (op *HasDominion_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return HasDominion_Marshal(m, &(*op)[i])
}

func HasDominion_Repeats_Marshal(m jsn.Marshaler, vals *[]HasDominion) error {
	return jsn.RepeatBlock(m, (*HasDominion_Slice)(vals))
}

func HasDominion_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]HasDominion) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = HasDominion_Repeats_Marshal(m, pv)
	}
	return
}

type HasDominion_Flow struct{ ptr *HasDominion }

func (n HasDominion_Flow) GetType() string      { return HasDominion_Type }
func (n HasDominion_Flow) GetLede() string      { return "is" }
func (n HasDominion_Flow) GetFlow() interface{} { return n.ptr }
func (n HasDominion_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*HasDominion); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func HasDominion_Optional_Marshal(m jsn.Marshaler, pv **HasDominion) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = HasDominion_Marshal(m, *pv)
	} else if !enc {
		var v HasDominion
		if err = HasDominion_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func HasDominion_Marshal(m jsn.Marshaler, val *HasDominion) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(HasDominion_Flow{val}); err == nil {
		e0 := m.MarshalKey("domain", HasDominion_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", HasDominion_Field_Name))
		}
		m.EndBlock()
	}
	return
}

// IdOf A unique object identifier.
type IdOf struct {
	Object rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*IdOf)(nil)

func (*IdOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IdOf_Type,
		Uses: composer.Type_Flow,
	}
}

const IdOf_Type = "id_of"
const IdOf_Field_Object = "$OBJECT"

func (op *IdOf) Marshal(m jsn.Marshaler) error {
	return IdOf_Marshal(m, op)
}

type IdOf_Slice []IdOf

func (op *IdOf_Slice) GetType() string { return IdOf_Type }

func (op *IdOf_Slice) Marshal(m jsn.Marshaler) error {
	return IdOf_Repeats_Marshal(m, (*[]IdOf)(op))
}

func (op *IdOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *IdOf_Slice) SetSize(cnt int) {
	var els []IdOf
	if cnt >= 0 {
		els = make(IdOf_Slice, cnt)
	}
	(*op) = els
}

func (op *IdOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return IdOf_Marshal(m, &(*op)[i])
}

func IdOf_Repeats_Marshal(m jsn.Marshaler, vals *[]IdOf) error {
	return jsn.RepeatBlock(m, (*IdOf_Slice)(vals))
}

func IdOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]IdOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = IdOf_Repeats_Marshal(m, pv)
	}
	return
}

type IdOf_Flow struct{ ptr *IdOf }

func (n IdOf_Flow) GetType() string      { return IdOf_Type }
func (n IdOf_Flow) GetLede() string      { return IdOf_Type }
func (n IdOf_Flow) GetFlow() interface{} { return n.ptr }
func (n IdOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*IdOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func IdOf_Optional_Marshal(m jsn.Marshaler, pv **IdOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IdOf_Marshal(m, *pv)
	} else if !enc {
		var v IdOf
		if err = IdOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IdOf_Marshal(m jsn.Marshaler, val *IdOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(IdOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", IdOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IdOf_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// Includes True if text contains text.
type Includes struct {
	Text   rt.TextEval `if:"label=_"`
	Part   rt.TextEval `if:"label=part"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Includes)(nil)

func (*Includes) Compose() composer.Spec {
	return composer.Spec{
		Name: Includes_Type,
		Uses: composer.Type_Flow,
		Lede: "contains",
	}
}

const Includes_Type = "includes"
const Includes_Field_Text = "$TEXT"
const Includes_Field_Part = "$PART"

func (op *Includes) Marshal(m jsn.Marshaler) error {
	return Includes_Marshal(m, op)
}

type Includes_Slice []Includes

func (op *Includes_Slice) GetType() string { return Includes_Type }

func (op *Includes_Slice) Marshal(m jsn.Marshaler) error {
	return Includes_Repeats_Marshal(m, (*[]Includes)(op))
}

func (op *Includes_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Includes_Slice) SetSize(cnt int) {
	var els []Includes
	if cnt >= 0 {
		els = make(Includes_Slice, cnt)
	}
	(*op) = els
}

func (op *Includes_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Includes_Marshal(m, &(*op)[i])
}

func Includes_Repeats_Marshal(m jsn.Marshaler, vals *[]Includes) error {
	return jsn.RepeatBlock(m, (*Includes_Slice)(vals))
}

func Includes_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Includes) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Includes_Repeats_Marshal(m, pv)
	}
	return
}

type Includes_Flow struct{ ptr *Includes }

func (n Includes_Flow) GetType() string      { return Includes_Type }
func (n Includes_Flow) GetLede() string      { return "contains" }
func (n Includes_Flow) GetFlow() interface{} { return n.ptr }
func (n Includes_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Includes); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Includes_Optional_Marshal(m jsn.Marshaler, pv **Includes) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Includes_Marshal(m, *pv)
	} else if !enc {
		var v Includes
		if err = Includes_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Includes_Marshal(m jsn.Marshaler, val *Includes) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Includes_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Includes_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Includes_Field_Text))
		}
		e1 := m.MarshalKey("part", Includes_Field_Part)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Part)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Includes_Field_Part))
		}
		m.EndBlock()
	}
	return
}

// Increment Increases the value of a number held in by a variable or object field.
// Returns the new value of the number.
type Increment struct {
	Target assign.Address `if:"label=_"`
	Step   rt.NumberEval  `if:"label=by,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*Increment)(nil)
var _ rt.Execute = (*Increment)(nil)

func (*Increment) Compose() composer.Spec {
	return composer.Spec{
		Name: Increment_Type,
		Uses: composer.Type_Flow,
		Lede: "increase",
	}
}

const Increment_Type = "increment"
const Increment_Field_Target = "$TARGET"
const Increment_Field_Step = "$STEP"

func (op *Increment) Marshal(m jsn.Marshaler) error {
	return Increment_Marshal(m, op)
}

type Increment_Slice []Increment

func (op *Increment_Slice) GetType() string { return Increment_Type }

func (op *Increment_Slice) Marshal(m jsn.Marshaler) error {
	return Increment_Repeats_Marshal(m, (*[]Increment)(op))
}

func (op *Increment_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Increment_Slice) SetSize(cnt int) {
	var els []Increment
	if cnt >= 0 {
		els = make(Increment_Slice, cnt)
	}
	(*op) = els
}

func (op *Increment_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Increment_Marshal(m, &(*op)[i])
}

func Increment_Repeats_Marshal(m jsn.Marshaler, vals *[]Increment) error {
	return jsn.RepeatBlock(m, (*Increment_Slice)(vals))
}

func Increment_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Increment) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Increment_Repeats_Marshal(m, pv)
	}
	return
}

type Increment_Flow struct{ ptr *Increment }

func (n Increment_Flow) GetType() string      { return Increment_Type }
func (n Increment_Flow) GetLede() string      { return "increase" }
func (n Increment_Flow) GetFlow() interface{} { return n.ptr }
func (n Increment_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Increment); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Increment_Optional_Marshal(m jsn.Marshaler, pv **Increment) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Increment_Marshal(m, *pv)
	} else if !enc {
		var v Increment
		if err = Increment_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Increment_Marshal(m jsn.Marshaler, val *Increment) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Increment_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Increment_Field_Target)
		if e0 == nil {
			e0 = assign.Address_Marshal(m, &val.Target)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Increment_Field_Target))
		}
		e1 := m.MarshalKey("by", Increment_Field_Step)
		if e1 == nil {
			e1 = rt.NumberEval_Optional_Marshal(m, &val.Step)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Increment_Field_Step))
		}
		m.EndBlock()
	}
	return
}

// IncrementAspect Increases the value of a trait held by an object aspect.
// Returns the new value of the trait.
type IncrementAspect struct {
	Target rt.TextEval   `if:"label=_"`
	Aspect rt.TextEval   `if:"label=aspect"`
	Step   rt.NumberEval `if:"label=by,optional"`
	Clamp  rt.BoolEval   `if:"label=clamp,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*IncrementAspect)(nil)
var _ rt.Execute = (*IncrementAspect)(nil)

func (*IncrementAspect) Compose() composer.Spec {
	return composer.Spec{
		Name: IncrementAspect_Type,
		Uses: composer.Type_Flow,
		Lede: "increase",
	}
}

const IncrementAspect_Type = "increment_aspect"
const IncrementAspect_Field_Target = "$TARGET"
const IncrementAspect_Field_Aspect = "$ASPECT"
const IncrementAspect_Field_Step = "$STEP"
const IncrementAspect_Field_Clamp = "$CLAMP"

func (op *IncrementAspect) Marshal(m jsn.Marshaler) error {
	return IncrementAspect_Marshal(m, op)
}

type IncrementAspect_Slice []IncrementAspect

func (op *IncrementAspect_Slice) GetType() string { return IncrementAspect_Type }

func (op *IncrementAspect_Slice) Marshal(m jsn.Marshaler) error {
	return IncrementAspect_Repeats_Marshal(m, (*[]IncrementAspect)(op))
}

func (op *IncrementAspect_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *IncrementAspect_Slice) SetSize(cnt int) {
	var els []IncrementAspect
	if cnt >= 0 {
		els = make(IncrementAspect_Slice, cnt)
	}
	(*op) = els
}

func (op *IncrementAspect_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return IncrementAspect_Marshal(m, &(*op)[i])
}

func IncrementAspect_Repeats_Marshal(m jsn.Marshaler, vals *[]IncrementAspect) error {
	return jsn.RepeatBlock(m, (*IncrementAspect_Slice)(vals))
}

func IncrementAspect_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]IncrementAspect) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = IncrementAspect_Repeats_Marshal(m, pv)
	}
	return
}

type IncrementAspect_Flow struct{ ptr *IncrementAspect }

func (n IncrementAspect_Flow) GetType() string      { return IncrementAspect_Type }
func (n IncrementAspect_Flow) GetLede() string      { return "increase" }
func (n IncrementAspect_Flow) GetFlow() interface{} { return n.ptr }
func (n IncrementAspect_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*IncrementAspect); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func IncrementAspect_Optional_Marshal(m jsn.Marshaler, pv **IncrementAspect) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IncrementAspect_Marshal(m, *pv)
	} else if !enc {
		var v IncrementAspect
		if err = IncrementAspect_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IncrementAspect_Marshal(m jsn.Marshaler, val *IncrementAspect) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(IncrementAspect_Flow{val}); err == nil {
		e0 := m.MarshalKey("", IncrementAspect_Field_Target)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Target)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IncrementAspect_Field_Target))
		}
		e1 := m.MarshalKey("aspect", IncrementAspect_Field_Aspect)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Aspect)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", IncrementAspect_Field_Aspect))
		}
		e2 := m.MarshalKey("by", IncrementAspect_Field_Step)
		if e2 == nil {
			e2 = rt.NumberEval_Optional_Marshal(m, &val.Step)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", IncrementAspect_Field_Step))
		}
		e3 := m.MarshalKey("clamp", IncrementAspect_Field_Clamp)
		if e3 == nil {
			e3 = rt.BoolEval_Optional_Marshal(m, &val.Clamp)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", IncrementAspect_Field_Clamp))
		}
		m.EndBlock()
	}
	return
}

// IsEmpty True if the text is empty.
type IsEmpty struct {
	Text   rt.TextEval `if:"label=empty"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*IsEmpty)(nil)

func (*IsEmpty) Compose() composer.Spec {
	return composer.Spec{
		Name: IsEmpty_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const IsEmpty_Type = "is_empty"
const IsEmpty_Field_Text = "$TEXT"

func (op *IsEmpty) Marshal(m jsn.Marshaler) error {
	return IsEmpty_Marshal(m, op)
}

type IsEmpty_Slice []IsEmpty

func (op *IsEmpty_Slice) GetType() string { return IsEmpty_Type }

func (op *IsEmpty_Slice) Marshal(m jsn.Marshaler) error {
	return IsEmpty_Repeats_Marshal(m, (*[]IsEmpty)(op))
}

func (op *IsEmpty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *IsEmpty_Slice) SetSize(cnt int) {
	var els []IsEmpty
	if cnt >= 0 {
		els = make(IsEmpty_Slice, cnt)
	}
	(*op) = els
}

func (op *IsEmpty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return IsEmpty_Marshal(m, &(*op)[i])
}

func IsEmpty_Repeats_Marshal(m jsn.Marshaler, vals *[]IsEmpty) error {
	return jsn.RepeatBlock(m, (*IsEmpty_Slice)(vals))
}

func IsEmpty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]IsEmpty) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = IsEmpty_Repeats_Marshal(m, pv)
	}
	return
}

type IsEmpty_Flow struct{ ptr *IsEmpty }

func (n IsEmpty_Flow) GetType() string      { return IsEmpty_Type }
func (n IsEmpty_Flow) GetLede() string      { return "is" }
func (n IsEmpty_Flow) GetFlow() interface{} { return n.ptr }
func (n IsEmpty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*IsEmpty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func IsEmpty_Optional_Marshal(m jsn.Marshaler, pv **IsEmpty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IsEmpty_Marshal(m, *pv)
	} else if !enc {
		var v IsEmpty
		if err = IsEmpty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IsEmpty_Marshal(m jsn.Marshaler, val *IsEmpty) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(IsEmpty_Flow{val}); err == nil {
		e0 := m.MarshalKey("empty", IsEmpty_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IsEmpty_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// IsExactKindOf True if the object is exactly the named kind.
type IsExactKindOf struct {
	Object rt.TextEval `if:"label=_"`
	Kind   string      `if:"label=is_exactly,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*IsExactKindOf)(nil)

func (*IsExactKindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IsExactKindOf_Type,
		Uses: composer.Type_Flow,
		Lede: "kind_of",
	}
}

const IsExactKindOf_Type = "is_exact_kind_of"
const IsExactKindOf_Field_Object = "$OBJECT"
const IsExactKindOf_Field_Kind = "$KIND"

func (op *IsExactKindOf) Marshal(m jsn.Marshaler) error {
	return IsExactKindOf_Marshal(m, op)
}

type IsExactKindOf_Slice []IsExactKindOf

func (op *IsExactKindOf_Slice) GetType() string { return IsExactKindOf_Type }

func (op *IsExactKindOf_Slice) Marshal(m jsn.Marshaler) error {
	return IsExactKindOf_Repeats_Marshal(m, (*[]IsExactKindOf)(op))
}

func (op *IsExactKindOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *IsExactKindOf_Slice) SetSize(cnt int) {
	var els []IsExactKindOf
	if cnt >= 0 {
		els = make(IsExactKindOf_Slice, cnt)
	}
	(*op) = els
}

func (op *IsExactKindOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return IsExactKindOf_Marshal(m, &(*op)[i])
}

func IsExactKindOf_Repeats_Marshal(m jsn.Marshaler, vals *[]IsExactKindOf) error {
	return jsn.RepeatBlock(m, (*IsExactKindOf_Slice)(vals))
}

func IsExactKindOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]IsExactKindOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = IsExactKindOf_Repeats_Marshal(m, pv)
	}
	return
}

type IsExactKindOf_Flow struct{ ptr *IsExactKindOf }

func (n IsExactKindOf_Flow) GetType() string      { return IsExactKindOf_Type }
func (n IsExactKindOf_Flow) GetLede() string      { return "kind_of" }
func (n IsExactKindOf_Flow) GetFlow() interface{} { return n.ptr }
func (n IsExactKindOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*IsExactKindOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func IsExactKindOf_Optional_Marshal(m jsn.Marshaler, pv **IsExactKindOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IsExactKindOf_Marshal(m, *pv)
	} else if !enc {
		var v IsExactKindOf
		if err = IsExactKindOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IsExactKindOf_Marshal(m jsn.Marshaler, val *IsExactKindOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(IsExactKindOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", IsExactKindOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IsExactKindOf_Field_Object))
		}
		e1 := m.MarshalKey("is_exactly", IsExactKindOf_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", IsExactKindOf_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// IsKindOf True if the object is compatible with the named kind.
type IsKindOf struct {
	Object  rt.TextEval `if:"label=_"`
	Kind    string      `if:"label=is,type=text"`
	Nothing bool        `if:"label=nothing,optional,type=bool"`
	Markup  map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*IsKindOf)(nil)

func (*IsKindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IsKindOf_Type,
		Uses: composer.Type_Flow,
		Lede: "kind_of",
	}
}

const IsKindOf_Type = "is_kind_of"
const IsKindOf_Field_Object = "$OBJECT"
const IsKindOf_Field_Kind = "$KIND"
const IsKindOf_Field_Nothing = "$NOTHING"

func (op *IsKindOf) Marshal(m jsn.Marshaler) error {
	return IsKindOf_Marshal(m, op)
}

type IsKindOf_Slice []IsKindOf

func (op *IsKindOf_Slice) GetType() string { return IsKindOf_Type }

func (op *IsKindOf_Slice) Marshal(m jsn.Marshaler) error {
	return IsKindOf_Repeats_Marshal(m, (*[]IsKindOf)(op))
}

func (op *IsKindOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *IsKindOf_Slice) SetSize(cnt int) {
	var els []IsKindOf
	if cnt >= 0 {
		els = make(IsKindOf_Slice, cnt)
	}
	(*op) = els
}

func (op *IsKindOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return IsKindOf_Marshal(m, &(*op)[i])
}

func IsKindOf_Repeats_Marshal(m jsn.Marshaler, vals *[]IsKindOf) error {
	return jsn.RepeatBlock(m, (*IsKindOf_Slice)(vals))
}

func IsKindOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]IsKindOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = IsKindOf_Repeats_Marshal(m, pv)
	}
	return
}

type IsKindOf_Flow struct{ ptr *IsKindOf }

func (n IsKindOf_Flow) GetType() string      { return IsKindOf_Type }
func (n IsKindOf_Flow) GetLede() string      { return "kind_of" }
func (n IsKindOf_Flow) GetFlow() interface{} { return n.ptr }
func (n IsKindOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*IsKindOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func IsKindOf_Optional_Marshal(m jsn.Marshaler, pv **IsKindOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IsKindOf_Marshal(m, *pv)
	} else if !enc {
		var v IsKindOf
		if err = IsKindOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IsKindOf_Marshal(m jsn.Marshaler, val *IsKindOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(IsKindOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", IsKindOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IsKindOf_Field_Object))
		}
		e1 := m.MarshalKey("is", IsKindOf_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", IsKindOf_Field_Kind))
		}
		e2 := m.MarshalKey("nothing", IsKindOf_Field_Nothing)
		if e2 == nil {
			e2 = prim.Bool_Unboxed_Optional_Marshal(m, &val.Nothing)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", IsKindOf_Field_Nothing))
		}
		m.EndBlock()
	}
	return
}

// Join Returns multiple pieces of text as a single new piece of text.
type Join struct {
	Sep    rt.TextEval   `if:"label=_,optional"`
	Parts  []rt.TextEval `if:"label=parts"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Join)(nil)

func (*Join) Compose() composer.Spec {
	return composer.Spec{
		Name: Join_Type,
		Uses: composer.Type_Flow,
	}
}

const Join_Type = "join"
const Join_Field_Sep = "$SEP"
const Join_Field_Parts = "$PARTS"

func (op *Join) Marshal(m jsn.Marshaler) error {
	return Join_Marshal(m, op)
}

type Join_Slice []Join

func (op *Join_Slice) GetType() string { return Join_Type }

func (op *Join_Slice) Marshal(m jsn.Marshaler) error {
	return Join_Repeats_Marshal(m, (*[]Join)(op))
}

func (op *Join_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Join_Slice) SetSize(cnt int) {
	var els []Join
	if cnt >= 0 {
		els = make(Join_Slice, cnt)
	}
	(*op) = els
}

func (op *Join_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Join_Marshal(m, &(*op)[i])
}

func Join_Repeats_Marshal(m jsn.Marshaler, vals *[]Join) error {
	return jsn.RepeatBlock(m, (*Join_Slice)(vals))
}

func Join_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Join) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Join_Repeats_Marshal(m, pv)
	}
	return
}

type Join_Flow struct{ ptr *Join }

func (n Join_Flow) GetType() string      { return Join_Type }
func (n Join_Flow) GetLede() string      { return Join_Type }
func (n Join_Flow) GetFlow() interface{} { return n.ptr }
func (n Join_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Join); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Join_Optional_Marshal(m jsn.Marshaler, pv **Join) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Join_Marshal(m, *pv)
	} else if !enc {
		var v Join
		if err = Join_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Join_Marshal(m jsn.Marshaler, val *Join) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Join_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Join_Field_Sep)
		if e0 == nil {
			e0 = rt.TextEval_Optional_Marshal(m, &val.Sep)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Join_Field_Sep))
		}
		e1 := m.MarshalKey("parts", Join_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Join_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// KindOf Friendly name of the object's kind.
type KindOf struct {
	Object  rt.TextEval `if:"label=_"`
	Nothing bool        `if:"label=nothing,optional,type=bool"`
	Markup  map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*KindOf)(nil)

func (*KindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: KindOf_Type,
		Uses: composer.Type_Flow,
	}
}

const KindOf_Type = "kind_of"
const KindOf_Field_Object = "$OBJECT"
const KindOf_Field_Nothing = "$NOTHING"

func (op *KindOf) Marshal(m jsn.Marshaler) error {
	return KindOf_Marshal(m, op)
}

type KindOf_Slice []KindOf

func (op *KindOf_Slice) GetType() string { return KindOf_Type }

func (op *KindOf_Slice) Marshal(m jsn.Marshaler) error {
	return KindOf_Repeats_Marshal(m, (*[]KindOf)(op))
}

func (op *KindOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindOf_Slice) SetSize(cnt int) {
	var els []KindOf
	if cnt >= 0 {
		els = make(KindOf_Slice, cnt)
	}
	(*op) = els
}

func (op *KindOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindOf_Marshal(m, &(*op)[i])
}

func KindOf_Repeats_Marshal(m jsn.Marshaler, vals *[]KindOf) error {
	return jsn.RepeatBlock(m, (*KindOf_Slice)(vals))
}

func KindOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = KindOf_Repeats_Marshal(m, pv)
	}
	return
}

type KindOf_Flow struct{ ptr *KindOf }

func (n KindOf_Flow) GetType() string      { return KindOf_Type }
func (n KindOf_Flow) GetLede() string      { return KindOf_Type }
func (n KindOf_Flow) GetFlow() interface{} { return n.ptr }
func (n KindOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindOf_Optional_Marshal(m jsn.Marshaler, pv **KindOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindOf_Marshal(m, *pv)
	} else if !enc {
		var v KindOf
		if err = KindOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindOf_Marshal(m jsn.Marshaler, val *KindOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(KindOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", KindOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindOf_Field_Object))
		}
		e1 := m.MarshalKey("nothing", KindOf_Field_Nothing)
		if e1 == nil {
			e1 = prim.Bool_Unboxed_Optional_Marshal(m, &val.Nothing)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", KindOf_Field_Nothing))
		}
		m.EndBlock()
	}
	return
}

// KindsOf A list of compatible kinds.
type KindsOf struct {
	Kind   string `if:"label=_,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextListEval = (*KindsOf)(nil)

func (*KindsOf) Compose() composer.Spec {
	return composer.Spec{
		Name: KindsOf_Type,
		Uses: composer.Type_Flow,
	}
}

const KindsOf_Type = "kinds_of"
const KindsOf_Field_Kind = "$KIND"

func (op *KindsOf) Marshal(m jsn.Marshaler) error {
	return KindsOf_Marshal(m, op)
}

type KindsOf_Slice []KindsOf

func (op *KindsOf_Slice) GetType() string { return KindsOf_Type }

func (op *KindsOf_Slice) Marshal(m jsn.Marshaler) error {
	return KindsOf_Repeats_Marshal(m, (*[]KindsOf)(op))
}

func (op *KindsOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindsOf_Slice) SetSize(cnt int) {
	var els []KindsOf
	if cnt >= 0 {
		els = make(KindsOf_Slice, cnt)
	}
	(*op) = els
}

func (op *KindsOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindsOf_Marshal(m, &(*op)[i])
}

func KindsOf_Repeats_Marshal(m jsn.Marshaler, vals *[]KindsOf) error {
	return jsn.RepeatBlock(m, (*KindsOf_Slice)(vals))
}

func KindsOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindsOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = KindsOf_Repeats_Marshal(m, pv)
	}
	return
}

type KindsOf_Flow struct{ ptr *KindsOf }

func (n KindsOf_Flow) GetType() string      { return KindsOf_Type }
func (n KindsOf_Flow) GetLede() string      { return KindsOf_Type }
func (n KindsOf_Flow) GetFlow() interface{} { return n.ptr }
func (n KindsOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindsOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindsOf_Optional_Marshal(m jsn.Marshaler, pv **KindsOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindsOf_Marshal(m, *pv)
	} else if !enc {
		var v KindsOf
		if err = KindsOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindsOf_Marshal(m jsn.Marshaler, val *KindsOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(KindsOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", KindsOf_Field_Kind)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindsOf_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// MakeLowercase Returns new text, with every letter turned into lowercase. For example, 'shout' from 'SHOUT'.
type MakeLowercase struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeLowercase)(nil)

func (*MakeLowercase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeLowercase_Type,
		Uses: composer.Type_Flow,
		Lede: "lower",
	}
}

const MakeLowercase_Type = "make_lowercase"
const MakeLowercase_Field_Text = "$TEXT"

func (op *MakeLowercase) Marshal(m jsn.Marshaler) error {
	return MakeLowercase_Marshal(m, op)
}

type MakeLowercase_Slice []MakeLowercase

func (op *MakeLowercase_Slice) GetType() string { return MakeLowercase_Type }

func (op *MakeLowercase_Slice) Marshal(m jsn.Marshaler) error {
	return MakeLowercase_Repeats_Marshal(m, (*[]MakeLowercase)(op))
}

func (op *MakeLowercase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeLowercase_Slice) SetSize(cnt int) {
	var els []MakeLowercase
	if cnt >= 0 {
		els = make(MakeLowercase_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeLowercase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeLowercase_Marshal(m, &(*op)[i])
}

func MakeLowercase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeLowercase) error {
	return jsn.RepeatBlock(m, (*MakeLowercase_Slice)(vals))
}

func MakeLowercase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeLowercase) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeLowercase_Repeats_Marshal(m, pv)
	}
	return
}

type MakeLowercase_Flow struct{ ptr *MakeLowercase }

func (n MakeLowercase_Flow) GetType() string      { return MakeLowercase_Type }
func (n MakeLowercase_Flow) GetLede() string      { return "lower" }
func (n MakeLowercase_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeLowercase_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeLowercase); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeLowercase_Optional_Marshal(m jsn.Marshaler, pv **MakeLowercase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeLowercase_Marshal(m, *pv)
	} else if !enc {
		var v MakeLowercase
		if err = MakeLowercase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeLowercase_Marshal(m jsn.Marshaler, val *MakeLowercase) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeLowercase_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakeLowercase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeLowercase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeReversed Returns new text flipped back to front. For example, 'elppA' from 'Apple', or 'noon' from 'noon'.
type MakeReversed struct {
	Text   rt.TextEval `if:"label=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeReversed)(nil)

func (*MakeReversed) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeReversed_Type,
		Uses: composer.Type_Flow,
		Lede: "reverse",
	}
}

const MakeReversed_Type = "make_reversed"
const MakeReversed_Field_Text = "$TEXT"

func (op *MakeReversed) Marshal(m jsn.Marshaler) error {
	return MakeReversed_Marshal(m, op)
}

type MakeReversed_Slice []MakeReversed

func (op *MakeReversed_Slice) GetType() string { return MakeReversed_Type }

func (op *MakeReversed_Slice) Marshal(m jsn.Marshaler) error {
	return MakeReversed_Repeats_Marshal(m, (*[]MakeReversed)(op))
}

func (op *MakeReversed_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeReversed_Slice) SetSize(cnt int) {
	var els []MakeReversed
	if cnt >= 0 {
		els = make(MakeReversed_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeReversed_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeReversed_Marshal(m, &(*op)[i])
}

func MakeReversed_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeReversed) error {
	return jsn.RepeatBlock(m, (*MakeReversed_Slice)(vals))
}

func MakeReversed_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeReversed) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeReversed_Repeats_Marshal(m, pv)
	}
	return
}

type MakeReversed_Flow struct{ ptr *MakeReversed }

func (n MakeReversed_Flow) GetType() string      { return MakeReversed_Type }
func (n MakeReversed_Flow) GetLede() string      { return "reverse" }
func (n MakeReversed_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeReversed_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeReversed); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeReversed_Optional_Marshal(m jsn.Marshaler, pv **MakeReversed) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeReversed_Marshal(m, *pv)
	} else if !enc {
		var v MakeReversed
		if err = MakeReversed_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeReversed_Marshal(m jsn.Marshaler, val *MakeReversed) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeReversed_Flow{val}); err == nil {
		e0 := m.MarshalKey("text", MakeReversed_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeReversed_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeSentenceCase Returns new text, start each sentence with a capital letter. For example, 'Empire Apple.' from 'Empire apple.'.
type MakeSentenceCase struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeSentenceCase)(nil)

func (*MakeSentenceCase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeSentenceCase_Type,
		Uses: composer.Type_Flow,
		Lede: "sentence",
	}
}

const MakeSentenceCase_Type = "make_sentence_case"
const MakeSentenceCase_Field_Text = "$TEXT"

func (op *MakeSentenceCase) Marshal(m jsn.Marshaler) error {
	return MakeSentenceCase_Marshal(m, op)
}

type MakeSentenceCase_Slice []MakeSentenceCase

func (op *MakeSentenceCase_Slice) GetType() string { return MakeSentenceCase_Type }

func (op *MakeSentenceCase_Slice) Marshal(m jsn.Marshaler) error {
	return MakeSentenceCase_Repeats_Marshal(m, (*[]MakeSentenceCase)(op))
}

func (op *MakeSentenceCase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeSentenceCase_Slice) SetSize(cnt int) {
	var els []MakeSentenceCase
	if cnt >= 0 {
		els = make(MakeSentenceCase_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeSentenceCase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeSentenceCase_Marshal(m, &(*op)[i])
}

func MakeSentenceCase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeSentenceCase) error {
	return jsn.RepeatBlock(m, (*MakeSentenceCase_Slice)(vals))
}

func MakeSentenceCase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeSentenceCase) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeSentenceCase_Repeats_Marshal(m, pv)
	}
	return
}

type MakeSentenceCase_Flow struct{ ptr *MakeSentenceCase }

func (n MakeSentenceCase_Flow) GetType() string      { return MakeSentenceCase_Type }
func (n MakeSentenceCase_Flow) GetLede() string      { return "sentence" }
func (n MakeSentenceCase_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeSentenceCase_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeSentenceCase); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeSentenceCase_Optional_Marshal(m jsn.Marshaler, pv **MakeSentenceCase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeSentenceCase_Marshal(m, *pv)
	} else if !enc {
		var v MakeSentenceCase
		if err = MakeSentenceCase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeSentenceCase_Marshal(m jsn.Marshaler, val *MakeSentenceCase) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeSentenceCase_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakeSentenceCase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeSentenceCase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeTitleCase Returns new text, starting each word with a capital letter. For example, 'Empire Apple' from 'empire apple'.
type MakeTitleCase struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeTitleCase)(nil)

func (*MakeTitleCase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeTitleCase_Type,
		Uses: composer.Type_Flow,
		Lede: "title",
	}
}

const MakeTitleCase_Type = "make_title_case"
const MakeTitleCase_Field_Text = "$TEXT"

func (op *MakeTitleCase) Marshal(m jsn.Marshaler) error {
	return MakeTitleCase_Marshal(m, op)
}

type MakeTitleCase_Slice []MakeTitleCase

func (op *MakeTitleCase_Slice) GetType() string { return MakeTitleCase_Type }

func (op *MakeTitleCase_Slice) Marshal(m jsn.Marshaler) error {
	return MakeTitleCase_Repeats_Marshal(m, (*[]MakeTitleCase)(op))
}

func (op *MakeTitleCase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeTitleCase_Slice) SetSize(cnt int) {
	var els []MakeTitleCase
	if cnt >= 0 {
		els = make(MakeTitleCase_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeTitleCase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeTitleCase_Marshal(m, &(*op)[i])
}

func MakeTitleCase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeTitleCase) error {
	return jsn.RepeatBlock(m, (*MakeTitleCase_Slice)(vals))
}

func MakeTitleCase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeTitleCase) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeTitleCase_Repeats_Marshal(m, pv)
	}
	return
}

type MakeTitleCase_Flow struct{ ptr *MakeTitleCase }

func (n MakeTitleCase_Flow) GetType() string      { return MakeTitleCase_Type }
func (n MakeTitleCase_Flow) GetLede() string      { return "title" }
func (n MakeTitleCase_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeTitleCase_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeTitleCase); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeTitleCase_Optional_Marshal(m jsn.Marshaler, pv **MakeTitleCase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeTitleCase_Marshal(m, *pv)
	} else if !enc {
		var v MakeTitleCase
		if err = MakeTitleCase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeTitleCase_Marshal(m jsn.Marshaler, val *MakeTitleCase) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeTitleCase_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakeTitleCase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeTitleCase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeUppercase Returns new text, with every letter turned into uppercase. For example, 'APPLE' from 'apple'.
type MakeUppercase struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeUppercase)(nil)

func (*MakeUppercase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeUppercase_Type,
		Uses: composer.Type_Flow,
		Lede: "upper",
	}
}

const MakeUppercase_Type = "make_uppercase"
const MakeUppercase_Field_Text = "$TEXT"

func (op *MakeUppercase) Marshal(m jsn.Marshaler) error {
	return MakeUppercase_Marshal(m, op)
}

type MakeUppercase_Slice []MakeUppercase

func (op *MakeUppercase_Slice) GetType() string { return MakeUppercase_Type }

func (op *MakeUppercase_Slice) Marshal(m jsn.Marshaler) error {
	return MakeUppercase_Repeats_Marshal(m, (*[]MakeUppercase)(op))
}

func (op *MakeUppercase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeUppercase_Slice) SetSize(cnt int) {
	var els []MakeUppercase
	if cnt >= 0 {
		els = make(MakeUppercase_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeUppercase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeUppercase_Marshal(m, &(*op)[i])
}

func MakeUppercase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeUppercase) error {
	return jsn.RepeatBlock(m, (*MakeUppercase_Slice)(vals))
}

func MakeUppercase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeUppercase) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeUppercase_Repeats_Marshal(m, pv)
	}
	return
}

type MakeUppercase_Flow struct{ ptr *MakeUppercase }

func (n MakeUppercase_Flow) GetType() string      { return MakeUppercase_Type }
func (n MakeUppercase_Flow) GetLede() string      { return "upper" }
func (n MakeUppercase_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeUppercase_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeUppercase); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeUppercase_Optional_Marshal(m jsn.Marshaler, pv **MakeUppercase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeUppercase_Marshal(m, *pv)
	} else if !enc {
		var v MakeUppercase
		if err = MakeUppercase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeUppercase_Marshal(m jsn.Marshaler, val *MakeUppercase) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeUppercase_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakeUppercase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeUppercase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// Matches Determine whether the specified text is similar to the specified regular expression.
type Matches struct {
	Text   rt.TextEval `if:"label=_"`
	Match  string      `if:"label=to,type=text"`
	Cache  MatchCache  `if:"internal"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Matches)(nil)

func (*Matches) Compose() composer.Spec {
	return composer.Spec{
		Name: Matches_Type,
		Uses: composer.Type_Flow,
	}
}

const Matches_Type = "matches"
const Matches_Field_Text = "$TEXT"
const Matches_Field_Match = "$MATCH"

func (op *Matches) Marshal(m jsn.Marshaler) error {
	return Matches_Marshal(m, op)
}

type Matches_Slice []Matches

func (op *Matches_Slice) GetType() string { return Matches_Type }

func (op *Matches_Slice) Marshal(m jsn.Marshaler) error {
	return Matches_Repeats_Marshal(m, (*[]Matches)(op))
}

func (op *Matches_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Matches_Slice) SetSize(cnt int) {
	var els []Matches
	if cnt >= 0 {
		els = make(Matches_Slice, cnt)
	}
	(*op) = els
}

func (op *Matches_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Matches_Marshal(m, &(*op)[i])
}

func Matches_Repeats_Marshal(m jsn.Marshaler, vals *[]Matches) error {
	return jsn.RepeatBlock(m, (*Matches_Slice)(vals))
}

func Matches_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Matches) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Matches_Repeats_Marshal(m, pv)
	}
	return
}

type Matches_Flow struct{ ptr *Matches }

func (n Matches_Flow) GetType() string      { return Matches_Type }
func (n Matches_Flow) GetLede() string      { return Matches_Type }
func (n Matches_Flow) GetFlow() interface{} { return n.ptr }
func (n Matches_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Matches); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Matches_Optional_Marshal(m jsn.Marshaler, pv **Matches) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Matches_Marshal(m, *pv)
	} else if !enc {
		var v Matches
		if err = Matches_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Matches_Marshal(m jsn.Marshaler, val *Matches) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Matches_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Matches_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Matches_Field_Text))
		}
		e1 := m.MarshalKey("to", Matches_Field_Match)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Marshal(m, &val.Match)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Matches_Field_Match))
		}
		m.EndBlock()
	}
	return
}

// ModValue Divide one number by another, and return the remainder.
type ModValue struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=value"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*ModValue)(nil)

func (*ModValue) Compose() composer.Spec {
	return composer.Spec{
		Name: ModValue_Type,
		Uses: composer.Type_Flow,
		Lede: "mod",
	}
}

const ModValue_Type = "mod_value"
const ModValue_Field_A = "$A"
const ModValue_Field_B = "$B"

func (op *ModValue) Marshal(m jsn.Marshaler) error {
	return ModValue_Marshal(m, op)
}

type ModValue_Slice []ModValue

func (op *ModValue_Slice) GetType() string { return ModValue_Type }

func (op *ModValue_Slice) Marshal(m jsn.Marshaler) error {
	return ModValue_Repeats_Marshal(m, (*[]ModValue)(op))
}

func (op *ModValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ModValue_Slice) SetSize(cnt int) {
	var els []ModValue
	if cnt >= 0 {
		els = make(ModValue_Slice, cnt)
	}
	(*op) = els
}

func (op *ModValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ModValue_Marshal(m, &(*op)[i])
}

func ModValue_Repeats_Marshal(m jsn.Marshaler, vals *[]ModValue) error {
	return jsn.RepeatBlock(m, (*ModValue_Slice)(vals))
}

func ModValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ModValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ModValue_Repeats_Marshal(m, pv)
	}
	return
}

type ModValue_Flow struct{ ptr *ModValue }

func (n ModValue_Flow) GetType() string      { return ModValue_Type }
func (n ModValue_Flow) GetLede() string      { return "mod" }
func (n ModValue_Flow) GetFlow() interface{} { return n.ptr }
func (n ModValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ModValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ModValue_Optional_Marshal(m jsn.Marshaler, pv **ModValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ModValue_Marshal(m, *pv)
	} else if !enc {
		var v ModValue
		if err = ModValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ModValue_Marshal(m jsn.Marshaler, val *ModValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ModValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ModValue_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ModValue_Field_A))
		}
		e1 := m.MarshalKey("value", ModValue_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ModValue_Field_B))
		}
		m.EndBlock()
	}
	return
}

// MultiplyValue Multiply two numbers.
type MultiplyValue struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=value"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*MultiplyValue)(nil)

func (*MultiplyValue) Compose() composer.Spec {
	return composer.Spec{
		Name: MultiplyValue_Type,
		Uses: composer.Type_Flow,
		Lede: "multiply",
	}
}

const MultiplyValue_Type = "multiply_value"
const MultiplyValue_Field_A = "$A"
const MultiplyValue_Field_B = "$B"

func (op *MultiplyValue) Marshal(m jsn.Marshaler) error {
	return MultiplyValue_Marshal(m, op)
}

type MultiplyValue_Slice []MultiplyValue

func (op *MultiplyValue_Slice) GetType() string { return MultiplyValue_Type }

func (op *MultiplyValue_Slice) Marshal(m jsn.Marshaler) error {
	return MultiplyValue_Repeats_Marshal(m, (*[]MultiplyValue)(op))
}

func (op *MultiplyValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MultiplyValue_Slice) SetSize(cnt int) {
	var els []MultiplyValue
	if cnt >= 0 {
		els = make(MultiplyValue_Slice, cnt)
	}
	(*op) = els
}

func (op *MultiplyValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MultiplyValue_Marshal(m, &(*op)[i])
}

func MultiplyValue_Repeats_Marshal(m jsn.Marshaler, vals *[]MultiplyValue) error {
	return jsn.RepeatBlock(m, (*MultiplyValue_Slice)(vals))
}

func MultiplyValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MultiplyValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MultiplyValue_Repeats_Marshal(m, pv)
	}
	return
}

type MultiplyValue_Flow struct{ ptr *MultiplyValue }

func (n MultiplyValue_Flow) GetType() string      { return MultiplyValue_Type }
func (n MultiplyValue_Flow) GetLede() string      { return "multiply" }
func (n MultiplyValue_Flow) GetFlow() interface{} { return n.ptr }
func (n MultiplyValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MultiplyValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MultiplyValue_Optional_Marshal(m jsn.Marshaler, pv **MultiplyValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MultiplyValue_Marshal(m, *pv)
	} else if !enc {
		var v MultiplyValue
		if err = MultiplyValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MultiplyValue_Marshal(m jsn.Marshaler, val *MultiplyValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MultiplyValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MultiplyValue_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MultiplyValue_Field_A))
		}
		e1 := m.MarshalKey("value", MultiplyValue_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", MultiplyValue_Field_B))
		}
		m.EndBlock()
	}
	return
}

// NameOf Full name of the object.
type NameOf struct {
	Object rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*NameOf)(nil)

func (*NameOf) Compose() composer.Spec {
	return composer.Spec{
		Name: NameOf_Type,
		Uses: composer.Type_Flow,
	}
}

const NameOf_Type = "name_of"
const NameOf_Field_Object = "$OBJECT"

func (op *NameOf) Marshal(m jsn.Marshaler) error {
	return NameOf_Marshal(m, op)
}

type NameOf_Slice []NameOf

func (op *NameOf_Slice) GetType() string { return NameOf_Type }

func (op *NameOf_Slice) Marshal(m jsn.Marshaler) error {
	return NameOf_Repeats_Marshal(m, (*[]NameOf)(op))
}

func (op *NameOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NameOf_Slice) SetSize(cnt int) {
	var els []NameOf
	if cnt >= 0 {
		els = make(NameOf_Slice, cnt)
	}
	(*op) = els
}

func (op *NameOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NameOf_Marshal(m, &(*op)[i])
}

func NameOf_Repeats_Marshal(m jsn.Marshaler, vals *[]NameOf) error {
	return jsn.RepeatBlock(m, (*NameOf_Slice)(vals))
}

func NameOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NameOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NameOf_Repeats_Marshal(m, pv)
	}
	return
}

type NameOf_Flow struct{ ptr *NameOf }

func (n NameOf_Flow) GetType() string      { return NameOf_Type }
func (n NameOf_Flow) GetLede() string      { return NameOf_Type }
func (n NameOf_Flow) GetFlow() interface{} { return n.ptr }
func (n NameOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NameOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NameOf_Optional_Marshal(m jsn.Marshaler, pv **NameOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NameOf_Marshal(m, *pv)
	} else if !enc {
		var v NameOf
		if err = NameOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NameOf_Marshal(m jsn.Marshaler, val *NameOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(NameOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NameOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NameOf_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// Never Returns false.
type Never struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Never)(nil)

func (*Never) Compose() composer.Spec {
	return composer.Spec{
		Name: Never_Type,
		Uses: composer.Type_Flow,
	}
}

const Never_Type = "never"

func (op *Never) Marshal(m jsn.Marshaler) error {
	return Never_Marshal(m, op)
}

type Never_Slice []Never

func (op *Never_Slice) GetType() string { return Never_Type }

func (op *Never_Slice) Marshal(m jsn.Marshaler) error {
	return Never_Repeats_Marshal(m, (*[]Never)(op))
}

func (op *Never_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Never_Slice) SetSize(cnt int) {
	var els []Never
	if cnt >= 0 {
		els = make(Never_Slice, cnt)
	}
	(*op) = els
}

func (op *Never_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Never_Marshal(m, &(*op)[i])
}

func Never_Repeats_Marshal(m jsn.Marshaler, vals *[]Never) error {
	return jsn.RepeatBlock(m, (*Never_Slice)(vals))
}

func Never_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Never) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Never_Repeats_Marshal(m, pv)
	}
	return
}

type Never_Flow struct{ ptr *Never }

func (n Never_Flow) GetType() string      { return Never_Type }
func (n Never_Flow) GetLede() string      { return Never_Type }
func (n Never_Flow) GetFlow() interface{} { return n.ptr }
func (n Never_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Never); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Never_Optional_Marshal(m jsn.Marshaler, pv **Never) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Never_Marshal(m, *pv)
	} else if !enc {
		var v Never
		if err = Never_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Never_Marshal(m jsn.Marshaler, val *Never) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Never_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// Newline Start a new line.
type Newline struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Newline)(nil)

func (*Newline) Compose() composer.Spec {
	return composer.Spec{
		Name: Newline_Type,
		Uses: composer.Type_Flow,
		Lede: "br",
	}
}

const Newline_Type = "newline"

func (op *Newline) Marshal(m jsn.Marshaler) error {
	return Newline_Marshal(m, op)
}

type Newline_Slice []Newline

func (op *Newline_Slice) GetType() string { return Newline_Type }

func (op *Newline_Slice) Marshal(m jsn.Marshaler) error {
	return Newline_Repeats_Marshal(m, (*[]Newline)(op))
}

func (op *Newline_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Newline_Slice) SetSize(cnt int) {
	var els []Newline
	if cnt >= 0 {
		els = make(Newline_Slice, cnt)
	}
	(*op) = els
}

func (op *Newline_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Newline_Marshal(m, &(*op)[i])
}

func Newline_Repeats_Marshal(m jsn.Marshaler, vals *[]Newline) error {
	return jsn.RepeatBlock(m, (*Newline_Slice)(vals))
}

func Newline_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Newline) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Newline_Repeats_Marshal(m, pv)
	}
	return
}

type Newline_Flow struct{ ptr *Newline }

func (n Newline_Flow) GetType() string      { return Newline_Type }
func (n Newline_Flow) GetLede() string      { return "br" }
func (n Newline_Flow) GetFlow() interface{} { return n.ptr }
func (n Newline_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Newline); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Newline_Optional_Marshal(m jsn.Marshaler, pv **Newline) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Newline_Marshal(m, *pv)
	} else if !enc {
		var v Newline
		if err = Newline_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Newline_Marshal(m jsn.Marshaler, val *Newline) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Newline_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// Not Returns the opposite value.
type Not struct {
	Test   rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Not)(nil)

func (*Not) Compose() composer.Spec {
	return composer.Spec{
		Name: Not_Type,
		Uses: composer.Type_Flow,
	}
}

const Not_Type = "not"
const Not_Field_Test = "$TEST"

func (op *Not) Marshal(m jsn.Marshaler) error {
	return Not_Marshal(m, op)
}

type Not_Slice []Not

func (op *Not_Slice) GetType() string { return Not_Type }

func (op *Not_Slice) Marshal(m jsn.Marshaler) error {
	return Not_Repeats_Marshal(m, (*[]Not)(op))
}

func (op *Not_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Not_Slice) SetSize(cnt int) {
	var els []Not
	if cnt >= 0 {
		els = make(Not_Slice, cnt)
	}
	(*op) = els
}

func (op *Not_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Not_Marshal(m, &(*op)[i])
}

func Not_Repeats_Marshal(m jsn.Marshaler, vals *[]Not) error {
	return jsn.RepeatBlock(m, (*Not_Slice)(vals))
}

func Not_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Not) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Not_Repeats_Marshal(m, pv)
	}
	return
}

type Not_Flow struct{ ptr *Not }

func (n Not_Flow) GetType() string      { return Not_Type }
func (n Not_Flow) GetLede() string      { return Not_Type }
func (n Not_Flow) GetFlow() interface{} { return n.ptr }
func (n Not_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Not); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Not_Optional_Marshal(m jsn.Marshaler, pv **Not) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Not_Marshal(m, *pv)
	} else if !enc {
		var v Not
		if err = Not_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Not_Marshal(m jsn.Marshaler, val *Not) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Not_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Not_Field_Test)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Test)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Not_Field_Test))
		}
		m.EndBlock()
	}
	return
}

// ObjectExists Returns whether there is a object of the specified name.
type ObjectExists struct {
	Object rt.TextEval `if:"label=valid"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*ObjectExists)(nil)

func (*ObjectExists) Compose() composer.Spec {
	return composer.Spec{
		Name: ObjectExists_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const ObjectExists_Type = "object_exists"
const ObjectExists_Field_Object = "$OBJECT"

func (op *ObjectExists) Marshal(m jsn.Marshaler) error {
	return ObjectExists_Marshal(m, op)
}

type ObjectExists_Slice []ObjectExists

func (op *ObjectExists_Slice) GetType() string { return ObjectExists_Type }

func (op *ObjectExists_Slice) Marshal(m jsn.Marshaler) error {
	return ObjectExists_Repeats_Marshal(m, (*[]ObjectExists)(op))
}

func (op *ObjectExists_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ObjectExists_Slice) SetSize(cnt int) {
	var els []ObjectExists
	if cnt >= 0 {
		els = make(ObjectExists_Slice, cnt)
	}
	(*op) = els
}

func (op *ObjectExists_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ObjectExists_Marshal(m, &(*op)[i])
}

func ObjectExists_Repeats_Marshal(m jsn.Marshaler, vals *[]ObjectExists) error {
	return jsn.RepeatBlock(m, (*ObjectExists_Slice)(vals))
}

func ObjectExists_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ObjectExists) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ObjectExists_Repeats_Marshal(m, pv)
	}
	return
}

type ObjectExists_Flow struct{ ptr *ObjectExists }

func (n ObjectExists_Flow) GetType() string      { return ObjectExists_Type }
func (n ObjectExists_Flow) GetLede() string      { return "is" }
func (n ObjectExists_Flow) GetFlow() interface{} { return n.ptr }
func (n ObjectExists_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ObjectExists); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ObjectExists_Optional_Marshal(m jsn.Marshaler, pv **ObjectExists) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ObjectExists_Marshal(m, *pv)
	} else if !enc {
		var v ObjectExists
		if err = ObjectExists_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ObjectExists_Marshal(m jsn.Marshaler, val *ObjectExists) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ObjectExists_Flow{val}); err == nil {
		e0 := m.MarshalKey("valid", ObjectExists_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ObjectExists_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// Pluralize Returns the plural form of a singular word. (ex. apples for apple. ).
type Pluralize struct {
	Text   rt.TextEval `if:"label=of"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Pluralize)(nil)

func (*Pluralize) Compose() composer.Spec {
	return composer.Spec{
		Name: Pluralize_Type,
		Uses: composer.Type_Flow,
		Lede: "plural",
	}
}

const Pluralize_Type = "pluralize"
const Pluralize_Field_Text = "$TEXT"

func (op *Pluralize) Marshal(m jsn.Marshaler) error {
	return Pluralize_Marshal(m, op)
}

type Pluralize_Slice []Pluralize

func (op *Pluralize_Slice) GetType() string { return Pluralize_Type }

func (op *Pluralize_Slice) Marshal(m jsn.Marshaler) error {
	return Pluralize_Repeats_Marshal(m, (*[]Pluralize)(op))
}

func (op *Pluralize_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Pluralize_Slice) SetSize(cnt int) {
	var els []Pluralize
	if cnt >= 0 {
		els = make(Pluralize_Slice, cnt)
	}
	(*op) = els
}

func (op *Pluralize_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Pluralize_Marshal(m, &(*op)[i])
}

func Pluralize_Repeats_Marshal(m jsn.Marshaler, vals *[]Pluralize) error {
	return jsn.RepeatBlock(m, (*Pluralize_Slice)(vals))
}

func Pluralize_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Pluralize) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Pluralize_Repeats_Marshal(m, pv)
	}
	return
}

type Pluralize_Flow struct{ ptr *Pluralize }

func (n Pluralize_Flow) GetType() string      { return Pluralize_Type }
func (n Pluralize_Flow) GetLede() string      { return "plural" }
func (n Pluralize_Flow) GetFlow() interface{} { return n.ptr }
func (n Pluralize_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Pluralize); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Pluralize_Optional_Marshal(m jsn.Marshaler, pv **Pluralize) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Pluralize_Marshal(m, *pv)
	} else if !enc {
		var v Pluralize
		if err = Pluralize_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Pluralize_Marshal(m jsn.Marshaler, val *Pluralize) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Pluralize_Flow{val}); err == nil {
		e0 := m.MarshalKey("of", Pluralize_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Pluralize_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// PrintNum Writes a number using numerals, eg. '1'.
type PrintNum struct {
	Num    rt.NumberEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*PrintNum)(nil)

func (*PrintNum) Compose() composer.Spec {
	return composer.Spec{
		Name: PrintNum_Type,
		Uses: composer.Type_Flow,
		Lede: "numeral",
	}
}

const PrintNum_Type = "print_num"
const PrintNum_Field_Num = "$NUM"

func (op *PrintNum) Marshal(m jsn.Marshaler) error {
	return PrintNum_Marshal(m, op)
}

type PrintNum_Slice []PrintNum

func (op *PrintNum_Slice) GetType() string { return PrintNum_Type }

func (op *PrintNum_Slice) Marshal(m jsn.Marshaler) error {
	return PrintNum_Repeats_Marshal(m, (*[]PrintNum)(op))
}

func (op *PrintNum_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PrintNum_Slice) SetSize(cnt int) {
	var els []PrintNum
	if cnt >= 0 {
		els = make(PrintNum_Slice, cnt)
	}
	(*op) = els
}

func (op *PrintNum_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PrintNum_Marshal(m, &(*op)[i])
}

func PrintNum_Repeats_Marshal(m jsn.Marshaler, vals *[]PrintNum) error {
	return jsn.RepeatBlock(m, (*PrintNum_Slice)(vals))
}

func PrintNum_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PrintNum) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PrintNum_Repeats_Marshal(m, pv)
	}
	return
}

type PrintNum_Flow struct{ ptr *PrintNum }

func (n PrintNum_Flow) GetType() string      { return PrintNum_Type }
func (n PrintNum_Flow) GetLede() string      { return "numeral" }
func (n PrintNum_Flow) GetFlow() interface{} { return n.ptr }
func (n PrintNum_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PrintNum); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PrintNum_Optional_Marshal(m jsn.Marshaler, pv **PrintNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PrintNum_Marshal(m, *pv)
	} else if !enc {
		var v PrintNum
		if err = PrintNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PrintNum_Marshal(m jsn.Marshaler, val *PrintNum) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PrintNum_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PrintNum_Field_Num)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PrintNum_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// PrintNumWord Writes a number in plain english: eg. 'one'.
type PrintNumWord struct {
	Num    rt.NumberEval `if:"label=words"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*PrintNumWord)(nil)

func (*PrintNumWord) Compose() composer.Spec {
	return composer.Spec{
		Name: PrintNumWord_Type,
		Uses: composer.Type_Flow,
		Lede: "numeral",
	}
}

const PrintNumWord_Type = "print_num_word"
const PrintNumWord_Field_Num = "$NUM"

func (op *PrintNumWord) Marshal(m jsn.Marshaler) error {
	return PrintNumWord_Marshal(m, op)
}

type PrintNumWord_Slice []PrintNumWord

func (op *PrintNumWord_Slice) GetType() string { return PrintNumWord_Type }

func (op *PrintNumWord_Slice) Marshal(m jsn.Marshaler) error {
	return PrintNumWord_Repeats_Marshal(m, (*[]PrintNumWord)(op))
}

func (op *PrintNumWord_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PrintNumWord_Slice) SetSize(cnt int) {
	var els []PrintNumWord
	if cnt >= 0 {
		els = make(PrintNumWord_Slice, cnt)
	}
	(*op) = els
}

func (op *PrintNumWord_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PrintNumWord_Marshal(m, &(*op)[i])
}

func PrintNumWord_Repeats_Marshal(m jsn.Marshaler, vals *[]PrintNumWord) error {
	return jsn.RepeatBlock(m, (*PrintNumWord_Slice)(vals))
}

func PrintNumWord_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PrintNumWord) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PrintNumWord_Repeats_Marshal(m, pv)
	}
	return
}

type PrintNumWord_Flow struct{ ptr *PrintNumWord }

func (n PrintNumWord_Flow) GetType() string      { return PrintNumWord_Type }
func (n PrintNumWord_Flow) GetLede() string      { return "numeral" }
func (n PrintNumWord_Flow) GetFlow() interface{} { return n.ptr }
func (n PrintNumWord_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PrintNumWord); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PrintNumWord_Optional_Marshal(m jsn.Marshaler, pv **PrintNumWord) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PrintNumWord_Marshal(m, *pv)
	} else if !enc {
		var v PrintNumWord
		if err = PrintNumWord_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PrintNumWord_Marshal(m jsn.Marshaler, val *PrintNumWord) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PrintNumWord_Flow{val}); err == nil {
		e0 := m.MarshalKey("words", PrintNumWord_Field_Num)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PrintNumWord_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// PrintText Display some text to the player without apply any additional formatting.
type PrintText struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*PrintText)(nil)

func (*PrintText) Compose() composer.Spec {
	return composer.Spec{
		Name: PrintText_Type,
		Uses: composer.Type_Flow,
		Lede: "print",
	}
}

const PrintText_Type = "print_text"
const PrintText_Field_Text = "$TEXT"

func (op *PrintText) Marshal(m jsn.Marshaler) error {
	return PrintText_Marshal(m, op)
}

type PrintText_Slice []PrintText

func (op *PrintText_Slice) GetType() string { return PrintText_Type }

func (op *PrintText_Slice) Marshal(m jsn.Marshaler) error {
	return PrintText_Repeats_Marshal(m, (*[]PrintText)(op))
}

func (op *PrintText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PrintText_Slice) SetSize(cnt int) {
	var els []PrintText
	if cnt >= 0 {
		els = make(PrintText_Slice, cnt)
	}
	(*op) = els
}

func (op *PrintText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PrintText_Marshal(m, &(*op)[i])
}

func PrintText_Repeats_Marshal(m jsn.Marshaler, vals *[]PrintText) error {
	return jsn.RepeatBlock(m, (*PrintText_Slice)(vals))
}

func PrintText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PrintText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PrintText_Repeats_Marshal(m, pv)
	}
	return
}

type PrintText_Flow struct{ ptr *PrintText }

func (n PrintText_Flow) GetType() string      { return PrintText_Type }
func (n PrintText_Flow) GetLede() string      { return "print" }
func (n PrintText_Flow) GetFlow() interface{} { return n.ptr }
func (n PrintText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PrintText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PrintText_Optional_Marshal(m jsn.Marshaler, pv **PrintText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PrintText_Marshal(m, *pv)
	} else if !enc {
		var v PrintText
		if err = PrintText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PrintText_Marshal(m jsn.Marshaler, val *PrintText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PrintText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PrintText_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PrintText_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// Row Group text into a single line <li> as part of a list of lines.
// See also: 'rows'.
type Row struct {
	Exe    []rt.Execute `if:"label=do"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Row)(nil)

func (*Row) Compose() composer.Spec {
	return composer.Spec{
		Name: Row_Type,
		Uses: composer.Type_Flow,
	}
}

const Row_Type = "row"
const Row_Field_Exe = "$EXE"

func (op *Row) Marshal(m jsn.Marshaler) error {
	return Row_Marshal(m, op)
}

type Row_Slice []Row

func (op *Row_Slice) GetType() string { return Row_Type }

func (op *Row_Slice) Marshal(m jsn.Marshaler) error {
	return Row_Repeats_Marshal(m, (*[]Row)(op))
}

func (op *Row_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Row_Slice) SetSize(cnt int) {
	var els []Row
	if cnt >= 0 {
		els = make(Row_Slice, cnt)
	}
	(*op) = els
}

func (op *Row_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Row_Marshal(m, &(*op)[i])
}

func Row_Repeats_Marshal(m jsn.Marshaler, vals *[]Row) error {
	return jsn.RepeatBlock(m, (*Row_Slice)(vals))
}

func Row_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Row) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Row_Repeats_Marshal(m, pv)
	}
	return
}

type Row_Flow struct{ ptr *Row }

func (n Row_Flow) GetType() string      { return Row_Type }
func (n Row_Flow) GetLede() string      { return Row_Type }
func (n Row_Flow) GetFlow() interface{} { return n.ptr }
func (n Row_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Row); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Row_Optional_Marshal(m jsn.Marshaler, pv **Row) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Row_Marshal(m, *pv)
	} else if !enc {
		var v Row
		if err = Row_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Row_Marshal(m jsn.Marshaler, val *Row) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Row_Flow{val}); err == nil {
		e0 := m.MarshalKey("do", Row_Field_Exe)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Row_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

// Rows Group text into an unordered list <ul>.
type Rows struct {
	Exe    []rt.Execute `if:"label=do"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Rows)(nil)

func (*Rows) Compose() composer.Spec {
	return composer.Spec{
		Name: Rows_Type,
		Uses: composer.Type_Flow,
	}
}

const Rows_Type = "rows"
const Rows_Field_Exe = "$EXE"

func (op *Rows) Marshal(m jsn.Marshaler) error {
	return Rows_Marshal(m, op)
}

type Rows_Slice []Rows

func (op *Rows_Slice) GetType() string { return Rows_Type }

func (op *Rows_Slice) Marshal(m jsn.Marshaler) error {
	return Rows_Repeats_Marshal(m, (*[]Rows)(op))
}

func (op *Rows_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Rows_Slice) SetSize(cnt int) {
	var els []Rows
	if cnt >= 0 {
		els = make(Rows_Slice, cnt)
	}
	(*op) = els
}

func (op *Rows_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Rows_Marshal(m, &(*op)[i])
}

func Rows_Repeats_Marshal(m jsn.Marshaler, vals *[]Rows) error {
	return jsn.RepeatBlock(m, (*Rows_Slice)(vals))
}

func Rows_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Rows) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Rows_Repeats_Marshal(m, pv)
	}
	return
}

type Rows_Flow struct{ ptr *Rows }

func (n Rows_Flow) GetType() string      { return Rows_Type }
func (n Rows_Flow) GetLede() string      { return Rows_Type }
func (n Rows_Flow) GetFlow() interface{} { return n.ptr }
func (n Rows_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Rows); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Rows_Optional_Marshal(m jsn.Marshaler, pv **Rows) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Rows_Marshal(m, *pv)
	} else if !enc {
		var v Rows
		if err = Rows_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Rows_Marshal(m jsn.Marshaler, val *Rows) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Rows_Flow{val}); err == nil {
		e0 := m.MarshalKey("do", Rows_Field_Exe)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Rows_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

// Singularize Returns the singular form of a plural word. (ex. apple for apples ).
type Singularize struct {
	Text   rt.TextEval `if:"label=of"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Singularize)(nil)

func (*Singularize) Compose() composer.Spec {
	return composer.Spec{
		Name: Singularize_Type,
		Uses: composer.Type_Flow,
		Lede: "singular",
	}
}

const Singularize_Type = "singularize"
const Singularize_Field_Text = "$TEXT"

func (op *Singularize) Marshal(m jsn.Marshaler) error {
	return Singularize_Marshal(m, op)
}

type Singularize_Slice []Singularize

func (op *Singularize_Slice) GetType() string { return Singularize_Type }

func (op *Singularize_Slice) Marshal(m jsn.Marshaler) error {
	return Singularize_Repeats_Marshal(m, (*[]Singularize)(op))
}

func (op *Singularize_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Singularize_Slice) SetSize(cnt int) {
	var els []Singularize
	if cnt >= 0 {
		els = make(Singularize_Slice, cnt)
	}
	(*op) = els
}

func (op *Singularize_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Singularize_Marshal(m, &(*op)[i])
}

func Singularize_Repeats_Marshal(m jsn.Marshaler, vals *[]Singularize) error {
	return jsn.RepeatBlock(m, (*Singularize_Slice)(vals))
}

func Singularize_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Singularize) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Singularize_Repeats_Marshal(m, pv)
	}
	return
}

type Singularize_Flow struct{ ptr *Singularize }

func (n Singularize_Flow) GetType() string      { return Singularize_Type }
func (n Singularize_Flow) GetLede() string      { return "singular" }
func (n Singularize_Flow) GetFlow() interface{} { return n.ptr }
func (n Singularize_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Singularize); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Singularize_Optional_Marshal(m jsn.Marshaler, pv **Singularize) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Singularize_Marshal(m, *pv)
	} else if !enc {
		var v Singularize
		if err = Singularize_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Singularize_Marshal(m jsn.Marshaler, val *Singularize) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Singularize_Flow{val}); err == nil {
		e0 := m.MarshalKey("of", Singularize_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Singularize_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// SlashText Separates words with left-leaning slashes '/'.
type SlashText struct {
	Exe    []rt.Execute `if:"label=do"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*SlashText)(nil)

func (*SlashText) Compose() composer.Spec {
	return composer.Spec{
		Name: SlashText_Type,
		Uses: composer.Type_Flow,
		Lede: "slashes",
	}
}

const SlashText_Type = "slash_text"
const SlashText_Field_Exe = "$EXE"

func (op *SlashText) Marshal(m jsn.Marshaler) error {
	return SlashText_Marshal(m, op)
}

type SlashText_Slice []SlashText

func (op *SlashText_Slice) GetType() string { return SlashText_Type }

func (op *SlashText_Slice) Marshal(m jsn.Marshaler) error {
	return SlashText_Repeats_Marshal(m, (*[]SlashText)(op))
}

func (op *SlashText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SlashText_Slice) SetSize(cnt int) {
	var els []SlashText
	if cnt >= 0 {
		els = make(SlashText_Slice, cnt)
	}
	(*op) = els
}

func (op *SlashText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SlashText_Marshal(m, &(*op)[i])
}

func SlashText_Repeats_Marshal(m jsn.Marshaler, vals *[]SlashText) error {
	return jsn.RepeatBlock(m, (*SlashText_Slice)(vals))
}

func SlashText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SlashText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SlashText_Repeats_Marshal(m, pv)
	}
	return
}

type SlashText_Flow struct{ ptr *SlashText }

func (n SlashText_Flow) GetType() string      { return SlashText_Type }
func (n SlashText_Flow) GetLede() string      { return "slashes" }
func (n SlashText_Flow) GetFlow() interface{} { return n.ptr }
func (n SlashText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SlashText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SlashText_Optional_Marshal(m jsn.Marshaler, pv **SlashText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SlashText_Marshal(m, *pv)
	} else if !enc {
		var v SlashText
		if err = SlashText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SlashText_Marshal(m jsn.Marshaler, val *SlashText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SlashText_Flow{val}); err == nil {
		e0 := m.MarshalKey("do", SlashText_Field_Exe)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SlashText_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

// Softline Start a new line ( if not already at a new line. ).
type Softline struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Softline)(nil)

func (*Softline) Compose() composer.Spec {
	return composer.Spec{
		Name: Softline_Type,
		Uses: composer.Type_Flow,
		Lede: "wbr",
	}
}

const Softline_Type = "softline"

func (op *Softline) Marshal(m jsn.Marshaler) error {
	return Softline_Marshal(m, op)
}

type Softline_Slice []Softline

func (op *Softline_Slice) GetType() string { return Softline_Type }

func (op *Softline_Slice) Marshal(m jsn.Marshaler) error {
	return Softline_Repeats_Marshal(m, (*[]Softline)(op))
}

func (op *Softline_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Softline_Slice) SetSize(cnt int) {
	var els []Softline
	if cnt >= 0 {
		els = make(Softline_Slice, cnt)
	}
	(*op) = els
}

func (op *Softline_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Softline_Marshal(m, &(*op)[i])
}

func Softline_Repeats_Marshal(m jsn.Marshaler, vals *[]Softline) error {
	return jsn.RepeatBlock(m, (*Softline_Slice)(vals))
}

func Softline_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Softline) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Softline_Repeats_Marshal(m, pv)
	}
	return
}

type Softline_Flow struct{ ptr *Softline }

func (n Softline_Flow) GetType() string      { return Softline_Type }
func (n Softline_Flow) GetLede() string      { return "wbr" }
func (n Softline_Flow) GetFlow() interface{} { return n.ptr }
func (n Softline_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Softline); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Softline_Optional_Marshal(m jsn.Marshaler, pv **Softline) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Softline_Marshal(m, *pv)
	} else if !enc {
		var v Softline
		if err = Softline_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Softline_Marshal(m jsn.Marshaler, val *Softline) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Softline_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// SpanText Writes text with spaces between words.
type SpanText struct {
	Exe    []rt.Execute `if:"label=do"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*SpanText)(nil)

func (*SpanText) Compose() composer.Spec {
	return composer.Spec{
		Name: SpanText_Type,
		Uses: composer.Type_Flow,
		Lede: "spaces",
	}
}

const SpanText_Type = "span_text"
const SpanText_Field_Exe = "$EXE"

func (op *SpanText) Marshal(m jsn.Marshaler) error {
	return SpanText_Marshal(m, op)
}

type SpanText_Slice []SpanText

func (op *SpanText_Slice) GetType() string { return SpanText_Type }

func (op *SpanText_Slice) Marshal(m jsn.Marshaler) error {
	return SpanText_Repeats_Marshal(m, (*[]SpanText)(op))
}

func (op *SpanText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SpanText_Slice) SetSize(cnt int) {
	var els []SpanText
	if cnt >= 0 {
		els = make(SpanText_Slice, cnt)
	}
	(*op) = els
}

func (op *SpanText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SpanText_Marshal(m, &(*op)[i])
}

func SpanText_Repeats_Marshal(m jsn.Marshaler, vals *[]SpanText) error {
	return jsn.RepeatBlock(m, (*SpanText_Slice)(vals))
}

func SpanText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SpanText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SpanText_Repeats_Marshal(m, pv)
	}
	return
}

type SpanText_Flow struct{ ptr *SpanText }

func (n SpanText_Flow) GetType() string      { return SpanText_Type }
func (n SpanText_Flow) GetLede() string      { return "spaces" }
func (n SpanText_Flow) GetFlow() interface{} { return n.ptr }
func (n SpanText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SpanText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SpanText_Optional_Marshal(m jsn.Marshaler, pv **SpanText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SpanText_Marshal(m, *pv)
	} else if !enc {
		var v SpanText
		if err = SpanText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SpanText_Marshal(m jsn.Marshaler, val *SpanText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SpanText_Flow{val}); err == nil {
		e0 := m.MarshalKey("do", SpanText_Field_Exe)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SpanText_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

// SubtractValue Subtract two numbers.
type SubtractValue struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=value"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*SubtractValue)(nil)

func (*SubtractValue) Compose() composer.Spec {
	return composer.Spec{
		Name: SubtractValue_Type,
		Uses: composer.Type_Flow,
		Lede: "subtract",
	}
}

const SubtractValue_Type = "subtract_value"
const SubtractValue_Field_A = "$A"
const SubtractValue_Field_B = "$B"

func (op *SubtractValue) Marshal(m jsn.Marshaler) error {
	return SubtractValue_Marshal(m, op)
}

type SubtractValue_Slice []SubtractValue

func (op *SubtractValue_Slice) GetType() string { return SubtractValue_Type }

func (op *SubtractValue_Slice) Marshal(m jsn.Marshaler) error {
	return SubtractValue_Repeats_Marshal(m, (*[]SubtractValue)(op))
}

func (op *SubtractValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SubtractValue_Slice) SetSize(cnt int) {
	var els []SubtractValue
	if cnt >= 0 {
		els = make(SubtractValue_Slice, cnt)
	}
	(*op) = els
}

func (op *SubtractValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SubtractValue_Marshal(m, &(*op)[i])
}

func SubtractValue_Repeats_Marshal(m jsn.Marshaler, vals *[]SubtractValue) error {
	return jsn.RepeatBlock(m, (*SubtractValue_Slice)(vals))
}

func SubtractValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SubtractValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SubtractValue_Repeats_Marshal(m, pv)
	}
	return
}

type SubtractValue_Flow struct{ ptr *SubtractValue }

func (n SubtractValue_Flow) GetType() string      { return SubtractValue_Type }
func (n SubtractValue_Flow) GetLede() string      { return "subtract" }
func (n SubtractValue_Flow) GetFlow() interface{} { return n.ptr }
func (n SubtractValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SubtractValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SubtractValue_Optional_Marshal(m jsn.Marshaler, pv **SubtractValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SubtractValue_Marshal(m, *pv)
	} else if !enc {
		var v SubtractValue
		if err = SubtractValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SubtractValue_Marshal(m jsn.Marshaler, val *SubtractValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SubtractValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", SubtractValue_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SubtractValue_Field_A))
		}
		e1 := m.MarshalKey("value", SubtractValue_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", SubtractValue_Field_B))
		}
		m.EndBlock()
	}
	return
}

const Trigger_Type = "trigger"

var Trigger_Optional_Marshal = Trigger_Marshal

type Trigger_Slot struct{ Value *Trigger }

func (at Trigger_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Trigger_Slot) GetType() string              { return Trigger_Type }
func (at Trigger_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Trigger_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Trigger)
	return
}

func Trigger_Marshal(m jsn.Marshaler, ptr *Trigger) (err error) {
	slot := Trigger_Slot{ptr}
	return slot.Marshal(m)
}

type Trigger_Slice []Trigger

func (op *Trigger_Slice) GetType() string { return Trigger_Type }

func (op *Trigger_Slice) Marshal(m jsn.Marshaler) error {
	return Trigger_Repeats_Marshal(m, (*[]Trigger)(op))
}

func (op *Trigger_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Trigger_Slice) SetSize(cnt int) {
	var els []Trigger
	if cnt >= 0 {
		els = make(Trigger_Slice, cnt)
	}
	(*op) = els
}

func (op *Trigger_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Trigger_Marshal(m, &(*op)[i])
}

func Trigger_Repeats_Marshal(m jsn.Marshaler, vals *[]Trigger) error {
	return jsn.RepeatBlock(m, (*Trigger_Slice)(vals))
}

func Trigger_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Trigger) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Trigger_Repeats_Marshal(m, pv)
	}
	return
}

// TriggerCycle
type TriggerCycle struct {
	Markup map[string]any
}

// User implemented slots:
var _ Trigger = (*TriggerCycle)(nil)

func (*TriggerCycle) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerCycle_Type,
		Uses: composer.Type_Flow,
		Lede: "every",
	}
}

const TriggerCycle_Type = "trigger_cycle"

func (op *TriggerCycle) Marshal(m jsn.Marshaler) error {
	return TriggerCycle_Marshal(m, op)
}

type TriggerCycle_Slice []TriggerCycle

func (op *TriggerCycle_Slice) GetType() string { return TriggerCycle_Type }

func (op *TriggerCycle_Slice) Marshal(m jsn.Marshaler) error {
	return TriggerCycle_Repeats_Marshal(m, (*[]TriggerCycle)(op))
}

func (op *TriggerCycle_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TriggerCycle_Slice) SetSize(cnt int) {
	var els []TriggerCycle
	if cnt >= 0 {
		els = make(TriggerCycle_Slice, cnt)
	}
	(*op) = els
}

func (op *TriggerCycle_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TriggerCycle_Marshal(m, &(*op)[i])
}

func TriggerCycle_Repeats_Marshal(m jsn.Marshaler, vals *[]TriggerCycle) error {
	return jsn.RepeatBlock(m, (*TriggerCycle_Slice)(vals))
}

func TriggerCycle_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TriggerCycle) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TriggerCycle_Repeats_Marshal(m, pv)
	}
	return
}

type TriggerCycle_Flow struct{ ptr *TriggerCycle }

func (n TriggerCycle_Flow) GetType() string      { return TriggerCycle_Type }
func (n TriggerCycle_Flow) GetLede() string      { return "every" }
func (n TriggerCycle_Flow) GetFlow() interface{} { return n.ptr }
func (n TriggerCycle_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TriggerCycle); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TriggerCycle_Optional_Marshal(m jsn.Marshaler, pv **TriggerCycle) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TriggerCycle_Marshal(m, *pv)
	} else if !enc {
		var v TriggerCycle
		if err = TriggerCycle_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TriggerCycle_Marshal(m jsn.Marshaler, val *TriggerCycle) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(TriggerCycle_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// TriggerOnce
type TriggerOnce struct {
	Markup map[string]any
}

// User implemented slots:
var _ Trigger = (*TriggerOnce)(nil)

func (*TriggerOnce) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerOnce_Type,
		Uses: composer.Type_Flow,
		Lede: "at",
	}
}

const TriggerOnce_Type = "trigger_once"

func (op *TriggerOnce) Marshal(m jsn.Marshaler) error {
	return TriggerOnce_Marshal(m, op)
}

type TriggerOnce_Slice []TriggerOnce

func (op *TriggerOnce_Slice) GetType() string { return TriggerOnce_Type }

func (op *TriggerOnce_Slice) Marshal(m jsn.Marshaler) error {
	return TriggerOnce_Repeats_Marshal(m, (*[]TriggerOnce)(op))
}

func (op *TriggerOnce_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TriggerOnce_Slice) SetSize(cnt int) {
	var els []TriggerOnce
	if cnt >= 0 {
		els = make(TriggerOnce_Slice, cnt)
	}
	(*op) = els
}

func (op *TriggerOnce_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TriggerOnce_Marshal(m, &(*op)[i])
}

func TriggerOnce_Repeats_Marshal(m jsn.Marshaler, vals *[]TriggerOnce) error {
	return jsn.RepeatBlock(m, (*TriggerOnce_Slice)(vals))
}

func TriggerOnce_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TriggerOnce) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TriggerOnce_Repeats_Marshal(m, pv)
	}
	return
}

type TriggerOnce_Flow struct{ ptr *TriggerOnce }

func (n TriggerOnce_Flow) GetType() string      { return TriggerOnce_Type }
func (n TriggerOnce_Flow) GetLede() string      { return "at" }
func (n TriggerOnce_Flow) GetFlow() interface{} { return n.ptr }
func (n TriggerOnce_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TriggerOnce); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TriggerOnce_Optional_Marshal(m jsn.Marshaler, pv **TriggerOnce) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TriggerOnce_Marshal(m, *pv)
	} else if !enc {
		var v TriggerOnce
		if err = TriggerOnce_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TriggerOnce_Marshal(m jsn.Marshaler, val *TriggerOnce) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(TriggerOnce_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// TriggerSwitch
type TriggerSwitch struct {
	Markup map[string]any
}

// User implemented slots:
var _ Trigger = (*TriggerSwitch)(nil)

func (*TriggerSwitch) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerSwitch_Type,
		Uses: composer.Type_Flow,
		Lede: "after",
	}
}

const TriggerSwitch_Type = "trigger_switch"

func (op *TriggerSwitch) Marshal(m jsn.Marshaler) error {
	return TriggerSwitch_Marshal(m, op)
}

type TriggerSwitch_Slice []TriggerSwitch

func (op *TriggerSwitch_Slice) GetType() string { return TriggerSwitch_Type }

func (op *TriggerSwitch_Slice) Marshal(m jsn.Marshaler) error {
	return TriggerSwitch_Repeats_Marshal(m, (*[]TriggerSwitch)(op))
}

func (op *TriggerSwitch_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TriggerSwitch_Slice) SetSize(cnt int) {
	var els []TriggerSwitch
	if cnt >= 0 {
		els = make(TriggerSwitch_Slice, cnt)
	}
	(*op) = els
}

func (op *TriggerSwitch_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TriggerSwitch_Marshal(m, &(*op)[i])
}

func TriggerSwitch_Repeats_Marshal(m jsn.Marshaler, vals *[]TriggerSwitch) error {
	return jsn.RepeatBlock(m, (*TriggerSwitch_Slice)(vals))
}

func TriggerSwitch_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TriggerSwitch) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TriggerSwitch_Repeats_Marshal(m, pv)
	}
	return
}

type TriggerSwitch_Flow struct{ ptr *TriggerSwitch }

func (n TriggerSwitch_Flow) GetType() string      { return TriggerSwitch_Type }
func (n TriggerSwitch_Flow) GetLede() string      { return "after" }
func (n TriggerSwitch_Flow) GetFlow() interface{} { return n.ptr }
func (n TriggerSwitch_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TriggerSwitch); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TriggerSwitch_Optional_Marshal(m jsn.Marshaler, pv **TriggerSwitch) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TriggerSwitch_Marshal(m, *pv)
	} else if !enc {
		var v TriggerSwitch
		if err = TriggerSwitch_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TriggerSwitch_Marshal(m jsn.Marshaler, val *TriggerSwitch) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(TriggerSwitch_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// While Keep running a series of actions while a condition is true.
type While struct {
	True   rt.BoolEval  `if:"label=_"`
	Exe    []rt.Execute `if:"label=do"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*While)(nil)

func (*While) Compose() composer.Spec {
	return composer.Spec{
		Name: While_Type,
		Uses: composer.Type_Flow,
		Lede: "repeating",
	}
}

const While_Type = "while"
const While_Field_True = "$TRUE"
const While_Field_Exe = "$EXE"

func (op *While) Marshal(m jsn.Marshaler) error {
	return While_Marshal(m, op)
}

type While_Slice []While

func (op *While_Slice) GetType() string { return While_Type }

func (op *While_Slice) Marshal(m jsn.Marshaler) error {
	return While_Repeats_Marshal(m, (*[]While)(op))
}

func (op *While_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *While_Slice) SetSize(cnt int) {
	var els []While
	if cnt >= 0 {
		els = make(While_Slice, cnt)
	}
	(*op) = els
}

func (op *While_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return While_Marshal(m, &(*op)[i])
}

func While_Repeats_Marshal(m jsn.Marshaler, vals *[]While) error {
	return jsn.RepeatBlock(m, (*While_Slice)(vals))
}

func While_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]While) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = While_Repeats_Marshal(m, pv)
	}
	return
}

type While_Flow struct{ ptr *While }

func (n While_Flow) GetType() string      { return While_Type }
func (n While_Flow) GetLede() string      { return "repeating" }
func (n While_Flow) GetFlow() interface{} { return n.ptr }
func (n While_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*While); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func While_Optional_Marshal(m jsn.Marshaler, pv **While) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = While_Marshal(m, *pv)
	} else if !enc {
		var v While
		if err = While_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func While_Marshal(m jsn.Marshaler, val *While) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(While_Flow{val}); err == nil {
		e0 := m.MarshalKey("", While_Field_True)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.True)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", While_Field_True))
		}
		e1 := m.MarshalKey("do", While_Field_Exe)
		if e1 == nil {
			e1 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", While_Field_Exe))
		}
		m.EndBlock()
	}
	return
}

var Slots = []interface{}{
	(*Brancher)(nil),
	(*Trigger)(nil),
}

var Slats = []composer.Composer{
	(*AbsValue)(nil),
	(*AddValue)(nil),
	(*AllTrue)(nil),
	(*Always)(nil),
	(*AnyTrue)(nil),
	(*Blankline)(nil),
	(*BracketText)(nil),
	(*Break)(nil),
	(*BufferText)(nil),
	(*CallCycle)(nil),
	(*CallShuffle)(nil),
	(*CallTerminal)(nil),
	(*CallTrigger)(nil),
	(*Capitalize)(nil),
	(*ChooseBranch)(nil),
	(*ChooseNothingElse)(nil),
	(*ChooseNum)(nil),
	(*ChooseText)(nil),
	(*CommaText)(nil),
	(*CompareNum)(nil),
	(*CompareText)(nil),
	(*CompareValue)(nil),
	(*Comparison)(nil),
	(*Continue)(nil),
	(*Decrement)(nil),
	(*DecrementAspect)(nil),
	(*DivideValue)(nil),
	(*During)(nil),
	(*FieldsOfKind)(nil),
	(*HasDominion)(nil),
	(*IdOf)(nil),
	(*Includes)(nil),
	(*Increment)(nil),
	(*IncrementAspect)(nil),
	(*IsEmpty)(nil),
	(*IsExactKindOf)(nil),
	(*IsKindOf)(nil),
	(*Join)(nil),
	(*KindOf)(nil),
	(*KindsOf)(nil),
	(*MakeLowercase)(nil),
	(*MakeReversed)(nil),
	(*MakeSentenceCase)(nil),
	(*MakeTitleCase)(nil),
	(*MakeUppercase)(nil),
	(*Matches)(nil),
	(*ModValue)(nil),
	(*MultiplyValue)(nil),
	(*NameOf)(nil),
	(*Never)(nil),
	(*Newline)(nil),
	(*Not)(nil),
	(*ObjectExists)(nil),
	(*Pluralize)(nil),
	(*PrintNum)(nil),
	(*PrintNumWord)(nil),
	(*PrintText)(nil),
	(*Row)(nil),
	(*Rows)(nil),
	(*Singularize)(nil),
	(*SlashText)(nil),
	(*Softline)(nil),
	(*SpanText)(nil),
	(*SubtractValue)(nil),
	(*TriggerCycle)(nil),
	(*TriggerOnce)(nil),
	(*TriggerSwitch)(nil),
	(*While)(nil),
}

var Signatures = map[uint64]interface{}{
	15485098871275255450: (*Comparison)(nil),        /* Comparison: */
	9652861807756732392:  (*AbsValue)(nil),          /* number_eval=Absolute value: */
	6415467136316515808:  (*AddValue)(nil),          /* number_eval=Add:value: */
	9392469773844077696:  (*TriggerSwitch)(nil),     /* trigger=After */
	8082607244820951444:  (*AllTrue)(nil),           /* bool_eval=AllTrue: */
	1979437068831463006:  (*Always)(nil),            /* bool_eval=Always */
	1963945852392897915:  (*AnyTrue)(nil),           /* bool_eval=AnyTrue: */
	2233111806717201007:  (*TriggerOnce)(nil),       /* trigger=At */
	15800853823523633295: (*Newline)(nil),           /* execute=Br */
	8805770583889466012:  (*BracketText)(nil),       /* text_eval=Brackets do: */
	9570569845423374482:  (*Break)(nil),             /* execute=Break */
	11322251195672034522: (*BufferText)(nil),        /* text_eval=Buffers do: */
	8695677004499439692:  (*Capitalize)(nil),        /* text_eval=Capitalize: */
	18319016698864768677: (*CommaText)(nil),         /* text_eval=Commas do: */
	3601423820955950769:  (*Includes)(nil),          /* bool_eval=Contains:part: */
	3156233792812716886:  (*Continue)(nil),          /* execute=Continue */
	2636120577324077328:  (*CallCycle)(nil),         /* text_eval=Cycle:over: */
	1765941604351725175:  (*Decrement)(nil),         /* execute=Decrease: */
	16337634811621251476: (*Decrement)(nil),         /* number_eval=Decrease: */
	13259725831972112539: (*DecrementAspect)(nil),   /* execute=Decrease:aspect: */
	9604047801594713852:  (*DecrementAspect)(nil),   /* text_eval=Decrease:aspect: */
	11515881376122775668: (*DecrementAspect)(nil),   /* execute=Decrease:aspect:by: */
	1589765377795283065:  (*DecrementAspect)(nil),   /* text_eval=Decrease:aspect:by: */
	10691394634979399555: (*DecrementAspect)(nil),   /* execute=Decrease:aspect:by:clamp: */
	16351892255943407142: (*DecrementAspect)(nil),   /* text_eval=Decrease:aspect:by:clamp: */
	16567257087826189312: (*DecrementAspect)(nil),   /* execute=Decrease:aspect:clamp: */
	7498537354592687963:  (*DecrementAspect)(nil),   /* text_eval=Decrease:aspect:clamp: */
	906537561468635208:   (*Decrement)(nil),         /* execute=Decrease:by: */
	7249930857706662977:  (*Decrement)(nil),         /* number_eval=Decrease:by: */
	14212233424935015742: (*DivideValue)(nil),       /* number_eval=Divide:value: */
	6766679711322815220:  (*During)(nil),            /* bool_eval=During: */
	1731395596460545319:  (*During)(nil),            /* number_eval=During: */
	1457631626735043065:  (*TriggerCycle)(nil),      /* trigger=Every */
	2224842870997259213:  (*FieldsOfKind)(nil),      /* text_list_eval=Fields of: */
	13697022905922221509: (*ChooseNothingElse)(nil), /* brancher=Finally do: */
	9805093500361992370:  (*IdOf)(nil),              /* text_eval=IdOf: */
	6524366950360243674:  (*ChooseBranch)(nil),      /* brancher=If:assuming:do: */
	12195526980856142720: (*ChooseBranch)(nil),      /* execute=If:assuming:do: */
	16752471159562852415: (*ChooseBranch)(nil),      /* brancher=If:assuming:do:else: */
	2092791308408463217:  (*ChooseBranch)(nil),      /* execute=If:assuming:do:else: */
	11676187955438326921: (*ChooseBranch)(nil),      /* brancher=If:do: */
	16551038912311542599: (*ChooseBranch)(nil),      /* execute=If:do: */
	11846460753008131314: (*ChooseBranch)(nil),      /* brancher=If:do:else: */
	9882017885672780228:  (*ChooseBranch)(nil),      /* execute=If:do:else: */
	3419326304120453839:  (*Increment)(nil),         /* execute=Increase: */
	5814330157137261092:  (*Increment)(nil),         /* number_eval=Increase: */
	11043224857467493683: (*IncrementAspect)(nil),   /* execute=Increase:aspect: */
	1296309673842091672:  (*IncrementAspect)(nil),   /* text_eval=Increase:aspect: */
	4473637830475551932:  (*IncrementAspect)(nil),   /* execute=Increase:aspect:by: */
	18328024260427443133: (*IncrementAspect)(nil),   /* text_eval=Increase:aspect:by: */
	1150598923989934235:  (*IncrementAspect)(nil),   /* execute=Increase:aspect:by:clamp: */
	16465259325356451354: (*IncrementAspect)(nil),   /* text_eval=Increase:aspect:by:clamp: */
	4522630356185077352:  (*IncrementAspect)(nil),   /* execute=Increase:aspect:clamp: */
	705264554644415287:   (*IncrementAspect)(nil),   /* text_eval=Increase:aspect:clamp: */
	9916665856596995152:  (*Increment)(nil),         /* execute=Increase:by: */
	6061586167490323121:  (*Increment)(nil),         /* number_eval=Increase:by: */
	16720860407833961741: (*HasDominion)(nil),       /* bool_eval=Is domain: */
	10867951538760575464: (*IsEmpty)(nil),           /* bool_eval=Is empty: */
	17183768313478169229: (*ObjectExists)(nil),      /* bool_eval=Is valid: */
	4986574662941955696:  (*CompareNum)(nil),        /* bool_eval=Is:matching:num: */
	6471221873898876231:  (*CompareNum)(nil),        /* bool_eval=Is:matching:num:within: */
	2616749751052919401:  (*CompareText)(nil),       /* bool_eval=Is:matching:text: */
	7216474174347601443:  (*CompareValue)(nil),      /* bool_eval=Is:matching:value: */
	10106284345457008764: (*Join)(nil),              /* text_eval=Join parts: */
	16037301925772243654: (*Join)(nil),              /* text_eval=Join:parts: */
	16305715626122315047: (*KindOf)(nil),            /* text_eval=KindOf: */
	16744881049704292640: (*IsKindOf)(nil),          /* bool_eval=KindOf:is: */
	210805642732508805:   (*IsKindOf)(nil),          /* bool_eval=KindOf:is:nothing: */
	7296079450764183372:  (*IsExactKindOf)(nil),     /* bool_eval=KindOf:isExactly: */
	4254622167054960918:  (*KindOf)(nil),            /* text_eval=KindOf:nothing: */
	6869420318733086481:  (*KindsOf)(nil),           /* text_list_eval=KindsOf: */
	11334467785012784241: (*MakeLowercase)(nil),     /* text_eval=Lower: */
	7007374677444567783:  (*Matches)(nil),           /* bool_eval=Matches:to: */
	734548188050460137:   (*ModValue)(nil),          /* number_eval=Mod:value: */
	17515508702665594117: (*MultiplyValue)(nil),     /* number_eval=Multiply:value: */
	15519818243985955688: (*NameOf)(nil),            /* text_eval=NameOf: */
	1310533520550597035:  (*Never)(nil),             /* bool_eval=Never */
	3572677870333466638:  (*Not)(nil),               /* bool_eval=Not: */
	2793972640309351788:  (*ChooseNum)(nil),         /* number_eval=Num if:then: */
	1916074756917320013:  (*ChooseNum)(nil),         /* number_eval=Num if:then:else: */
	18009133328614046007: (*PrintNumWord)(nil),      /* text_eval=Numeral words: */
	5709077775967698380:  (*PrintNum)(nil),          /* text_eval=Numeral: */
	7215745238754840573:  (*Blankline)(nil),         /* execute=P */
	11420921600352749983: (*Pluralize)(nil),         /* text_eval=Plural of: */
	4512128922644282356:  (*PrintText)(nil),         /* execute=Print: */
	16853421744116592875: (*While)(nil),             /* execute=Repeating:do: */
	12963686195606417453: (*MakeReversed)(nil),      /* text_eval=Reverse text: */
	14820902432990466009: (*Row)(nil),               /* text_eval=Row do: */
	42419598592471524:    (*Rows)(nil),              /* text_eval=Rows do: */
	10747671703915852065: (*MakeSentenceCase)(nil),  /* text_eval=Sentence: */
	3632089819497852687:  (*CallShuffle)(nil),       /* text_eval=Shuffle:over: */
	2397382738676796596:  (*Singularize)(nil),       /* text_eval=Singular of: */
	13377280423859122588: (*SlashText)(nil),         /* text_eval=Slashes do: */
	14637971099620461998: (*SpanText)(nil),          /* text_eval=Spaces do: */
	10180508752412200934: (*CallTerminal)(nil),      /* text_eval=Stopping:over: */
	6622046790206362641:  (*SubtractValue)(nil),     /* number_eval=Subtract:value: */
	10878271994667616824: (*MakeTitleCase)(nil),     /* text_eval=Title: */
	2711869841453509536:  (*CallTrigger)(nil),       /* bool_eval=Trigger:on:num: */
	9953804072544503126:  (*ChooseText)(nil),        /* text_eval=Txt if:then: */
	5534583393866490763:  (*ChooseText)(nil),        /* text_eval=Txt if:then:else: */
	5481656653805454214:  (*MakeUppercase)(nil),     /* text_eval=Upper: */
	16612725309683107572: (*Softline)(nil),          /* execute=Wbr */
}
