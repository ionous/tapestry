// Code generated by "makeops"; edit at your own risk.
package core

import (
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/jsn"
	"git.sr.ht/~ionous/tapestry/rt"
	"github.com/ionous/errutil"
)

// Address swaps between various options
type Address struct {
	Choice string
	Value  interface{}
}

var Address_Optional_Marshal = Address_Marshal

const Address_Object_Opt = "$OBJECT"
const Address_Variable_Opt = "$VARIABLE"

func (*Address) Compose() composer.Spec {
	return composer.Spec{
		Name: Address_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			Address_Object_Opt, Address_Variable_Opt,
		},
		Swaps: []interface{}{
			(*ObjectRef)(nil),
			(*VariableRef)(nil),
		},
	}
}

const Address_Type = "address"

func (op *Address) GetType() string { return Address_Type }

func (op *Address) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *Address) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case Address_Object_Opt:
		op.Choice, op.Value = c, new(ObjectRef)
		okay = true
	case Address_Variable_Opt:
		op.Choice, op.Value = c, new(VariableRef)
		okay = true
	}
	return
}

func (op *Address) Marshal(m jsn.Marshaler) error {
	return Address_Marshal(m, op)
}
func Address_Marshal(m jsn.Marshaler, val *Address) (err error) {
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type Address_Slice []Address

func (op *Address_Slice) GetType() string { return Address_Type }

func (op *Address_Slice) Marshal(m jsn.Marshaler) error {
	return Address_Repeats_Marshal(m, (*[]Address)(op))
}

func (op *Address_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Address_Slice) SetSize(cnt int) {
	var els []Address
	if cnt >= 0 {
		els = make(Address_Slice, cnt)
	}
	(*op) = els
}

func (op *Address_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Address_Marshal(m, &(*op)[i])
}

func Address_Repeats_Marshal(m jsn.Marshaler, vals *[]Address) error {
	return jsn.RepeatBlock(m, (*Address_Slice)(vals))
}

func Address_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Address) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Address_Repeats_Marshal(m, pv)
	}
	return
}

// AllTrue Returns true if all of the evaluations are true.
type AllTrue struct {
	Test   []rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*AllTrue)(nil)

func (*AllTrue) Compose() composer.Spec {
	return composer.Spec{
		Name: AllTrue_Type,
		Uses: composer.Type_Flow,
	}
}

const AllTrue_Type = "all_true"
const AllTrue_Field_Test = "$TEST"

func (op *AllTrue) Marshal(m jsn.Marshaler) error {
	return AllTrue_Marshal(m, op)
}

type AllTrue_Slice []AllTrue

func (op *AllTrue_Slice) GetType() string { return AllTrue_Type }

func (op *AllTrue_Slice) Marshal(m jsn.Marshaler) error {
	return AllTrue_Repeats_Marshal(m, (*[]AllTrue)(op))
}

func (op *AllTrue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AllTrue_Slice) SetSize(cnt int) {
	var els []AllTrue
	if cnt >= 0 {
		els = make(AllTrue_Slice, cnt)
	}
	(*op) = els
}

func (op *AllTrue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AllTrue_Marshal(m, &(*op)[i])
}

func AllTrue_Repeats_Marshal(m jsn.Marshaler, vals *[]AllTrue) error {
	return jsn.RepeatBlock(m, (*AllTrue_Slice)(vals))
}

func AllTrue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AllTrue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AllTrue_Repeats_Marshal(m, pv)
	}
	return
}

type AllTrue_Flow struct{ ptr *AllTrue }

func (n AllTrue_Flow) GetType() string      { return AllTrue_Type }
func (n AllTrue_Flow) GetLede() string      { return AllTrue_Type }
func (n AllTrue_Flow) GetFlow() interface{} { return n.ptr }
func (n AllTrue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AllTrue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AllTrue_Optional_Marshal(m jsn.Marshaler, pv **AllTrue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AllTrue_Marshal(m, *pv)
	} else if !enc {
		var v AllTrue
		if err = AllTrue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AllTrue_Marshal(m jsn.Marshaler, val *AllTrue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AllTrue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AllTrue_Field_Test)
		if e0 == nil {
			e0 = rt.BoolEval_Repeats_Marshal(m, &val.Test)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AllTrue_Field_Test))
		}
		m.EndBlock()
	}
	return
}

// Always Returns true.
type Always struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Always)(nil)

func (*Always) Compose() composer.Spec {
	return composer.Spec{
		Name: Always_Type,
		Uses: composer.Type_Flow,
	}
}

const Always_Type = "always"

func (op *Always) Marshal(m jsn.Marshaler) error {
	return Always_Marshal(m, op)
}

type Always_Slice []Always

func (op *Always_Slice) GetType() string { return Always_Type }

func (op *Always_Slice) Marshal(m jsn.Marshaler) error {
	return Always_Repeats_Marshal(m, (*[]Always)(op))
}

func (op *Always_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Always_Slice) SetSize(cnt int) {
	var els []Always
	if cnt >= 0 {
		els = make(Always_Slice, cnt)
	}
	(*op) = els
}

func (op *Always_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Always_Marshal(m, &(*op)[i])
}

func Always_Repeats_Marshal(m jsn.Marshaler, vals *[]Always) error {
	return jsn.RepeatBlock(m, (*Always_Slice)(vals))
}

func Always_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Always) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Always_Repeats_Marshal(m, pv)
	}
	return
}

type Always_Flow struct{ ptr *Always }

func (n Always_Flow) GetType() string      { return Always_Type }
func (n Always_Flow) GetLede() string      { return Always_Type }
func (n Always_Flow) GetFlow() interface{} { return n.ptr }
func (n Always_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Always); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Always_Optional_Marshal(m jsn.Marshaler, pv **Always) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Always_Marshal(m, *pv)
	} else if !enc {
		var v Always
		if err = Always_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Always_Marshal(m jsn.Marshaler, val *Always) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Always_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// AnyTrue Returns true if any of the evaluations are true.
type AnyTrue struct {
	Test   []rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*AnyTrue)(nil)

func (*AnyTrue) Compose() composer.Spec {
	return composer.Spec{
		Name: AnyTrue_Type,
		Uses: composer.Type_Flow,
	}
}

const AnyTrue_Type = "any_true"
const AnyTrue_Field_Test = "$TEST"

func (op *AnyTrue) Marshal(m jsn.Marshaler) error {
	return AnyTrue_Marshal(m, op)
}

type AnyTrue_Slice []AnyTrue

func (op *AnyTrue_Slice) GetType() string { return AnyTrue_Type }

func (op *AnyTrue_Slice) Marshal(m jsn.Marshaler) error {
	return AnyTrue_Repeats_Marshal(m, (*[]AnyTrue)(op))
}

func (op *AnyTrue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AnyTrue_Slice) SetSize(cnt int) {
	var els []AnyTrue
	if cnt >= 0 {
		els = make(AnyTrue_Slice, cnt)
	}
	(*op) = els
}

func (op *AnyTrue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AnyTrue_Marshal(m, &(*op)[i])
}

func AnyTrue_Repeats_Marshal(m jsn.Marshaler, vals *[]AnyTrue) error {
	return jsn.RepeatBlock(m, (*AnyTrue_Slice)(vals))
}

func AnyTrue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AnyTrue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AnyTrue_Repeats_Marshal(m, pv)
	}
	return
}

type AnyTrue_Flow struct{ ptr *AnyTrue }

func (n AnyTrue_Flow) GetType() string      { return AnyTrue_Type }
func (n AnyTrue_Flow) GetLede() string      { return AnyTrue_Type }
func (n AnyTrue_Flow) GetFlow() interface{} { return n.ptr }
func (n AnyTrue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AnyTrue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AnyTrue_Optional_Marshal(m jsn.Marshaler, pv **AnyTrue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AnyTrue_Marshal(m, *pv)
	} else if !enc {
		var v AnyTrue
		if err = AnyTrue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AnyTrue_Marshal(m jsn.Marshaler, val *AnyTrue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AnyTrue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AnyTrue_Field_Test)
		if e0 == nil {
			e0 = rt.BoolEval_Repeats_Marshal(m, &val.Test)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AnyTrue_Field_Test))
		}
		m.EndBlock()
	}
	return
}

// Arg Runtime version of argument.
type Arg struct {
	Name   string     `if:"label=_,type=text"`
	Value  Assignment `if:"label=from"`
	Markup map[string]any
}

func (*Arg) Compose() composer.Spec {
	return composer.Spec{
		Name: Arg_Type,
		Uses: composer.Type_Flow,
	}
}

const Arg_Type = "arg"
const Arg_Field_Name = "$NAME"
const Arg_Field_Value = "$VALUE"

func (op *Arg) Marshal(m jsn.Marshaler) error {
	return Arg_Marshal(m, op)
}

type Arg_Slice []Arg

func (op *Arg_Slice) GetType() string { return Arg_Type }

func (op *Arg_Slice) Marshal(m jsn.Marshaler) error {
	return Arg_Repeats_Marshal(m, (*[]Arg)(op))
}

func (op *Arg_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Arg_Slice) SetSize(cnt int) {
	var els []Arg
	if cnt >= 0 {
		els = make(Arg_Slice, cnt)
	}
	(*op) = els
}

func (op *Arg_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Arg_Marshal(m, &(*op)[i])
}

func Arg_Repeats_Marshal(m jsn.Marshaler, vals *[]Arg) error {
	return jsn.RepeatBlock(m, (*Arg_Slice)(vals))
}

func Arg_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Arg) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Arg_Repeats_Marshal(m, pv)
	}
	return
}

type Arg_Flow struct{ ptr *Arg }

func (n Arg_Flow) GetType() string      { return Arg_Type }
func (n Arg_Flow) GetLede() string      { return Arg_Type }
func (n Arg_Flow) GetFlow() interface{} { return n.ptr }
func (n Arg_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Arg); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Arg_Optional_Marshal(m jsn.Marshaler, pv **Arg) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Arg_Marshal(m, *pv)
	} else if !enc {
		var v Arg
		if err = Arg_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Arg_Marshal(m jsn.Marshaler, val *Arg) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Arg_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Arg_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Arg_Field_Name))
		}
		e1 := m.MarshalKey("from", Arg_Field_Value)
		if e1 == nil {
			e1 = Assignment_Marshal(m, &val.Value)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Arg_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// Assignment swaps between various options
type Assignment struct {
	Choice string
	Value  interface{}
}

var Assignment_Optional_Marshal = Assignment_Marshal

const Assignment_Bool_Opt = "$BOOL"
const Assignment_Number_Opt = "$NUMBER"
const Assignment_Text_Opt = "$TEXT"
const Assignment_Record_Opt = "$RECORD"
const Assignment_NumList_Opt = "$NUM_LIST"
const Assignment_TextList_Opt = "$TEXT_LIST"
const Assignment_RecordList_Opt = "$RECORD_LIST"

func (*Assignment) Compose() composer.Spec {
	return composer.Spec{
		Name: Assignment_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			Assignment_Bool_Opt, Assignment_Number_Opt, Assignment_Text_Opt, Assignment_Record_Opt, Assignment_NumList_Opt, Assignment_TextList_Opt, Assignment_RecordList_Opt,
		},
		Swaps: []interface{}{
			(*FromBool)(nil),
			(*FromNumber)(nil),
			(*FromText)(nil),
			(*FromRecord)(nil),
			(*FromNumList)(nil),
			(*FromTextList)(nil),
			(*FromRecordList)(nil),
		},
	}
}

const Assignment_Type = "assignment"

func (op *Assignment) GetType() string { return Assignment_Type }

func (op *Assignment) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *Assignment) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case Assignment_Bool_Opt:
		op.Choice, op.Value = c, new(FromBool)
		okay = true
	case Assignment_Number_Opt:
		op.Choice, op.Value = c, new(FromNumber)
		okay = true
	case Assignment_Text_Opt:
		op.Choice, op.Value = c, new(FromText)
		okay = true
	case Assignment_Record_Opt:
		op.Choice, op.Value = c, new(FromRecord)
		okay = true
	case Assignment_NumList_Opt:
		op.Choice, op.Value = c, new(FromNumList)
		okay = true
	case Assignment_TextList_Opt:
		op.Choice, op.Value = c, new(FromTextList)
		okay = true
	case Assignment_RecordList_Opt:
		op.Choice, op.Value = c, new(FromRecordList)
		okay = true
	}
	return
}

func (op *Assignment) Marshal(m jsn.Marshaler) error {
	return Assignment_Marshal(m, op)
}
func Assignment_Marshal(m jsn.Marshaler, val *Assignment) (err error) {
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type Assignment_Slice []Assignment

func (op *Assignment_Slice) GetType() string { return Assignment_Type }

func (op *Assignment_Slice) Marshal(m jsn.Marshaler) error {
	return Assignment_Repeats_Marshal(m, (*[]Assignment)(op))
}

func (op *Assignment_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Assignment_Slice) SetSize(cnt int) {
	var els []Assignment
	if cnt >= 0 {
		els = make(Assignment_Slice, cnt)
	}
	(*op) = els
}

func (op *Assignment_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Assignment_Marshal(m, &(*op)[i])
}

func Assignment_Repeats_Marshal(m jsn.Marshaler, vals *[]Assignment) error {
	return jsn.RepeatBlock(m, (*Assignment_Slice)(vals))
}

func Assignment_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Assignment) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Assignment_Repeats_Marshal(m, pv)
	}
	return
}

// AtField
type AtField struct {
	Field  rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Dot = (*AtField)(nil)

func (*AtField) Compose() composer.Spec {
	return composer.Spec{
		Name: AtField_Type,
		Uses: composer.Type_Flow,
	}
}

const AtField_Type = "at_field"
const AtField_Field_Field = "$FIELD"

func (op *AtField) Marshal(m jsn.Marshaler) error {
	return AtField_Marshal(m, op)
}

type AtField_Slice []AtField

func (op *AtField_Slice) GetType() string { return AtField_Type }

func (op *AtField_Slice) Marshal(m jsn.Marshaler) error {
	return AtField_Repeats_Marshal(m, (*[]AtField)(op))
}

func (op *AtField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AtField_Slice) SetSize(cnt int) {
	var els []AtField
	if cnt >= 0 {
		els = make(AtField_Slice, cnt)
	}
	(*op) = els
}

func (op *AtField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AtField_Marshal(m, &(*op)[i])
}

func AtField_Repeats_Marshal(m jsn.Marshaler, vals *[]AtField) error {
	return jsn.RepeatBlock(m, (*AtField_Slice)(vals))
}

func AtField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AtField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AtField_Repeats_Marshal(m, pv)
	}
	return
}

type AtField_Flow struct{ ptr *AtField }

func (n AtField_Flow) GetType() string      { return AtField_Type }
func (n AtField_Flow) GetLede() string      { return AtField_Type }
func (n AtField_Flow) GetFlow() interface{} { return n.ptr }
func (n AtField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AtField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AtField_Optional_Marshal(m jsn.Marshaler, pv **AtField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AtField_Marshal(m, *pv)
	} else if !enc {
		var v AtField
		if err = AtField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AtField_Marshal(m jsn.Marshaler, val *AtField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AtField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AtField_Field_Field)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Field)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AtField_Field_Field))
		}
		m.EndBlock()
	}
	return
}

// AtIndex
type AtIndex struct {
	Index  rt.NumberEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Dot = (*AtIndex)(nil)

func (*AtIndex) Compose() composer.Spec {
	return composer.Spec{
		Name: AtIndex_Type,
		Uses: composer.Type_Flow,
	}
}

const AtIndex_Type = "at_index"
const AtIndex_Field_Index = "$INDEX"

func (op *AtIndex) Marshal(m jsn.Marshaler) error {
	return AtIndex_Marshal(m, op)
}

type AtIndex_Slice []AtIndex

func (op *AtIndex_Slice) GetType() string { return AtIndex_Type }

func (op *AtIndex_Slice) Marshal(m jsn.Marshaler) error {
	return AtIndex_Repeats_Marshal(m, (*[]AtIndex)(op))
}

func (op *AtIndex_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AtIndex_Slice) SetSize(cnt int) {
	var els []AtIndex
	if cnt >= 0 {
		els = make(AtIndex_Slice, cnt)
	}
	(*op) = els
}

func (op *AtIndex_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AtIndex_Marshal(m, &(*op)[i])
}

func AtIndex_Repeats_Marshal(m jsn.Marshaler, vals *[]AtIndex) error {
	return jsn.RepeatBlock(m, (*AtIndex_Slice)(vals))
}

func AtIndex_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AtIndex) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AtIndex_Repeats_Marshal(m, pv)
	}
	return
}

type AtIndex_Flow struct{ ptr *AtIndex }

func (n AtIndex_Flow) GetType() string      { return AtIndex_Type }
func (n AtIndex_Flow) GetLede() string      { return AtIndex_Type }
func (n AtIndex_Flow) GetFlow() interface{} { return n.ptr }
func (n AtIndex_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AtIndex); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AtIndex_Optional_Marshal(m jsn.Marshaler, pv **AtIndex) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AtIndex_Marshal(m, *pv)
	} else if !enc {
		var v AtIndex
		if err = AtIndex_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AtIndex_Marshal(m jsn.Marshaler, val *AtIndex) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AtIndex_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AtIndex_Field_Index)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Index)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AtIndex_Field_Index))
		}
		m.EndBlock()
	}
	return
}

// Blankline Add a single blank line following some text.
type Blankline struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Blankline)(nil)

func (*Blankline) Compose() composer.Spec {
	return composer.Spec{
		Name: Blankline_Type,
		Uses: composer.Type_Flow,
		Lede: "p",
	}
}

const Blankline_Type = "blankline"

func (op *Blankline) Marshal(m jsn.Marshaler) error {
	return Blankline_Marshal(m, op)
}

type Blankline_Slice []Blankline

func (op *Blankline_Slice) GetType() string { return Blankline_Type }

func (op *Blankline_Slice) Marshal(m jsn.Marshaler) error {
	return Blankline_Repeats_Marshal(m, (*[]Blankline)(op))
}

func (op *Blankline_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Blankline_Slice) SetSize(cnt int) {
	var els []Blankline
	if cnt >= 0 {
		els = make(Blankline_Slice, cnt)
	}
	(*op) = els
}

func (op *Blankline_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Blankline_Marshal(m, &(*op)[i])
}

func Blankline_Repeats_Marshal(m jsn.Marshaler, vals *[]Blankline) error {
	return jsn.RepeatBlock(m, (*Blankline_Slice)(vals))
}

func Blankline_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Blankline) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Blankline_Repeats_Marshal(m, pv)
	}
	return
}

type Blankline_Flow struct{ ptr *Blankline }

func (n Blankline_Flow) GetType() string      { return Blankline_Type }
func (n Blankline_Flow) GetLede() string      { return "p" }
func (n Blankline_Flow) GetFlow() interface{} { return n.ptr }
func (n Blankline_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Blankline); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Blankline_Optional_Marshal(m jsn.Marshaler, pv **Blankline) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Blankline_Marshal(m, *pv)
	} else if !enc {
		var v Blankline
		if err = Blankline_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Blankline_Marshal(m jsn.Marshaler, val *Blankline) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Blankline_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// BracketText Sandwiches text printed during a block and puts them inside parenthesis '()'.
type BracketText struct {
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*BracketText)(nil)

func (*BracketText) Compose() composer.Spec {
	return composer.Spec{
		Name: BracketText_Type,
		Uses: composer.Type_Flow,
		Lede: "brackets",
	}
}

const BracketText_Type = "bracket_text"
const BracketText_Field_Does = "$DOES"

func (op *BracketText) Marshal(m jsn.Marshaler) error {
	return BracketText_Marshal(m, op)
}

type BracketText_Slice []BracketText

func (op *BracketText_Slice) GetType() string { return BracketText_Type }

func (op *BracketText_Slice) Marshal(m jsn.Marshaler) error {
	return BracketText_Repeats_Marshal(m, (*[]BracketText)(op))
}

func (op *BracketText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *BracketText_Slice) SetSize(cnt int) {
	var els []BracketText
	if cnt >= 0 {
		els = make(BracketText_Slice, cnt)
	}
	(*op) = els
}

func (op *BracketText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return BracketText_Marshal(m, &(*op)[i])
}

func BracketText_Repeats_Marshal(m jsn.Marshaler, vals *[]BracketText) error {
	return jsn.RepeatBlock(m, (*BracketText_Slice)(vals))
}

func BracketText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]BracketText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = BracketText_Repeats_Marshal(m, pv)
	}
	return
}

type BracketText_Flow struct{ ptr *BracketText }

func (n BracketText_Flow) GetType() string      { return BracketText_Type }
func (n BracketText_Flow) GetLede() string      { return "brackets" }
func (n BracketText_Flow) GetFlow() interface{} { return n.ptr }
func (n BracketText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*BracketText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func BracketText_Optional_Marshal(m jsn.Marshaler, pv **BracketText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BracketText_Marshal(m, *pv)
	} else if !enc {
		var v BracketText
		if err = BracketText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BracketText_Marshal(m jsn.Marshaler, val *BracketText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(BracketText_Flow{val}); err == nil {
		e0 := m.MarshalKey("does", BracketText_Field_Does)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", BracketText_Field_Does))
		}
		m.EndBlock()
	}
	return
}

const Brancher_Type = "brancher"

var Brancher_Optional_Marshal = Brancher_Marshal

type Brancher_Slot struct{ Value *Brancher }

func (at Brancher_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Brancher_Slot) GetType() string              { return Brancher_Type }
func (at Brancher_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Brancher_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Brancher)
	return
}

func Brancher_Marshal(m jsn.Marshaler, ptr *Brancher) (err error) {
	slot := Brancher_Slot{ptr}
	return slot.Marshal(m)
}

type Brancher_Slice []Brancher

func (op *Brancher_Slice) GetType() string { return Brancher_Type }

func (op *Brancher_Slice) Marshal(m jsn.Marshaler) error {
	return Brancher_Repeats_Marshal(m, (*[]Brancher)(op))
}

func (op *Brancher_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Brancher_Slice) SetSize(cnt int) {
	var els []Brancher
	if cnt >= 0 {
		els = make(Brancher_Slice, cnt)
	}
	(*op) = els
}

func (op *Brancher_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Brancher_Marshal(m, &(*op)[i])
}

func Brancher_Repeats_Marshal(m jsn.Marshaler, vals *[]Brancher) error {
	return jsn.RepeatBlock(m, (*Brancher_Slice)(vals))
}

func Brancher_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Brancher) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Brancher_Repeats_Marshal(m, pv)
	}
	return
}

// Break In a repeating loop, exit the loop.
type Break struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Break)(nil)

func (*Break) Compose() composer.Spec {
	return composer.Spec{
		Name: Break_Type,
		Uses: composer.Type_Flow,
	}
}

const Break_Type = "break"

func (op *Break) Marshal(m jsn.Marshaler) error {
	return Break_Marshal(m, op)
}

type Break_Slice []Break

func (op *Break_Slice) GetType() string { return Break_Type }

func (op *Break_Slice) Marshal(m jsn.Marshaler) error {
	return Break_Repeats_Marshal(m, (*[]Break)(op))
}

func (op *Break_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Break_Slice) SetSize(cnt int) {
	var els []Break
	if cnt >= 0 {
		els = make(Break_Slice, cnt)
	}
	(*op) = els
}

func (op *Break_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Break_Marshal(m, &(*op)[i])
}

func Break_Repeats_Marshal(m jsn.Marshaler, vals *[]Break) error {
	return jsn.RepeatBlock(m, (*Break_Slice)(vals))
}

func Break_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Break) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Break_Repeats_Marshal(m, pv)
	}
	return
}

type Break_Flow struct{ ptr *Break }

func (n Break_Flow) GetType() string      { return Break_Type }
func (n Break_Flow) GetLede() string      { return Break_Type }
func (n Break_Flow) GetFlow() interface{} { return n.ptr }
func (n Break_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Break); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Break_Optional_Marshal(m jsn.Marshaler, pv **Break) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Break_Marshal(m, *pv)
	} else if !enc {
		var v Break
		if err = Break_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Break_Marshal(m jsn.Marshaler, val *Break) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Break_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// BufferText
type BufferText struct {
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*BufferText)(nil)

func (*BufferText) Compose() composer.Spec {
	return composer.Spec{
		Name: BufferText_Type,
		Uses: composer.Type_Flow,
		Lede: "buffers",
	}
}

const BufferText_Type = "buffer_text"
const BufferText_Field_Does = "$DOES"

func (op *BufferText) Marshal(m jsn.Marshaler) error {
	return BufferText_Marshal(m, op)
}

type BufferText_Slice []BufferText

func (op *BufferText_Slice) GetType() string { return BufferText_Type }

func (op *BufferText_Slice) Marshal(m jsn.Marshaler) error {
	return BufferText_Repeats_Marshal(m, (*[]BufferText)(op))
}

func (op *BufferText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *BufferText_Slice) SetSize(cnt int) {
	var els []BufferText
	if cnt >= 0 {
		els = make(BufferText_Slice, cnt)
	}
	(*op) = els
}

func (op *BufferText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return BufferText_Marshal(m, &(*op)[i])
}

func BufferText_Repeats_Marshal(m jsn.Marshaler, vals *[]BufferText) error {
	return jsn.RepeatBlock(m, (*BufferText_Slice)(vals))
}

func BufferText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]BufferText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = BufferText_Repeats_Marshal(m, pv)
	}
	return
}

type BufferText_Flow struct{ ptr *BufferText }

func (n BufferText_Flow) GetType() string      { return BufferText_Type }
func (n BufferText_Flow) GetLede() string      { return "buffers" }
func (n BufferText_Flow) GetFlow() interface{} { return n.ptr }
func (n BufferText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*BufferText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func BufferText_Optional_Marshal(m jsn.Marshaler, pv **BufferText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BufferText_Marshal(m, *pv)
	} else if !enc {
		var v BufferText
		if err = BufferText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BufferText_Marshal(m jsn.Marshaler, val *BufferText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(BufferText_Flow{val}); err == nil {
		e0 := m.MarshalKey("does", BufferText_Field_Does)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", BufferText_Field_Does))
		}
		m.EndBlock()
	}
	return
}

// CallCycle Runtime version of cycle_text.
type CallCycle struct {
	Name   string        `if:"label=_,type=text"`
	Parts  []rt.TextEval `if:"label=over"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*CallCycle)(nil)

func (*CallCycle) Compose() composer.Spec {
	return composer.Spec{
		Name: CallCycle_Type,
		Uses: composer.Type_Flow,
		Lede: "cycle",
	}
}

const CallCycle_Type = "call_cycle"
const CallCycle_Field_Name = "$NAME"
const CallCycle_Field_Parts = "$PARTS"

func (op *CallCycle) Marshal(m jsn.Marshaler) error {
	return CallCycle_Marshal(m, op)
}

type CallCycle_Slice []CallCycle

func (op *CallCycle_Slice) GetType() string { return CallCycle_Type }

func (op *CallCycle_Slice) Marshal(m jsn.Marshaler) error {
	return CallCycle_Repeats_Marshal(m, (*[]CallCycle)(op))
}

func (op *CallCycle_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallCycle_Slice) SetSize(cnt int) {
	var els []CallCycle
	if cnt >= 0 {
		els = make(CallCycle_Slice, cnt)
	}
	(*op) = els
}

func (op *CallCycle_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallCycle_Marshal(m, &(*op)[i])
}

func CallCycle_Repeats_Marshal(m jsn.Marshaler, vals *[]CallCycle) error {
	return jsn.RepeatBlock(m, (*CallCycle_Slice)(vals))
}

func CallCycle_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallCycle) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallCycle_Repeats_Marshal(m, pv)
	}
	return
}

type CallCycle_Flow struct{ ptr *CallCycle }

func (n CallCycle_Flow) GetType() string      { return CallCycle_Type }
func (n CallCycle_Flow) GetLede() string      { return "cycle" }
func (n CallCycle_Flow) GetFlow() interface{} { return n.ptr }
func (n CallCycle_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallCycle); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallCycle_Optional_Marshal(m jsn.Marshaler, pv **CallCycle) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallCycle_Marshal(m, *pv)
	} else if !enc {
		var v CallCycle
		if err = CallCycle_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallCycle_Marshal(m jsn.Marshaler, val *CallCycle) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallCycle_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallCycle_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallCycle_Field_Name))
		}
		e1 := m.MarshalKey("over", CallCycle_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallCycle_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// CallPattern Executes a pattern, and potentially returns a value.
type CallPattern struct {
	Pattern   PatternName `if:"label=_"`
	Arguments []Arg       `if:"label=args"`
	Markup    map[string]any
}

// User implemented slots:
var _ rt.Execute = (*CallPattern)(nil)
var _ rt.BoolEval = (*CallPattern)(nil)
var _ rt.NumberEval = (*CallPattern)(nil)
var _ rt.TextEval = (*CallPattern)(nil)
var _ rt.RecordEval = (*CallPattern)(nil)
var _ rt.NumListEval = (*CallPattern)(nil)
var _ rt.TextListEval = (*CallPattern)(nil)
var _ rt.RecordListEval = (*CallPattern)(nil)

func (*CallPattern) Compose() composer.Spec {
	return composer.Spec{
		Name: CallPattern_Type,
		Uses: composer.Type_Flow,
		Lede: "determine",
	}
}

const CallPattern_Type = "call_pattern"
const CallPattern_Field_Pattern = "$PATTERN"
const CallPattern_Field_Arguments = "$ARGUMENTS"

func (op *CallPattern) Marshal(m jsn.Marshaler) error {
	return CallPattern_Marshal(m, op)
}

type CallPattern_Slice []CallPattern

func (op *CallPattern_Slice) GetType() string { return CallPattern_Type }

func (op *CallPattern_Slice) Marshal(m jsn.Marshaler) error {
	return CallPattern_Repeats_Marshal(m, (*[]CallPattern)(op))
}

func (op *CallPattern_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallPattern_Slice) SetSize(cnt int) {
	var els []CallPattern
	if cnt >= 0 {
		els = make(CallPattern_Slice, cnt)
	}
	(*op) = els
}

func (op *CallPattern_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallPattern_Marshal(m, &(*op)[i])
}

func CallPattern_Repeats_Marshal(m jsn.Marshaler, vals *[]CallPattern) error {
	return jsn.RepeatBlock(m, (*CallPattern_Slice)(vals))
}

func CallPattern_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallPattern) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallPattern_Repeats_Marshal(m, pv)
	}
	return
}

type CallPattern_Flow struct{ ptr *CallPattern }

func (n CallPattern_Flow) GetType() string      { return CallPattern_Type }
func (n CallPattern_Flow) GetLede() string      { return "determine" }
func (n CallPattern_Flow) GetFlow() interface{} { return n.ptr }
func (n CallPattern_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallPattern); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallPattern_Optional_Marshal(m jsn.Marshaler, pv **CallPattern) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallPattern_Marshal(m, *pv)
	} else if !enc {
		var v CallPattern
		if err = CallPattern_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallPattern_Marshal(m jsn.Marshaler, val *CallPattern) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallPattern_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallPattern_Field_Pattern)
		if e0 == nil {
			e0 = PatternName_Marshal(m, &val.Pattern)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallPattern_Field_Pattern))
		}
		e1 := m.MarshalKey("args", CallPattern_Field_Arguments)
		if e1 == nil {
			e1 = Arg_Repeats_Marshal(m, &val.Arguments)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallPattern_Field_Arguments))
		}
		m.EndBlock()
	}
	return
}

// CallSend Triggers a event, calling the passed event ( a pattern ) for the handlers of the objects on the passed path.
// Although the event advertises it can take any bool evaluation, only pattern calls are supported.
// Returns a true/false success value.
type CallSend struct {
	Path   rt.TextListEval `if:"label=_"`
	Event  rt.BoolEval     `if:"label=event"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*CallSend)(nil)
var _ rt.BoolEval = (*CallSend)(nil)

func (*CallSend) Compose() composer.Spec {
	return composer.Spec{
		Name: CallSend_Type,
		Uses: composer.Type_Flow,
		Lede: "send",
	}
}

const CallSend_Type = "call_send"
const CallSend_Field_Path = "$PATH"
const CallSend_Field_Event = "$EVENT"

func (op *CallSend) Marshal(m jsn.Marshaler) error {
	return CallSend_Marshal(m, op)
}

type CallSend_Slice []CallSend

func (op *CallSend_Slice) GetType() string { return CallSend_Type }

func (op *CallSend_Slice) Marshal(m jsn.Marshaler) error {
	return CallSend_Repeats_Marshal(m, (*[]CallSend)(op))
}

func (op *CallSend_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallSend_Slice) SetSize(cnt int) {
	var els []CallSend
	if cnt >= 0 {
		els = make(CallSend_Slice, cnt)
	}
	(*op) = els
}

func (op *CallSend_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallSend_Marshal(m, &(*op)[i])
}

func CallSend_Repeats_Marshal(m jsn.Marshaler, vals *[]CallSend) error {
	return jsn.RepeatBlock(m, (*CallSend_Slice)(vals))
}

func CallSend_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallSend) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallSend_Repeats_Marshal(m, pv)
	}
	return
}

type CallSend_Flow struct{ ptr *CallSend }

func (n CallSend_Flow) GetType() string      { return CallSend_Type }
func (n CallSend_Flow) GetLede() string      { return "send" }
func (n CallSend_Flow) GetFlow() interface{} { return n.ptr }
func (n CallSend_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallSend); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallSend_Optional_Marshal(m jsn.Marshaler, pv **CallSend) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallSend_Marshal(m, *pv)
	} else if !enc {
		var v CallSend
		if err = CallSend_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallSend_Marshal(m jsn.Marshaler, val *CallSend) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallSend_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallSend_Field_Path)
		if e0 == nil {
			e0 = rt.TextListEval_Marshal(m, &val.Path)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallSend_Field_Path))
		}
		e1 := m.MarshalKey("event", CallSend_Field_Event)
		if e1 == nil {
			e1 = rt.BoolEval_Marshal(m, &val.Event)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallSend_Field_Event))
		}
		m.EndBlock()
	}
	return
}

// CallShuffle Runtime version of shuffle_text.
type CallShuffle struct {
	Name    string        `if:"label=_,type=text"`
	Parts   []rt.TextEval `if:"label=over"`
	Indices Shuffler      `if:"internal"`
	Markup  map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*CallShuffle)(nil)

func (*CallShuffle) Compose() composer.Spec {
	return composer.Spec{
		Name: CallShuffle_Type,
		Uses: composer.Type_Flow,
		Lede: "shuffle",
	}
}

const CallShuffle_Type = "call_shuffle"
const CallShuffle_Field_Name = "$NAME"
const CallShuffle_Field_Parts = "$PARTS"

func (op *CallShuffle) Marshal(m jsn.Marshaler) error {
	return CallShuffle_Marshal(m, op)
}

type CallShuffle_Slice []CallShuffle

func (op *CallShuffle_Slice) GetType() string { return CallShuffle_Type }

func (op *CallShuffle_Slice) Marshal(m jsn.Marshaler) error {
	return CallShuffle_Repeats_Marshal(m, (*[]CallShuffle)(op))
}

func (op *CallShuffle_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallShuffle_Slice) SetSize(cnt int) {
	var els []CallShuffle
	if cnt >= 0 {
		els = make(CallShuffle_Slice, cnt)
	}
	(*op) = els
}

func (op *CallShuffle_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallShuffle_Marshal(m, &(*op)[i])
}

func CallShuffle_Repeats_Marshal(m jsn.Marshaler, vals *[]CallShuffle) error {
	return jsn.RepeatBlock(m, (*CallShuffle_Slice)(vals))
}

func CallShuffle_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallShuffle) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallShuffle_Repeats_Marshal(m, pv)
	}
	return
}

type CallShuffle_Flow struct{ ptr *CallShuffle }

func (n CallShuffle_Flow) GetType() string      { return CallShuffle_Type }
func (n CallShuffle_Flow) GetLede() string      { return "shuffle" }
func (n CallShuffle_Flow) GetFlow() interface{} { return n.ptr }
func (n CallShuffle_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallShuffle); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallShuffle_Optional_Marshal(m jsn.Marshaler, pv **CallShuffle) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallShuffle_Marshal(m, *pv)
	} else if !enc {
		var v CallShuffle
		if err = CallShuffle_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallShuffle_Marshal(m jsn.Marshaler, val *CallShuffle) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallShuffle_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallShuffle_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallShuffle_Field_Name))
		}
		e1 := m.MarshalKey("over", CallShuffle_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallShuffle_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// CallTerminal Runtime version of stopping_text.
type CallTerminal struct {
	Name   string        `if:"label=_,type=text"`
	Parts  []rt.TextEval `if:"label=over"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*CallTerminal)(nil)

func (*CallTerminal) Compose() composer.Spec {
	return composer.Spec{
		Name: CallTerminal_Type,
		Uses: composer.Type_Flow,
		Lede: "stopping",
	}
}

const CallTerminal_Type = "call_terminal"
const CallTerminal_Field_Name = "$NAME"
const CallTerminal_Field_Parts = "$PARTS"

func (op *CallTerminal) Marshal(m jsn.Marshaler) error {
	return CallTerminal_Marshal(m, op)
}

type CallTerminal_Slice []CallTerminal

func (op *CallTerminal_Slice) GetType() string { return CallTerminal_Type }

func (op *CallTerminal_Slice) Marshal(m jsn.Marshaler) error {
	return CallTerminal_Repeats_Marshal(m, (*[]CallTerminal)(op))
}

func (op *CallTerminal_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallTerminal_Slice) SetSize(cnt int) {
	var els []CallTerminal
	if cnt >= 0 {
		els = make(CallTerminal_Slice, cnt)
	}
	(*op) = els
}

func (op *CallTerminal_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallTerminal_Marshal(m, &(*op)[i])
}

func CallTerminal_Repeats_Marshal(m jsn.Marshaler, vals *[]CallTerminal) error {
	return jsn.RepeatBlock(m, (*CallTerminal_Slice)(vals))
}

func CallTerminal_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallTerminal) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallTerminal_Repeats_Marshal(m, pv)
	}
	return
}

type CallTerminal_Flow struct{ ptr *CallTerminal }

func (n CallTerminal_Flow) GetType() string      { return CallTerminal_Type }
func (n CallTerminal_Flow) GetLede() string      { return "stopping" }
func (n CallTerminal_Flow) GetFlow() interface{} { return n.ptr }
func (n CallTerminal_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallTerminal); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallTerminal_Optional_Marshal(m jsn.Marshaler, pv **CallTerminal) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallTerminal_Marshal(m, *pv)
	} else if !enc {
		var v CallTerminal
		if err = CallTerminal_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallTerminal_Marshal(m jsn.Marshaler, val *CallTerminal) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallTerminal_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallTerminal_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallTerminal_Field_Name))
		}
		e1 := m.MarshalKey("over", CallTerminal_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallTerminal_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// CallTrigger Runtime version of count_of.
type CallTrigger struct {
	Name    string        `if:"label=_,type=text"`
	Trigger Trigger       `if:"label=on"`
	Num     rt.NumberEval `if:"label=num"`
	Markup  map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*CallTrigger)(nil)

func (*CallTrigger) Compose() composer.Spec {
	return composer.Spec{
		Name: CallTrigger_Type,
		Uses: composer.Type_Flow,
		Lede: "trigger",
	}
}

const CallTrigger_Type = "call_trigger"
const CallTrigger_Field_Name = "$NAME"
const CallTrigger_Field_Trigger = "$TRIGGER"
const CallTrigger_Field_Num = "$NUM"

func (op *CallTrigger) Marshal(m jsn.Marshaler) error {
	return CallTrigger_Marshal(m, op)
}

type CallTrigger_Slice []CallTrigger

func (op *CallTrigger_Slice) GetType() string { return CallTrigger_Type }

func (op *CallTrigger_Slice) Marshal(m jsn.Marshaler) error {
	return CallTrigger_Repeats_Marshal(m, (*[]CallTrigger)(op))
}

func (op *CallTrigger_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallTrigger_Slice) SetSize(cnt int) {
	var els []CallTrigger
	if cnt >= 0 {
		els = make(CallTrigger_Slice, cnt)
	}
	(*op) = els
}

func (op *CallTrigger_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallTrigger_Marshal(m, &(*op)[i])
}

func CallTrigger_Repeats_Marshal(m jsn.Marshaler, vals *[]CallTrigger) error {
	return jsn.RepeatBlock(m, (*CallTrigger_Slice)(vals))
}

func CallTrigger_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallTrigger) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallTrigger_Repeats_Marshal(m, pv)
	}
	return
}

type CallTrigger_Flow struct{ ptr *CallTrigger }

func (n CallTrigger_Flow) GetType() string      { return CallTrigger_Type }
func (n CallTrigger_Flow) GetLede() string      { return "trigger" }
func (n CallTrigger_Flow) GetFlow() interface{} { return n.ptr }
func (n CallTrigger_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallTrigger); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallTrigger_Optional_Marshal(m jsn.Marshaler, pv **CallTrigger) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallTrigger_Marshal(m, *pv)
	} else if !enc {
		var v CallTrigger
		if err = CallTrigger_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallTrigger_Marshal(m jsn.Marshaler, val *CallTrigger) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallTrigger_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallTrigger_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallTrigger_Field_Name))
		}
		e1 := m.MarshalKey("on", CallTrigger_Field_Trigger)
		if e1 == nil {
			e1 = Trigger_Marshal(m, &val.Trigger)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallTrigger_Field_Trigger))
		}
		e2 := m.MarshalKey("num", CallTrigger_Field_Num)
		if e2 == nil {
			e2 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CallTrigger_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// Capitalize Returns new text, with the first letter turned into uppercase.
type Capitalize struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Capitalize)(nil)

func (*Capitalize) Compose() composer.Spec {
	return composer.Spec{
		Name: Capitalize_Type,
		Uses: composer.Type_Flow,
	}
}

const Capitalize_Type = "capitalize"
const Capitalize_Field_Text = "$TEXT"

func (op *Capitalize) Marshal(m jsn.Marshaler) error {
	return Capitalize_Marshal(m, op)
}

type Capitalize_Slice []Capitalize

func (op *Capitalize_Slice) GetType() string { return Capitalize_Type }

func (op *Capitalize_Slice) Marshal(m jsn.Marshaler) error {
	return Capitalize_Repeats_Marshal(m, (*[]Capitalize)(op))
}

func (op *Capitalize_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Capitalize_Slice) SetSize(cnt int) {
	var els []Capitalize
	if cnt >= 0 {
		els = make(Capitalize_Slice, cnt)
	}
	(*op) = els
}

func (op *Capitalize_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Capitalize_Marshal(m, &(*op)[i])
}

func Capitalize_Repeats_Marshal(m jsn.Marshaler, vals *[]Capitalize) error {
	return jsn.RepeatBlock(m, (*Capitalize_Slice)(vals))
}

func Capitalize_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Capitalize) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Capitalize_Repeats_Marshal(m, pv)
	}
	return
}

type Capitalize_Flow struct{ ptr *Capitalize }

func (n Capitalize_Flow) GetType() string      { return Capitalize_Type }
func (n Capitalize_Flow) GetLede() string      { return Capitalize_Type }
func (n Capitalize_Flow) GetFlow() interface{} { return n.ptr }
func (n Capitalize_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Capitalize); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Capitalize_Optional_Marshal(m jsn.Marshaler, pv **Capitalize) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Capitalize_Marshal(m, *pv)
	} else if !enc {
		var v Capitalize
		if err = Capitalize_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Capitalize_Marshal(m jsn.Marshaler, val *Capitalize) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Capitalize_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Capitalize_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Capitalize_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// ChooseAction An if statement.
type ChooseAction struct {
	If     rt.BoolEval  `if:"label=_"`
	Does   []rt.Execute `if:"label=does"`
	Else   Brancher     `if:"label=else,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*ChooseAction)(nil)
var _ Brancher = (*ChooseAction)(nil)

func (*ChooseAction) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseAction_Type,
		Uses: composer.Type_Flow,
		Lede: "if",
	}
}

const ChooseAction_Type = "choose_action"
const ChooseAction_Field_If = "$IF"
const ChooseAction_Field_Does = "$DOES"
const ChooseAction_Field_Else = "$ELSE"

func (op *ChooseAction) Marshal(m jsn.Marshaler) error {
	return ChooseAction_Marshal(m, op)
}

type ChooseAction_Slice []ChooseAction

func (op *ChooseAction_Slice) GetType() string { return ChooseAction_Type }

func (op *ChooseAction_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseAction_Repeats_Marshal(m, (*[]ChooseAction)(op))
}

func (op *ChooseAction_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseAction_Slice) SetSize(cnt int) {
	var els []ChooseAction
	if cnt >= 0 {
		els = make(ChooseAction_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseAction_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseAction_Marshal(m, &(*op)[i])
}

func ChooseAction_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseAction) error {
	return jsn.RepeatBlock(m, (*ChooseAction_Slice)(vals))
}

func ChooseAction_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseAction) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseAction_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseAction_Flow struct{ ptr *ChooseAction }

func (n ChooseAction_Flow) GetType() string      { return ChooseAction_Type }
func (n ChooseAction_Flow) GetLede() string      { return "if" }
func (n ChooseAction_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseAction_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseAction); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseAction_Optional_Marshal(m jsn.Marshaler, pv **ChooseAction) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseAction_Marshal(m, *pv)
	} else if !enc {
		var v ChooseAction
		if err = ChooseAction_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseAction_Marshal(m jsn.Marshaler, val *ChooseAction) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseAction_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ChooseAction_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseAction_Field_If))
		}
		e1 := m.MarshalKey("does", ChooseAction_Field_Does)
		if e1 == nil {
			e1 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseAction_Field_Does))
		}
		e2 := m.MarshalKey("else", ChooseAction_Field_Else)
		if e2 == nil {
			e2 = Brancher_Optional_Marshal(m, &val.Else)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseAction_Field_Else))
		}
		m.EndBlock()
	}
	return
}

// ChooseMore
type ChooseMore struct {
	If     rt.BoolEval  `if:"label=_"`
	Does   []rt.Execute `if:"label=does"`
	Else   Brancher     `if:"label=else,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ Brancher = (*ChooseMore)(nil)

func (*ChooseMore) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseMore_Type,
		Uses: composer.Type_Flow,
		Lede: "else_if",
	}
}

const ChooseMore_Type = "choose_more"
const ChooseMore_Field_If = "$IF"
const ChooseMore_Field_Does = "$DOES"
const ChooseMore_Field_Else = "$ELSE"

func (op *ChooseMore) Marshal(m jsn.Marshaler) error {
	return ChooseMore_Marshal(m, op)
}

type ChooseMore_Slice []ChooseMore

func (op *ChooseMore_Slice) GetType() string { return ChooseMore_Type }

func (op *ChooseMore_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseMore_Repeats_Marshal(m, (*[]ChooseMore)(op))
}

func (op *ChooseMore_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseMore_Slice) SetSize(cnt int) {
	var els []ChooseMore
	if cnt >= 0 {
		els = make(ChooseMore_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseMore_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseMore_Marshal(m, &(*op)[i])
}

func ChooseMore_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseMore) error {
	return jsn.RepeatBlock(m, (*ChooseMore_Slice)(vals))
}

func ChooseMore_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseMore) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseMore_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseMore_Flow struct{ ptr *ChooseMore }

func (n ChooseMore_Flow) GetType() string      { return ChooseMore_Type }
func (n ChooseMore_Flow) GetLede() string      { return "else_if" }
func (n ChooseMore_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseMore_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseMore); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseMore_Optional_Marshal(m jsn.Marshaler, pv **ChooseMore) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseMore_Marshal(m, *pv)
	} else if !enc {
		var v ChooseMore
		if err = ChooseMore_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseMore_Marshal(m jsn.Marshaler, val *ChooseMore) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseMore_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ChooseMore_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseMore_Field_If))
		}
		e1 := m.MarshalKey("does", ChooseMore_Field_Does)
		if e1 == nil {
			e1 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseMore_Field_Does))
		}
		e2 := m.MarshalKey("else", ChooseMore_Field_Else)
		if e2 == nil {
			e2 = Brancher_Optional_Marshal(m, &val.Else)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseMore_Field_Else))
		}
		m.EndBlock()
	}
	return
}

// ChooseMoreValue
type ChooseMoreValue struct {
	Assign string       `if:"label=_,type=text"`
	From   Assignment   `if:"label=from"`
	Filter rt.BoolEval  `if:"label=and"`
	Does   []rt.Execute `if:"label=does"`
	Else   Brancher     `if:"label=else,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ Brancher = (*ChooseMoreValue)(nil)

func (*ChooseMoreValue) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseMoreValue_Type,
		Uses: composer.Type_Flow,
		Lede: "else_if",
	}
}

const ChooseMoreValue_Type = "choose_more_value"
const ChooseMoreValue_Field_Assign = "$ASSIGN"
const ChooseMoreValue_Field_From = "$FROM"
const ChooseMoreValue_Field_Filter = "$FILTER"
const ChooseMoreValue_Field_Does = "$DOES"
const ChooseMoreValue_Field_Else = "$ELSE"

func (op *ChooseMoreValue) Marshal(m jsn.Marshaler) error {
	return ChooseMoreValue_Marshal(m, op)
}

type ChooseMoreValue_Slice []ChooseMoreValue

func (op *ChooseMoreValue_Slice) GetType() string { return ChooseMoreValue_Type }

func (op *ChooseMoreValue_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseMoreValue_Repeats_Marshal(m, (*[]ChooseMoreValue)(op))
}

func (op *ChooseMoreValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseMoreValue_Slice) SetSize(cnt int) {
	var els []ChooseMoreValue
	if cnt >= 0 {
		els = make(ChooseMoreValue_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseMoreValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseMoreValue_Marshal(m, &(*op)[i])
}

func ChooseMoreValue_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseMoreValue) error {
	return jsn.RepeatBlock(m, (*ChooseMoreValue_Slice)(vals))
}

func ChooseMoreValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseMoreValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseMoreValue_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseMoreValue_Flow struct{ ptr *ChooseMoreValue }

func (n ChooseMoreValue_Flow) GetType() string      { return ChooseMoreValue_Type }
func (n ChooseMoreValue_Flow) GetLede() string      { return "else_if" }
func (n ChooseMoreValue_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseMoreValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseMoreValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseMoreValue_Optional_Marshal(m jsn.Marshaler, pv **ChooseMoreValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseMoreValue_Marshal(m, *pv)
	} else if !enc {
		var v ChooseMoreValue
		if err = ChooseMoreValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseMoreValue_Marshal(m jsn.Marshaler, val *ChooseMoreValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseMoreValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ChooseMoreValue_Field_Assign)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Assign)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseMoreValue_Field_Assign))
		}
		e1 := m.MarshalKey("from", ChooseMoreValue_Field_From)
		if e1 == nil {
			e1 = Assignment_Marshal(m, &val.From)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseMoreValue_Field_From))
		}
		e2 := m.MarshalKey("and", ChooseMoreValue_Field_Filter)
		if e2 == nil {
			e2 = rt.BoolEval_Marshal(m, &val.Filter)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseMoreValue_Field_Filter))
		}
		e3 := m.MarshalKey("does", ChooseMoreValue_Field_Does)
		if e3 == nil {
			e3 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", ChooseMoreValue_Field_Does))
		}
		e4 := m.MarshalKey("else", ChooseMoreValue_Field_Else)
		if e4 == nil {
			e4 = Brancher_Optional_Marshal(m, &val.Else)
		}
		if e4 != nil && e4 != jsn.Missing {
			m.Error(errutil.New(e4, "in flow at", ChooseMoreValue_Field_Else))
		}
		m.EndBlock()
	}
	return
}

// ChooseNothingElse
type ChooseNothingElse struct {
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

// User implemented slots:
var _ Brancher = (*ChooseNothingElse)(nil)

func (*ChooseNothingElse) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseNothingElse_Type,
		Uses: composer.Type_Flow,
		Lede: "else_do",
	}
}

const ChooseNothingElse_Type = "choose_nothing_else"
const ChooseNothingElse_Field_Does = "$DOES"

func (op *ChooseNothingElse) Marshal(m jsn.Marshaler) error {
	return ChooseNothingElse_Marshal(m, op)
}

type ChooseNothingElse_Slice []ChooseNothingElse

func (op *ChooseNothingElse_Slice) GetType() string { return ChooseNothingElse_Type }

func (op *ChooseNothingElse_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseNothingElse_Repeats_Marshal(m, (*[]ChooseNothingElse)(op))
}

func (op *ChooseNothingElse_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseNothingElse_Slice) SetSize(cnt int) {
	var els []ChooseNothingElse
	if cnt >= 0 {
		els = make(ChooseNothingElse_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseNothingElse_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseNothingElse_Marshal(m, &(*op)[i])
}

func ChooseNothingElse_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseNothingElse) error {
	return jsn.RepeatBlock(m, (*ChooseNothingElse_Slice)(vals))
}

func ChooseNothingElse_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseNothingElse) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseNothingElse_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseNothingElse_Flow struct{ ptr *ChooseNothingElse }

func (n ChooseNothingElse_Flow) GetType() string      { return ChooseNothingElse_Type }
func (n ChooseNothingElse_Flow) GetLede() string      { return "else_do" }
func (n ChooseNothingElse_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseNothingElse_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseNothingElse); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseNothingElse_Optional_Marshal(m jsn.Marshaler, pv **ChooseNothingElse) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseNothingElse_Marshal(m, *pv)
	} else if !enc {
		var v ChooseNothingElse
		if err = ChooseNothingElse_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseNothingElse_Marshal(m jsn.Marshaler, val *ChooseNothingElse) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseNothingElse_Flow{val}); err == nil {
		e0 := m.MarshalKey("does", ChooseNothingElse_Field_Does)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseNothingElse_Field_Does))
		}
		m.EndBlock()
	}
	return
}

// ChooseNum Pick one of two numbers based on a boolean test.
type ChooseNum struct {
	If     rt.BoolEval   `if:"label=if"`
	True   rt.NumberEval `if:"label=then"`
	False  rt.NumberEval `if:"label=else,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*ChooseNum)(nil)

func (*ChooseNum) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseNum_Type,
		Uses: composer.Type_Flow,
		Lede: "num",
	}
}

const ChooseNum_Type = "choose_num"
const ChooseNum_Field_If = "$IF"
const ChooseNum_Field_True = "$TRUE"
const ChooseNum_Field_False = "$FALSE"

func (op *ChooseNum) Marshal(m jsn.Marshaler) error {
	return ChooseNum_Marshal(m, op)
}

type ChooseNum_Slice []ChooseNum

func (op *ChooseNum_Slice) GetType() string { return ChooseNum_Type }

func (op *ChooseNum_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseNum_Repeats_Marshal(m, (*[]ChooseNum)(op))
}

func (op *ChooseNum_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseNum_Slice) SetSize(cnt int) {
	var els []ChooseNum
	if cnt >= 0 {
		els = make(ChooseNum_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseNum_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseNum_Marshal(m, &(*op)[i])
}

func ChooseNum_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseNum) error {
	return jsn.RepeatBlock(m, (*ChooseNum_Slice)(vals))
}

func ChooseNum_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseNum) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseNum_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseNum_Flow struct{ ptr *ChooseNum }

func (n ChooseNum_Flow) GetType() string      { return ChooseNum_Type }
func (n ChooseNum_Flow) GetLede() string      { return "num" }
func (n ChooseNum_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseNum_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseNum); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseNum_Optional_Marshal(m jsn.Marshaler, pv **ChooseNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseNum_Marshal(m, *pv)
	} else if !enc {
		var v ChooseNum
		if err = ChooseNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseNum_Marshal(m jsn.Marshaler, val *ChooseNum) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseNum_Flow{val}); err == nil {
		e0 := m.MarshalKey("if", ChooseNum_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseNum_Field_If))
		}
		e1 := m.MarshalKey("then", ChooseNum_Field_True)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.True)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseNum_Field_True))
		}
		e2 := m.MarshalKey("else", ChooseNum_Field_False)
		if e2 == nil {
			e2 = rt.NumberEval_Optional_Marshal(m, &val.False)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseNum_Field_False))
		}
		m.EndBlock()
	}
	return
}

// ChooseText Pick one of two strings based on a boolean test.
type ChooseText struct {
	If     rt.BoolEval `if:"label=if"`
	True   rt.TextEval `if:"label=then"`
	False  rt.TextEval `if:"label=else,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*ChooseText)(nil)

func (*ChooseText) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseText_Type,
		Uses: composer.Type_Flow,
		Lede: "txt",
	}
}

const ChooseText_Type = "choose_text"
const ChooseText_Field_If = "$IF"
const ChooseText_Field_True = "$TRUE"
const ChooseText_Field_False = "$FALSE"

func (op *ChooseText) Marshal(m jsn.Marshaler) error {
	return ChooseText_Marshal(m, op)
}

type ChooseText_Slice []ChooseText

func (op *ChooseText_Slice) GetType() string { return ChooseText_Type }

func (op *ChooseText_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseText_Repeats_Marshal(m, (*[]ChooseText)(op))
}

func (op *ChooseText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseText_Slice) SetSize(cnt int) {
	var els []ChooseText
	if cnt >= 0 {
		els = make(ChooseText_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseText_Marshal(m, &(*op)[i])
}

func ChooseText_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseText) error {
	return jsn.RepeatBlock(m, (*ChooseText_Slice)(vals))
}

func ChooseText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseText_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseText_Flow struct{ ptr *ChooseText }

func (n ChooseText_Flow) GetType() string      { return ChooseText_Type }
func (n ChooseText_Flow) GetLede() string      { return "txt" }
func (n ChooseText_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseText_Optional_Marshal(m jsn.Marshaler, pv **ChooseText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseText_Marshal(m, *pv)
	} else if !enc {
		var v ChooseText
		if err = ChooseText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseText_Marshal(m jsn.Marshaler, val *ChooseText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseText_Flow{val}); err == nil {
		e0 := m.MarshalKey("if", ChooseText_Field_If)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.If)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseText_Field_If))
		}
		e1 := m.MarshalKey("then", ChooseText_Field_True)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.True)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseText_Field_True))
		}
		e2 := m.MarshalKey("else", ChooseText_Field_False)
		if e2 == nil {
			e2 = rt.TextEval_Optional_Marshal(m, &val.False)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseText_Field_False))
		}
		m.EndBlock()
	}
	return
}

// ChooseValue An if statement with local assignment.
type ChooseValue struct {
	Assign string       `if:"label=_,type=text"`
	From   Assignment   `if:"label=from"`
	Filter rt.BoolEval  `if:"label=and"`
	Does   []rt.Execute `if:"label=does"`
	Else   Brancher     `if:"label=else,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*ChooseValue)(nil)
var _ Brancher = (*ChooseValue)(nil)

func (*ChooseValue) Compose() composer.Spec {
	return composer.Spec{
		Name: ChooseValue_Type,
		Uses: composer.Type_Flow,
		Lede: "if",
	}
}

const ChooseValue_Type = "choose_value"
const ChooseValue_Field_Assign = "$ASSIGN"
const ChooseValue_Field_From = "$FROM"
const ChooseValue_Field_Filter = "$FILTER"
const ChooseValue_Field_Does = "$DOES"
const ChooseValue_Field_Else = "$ELSE"

func (op *ChooseValue) Marshal(m jsn.Marshaler) error {
	return ChooseValue_Marshal(m, op)
}

type ChooseValue_Slice []ChooseValue

func (op *ChooseValue_Slice) GetType() string { return ChooseValue_Type }

func (op *ChooseValue_Slice) Marshal(m jsn.Marshaler) error {
	return ChooseValue_Repeats_Marshal(m, (*[]ChooseValue)(op))
}

func (op *ChooseValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ChooseValue_Slice) SetSize(cnt int) {
	var els []ChooseValue
	if cnt >= 0 {
		els = make(ChooseValue_Slice, cnt)
	}
	(*op) = els
}

func (op *ChooseValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ChooseValue_Marshal(m, &(*op)[i])
}

func ChooseValue_Repeats_Marshal(m jsn.Marshaler, vals *[]ChooseValue) error {
	return jsn.RepeatBlock(m, (*ChooseValue_Slice)(vals))
}

func ChooseValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ChooseValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ChooseValue_Repeats_Marshal(m, pv)
	}
	return
}

type ChooseValue_Flow struct{ ptr *ChooseValue }

func (n ChooseValue_Flow) GetType() string      { return ChooseValue_Type }
func (n ChooseValue_Flow) GetLede() string      { return "if" }
func (n ChooseValue_Flow) GetFlow() interface{} { return n.ptr }
func (n ChooseValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ChooseValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ChooseValue_Optional_Marshal(m jsn.Marshaler, pv **ChooseValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ChooseValue_Marshal(m, *pv)
	} else if !enc {
		var v ChooseValue
		if err = ChooseValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ChooseValue_Marshal(m jsn.Marshaler, val *ChooseValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ChooseValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ChooseValue_Field_Assign)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Assign)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ChooseValue_Field_Assign))
		}
		e1 := m.MarshalKey("from", ChooseValue_Field_From)
		if e1 == nil {
			e1 = Assignment_Marshal(m, &val.From)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ChooseValue_Field_From))
		}
		e2 := m.MarshalKey("and", ChooseValue_Field_Filter)
		if e2 == nil {
			e2 = rt.BoolEval_Marshal(m, &val.Filter)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ChooseValue_Field_Filter))
		}
		e3 := m.MarshalKey("does", ChooseValue_Field_Does)
		if e3 == nil {
			e3 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", ChooseValue_Field_Does))
		}
		e4 := m.MarshalKey("else", ChooseValue_Field_Else)
		if e4 == nil {
			e4 = Brancher_Optional_Marshal(m, &val.Else)
		}
		if e4 != nil && e4 != jsn.Missing {
			m.Error(errutil.New(e4, "in flow at", ChooseValue_Field_Else))
		}
		m.EndBlock()
	}
	return
}

// CommaText Separates words with commas, and 'and'.
type CommaText struct {
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*CommaText)(nil)

func (*CommaText) Compose() composer.Spec {
	return composer.Spec{
		Name: CommaText_Type,
		Uses: composer.Type_Flow,
		Lede: "commas",
	}
}

const CommaText_Type = "comma_text"
const CommaText_Field_Does = "$DOES"

func (op *CommaText) Marshal(m jsn.Marshaler) error {
	return CommaText_Marshal(m, op)
}

type CommaText_Slice []CommaText

func (op *CommaText_Slice) GetType() string { return CommaText_Type }

func (op *CommaText_Slice) Marshal(m jsn.Marshaler) error {
	return CommaText_Repeats_Marshal(m, (*[]CommaText)(op))
}

func (op *CommaText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CommaText_Slice) SetSize(cnt int) {
	var els []CommaText
	if cnt >= 0 {
		els = make(CommaText_Slice, cnt)
	}
	(*op) = els
}

func (op *CommaText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CommaText_Marshal(m, &(*op)[i])
}

func CommaText_Repeats_Marshal(m jsn.Marshaler, vals *[]CommaText) error {
	return jsn.RepeatBlock(m, (*CommaText_Slice)(vals))
}

func CommaText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CommaText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CommaText_Repeats_Marshal(m, pv)
	}
	return
}

type CommaText_Flow struct{ ptr *CommaText }

func (n CommaText_Flow) GetType() string      { return CommaText_Type }
func (n CommaText_Flow) GetLede() string      { return "commas" }
func (n CommaText_Flow) GetFlow() interface{} { return n.ptr }
func (n CommaText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CommaText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CommaText_Optional_Marshal(m jsn.Marshaler, pv **CommaText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CommaText_Marshal(m, *pv)
	} else if !enc {
		var v CommaText
		if err = CommaText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CommaText_Marshal(m jsn.Marshaler, val *CommaText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CommaText_Flow{val}); err == nil {
		e0 := m.MarshalKey("does", CommaText_Field_Does)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CommaText_Field_Does))
		}
		m.EndBlock()
	}
	return
}

// CompareNum True if eq,ne,gt,lt,ge,le two numbers.
type CompareNum struct {
	A         rt.NumberEval `if:"label=_"`
	Is        Comparison    `if:"label=is"`
	B         rt.NumberEval `if:"label=num"`
	Tolerance float64       `if:"label=within,optional,type=number"`
	Markup    map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*CompareNum)(nil)

func (*CompareNum) Compose() composer.Spec {
	return composer.Spec{
		Name: CompareNum_Type,
		Uses: composer.Type_Flow,
		Lede: "cmp",
	}
}

const CompareNum_Type = "compare_num"
const CompareNum_Field_A = "$A"
const CompareNum_Field_Is = "$IS"
const CompareNum_Field_B = "$B"
const CompareNum_Field_Tolerance = "$TOLERANCE"

func (op *CompareNum) Marshal(m jsn.Marshaler) error {
	return CompareNum_Marshal(m, op)
}

type CompareNum_Slice []CompareNum

func (op *CompareNum_Slice) GetType() string { return CompareNum_Type }

func (op *CompareNum_Slice) Marshal(m jsn.Marshaler) error {
	return CompareNum_Repeats_Marshal(m, (*[]CompareNum)(op))
}

func (op *CompareNum_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CompareNum_Slice) SetSize(cnt int) {
	var els []CompareNum
	if cnt >= 0 {
		els = make(CompareNum_Slice, cnt)
	}
	(*op) = els
}

func (op *CompareNum_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CompareNum_Marshal(m, &(*op)[i])
}

func CompareNum_Repeats_Marshal(m jsn.Marshaler, vals *[]CompareNum) error {
	return jsn.RepeatBlock(m, (*CompareNum_Slice)(vals))
}

func CompareNum_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CompareNum) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CompareNum_Repeats_Marshal(m, pv)
	}
	return
}

type CompareNum_Flow struct{ ptr *CompareNum }

func (n CompareNum_Flow) GetType() string      { return CompareNum_Type }
func (n CompareNum_Flow) GetLede() string      { return "cmp" }
func (n CompareNum_Flow) GetFlow() interface{} { return n.ptr }
func (n CompareNum_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CompareNum); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CompareNum_Optional_Marshal(m jsn.Marshaler, pv **CompareNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CompareNum_Marshal(m, *pv)
	} else if !enc {
		var v CompareNum
		if err = CompareNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CompareNum_Marshal(m jsn.Marshaler, val *CompareNum) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CompareNum_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CompareNum_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CompareNum_Field_A))
		}
		e1 := m.MarshalKey("is", CompareNum_Field_Is)
		if e1 == nil {
			e1 = Comparison_Marshal(m, &val.Is)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CompareNum_Field_Is))
		}
		e2 := m.MarshalKey("num", CompareNum_Field_B)
		if e2 == nil {
			e2 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CompareNum_Field_B))
		}
		e3 := m.MarshalKey("within", CompareNum_Field_Tolerance)
		if e3 == nil {
			e3 = prim.Number_Unboxed_Optional_Marshal(m, &val.Tolerance)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", CompareNum_Field_Tolerance))
		}
		m.EndBlock()
	}
	return
}

// CompareText True if eq,ne,gt,lt,ge,le two strings ( lexical. ).
type CompareText struct {
	A      rt.TextEval `if:"label=_"`
	Is     Comparison  `if:"label=is"`
	B      rt.TextEval `if:"label=txt"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*CompareText)(nil)

func (*CompareText) Compose() composer.Spec {
	return composer.Spec{
		Name: CompareText_Type,
		Uses: composer.Type_Flow,
		Lede: "cmp",
	}
}

const CompareText_Type = "compare_text"
const CompareText_Field_A = "$A"
const CompareText_Field_Is = "$IS"
const CompareText_Field_B = "$B"

func (op *CompareText) Marshal(m jsn.Marshaler) error {
	return CompareText_Marshal(m, op)
}

type CompareText_Slice []CompareText

func (op *CompareText_Slice) GetType() string { return CompareText_Type }

func (op *CompareText_Slice) Marshal(m jsn.Marshaler) error {
	return CompareText_Repeats_Marshal(m, (*[]CompareText)(op))
}

func (op *CompareText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CompareText_Slice) SetSize(cnt int) {
	var els []CompareText
	if cnt >= 0 {
		els = make(CompareText_Slice, cnt)
	}
	(*op) = els
}

func (op *CompareText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CompareText_Marshal(m, &(*op)[i])
}

func CompareText_Repeats_Marshal(m jsn.Marshaler, vals *[]CompareText) error {
	return jsn.RepeatBlock(m, (*CompareText_Slice)(vals))
}

func CompareText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CompareText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CompareText_Repeats_Marshal(m, pv)
	}
	return
}

type CompareText_Flow struct{ ptr *CompareText }

func (n CompareText_Flow) GetType() string      { return CompareText_Type }
func (n CompareText_Flow) GetLede() string      { return "cmp" }
func (n CompareText_Flow) GetFlow() interface{} { return n.ptr }
func (n CompareText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CompareText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CompareText_Optional_Marshal(m jsn.Marshaler, pv **CompareText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CompareText_Marshal(m, *pv)
	} else if !enc {
		var v CompareText
		if err = CompareText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CompareText_Marshal(m jsn.Marshaler, val *CompareText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CompareText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CompareText_Field_A)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CompareText_Field_A))
		}
		e1 := m.MarshalKey("is", CompareText_Field_Is)
		if e1 == nil {
			e1 = Comparison_Marshal(m, &val.Is)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CompareText_Field_Is))
		}
		e2 := m.MarshalKey("txt", CompareText_Field_B)
		if e2 == nil {
			e2 = rt.TextEval_Marshal(m, &val.B)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CompareText_Field_B))
		}
		m.EndBlock()
	}
	return
}

// Comparison requires a predefined string.
type Comparison struct {
	Str string
}

func (op *Comparison) String() string {
	return op.Str
}

const Comparison_EqualTo = "$EQUAL_TO"
const Comparison_OtherThan = "$OTHER_THAN"
const Comparison_GreaterThan = "$GREATER_THAN"
const Comparison_LessThan = "$LESS_THAN"
const Comparison_AtLeast = "$AT_LEAST"
const Comparison_AtMost = "$AT_MOST"

func (*Comparison) Compose() composer.Spec {
	return composer.Spec{
		Name: Comparison_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			Comparison_EqualTo, Comparison_OtherThan, Comparison_GreaterThan, Comparison_LessThan, Comparison_AtLeast, Comparison_AtMost,
		},
		Strings: []string{
			"equal_to", "other_than", "greater_than", "less_than", "at_least", "at_most",
		},
	}
}

const Comparison_Type = "comparison"

func (op *Comparison) Marshal(m jsn.Marshaler) error {
	return Comparison_Marshal(m, op)
}

func Comparison_Optional_Marshal(m jsn.Marshaler, val *Comparison) (err error) {
	var zero Comparison
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Comparison_Marshal(m, val)
	}
	return
}

func Comparison_Marshal(m jsn.Marshaler, val *Comparison) (err error) {
	return m.MarshalValue(Comparison_Type, jsn.MakeEnum(val, &val.Str))
}

type Comparison_Slice []Comparison

func (op *Comparison_Slice) GetType() string { return Comparison_Type }

func (op *Comparison_Slice) Marshal(m jsn.Marshaler) error {
	return Comparison_Repeats_Marshal(m, (*[]Comparison)(op))
}

func (op *Comparison_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Comparison_Slice) SetSize(cnt int) {
	var els []Comparison
	if cnt >= 0 {
		els = make(Comparison_Slice, cnt)
	}
	(*op) = els
}

func (op *Comparison_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Comparison_Marshal(m, &(*op)[i])
}

func Comparison_Repeats_Marshal(m jsn.Marshaler, vals *[]Comparison) error {
	return jsn.RepeatBlock(m, (*Comparison_Slice)(vals))
}

func Comparison_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Comparison) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Comparison_Repeats_Marshal(m, pv)
	}
	return
}

// DiffOf Subtract two numbers.
type DiffOf struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=by,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*DiffOf)(nil)

func (*DiffOf) Compose() composer.Spec {
	return composer.Spec{
		Name: DiffOf_Type,
		Uses: composer.Type_Flow,
		Lede: "dec",
	}
}

const DiffOf_Type = "diff_of"
const DiffOf_Field_A = "$A"
const DiffOf_Field_B = "$B"

func (op *DiffOf) Marshal(m jsn.Marshaler) error {
	return DiffOf_Marshal(m, op)
}

type DiffOf_Slice []DiffOf

func (op *DiffOf_Slice) GetType() string { return DiffOf_Type }

func (op *DiffOf_Slice) Marshal(m jsn.Marshaler) error {
	return DiffOf_Repeats_Marshal(m, (*[]DiffOf)(op))
}

func (op *DiffOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DiffOf_Slice) SetSize(cnt int) {
	var els []DiffOf
	if cnt >= 0 {
		els = make(DiffOf_Slice, cnt)
	}
	(*op) = els
}

func (op *DiffOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DiffOf_Marshal(m, &(*op)[i])
}

func DiffOf_Repeats_Marshal(m jsn.Marshaler, vals *[]DiffOf) error {
	return jsn.RepeatBlock(m, (*DiffOf_Slice)(vals))
}

func DiffOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DiffOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DiffOf_Repeats_Marshal(m, pv)
	}
	return
}

type DiffOf_Flow struct{ ptr *DiffOf }

func (n DiffOf_Flow) GetType() string      { return DiffOf_Type }
func (n DiffOf_Flow) GetLede() string      { return "dec" }
func (n DiffOf_Flow) GetFlow() interface{} { return n.ptr }
func (n DiffOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DiffOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DiffOf_Optional_Marshal(m jsn.Marshaler, pv **DiffOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DiffOf_Marshal(m, *pv)
	} else if !enc {
		var v DiffOf
		if err = DiffOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DiffOf_Marshal(m jsn.Marshaler, val *DiffOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DiffOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", DiffOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DiffOf_Field_A))
		}
		e1 := m.MarshalKey("by", DiffOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Optional_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DiffOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

const Dot_Type = "dot"

var Dot_Optional_Marshal = Dot_Marshal

type Dot_Slot struct{ Value *Dot }

func (at Dot_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Dot_Slot) GetType() string              { return Dot_Type }
func (at Dot_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Dot_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Dot)
	return
}

func Dot_Marshal(m jsn.Marshaler, ptr *Dot) (err error) {
	slot := Dot_Slot{ptr}
	return slot.Marshal(m)
}

type Dot_Slice []Dot

func (op *Dot_Slice) GetType() string { return Dot_Type }

func (op *Dot_Slice) Marshal(m jsn.Marshaler) error {
	return Dot_Repeats_Marshal(m, (*[]Dot)(op))
}

func (op *Dot_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Dot_Slice) SetSize(cnt int) {
	var els []Dot
	if cnt >= 0 {
		els = make(Dot_Slice, cnt)
	}
	(*op) = els
}

func (op *Dot_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Dot_Marshal(m, &(*op)[i])
}

func Dot_Repeats_Marshal(m jsn.Marshaler, vals *[]Dot) error {
	return jsn.RepeatBlock(m, (*Dot_Slice)(vals))
}

func Dot_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Dot) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Dot_Repeats_Marshal(m, pv)
	}
	return
}

// During Decide whether a pattern is running.
type During struct {
	Pattern PatternName `if:"label=_"`
	Markup  map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*During)(nil)
var _ rt.NumberEval = (*During)(nil)

func (*During) Compose() composer.Spec {
	return composer.Spec{
		Name: During_Type,
		Uses: composer.Type_Flow,
	}
}

const During_Type = "during"
const During_Field_Pattern = "$PATTERN"

func (op *During) Marshal(m jsn.Marshaler) error {
	return During_Marshal(m, op)
}

type During_Slice []During

func (op *During_Slice) GetType() string { return During_Type }

func (op *During_Slice) Marshal(m jsn.Marshaler) error {
	return During_Repeats_Marshal(m, (*[]During)(op))
}

func (op *During_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *During_Slice) SetSize(cnt int) {
	var els []During
	if cnt >= 0 {
		els = make(During_Slice, cnt)
	}
	(*op) = els
}

func (op *During_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return During_Marshal(m, &(*op)[i])
}

func During_Repeats_Marshal(m jsn.Marshaler, vals *[]During) error {
	return jsn.RepeatBlock(m, (*During_Slice)(vals))
}

func During_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]During) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = During_Repeats_Marshal(m, pv)
	}
	return
}

type During_Flow struct{ ptr *During }

func (n During_Flow) GetType() string      { return During_Type }
func (n During_Flow) GetLede() string      { return During_Type }
func (n During_Flow) GetFlow() interface{} { return n.ptr }
func (n During_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*During); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func During_Optional_Marshal(m jsn.Marshaler, pv **During) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = During_Marshal(m, *pv)
	} else if !enc {
		var v During
		if err = During_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func During_Marshal(m jsn.Marshaler, val *During) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(During_Flow{val}); err == nil {
		e0 := m.MarshalKey("", During_Field_Pattern)
		if e0 == nil {
			e0 = PatternName_Marshal(m, &val.Pattern)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", During_Field_Pattern))
		}
		m.EndBlock()
	}
	return
}

// FromBool Assigns the calculated boolean value.
type FromBool struct {
	Val    rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

func (*FromBool) Compose() composer.Spec {
	return composer.Spec{
		Name: FromBool_Type,
		Uses: composer.Type_Flow,
	}
}

const FromBool_Type = "from_bool"
const FromBool_Field_Val = "$VAL"

func (op *FromBool) Marshal(m jsn.Marshaler) error {
	return FromBool_Marshal(m, op)
}

type FromBool_Slice []FromBool

func (op *FromBool_Slice) GetType() string { return FromBool_Type }

func (op *FromBool_Slice) Marshal(m jsn.Marshaler) error {
	return FromBool_Repeats_Marshal(m, (*[]FromBool)(op))
}

func (op *FromBool_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromBool_Slice) SetSize(cnt int) {
	var els []FromBool
	if cnt >= 0 {
		els = make(FromBool_Slice, cnt)
	}
	(*op) = els
}

func (op *FromBool_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromBool_Marshal(m, &(*op)[i])
}

func FromBool_Repeats_Marshal(m jsn.Marshaler, vals *[]FromBool) error {
	return jsn.RepeatBlock(m, (*FromBool_Slice)(vals))
}

func FromBool_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromBool) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromBool_Repeats_Marshal(m, pv)
	}
	return
}

type FromBool_Flow struct{ ptr *FromBool }

func (n FromBool_Flow) GetType() string      { return FromBool_Type }
func (n FromBool_Flow) GetLede() string      { return FromBool_Type }
func (n FromBool_Flow) GetFlow() interface{} { return n.ptr }
func (n FromBool_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromBool); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromBool_Optional_Marshal(m jsn.Marshaler, pv **FromBool) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromBool_Marshal(m, *pv)
	} else if !enc {
		var v FromBool
		if err = FromBool_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromBool_Marshal(m jsn.Marshaler, val *FromBool) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromBool_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromBool_Field_Val)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromBool_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromNumList Assigns the calculated numbers.
type FromNumList struct {
	Val    rt.NumListEval `if:"label=_"`
	Markup map[string]any
}

func (*FromNumList) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNumList_Type,
		Uses: composer.Type_Flow,
	}
}

const FromNumList_Type = "from_num_list"
const FromNumList_Field_Val = "$VAL"

func (op *FromNumList) Marshal(m jsn.Marshaler) error {
	return FromNumList_Marshal(m, op)
}

type FromNumList_Slice []FromNumList

func (op *FromNumList_Slice) GetType() string { return FromNumList_Type }

func (op *FromNumList_Slice) Marshal(m jsn.Marshaler) error {
	return FromNumList_Repeats_Marshal(m, (*[]FromNumList)(op))
}

func (op *FromNumList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromNumList_Slice) SetSize(cnt int) {
	var els []FromNumList
	if cnt >= 0 {
		els = make(FromNumList_Slice, cnt)
	}
	(*op) = els
}

func (op *FromNumList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromNumList_Marshal(m, &(*op)[i])
}

func FromNumList_Repeats_Marshal(m jsn.Marshaler, vals *[]FromNumList) error {
	return jsn.RepeatBlock(m, (*FromNumList_Slice)(vals))
}

func FromNumList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromNumList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromNumList_Repeats_Marshal(m, pv)
	}
	return
}

type FromNumList_Flow struct{ ptr *FromNumList }

func (n FromNumList_Flow) GetType() string      { return FromNumList_Type }
func (n FromNumList_Flow) GetLede() string      { return FromNumList_Type }
func (n FromNumList_Flow) GetFlow() interface{} { return n.ptr }
func (n FromNumList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromNumList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromNumList_Optional_Marshal(m jsn.Marshaler, pv **FromNumList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromNumList_Marshal(m, *pv)
	} else if !enc {
		var v FromNumList
		if err = FromNumList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromNumList_Marshal(m jsn.Marshaler, val *FromNumList) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromNumList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromNumList_Field_Val)
		if e0 == nil {
			e0 = rt.NumListEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromNumList_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromNumber Assigns the calculated number.
type FromNumber struct {
	Val    rt.NumberEval `if:"label=_"`
	Markup map[string]any
}

func (*FromNumber) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNumber_Type,
		Uses: composer.Type_Flow,
	}
}

const FromNumber_Type = "from_number"
const FromNumber_Field_Val = "$VAL"

func (op *FromNumber) Marshal(m jsn.Marshaler) error {
	return FromNumber_Marshal(m, op)
}

type FromNumber_Slice []FromNumber

func (op *FromNumber_Slice) GetType() string { return FromNumber_Type }

func (op *FromNumber_Slice) Marshal(m jsn.Marshaler) error {
	return FromNumber_Repeats_Marshal(m, (*[]FromNumber)(op))
}

func (op *FromNumber_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromNumber_Slice) SetSize(cnt int) {
	var els []FromNumber
	if cnt >= 0 {
		els = make(FromNumber_Slice, cnt)
	}
	(*op) = els
}

func (op *FromNumber_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromNumber_Marshal(m, &(*op)[i])
}

func FromNumber_Repeats_Marshal(m jsn.Marshaler, vals *[]FromNumber) error {
	return jsn.RepeatBlock(m, (*FromNumber_Slice)(vals))
}

func FromNumber_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromNumber) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromNumber_Repeats_Marshal(m, pv)
	}
	return
}

type FromNumber_Flow struct{ ptr *FromNumber }

func (n FromNumber_Flow) GetType() string      { return FromNumber_Type }
func (n FromNumber_Flow) GetLede() string      { return FromNumber_Type }
func (n FromNumber_Flow) GetFlow() interface{} { return n.ptr }
func (n FromNumber_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromNumber); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromNumber_Optional_Marshal(m jsn.Marshaler, pv **FromNumber) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromNumber_Marshal(m, *pv)
	} else if !enc {
		var v FromNumber
		if err = FromNumber_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromNumber_Marshal(m jsn.Marshaler, val *FromNumber) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromNumber_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromNumber_Field_Val)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromNumber_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromRecord Assigns the calculated record.
type FromRecord struct {
	Val    rt.RecordEval `if:"label=_"`
	Markup map[string]any
}

func (*FromRecord) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecord_Type,
		Uses: composer.Type_Flow,
	}
}

const FromRecord_Type = "from_record"
const FromRecord_Field_Val = "$VAL"

func (op *FromRecord) Marshal(m jsn.Marshaler) error {
	return FromRecord_Marshal(m, op)
}

type FromRecord_Slice []FromRecord

func (op *FromRecord_Slice) GetType() string { return FromRecord_Type }

func (op *FromRecord_Slice) Marshal(m jsn.Marshaler) error {
	return FromRecord_Repeats_Marshal(m, (*[]FromRecord)(op))
}

func (op *FromRecord_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromRecord_Slice) SetSize(cnt int) {
	var els []FromRecord
	if cnt >= 0 {
		els = make(FromRecord_Slice, cnt)
	}
	(*op) = els
}

func (op *FromRecord_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromRecord_Marshal(m, &(*op)[i])
}

func FromRecord_Repeats_Marshal(m jsn.Marshaler, vals *[]FromRecord) error {
	return jsn.RepeatBlock(m, (*FromRecord_Slice)(vals))
}

func FromRecord_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromRecord) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromRecord_Repeats_Marshal(m, pv)
	}
	return
}

type FromRecord_Flow struct{ ptr *FromRecord }

func (n FromRecord_Flow) GetType() string      { return FromRecord_Type }
func (n FromRecord_Flow) GetLede() string      { return FromRecord_Type }
func (n FromRecord_Flow) GetFlow() interface{} { return n.ptr }
func (n FromRecord_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromRecord); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromRecord_Optional_Marshal(m jsn.Marshaler, pv **FromRecord) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromRecord_Marshal(m, *pv)
	} else if !enc {
		var v FromRecord
		if err = FromRecord_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromRecord_Marshal(m jsn.Marshaler, val *FromRecord) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromRecord_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromRecord_Field_Val)
		if e0 == nil {
			e0 = rt.RecordEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromRecord_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromRecordList Assigns the calculated records.
type FromRecordList struct {
	Val    rt.RecordListEval `if:"label=_"`
	Markup map[string]any
}

func (*FromRecordList) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecordList_Type,
		Uses: composer.Type_Flow,
	}
}

const FromRecordList_Type = "from_record_list"
const FromRecordList_Field_Val = "$VAL"

func (op *FromRecordList) Marshal(m jsn.Marshaler) error {
	return FromRecordList_Marshal(m, op)
}

type FromRecordList_Slice []FromRecordList

func (op *FromRecordList_Slice) GetType() string { return FromRecordList_Type }

func (op *FromRecordList_Slice) Marshal(m jsn.Marshaler) error {
	return FromRecordList_Repeats_Marshal(m, (*[]FromRecordList)(op))
}

func (op *FromRecordList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromRecordList_Slice) SetSize(cnt int) {
	var els []FromRecordList
	if cnt >= 0 {
		els = make(FromRecordList_Slice, cnt)
	}
	(*op) = els
}

func (op *FromRecordList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromRecordList_Marshal(m, &(*op)[i])
}

func FromRecordList_Repeats_Marshal(m jsn.Marshaler, vals *[]FromRecordList) error {
	return jsn.RepeatBlock(m, (*FromRecordList_Slice)(vals))
}

func FromRecordList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromRecordList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromRecordList_Repeats_Marshal(m, pv)
	}
	return
}

type FromRecordList_Flow struct{ ptr *FromRecordList }

func (n FromRecordList_Flow) GetType() string      { return FromRecordList_Type }
func (n FromRecordList_Flow) GetLede() string      { return FromRecordList_Type }
func (n FromRecordList_Flow) GetFlow() interface{} { return n.ptr }
func (n FromRecordList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromRecordList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromRecordList_Optional_Marshal(m jsn.Marshaler, pv **FromRecordList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromRecordList_Marshal(m, *pv)
	} else if !enc {
		var v FromRecordList
		if err = FromRecordList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromRecordList_Marshal(m jsn.Marshaler, val *FromRecordList) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromRecordList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromRecordList_Field_Val)
		if e0 == nil {
			e0 = rt.RecordListEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromRecordList_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromText Assigns the calculated piece of text.
type FromText struct {
	Val    rt.TextEval `if:"label=_"`
	Markup map[string]any
}

func (*FromText) Compose() composer.Spec {
	return composer.Spec{
		Name: FromText_Type,
		Uses: composer.Type_Flow,
	}
}

const FromText_Type = "from_text"
const FromText_Field_Val = "$VAL"

func (op *FromText) Marshal(m jsn.Marshaler) error {
	return FromText_Marshal(m, op)
}

type FromText_Slice []FromText

func (op *FromText_Slice) GetType() string { return FromText_Type }

func (op *FromText_Slice) Marshal(m jsn.Marshaler) error {
	return FromText_Repeats_Marshal(m, (*[]FromText)(op))
}

func (op *FromText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromText_Slice) SetSize(cnt int) {
	var els []FromText
	if cnt >= 0 {
		els = make(FromText_Slice, cnt)
	}
	(*op) = els
}

func (op *FromText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromText_Marshal(m, &(*op)[i])
}

func FromText_Repeats_Marshal(m jsn.Marshaler, vals *[]FromText) error {
	return jsn.RepeatBlock(m, (*FromText_Slice)(vals))
}

func FromText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromText_Repeats_Marshal(m, pv)
	}
	return
}

type FromText_Flow struct{ ptr *FromText }

func (n FromText_Flow) GetType() string      { return FromText_Type }
func (n FromText_Flow) GetLede() string      { return FromText_Type }
func (n FromText_Flow) GetFlow() interface{} { return n.ptr }
func (n FromText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromText_Optional_Marshal(m jsn.Marshaler, pv **FromText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromText_Marshal(m, *pv)
	} else if !enc {
		var v FromText
		if err = FromText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromText_Marshal(m jsn.Marshaler, val *FromText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromText_Field_Val)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromText_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromTextList Assigns the calculated pieces of text.
type FromTextList struct {
	Val    rt.TextListEval `if:"label=_"`
	Markup map[string]any
}

func (*FromTextList) Compose() composer.Spec {
	return composer.Spec{
		Name: FromTextList_Type,
		Uses: composer.Type_Flow,
	}
}

const FromTextList_Type = "from_text_list"
const FromTextList_Field_Val = "$VAL"

func (op *FromTextList) Marshal(m jsn.Marshaler) error {
	return FromTextList_Marshal(m, op)
}

type FromTextList_Slice []FromTextList

func (op *FromTextList_Slice) GetType() string { return FromTextList_Type }

func (op *FromTextList_Slice) Marshal(m jsn.Marshaler) error {
	return FromTextList_Repeats_Marshal(m, (*[]FromTextList)(op))
}

func (op *FromTextList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromTextList_Slice) SetSize(cnt int) {
	var els []FromTextList
	if cnt >= 0 {
		els = make(FromTextList_Slice, cnt)
	}
	(*op) = els
}

func (op *FromTextList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromTextList_Marshal(m, &(*op)[i])
}

func FromTextList_Repeats_Marshal(m jsn.Marshaler, vals *[]FromTextList) error {
	return jsn.RepeatBlock(m, (*FromTextList_Slice)(vals))
}

func FromTextList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromTextList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromTextList_Repeats_Marshal(m, pv)
	}
	return
}

type FromTextList_Flow struct{ ptr *FromTextList }

func (n FromTextList_Flow) GetType() string      { return FromTextList_Type }
func (n FromTextList_Flow) GetLede() string      { return FromTextList_Type }
func (n FromTextList_Flow) GetFlow() interface{} { return n.ptr }
func (n FromTextList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromTextList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromTextList_Optional_Marshal(m jsn.Marshaler, pv **FromTextList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromTextList_Marshal(m, *pv)
	} else if !enc {
		var v FromTextList
		if err = FromTextList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromTextList_Marshal(m jsn.Marshaler, val *FromTextList) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromTextList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromTextList_Field_Val)
		if e0 == nil {
			e0 = rt.TextListEval_Marshal(m, &val.Val)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromTextList_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// GetValue Read a value from a local variable ( or pattern parameter. )
type GetValue struct {
	Source Address `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*GetValue)(nil)
var _ rt.NumberEval = (*GetValue)(nil)
var _ rt.TextEval = (*GetValue)(nil)
var _ rt.RecordEval = (*GetValue)(nil)
var _ rt.NumListEval = (*GetValue)(nil)
var _ rt.TextListEval = (*GetValue)(nil)
var _ rt.RecordListEval = (*GetValue)(nil)

func (*GetValue) Compose() composer.Spec {
	return composer.Spec{
		Name: GetValue_Type,
		Uses: composer.Type_Flow,
		Lede: "get",
	}
}

const GetValue_Type = "get_value"
const GetValue_Field_Source = "$SOURCE"

func (op *GetValue) Marshal(m jsn.Marshaler) error {
	return GetValue_Marshal(m, op)
}

type GetValue_Slice []GetValue

func (op *GetValue_Slice) GetType() string { return GetValue_Type }

func (op *GetValue_Slice) Marshal(m jsn.Marshaler) error {
	return GetValue_Repeats_Marshal(m, (*[]GetValue)(op))
}

func (op *GetValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *GetValue_Slice) SetSize(cnt int) {
	var els []GetValue
	if cnt >= 0 {
		els = make(GetValue_Slice, cnt)
	}
	(*op) = els
}

func (op *GetValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return GetValue_Marshal(m, &(*op)[i])
}

func GetValue_Repeats_Marshal(m jsn.Marshaler, vals *[]GetValue) error {
	return jsn.RepeatBlock(m, (*GetValue_Slice)(vals))
}

func GetValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]GetValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = GetValue_Repeats_Marshal(m, pv)
	}
	return
}

type GetValue_Flow struct{ ptr *GetValue }

func (n GetValue_Flow) GetType() string      { return GetValue_Type }
func (n GetValue_Flow) GetLede() string      { return "get" }
func (n GetValue_Flow) GetFlow() interface{} { return n.ptr }
func (n GetValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*GetValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func GetValue_Optional_Marshal(m jsn.Marshaler, pv **GetValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = GetValue_Marshal(m, *pv)
	} else if !enc {
		var v GetValue
		if err = GetValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func GetValue_Marshal(m jsn.Marshaler, val *GetValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(GetValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", GetValue_Field_Source)
		if e0 == nil {
			e0 = Address_Marshal(m, &val.Source)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", GetValue_Field_Source))
		}
		m.EndBlock()
	}
	return
}

// HasDominion
type HasDominion struct {
	Name   string `if:"label=_,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*HasDominion)(nil)

func (*HasDominion) Compose() composer.Spec {
	return composer.Spec{
		Name: HasDominion_Type,
		Uses: composer.Type_Flow,
	}
}

const HasDominion_Type = "has_dominion"
const HasDominion_Field_Name = "$NAME"

func (op *HasDominion) Marshal(m jsn.Marshaler) error {
	return HasDominion_Marshal(m, op)
}

type HasDominion_Slice []HasDominion

func (op *HasDominion_Slice) GetType() string { return HasDominion_Type }

func (op *HasDominion_Slice) Marshal(m jsn.Marshaler) error {
	return HasDominion_Repeats_Marshal(m, (*[]HasDominion)(op))
}

func (op *HasDominion_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *HasDominion_Slice) SetSize(cnt int) {
	var els []HasDominion
	if cnt >= 0 {
		els = make(HasDominion_Slice, cnt)
	}
	(*op) = els
}

func (op *HasDominion_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return HasDominion_Marshal(m, &(*op)[i])
}

func HasDominion_Repeats_Marshal(m jsn.Marshaler, vals *[]HasDominion) error {
	return jsn.RepeatBlock(m, (*HasDominion_Slice)(vals))
}

func HasDominion_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]HasDominion) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = HasDominion_Repeats_Marshal(m, pv)
	}
	return
}

type HasDominion_Flow struct{ ptr *HasDominion }

func (n HasDominion_Flow) GetType() string      { return HasDominion_Type }
func (n HasDominion_Flow) GetLede() string      { return HasDominion_Type }
func (n HasDominion_Flow) GetFlow() interface{} { return n.ptr }
func (n HasDominion_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*HasDominion); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func HasDominion_Optional_Marshal(m jsn.Marshaler, pv **HasDominion) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = HasDominion_Marshal(m, *pv)
	} else if !enc {
		var v HasDominion
		if err = HasDominion_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func HasDominion_Marshal(m jsn.Marshaler, val *HasDominion) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(HasDominion_Flow{val}); err == nil {
		e0 := m.MarshalKey("", HasDominion_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", HasDominion_Field_Name))
		}
		m.EndBlock()
	}
	return
}

// IdOf A unique object identifier.
type IdOf struct {
	Object rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*IdOf)(nil)

func (*IdOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IdOf_Type,
		Uses: composer.Type_Flow,
	}
}

const IdOf_Type = "id_of"
const IdOf_Field_Object = "$OBJECT"

func (op *IdOf) Marshal(m jsn.Marshaler) error {
	return IdOf_Marshal(m, op)
}

type IdOf_Slice []IdOf

func (op *IdOf_Slice) GetType() string { return IdOf_Type }

func (op *IdOf_Slice) Marshal(m jsn.Marshaler) error {
	return IdOf_Repeats_Marshal(m, (*[]IdOf)(op))
}

func (op *IdOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *IdOf_Slice) SetSize(cnt int) {
	var els []IdOf
	if cnt >= 0 {
		els = make(IdOf_Slice, cnt)
	}
	(*op) = els
}

func (op *IdOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return IdOf_Marshal(m, &(*op)[i])
}

func IdOf_Repeats_Marshal(m jsn.Marshaler, vals *[]IdOf) error {
	return jsn.RepeatBlock(m, (*IdOf_Slice)(vals))
}

func IdOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]IdOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = IdOf_Repeats_Marshal(m, pv)
	}
	return
}

type IdOf_Flow struct{ ptr *IdOf }

func (n IdOf_Flow) GetType() string      { return IdOf_Type }
func (n IdOf_Flow) GetLede() string      { return IdOf_Type }
func (n IdOf_Flow) GetFlow() interface{} { return n.ptr }
func (n IdOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*IdOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func IdOf_Optional_Marshal(m jsn.Marshaler, pv **IdOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IdOf_Marshal(m, *pv)
	} else if !enc {
		var v IdOf
		if err = IdOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IdOf_Marshal(m jsn.Marshaler, val *IdOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(IdOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", IdOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IdOf_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// Includes True if text contains text.
type Includes struct {
	Text   rt.TextEval `if:"label=_"`
	Part   rt.TextEval `if:"label=part"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Includes)(nil)

func (*Includes) Compose() composer.Spec {
	return composer.Spec{
		Name: Includes_Type,
		Uses: composer.Type_Flow,
		Lede: "contains",
	}
}

const Includes_Type = "includes"
const Includes_Field_Text = "$TEXT"
const Includes_Field_Part = "$PART"

func (op *Includes) Marshal(m jsn.Marshaler) error {
	return Includes_Marshal(m, op)
}

type Includes_Slice []Includes

func (op *Includes_Slice) GetType() string { return Includes_Type }

func (op *Includes_Slice) Marshal(m jsn.Marshaler) error {
	return Includes_Repeats_Marshal(m, (*[]Includes)(op))
}

func (op *Includes_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Includes_Slice) SetSize(cnt int) {
	var els []Includes
	if cnt >= 0 {
		els = make(Includes_Slice, cnt)
	}
	(*op) = els
}

func (op *Includes_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Includes_Marshal(m, &(*op)[i])
}

func Includes_Repeats_Marshal(m jsn.Marshaler, vals *[]Includes) error {
	return jsn.RepeatBlock(m, (*Includes_Slice)(vals))
}

func Includes_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Includes) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Includes_Repeats_Marshal(m, pv)
	}
	return
}

type Includes_Flow struct{ ptr *Includes }

func (n Includes_Flow) GetType() string      { return Includes_Type }
func (n Includes_Flow) GetLede() string      { return "contains" }
func (n Includes_Flow) GetFlow() interface{} { return n.ptr }
func (n Includes_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Includes); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Includes_Optional_Marshal(m jsn.Marshaler, pv **Includes) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Includes_Marshal(m, *pv)
	} else if !enc {
		var v Includes
		if err = Includes_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Includes_Marshal(m jsn.Marshaler, val *Includes) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Includes_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Includes_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Includes_Field_Text))
		}
		e1 := m.MarshalKey("part", Includes_Field_Part)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Part)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Includes_Field_Part))
		}
		m.EndBlock()
	}
	return
}

// IsEmpty True if the text is empty.
type IsEmpty struct {
	Text   rt.TextEval `if:"label=empty"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*IsEmpty)(nil)

func (*IsEmpty) Compose() composer.Spec {
	return composer.Spec{
		Name: IsEmpty_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const IsEmpty_Type = "is_empty"
const IsEmpty_Field_Text = "$TEXT"

func (op *IsEmpty) Marshal(m jsn.Marshaler) error {
	return IsEmpty_Marshal(m, op)
}

type IsEmpty_Slice []IsEmpty

func (op *IsEmpty_Slice) GetType() string { return IsEmpty_Type }

func (op *IsEmpty_Slice) Marshal(m jsn.Marshaler) error {
	return IsEmpty_Repeats_Marshal(m, (*[]IsEmpty)(op))
}

func (op *IsEmpty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *IsEmpty_Slice) SetSize(cnt int) {
	var els []IsEmpty
	if cnt >= 0 {
		els = make(IsEmpty_Slice, cnt)
	}
	(*op) = els
}

func (op *IsEmpty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return IsEmpty_Marshal(m, &(*op)[i])
}

func IsEmpty_Repeats_Marshal(m jsn.Marshaler, vals *[]IsEmpty) error {
	return jsn.RepeatBlock(m, (*IsEmpty_Slice)(vals))
}

func IsEmpty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]IsEmpty) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = IsEmpty_Repeats_Marshal(m, pv)
	}
	return
}

type IsEmpty_Flow struct{ ptr *IsEmpty }

func (n IsEmpty_Flow) GetType() string      { return IsEmpty_Type }
func (n IsEmpty_Flow) GetLede() string      { return "is" }
func (n IsEmpty_Flow) GetFlow() interface{} { return n.ptr }
func (n IsEmpty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*IsEmpty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func IsEmpty_Optional_Marshal(m jsn.Marshaler, pv **IsEmpty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IsEmpty_Marshal(m, *pv)
	} else if !enc {
		var v IsEmpty
		if err = IsEmpty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IsEmpty_Marshal(m jsn.Marshaler, val *IsEmpty) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(IsEmpty_Flow{val}); err == nil {
		e0 := m.MarshalKey("empty", IsEmpty_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IsEmpty_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// IsExactKindOf True if the object is exactly the named kind.
type IsExactKindOf struct {
	Object rt.TextEval `if:"label=_"`
	Kind   string      `if:"label=is_exactly,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*IsExactKindOf)(nil)

func (*IsExactKindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IsExactKindOf_Type,
		Uses: composer.Type_Flow,
		Lede: "kind_of",
	}
}

const IsExactKindOf_Type = "is_exact_kind_of"
const IsExactKindOf_Field_Object = "$OBJECT"
const IsExactKindOf_Field_Kind = "$KIND"

func (op *IsExactKindOf) Marshal(m jsn.Marshaler) error {
	return IsExactKindOf_Marshal(m, op)
}

type IsExactKindOf_Slice []IsExactKindOf

func (op *IsExactKindOf_Slice) GetType() string { return IsExactKindOf_Type }

func (op *IsExactKindOf_Slice) Marshal(m jsn.Marshaler) error {
	return IsExactKindOf_Repeats_Marshal(m, (*[]IsExactKindOf)(op))
}

func (op *IsExactKindOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *IsExactKindOf_Slice) SetSize(cnt int) {
	var els []IsExactKindOf
	if cnt >= 0 {
		els = make(IsExactKindOf_Slice, cnt)
	}
	(*op) = els
}

func (op *IsExactKindOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return IsExactKindOf_Marshal(m, &(*op)[i])
}

func IsExactKindOf_Repeats_Marshal(m jsn.Marshaler, vals *[]IsExactKindOf) error {
	return jsn.RepeatBlock(m, (*IsExactKindOf_Slice)(vals))
}

func IsExactKindOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]IsExactKindOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = IsExactKindOf_Repeats_Marshal(m, pv)
	}
	return
}

type IsExactKindOf_Flow struct{ ptr *IsExactKindOf }

func (n IsExactKindOf_Flow) GetType() string      { return IsExactKindOf_Type }
func (n IsExactKindOf_Flow) GetLede() string      { return "kind_of" }
func (n IsExactKindOf_Flow) GetFlow() interface{} { return n.ptr }
func (n IsExactKindOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*IsExactKindOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func IsExactKindOf_Optional_Marshal(m jsn.Marshaler, pv **IsExactKindOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IsExactKindOf_Marshal(m, *pv)
	} else if !enc {
		var v IsExactKindOf
		if err = IsExactKindOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IsExactKindOf_Marshal(m jsn.Marshaler, val *IsExactKindOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(IsExactKindOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", IsExactKindOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IsExactKindOf_Field_Object))
		}
		e1 := m.MarshalKey("is_exactly", IsExactKindOf_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", IsExactKindOf_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// IsKindOf True if the object is compatible with the named kind.
type IsKindOf struct {
	Object rt.TextEval `if:"label=_"`
	Kind   string      `if:"label=is,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*IsKindOf)(nil)

func (*IsKindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: IsKindOf_Type,
		Uses: composer.Type_Flow,
		Lede: "kind_of",
	}
}

const IsKindOf_Type = "is_kind_of"
const IsKindOf_Field_Object = "$OBJECT"
const IsKindOf_Field_Kind = "$KIND"

func (op *IsKindOf) Marshal(m jsn.Marshaler) error {
	return IsKindOf_Marshal(m, op)
}

type IsKindOf_Slice []IsKindOf

func (op *IsKindOf_Slice) GetType() string { return IsKindOf_Type }

func (op *IsKindOf_Slice) Marshal(m jsn.Marshaler) error {
	return IsKindOf_Repeats_Marshal(m, (*[]IsKindOf)(op))
}

func (op *IsKindOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *IsKindOf_Slice) SetSize(cnt int) {
	var els []IsKindOf
	if cnt >= 0 {
		els = make(IsKindOf_Slice, cnt)
	}
	(*op) = els
}

func (op *IsKindOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return IsKindOf_Marshal(m, &(*op)[i])
}

func IsKindOf_Repeats_Marshal(m jsn.Marshaler, vals *[]IsKindOf) error {
	return jsn.RepeatBlock(m, (*IsKindOf_Slice)(vals))
}

func IsKindOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]IsKindOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = IsKindOf_Repeats_Marshal(m, pv)
	}
	return
}

type IsKindOf_Flow struct{ ptr *IsKindOf }

func (n IsKindOf_Flow) GetType() string      { return IsKindOf_Type }
func (n IsKindOf_Flow) GetLede() string      { return "kind_of" }
func (n IsKindOf_Flow) GetFlow() interface{} { return n.ptr }
func (n IsKindOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*IsKindOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func IsKindOf_Optional_Marshal(m jsn.Marshaler, pv **IsKindOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = IsKindOf_Marshal(m, *pv)
	} else if !enc {
		var v IsKindOf
		if err = IsKindOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func IsKindOf_Marshal(m jsn.Marshaler, val *IsKindOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(IsKindOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", IsKindOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", IsKindOf_Field_Object))
		}
		e1 := m.MarshalKey("is", IsKindOf_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", IsKindOf_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// Join Returns multiple pieces of text as a single new piece of text.
type Join struct {
	Sep    rt.TextEval   `if:"label=_,optional"`
	Parts  []rt.TextEval `if:"label=parts"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Join)(nil)

func (*Join) Compose() composer.Spec {
	return composer.Spec{
		Name: Join_Type,
		Uses: composer.Type_Flow,
	}
}

const Join_Type = "join"
const Join_Field_Sep = "$SEP"
const Join_Field_Parts = "$PARTS"

func (op *Join) Marshal(m jsn.Marshaler) error {
	return Join_Marshal(m, op)
}

type Join_Slice []Join

func (op *Join_Slice) GetType() string { return Join_Type }

func (op *Join_Slice) Marshal(m jsn.Marshaler) error {
	return Join_Repeats_Marshal(m, (*[]Join)(op))
}

func (op *Join_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Join_Slice) SetSize(cnt int) {
	var els []Join
	if cnt >= 0 {
		els = make(Join_Slice, cnt)
	}
	(*op) = els
}

func (op *Join_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Join_Marshal(m, &(*op)[i])
}

func Join_Repeats_Marshal(m jsn.Marshaler, vals *[]Join) error {
	return jsn.RepeatBlock(m, (*Join_Slice)(vals))
}

func Join_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Join) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Join_Repeats_Marshal(m, pv)
	}
	return
}

type Join_Flow struct{ ptr *Join }

func (n Join_Flow) GetType() string      { return Join_Type }
func (n Join_Flow) GetLede() string      { return Join_Type }
func (n Join_Flow) GetFlow() interface{} { return n.ptr }
func (n Join_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Join); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Join_Optional_Marshal(m jsn.Marshaler, pv **Join) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Join_Marshal(m, *pv)
	} else if !enc {
		var v Join
		if err = Join_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Join_Marshal(m jsn.Marshaler, val *Join) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Join_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Join_Field_Sep)
		if e0 == nil {
			e0 = rt.TextEval_Optional_Marshal(m, &val.Sep)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Join_Field_Sep))
		}
		e1 := m.MarshalKey("parts", Join_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Join_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// KindOf Friendly name of the object's kind.
type KindOf struct {
	Object rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*KindOf)(nil)

func (*KindOf) Compose() composer.Spec {
	return composer.Spec{
		Name: KindOf_Type,
		Uses: composer.Type_Flow,
	}
}

const KindOf_Type = "kind_of"
const KindOf_Field_Object = "$OBJECT"

func (op *KindOf) Marshal(m jsn.Marshaler) error {
	return KindOf_Marshal(m, op)
}

type KindOf_Slice []KindOf

func (op *KindOf_Slice) GetType() string { return KindOf_Type }

func (op *KindOf_Slice) Marshal(m jsn.Marshaler) error {
	return KindOf_Repeats_Marshal(m, (*[]KindOf)(op))
}

func (op *KindOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindOf_Slice) SetSize(cnt int) {
	var els []KindOf
	if cnt >= 0 {
		els = make(KindOf_Slice, cnt)
	}
	(*op) = els
}

func (op *KindOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindOf_Marshal(m, &(*op)[i])
}

func KindOf_Repeats_Marshal(m jsn.Marshaler, vals *[]KindOf) error {
	return jsn.RepeatBlock(m, (*KindOf_Slice)(vals))
}

func KindOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = KindOf_Repeats_Marshal(m, pv)
	}
	return
}

type KindOf_Flow struct{ ptr *KindOf }

func (n KindOf_Flow) GetType() string      { return KindOf_Type }
func (n KindOf_Flow) GetLede() string      { return KindOf_Type }
func (n KindOf_Flow) GetFlow() interface{} { return n.ptr }
func (n KindOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindOf_Optional_Marshal(m jsn.Marshaler, pv **KindOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindOf_Marshal(m, *pv)
	} else if !enc {
		var v KindOf
		if err = KindOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindOf_Marshal(m jsn.Marshaler, val *KindOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(KindOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", KindOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindOf_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// KindsOf A list of compatible kinds.
type KindsOf struct {
	Kind   string `if:"label=_,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextListEval = (*KindsOf)(nil)

func (*KindsOf) Compose() composer.Spec {
	return composer.Spec{
		Name: KindsOf_Type,
		Uses: composer.Type_Flow,
	}
}

const KindsOf_Type = "kinds_of"
const KindsOf_Field_Kind = "$KIND"

func (op *KindsOf) Marshal(m jsn.Marshaler) error {
	return KindsOf_Marshal(m, op)
}

type KindsOf_Slice []KindsOf

func (op *KindsOf_Slice) GetType() string { return KindsOf_Type }

func (op *KindsOf_Slice) Marshal(m jsn.Marshaler) error {
	return KindsOf_Repeats_Marshal(m, (*[]KindsOf)(op))
}

func (op *KindsOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindsOf_Slice) SetSize(cnt int) {
	var els []KindsOf
	if cnt >= 0 {
		els = make(KindsOf_Slice, cnt)
	}
	(*op) = els
}

func (op *KindsOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindsOf_Marshal(m, &(*op)[i])
}

func KindsOf_Repeats_Marshal(m jsn.Marshaler, vals *[]KindsOf) error {
	return jsn.RepeatBlock(m, (*KindsOf_Slice)(vals))
}

func KindsOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindsOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = KindsOf_Repeats_Marshal(m, pv)
	}
	return
}

type KindsOf_Flow struct{ ptr *KindsOf }

func (n KindsOf_Flow) GetType() string      { return KindsOf_Type }
func (n KindsOf_Flow) GetLede() string      { return KindsOf_Type }
func (n KindsOf_Flow) GetFlow() interface{} { return n.ptr }
func (n KindsOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindsOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindsOf_Optional_Marshal(m jsn.Marshaler, pv **KindsOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindsOf_Marshal(m, *pv)
	} else if !enc {
		var v KindsOf
		if err = KindsOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindsOf_Marshal(m jsn.Marshaler, val *KindsOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(KindsOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", KindsOf_Field_Kind)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindsOf_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// MakeLowercase Returns new text, with every letter turned into lowercase. For example, 'shout' from 'SHOUT'.
type MakeLowercase struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeLowercase)(nil)

func (*MakeLowercase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeLowercase_Type,
		Uses: composer.Type_Flow,
		Lede: "lower",
	}
}

const MakeLowercase_Type = "make_lowercase"
const MakeLowercase_Field_Text = "$TEXT"

func (op *MakeLowercase) Marshal(m jsn.Marshaler) error {
	return MakeLowercase_Marshal(m, op)
}

type MakeLowercase_Slice []MakeLowercase

func (op *MakeLowercase_Slice) GetType() string { return MakeLowercase_Type }

func (op *MakeLowercase_Slice) Marshal(m jsn.Marshaler) error {
	return MakeLowercase_Repeats_Marshal(m, (*[]MakeLowercase)(op))
}

func (op *MakeLowercase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeLowercase_Slice) SetSize(cnt int) {
	var els []MakeLowercase
	if cnt >= 0 {
		els = make(MakeLowercase_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeLowercase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeLowercase_Marshal(m, &(*op)[i])
}

func MakeLowercase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeLowercase) error {
	return jsn.RepeatBlock(m, (*MakeLowercase_Slice)(vals))
}

func MakeLowercase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeLowercase) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeLowercase_Repeats_Marshal(m, pv)
	}
	return
}

type MakeLowercase_Flow struct{ ptr *MakeLowercase }

func (n MakeLowercase_Flow) GetType() string      { return MakeLowercase_Type }
func (n MakeLowercase_Flow) GetLede() string      { return "lower" }
func (n MakeLowercase_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeLowercase_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeLowercase); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeLowercase_Optional_Marshal(m jsn.Marshaler, pv **MakeLowercase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeLowercase_Marshal(m, *pv)
	} else if !enc {
		var v MakeLowercase
		if err = MakeLowercase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeLowercase_Marshal(m jsn.Marshaler, val *MakeLowercase) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeLowercase_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakeLowercase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeLowercase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeReversed Returns new text flipped back to front. For example, 'elppA' from 'Apple', or 'noon' from 'noon'.
type MakeReversed struct {
	Text   rt.TextEval `if:"label=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeReversed)(nil)

func (*MakeReversed) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeReversed_Type,
		Uses: composer.Type_Flow,
		Lede: "reverse",
	}
}

const MakeReversed_Type = "make_reversed"
const MakeReversed_Field_Text = "$TEXT"

func (op *MakeReversed) Marshal(m jsn.Marshaler) error {
	return MakeReversed_Marshal(m, op)
}

type MakeReversed_Slice []MakeReversed

func (op *MakeReversed_Slice) GetType() string { return MakeReversed_Type }

func (op *MakeReversed_Slice) Marshal(m jsn.Marshaler) error {
	return MakeReversed_Repeats_Marshal(m, (*[]MakeReversed)(op))
}

func (op *MakeReversed_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeReversed_Slice) SetSize(cnt int) {
	var els []MakeReversed
	if cnt >= 0 {
		els = make(MakeReversed_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeReversed_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeReversed_Marshal(m, &(*op)[i])
}

func MakeReversed_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeReversed) error {
	return jsn.RepeatBlock(m, (*MakeReversed_Slice)(vals))
}

func MakeReversed_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeReversed) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeReversed_Repeats_Marshal(m, pv)
	}
	return
}

type MakeReversed_Flow struct{ ptr *MakeReversed }

func (n MakeReversed_Flow) GetType() string      { return MakeReversed_Type }
func (n MakeReversed_Flow) GetLede() string      { return "reverse" }
func (n MakeReversed_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeReversed_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeReversed); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeReversed_Optional_Marshal(m jsn.Marshaler, pv **MakeReversed) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeReversed_Marshal(m, *pv)
	} else if !enc {
		var v MakeReversed
		if err = MakeReversed_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeReversed_Marshal(m jsn.Marshaler, val *MakeReversed) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeReversed_Flow{val}); err == nil {
		e0 := m.MarshalKey("text", MakeReversed_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeReversed_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeSentenceCase Returns new text, start each sentence with a capital letter. For example, 'Empire Apple.' from 'Empire apple.'.
type MakeSentenceCase struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeSentenceCase)(nil)

func (*MakeSentenceCase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeSentenceCase_Type,
		Uses: composer.Type_Flow,
		Lede: "sentence",
	}
}

const MakeSentenceCase_Type = "make_sentence_case"
const MakeSentenceCase_Field_Text = "$TEXT"

func (op *MakeSentenceCase) Marshal(m jsn.Marshaler) error {
	return MakeSentenceCase_Marshal(m, op)
}

type MakeSentenceCase_Slice []MakeSentenceCase

func (op *MakeSentenceCase_Slice) GetType() string { return MakeSentenceCase_Type }

func (op *MakeSentenceCase_Slice) Marshal(m jsn.Marshaler) error {
	return MakeSentenceCase_Repeats_Marshal(m, (*[]MakeSentenceCase)(op))
}

func (op *MakeSentenceCase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeSentenceCase_Slice) SetSize(cnt int) {
	var els []MakeSentenceCase
	if cnt >= 0 {
		els = make(MakeSentenceCase_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeSentenceCase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeSentenceCase_Marshal(m, &(*op)[i])
}

func MakeSentenceCase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeSentenceCase) error {
	return jsn.RepeatBlock(m, (*MakeSentenceCase_Slice)(vals))
}

func MakeSentenceCase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeSentenceCase) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeSentenceCase_Repeats_Marshal(m, pv)
	}
	return
}

type MakeSentenceCase_Flow struct{ ptr *MakeSentenceCase }

func (n MakeSentenceCase_Flow) GetType() string      { return MakeSentenceCase_Type }
func (n MakeSentenceCase_Flow) GetLede() string      { return "sentence" }
func (n MakeSentenceCase_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeSentenceCase_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeSentenceCase); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeSentenceCase_Optional_Marshal(m jsn.Marshaler, pv **MakeSentenceCase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeSentenceCase_Marshal(m, *pv)
	} else if !enc {
		var v MakeSentenceCase
		if err = MakeSentenceCase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeSentenceCase_Marshal(m jsn.Marshaler, val *MakeSentenceCase) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeSentenceCase_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakeSentenceCase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeSentenceCase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeTitleCase Returns new text, starting each word with a capital letter. For example, 'Empire Apple' from 'empire apple'.
type MakeTitleCase struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeTitleCase)(nil)

func (*MakeTitleCase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeTitleCase_Type,
		Uses: composer.Type_Flow,
		Lede: "title",
	}
}

const MakeTitleCase_Type = "make_title_case"
const MakeTitleCase_Field_Text = "$TEXT"

func (op *MakeTitleCase) Marshal(m jsn.Marshaler) error {
	return MakeTitleCase_Marshal(m, op)
}

type MakeTitleCase_Slice []MakeTitleCase

func (op *MakeTitleCase_Slice) GetType() string { return MakeTitleCase_Type }

func (op *MakeTitleCase_Slice) Marshal(m jsn.Marshaler) error {
	return MakeTitleCase_Repeats_Marshal(m, (*[]MakeTitleCase)(op))
}

func (op *MakeTitleCase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeTitleCase_Slice) SetSize(cnt int) {
	var els []MakeTitleCase
	if cnt >= 0 {
		els = make(MakeTitleCase_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeTitleCase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeTitleCase_Marshal(m, &(*op)[i])
}

func MakeTitleCase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeTitleCase) error {
	return jsn.RepeatBlock(m, (*MakeTitleCase_Slice)(vals))
}

func MakeTitleCase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeTitleCase) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeTitleCase_Repeats_Marshal(m, pv)
	}
	return
}

type MakeTitleCase_Flow struct{ ptr *MakeTitleCase }

func (n MakeTitleCase_Flow) GetType() string      { return MakeTitleCase_Type }
func (n MakeTitleCase_Flow) GetLede() string      { return "title" }
func (n MakeTitleCase_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeTitleCase_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeTitleCase); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeTitleCase_Optional_Marshal(m jsn.Marshaler, pv **MakeTitleCase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeTitleCase_Marshal(m, *pv)
	} else if !enc {
		var v MakeTitleCase
		if err = MakeTitleCase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeTitleCase_Marshal(m jsn.Marshaler, val *MakeTitleCase) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeTitleCase_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakeTitleCase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeTitleCase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// MakeUppercase Returns new text, with every letter turned into uppercase. For example, 'APPLE' from 'apple'.
type MakeUppercase struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*MakeUppercase)(nil)

func (*MakeUppercase) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeUppercase_Type,
		Uses: composer.Type_Flow,
		Lede: "upper",
	}
}

const MakeUppercase_Type = "make_uppercase"
const MakeUppercase_Field_Text = "$TEXT"

func (op *MakeUppercase) Marshal(m jsn.Marshaler) error {
	return MakeUppercase_Marshal(m, op)
}

type MakeUppercase_Slice []MakeUppercase

func (op *MakeUppercase_Slice) GetType() string { return MakeUppercase_Type }

func (op *MakeUppercase_Slice) Marshal(m jsn.Marshaler) error {
	return MakeUppercase_Repeats_Marshal(m, (*[]MakeUppercase)(op))
}

func (op *MakeUppercase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeUppercase_Slice) SetSize(cnt int) {
	var els []MakeUppercase
	if cnt >= 0 {
		els = make(MakeUppercase_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeUppercase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeUppercase_Marshal(m, &(*op)[i])
}

func MakeUppercase_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeUppercase) error {
	return jsn.RepeatBlock(m, (*MakeUppercase_Slice)(vals))
}

func MakeUppercase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeUppercase) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeUppercase_Repeats_Marshal(m, pv)
	}
	return
}

type MakeUppercase_Flow struct{ ptr *MakeUppercase }

func (n MakeUppercase_Flow) GetType() string      { return MakeUppercase_Type }
func (n MakeUppercase_Flow) GetLede() string      { return "upper" }
func (n MakeUppercase_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeUppercase_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeUppercase); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeUppercase_Optional_Marshal(m jsn.Marshaler, pv **MakeUppercase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeUppercase_Marshal(m, *pv)
	} else if !enc {
		var v MakeUppercase
		if err = MakeUppercase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeUppercase_Marshal(m jsn.Marshaler, val *MakeUppercase) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeUppercase_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakeUppercase_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeUppercase_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// Matches Determine whether the specified text is similar to the specified regular expression.
type Matches struct {
	Text    rt.TextEval `if:"label=_"`
	Pattern string      `if:"label=to,type=text"`
	Cache   MatchCache  `if:"internal"`
	Markup  map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Matches)(nil)

func (*Matches) Compose() composer.Spec {
	return composer.Spec{
		Name: Matches_Type,
		Uses: composer.Type_Flow,
	}
}

const Matches_Type = "matches"
const Matches_Field_Text = "$TEXT"
const Matches_Field_Pattern = "$PATTERN"

func (op *Matches) Marshal(m jsn.Marshaler) error {
	return Matches_Marshal(m, op)
}

type Matches_Slice []Matches

func (op *Matches_Slice) GetType() string { return Matches_Type }

func (op *Matches_Slice) Marshal(m jsn.Marshaler) error {
	return Matches_Repeats_Marshal(m, (*[]Matches)(op))
}

func (op *Matches_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Matches_Slice) SetSize(cnt int) {
	var els []Matches
	if cnt >= 0 {
		els = make(Matches_Slice, cnt)
	}
	(*op) = els
}

func (op *Matches_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Matches_Marshal(m, &(*op)[i])
}

func Matches_Repeats_Marshal(m jsn.Marshaler, vals *[]Matches) error {
	return jsn.RepeatBlock(m, (*Matches_Slice)(vals))
}

func Matches_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Matches) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Matches_Repeats_Marshal(m, pv)
	}
	return
}

type Matches_Flow struct{ ptr *Matches }

func (n Matches_Flow) GetType() string      { return Matches_Type }
func (n Matches_Flow) GetLede() string      { return Matches_Type }
func (n Matches_Flow) GetFlow() interface{} { return n.ptr }
func (n Matches_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Matches); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Matches_Optional_Marshal(m jsn.Marshaler, pv **Matches) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Matches_Marshal(m, *pv)
	} else if !enc {
		var v Matches
		if err = Matches_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Matches_Marshal(m jsn.Marshaler, val *Matches) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Matches_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Matches_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Matches_Field_Text))
		}
		e1 := m.MarshalKey("to", Matches_Field_Pattern)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Marshal(m, &val.Pattern)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Matches_Field_Pattern))
		}
		m.EndBlock()
	}
	return
}

// NameOf Full name of the object.
type NameOf struct {
	Object rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*NameOf)(nil)

func (*NameOf) Compose() composer.Spec {
	return composer.Spec{
		Name: NameOf_Type,
		Uses: composer.Type_Flow,
	}
}

const NameOf_Type = "name_of"
const NameOf_Field_Object = "$OBJECT"

func (op *NameOf) Marshal(m jsn.Marshaler) error {
	return NameOf_Marshal(m, op)
}

type NameOf_Slice []NameOf

func (op *NameOf_Slice) GetType() string { return NameOf_Type }

func (op *NameOf_Slice) Marshal(m jsn.Marshaler) error {
	return NameOf_Repeats_Marshal(m, (*[]NameOf)(op))
}

func (op *NameOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NameOf_Slice) SetSize(cnt int) {
	var els []NameOf
	if cnt >= 0 {
		els = make(NameOf_Slice, cnt)
	}
	(*op) = els
}

func (op *NameOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NameOf_Marshal(m, &(*op)[i])
}

func NameOf_Repeats_Marshal(m jsn.Marshaler, vals *[]NameOf) error {
	return jsn.RepeatBlock(m, (*NameOf_Slice)(vals))
}

func NameOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NameOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NameOf_Repeats_Marshal(m, pv)
	}
	return
}

type NameOf_Flow struct{ ptr *NameOf }

func (n NameOf_Flow) GetType() string      { return NameOf_Type }
func (n NameOf_Flow) GetLede() string      { return NameOf_Type }
func (n NameOf_Flow) GetFlow() interface{} { return n.ptr }
func (n NameOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NameOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NameOf_Optional_Marshal(m jsn.Marshaler, pv **NameOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NameOf_Marshal(m, *pv)
	} else if !enc {
		var v NameOf
		if err = NameOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NameOf_Marshal(m jsn.Marshaler, val *NameOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(NameOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NameOf_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NameOf_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// Never Returns false.
type Never struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Never)(nil)

func (*Never) Compose() composer.Spec {
	return composer.Spec{
		Name: Never_Type,
		Uses: composer.Type_Flow,
	}
}

const Never_Type = "never"

func (op *Never) Marshal(m jsn.Marshaler) error {
	return Never_Marshal(m, op)
}

type Never_Slice []Never

func (op *Never_Slice) GetType() string { return Never_Type }

func (op *Never_Slice) Marshal(m jsn.Marshaler) error {
	return Never_Repeats_Marshal(m, (*[]Never)(op))
}

func (op *Never_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Never_Slice) SetSize(cnt int) {
	var els []Never
	if cnt >= 0 {
		els = make(Never_Slice, cnt)
	}
	(*op) = els
}

func (op *Never_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Never_Marshal(m, &(*op)[i])
}

func Never_Repeats_Marshal(m jsn.Marshaler, vals *[]Never) error {
	return jsn.RepeatBlock(m, (*Never_Slice)(vals))
}

func Never_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Never) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Never_Repeats_Marshal(m, pv)
	}
	return
}

type Never_Flow struct{ ptr *Never }

func (n Never_Flow) GetType() string      { return Never_Type }
func (n Never_Flow) GetLede() string      { return Never_Type }
func (n Never_Flow) GetFlow() interface{} { return n.ptr }
func (n Never_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Never); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Never_Optional_Marshal(m jsn.Marshaler, pv **Never) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Never_Marshal(m, *pv)
	} else if !enc {
		var v Never
		if err = Never_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Never_Marshal(m jsn.Marshaler, val *Never) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Never_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// Newline Start a new line.
type Newline struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Newline)(nil)

func (*Newline) Compose() composer.Spec {
	return composer.Spec{
		Name: Newline_Type,
		Uses: composer.Type_Flow,
		Lede: "br",
	}
}

const Newline_Type = "newline"

func (op *Newline) Marshal(m jsn.Marshaler) error {
	return Newline_Marshal(m, op)
}

type Newline_Slice []Newline

func (op *Newline_Slice) GetType() string { return Newline_Type }

func (op *Newline_Slice) Marshal(m jsn.Marshaler) error {
	return Newline_Repeats_Marshal(m, (*[]Newline)(op))
}

func (op *Newline_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Newline_Slice) SetSize(cnt int) {
	var els []Newline
	if cnt >= 0 {
		els = make(Newline_Slice, cnt)
	}
	(*op) = els
}

func (op *Newline_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Newline_Marshal(m, &(*op)[i])
}

func Newline_Repeats_Marshal(m jsn.Marshaler, vals *[]Newline) error {
	return jsn.RepeatBlock(m, (*Newline_Slice)(vals))
}

func Newline_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Newline) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Newline_Repeats_Marshal(m, pv)
	}
	return
}

type Newline_Flow struct{ ptr *Newline }

func (n Newline_Flow) GetType() string      { return Newline_Type }
func (n Newline_Flow) GetLede() string      { return "br" }
func (n Newline_Flow) GetFlow() interface{} { return n.ptr }
func (n Newline_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Newline); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Newline_Optional_Marshal(m jsn.Marshaler, pv **Newline) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Newline_Marshal(m, *pv)
	} else if !enc {
		var v Newline
		if err = Newline_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Newline_Marshal(m jsn.Marshaler, val *Newline) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Newline_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// Next In a repeating loop, try the next iteration of the loop.
type Next struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Next)(nil)

func (*Next) Compose() composer.Spec {
	return composer.Spec{
		Name: Next_Type,
		Uses: composer.Type_Flow,
	}
}

const Next_Type = "next"

func (op *Next) Marshal(m jsn.Marshaler) error {
	return Next_Marshal(m, op)
}

type Next_Slice []Next

func (op *Next_Slice) GetType() string { return Next_Type }

func (op *Next_Slice) Marshal(m jsn.Marshaler) error {
	return Next_Repeats_Marshal(m, (*[]Next)(op))
}

func (op *Next_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Next_Slice) SetSize(cnt int) {
	var els []Next
	if cnt >= 0 {
		els = make(Next_Slice, cnt)
	}
	(*op) = els
}

func (op *Next_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Next_Marshal(m, &(*op)[i])
}

func Next_Repeats_Marshal(m jsn.Marshaler, vals *[]Next) error {
	return jsn.RepeatBlock(m, (*Next_Slice)(vals))
}

func Next_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Next) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Next_Repeats_Marshal(m, pv)
	}
	return
}

type Next_Flow struct{ ptr *Next }

func (n Next_Flow) GetType() string      { return Next_Type }
func (n Next_Flow) GetLede() string      { return Next_Type }
func (n Next_Flow) GetFlow() interface{} { return n.ptr }
func (n Next_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Next); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Next_Optional_Marshal(m jsn.Marshaler, pv **Next) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Next_Marshal(m, *pv)
	} else if !enc {
		var v Next
		if err = Next_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Next_Marshal(m jsn.Marshaler, val *Next) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Next_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// Not Returns the opposite value.
type Not struct {
	Test   rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*Not)(nil)

func (*Not) Compose() composer.Spec {
	return composer.Spec{
		Name: Not_Type,
		Uses: composer.Type_Flow,
	}
}

const Not_Type = "not"
const Not_Field_Test = "$TEST"

func (op *Not) Marshal(m jsn.Marshaler) error {
	return Not_Marshal(m, op)
}

type Not_Slice []Not

func (op *Not_Slice) GetType() string { return Not_Type }

func (op *Not_Slice) Marshal(m jsn.Marshaler) error {
	return Not_Repeats_Marshal(m, (*[]Not)(op))
}

func (op *Not_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Not_Slice) SetSize(cnt int) {
	var els []Not
	if cnt >= 0 {
		els = make(Not_Slice, cnt)
	}
	(*op) = els
}

func (op *Not_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Not_Marshal(m, &(*op)[i])
}

func Not_Repeats_Marshal(m jsn.Marshaler, vals *[]Not) error {
	return jsn.RepeatBlock(m, (*Not_Slice)(vals))
}

func Not_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Not) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Not_Repeats_Marshal(m, pv)
	}
	return
}

type Not_Flow struct{ ptr *Not }

func (n Not_Flow) GetType() string      { return Not_Type }
func (n Not_Flow) GetLede() string      { return Not_Type }
func (n Not_Flow) GetFlow() interface{} { return n.ptr }
func (n Not_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Not); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Not_Optional_Marshal(m jsn.Marshaler, pv **Not) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Not_Marshal(m, *pv)
	} else if !enc {
		var v Not
		if err = Not_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Not_Marshal(m jsn.Marshaler, val *Not) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Not_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Not_Field_Test)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Test)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Not_Field_Test))
		}
		m.EndBlock()
	}
	return
}

// ObjectExists Returns whether there is a object of the specified name.
type ObjectExists struct {
	Object rt.TextEval `if:"label=valid"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*ObjectExists)(nil)

func (*ObjectExists) Compose() composer.Spec {
	return composer.Spec{
		Name: ObjectExists_Type,
		Uses: composer.Type_Flow,
		Lede: "is",
	}
}

const ObjectExists_Type = "object_exists"
const ObjectExists_Field_Object = "$OBJECT"

func (op *ObjectExists) Marshal(m jsn.Marshaler) error {
	return ObjectExists_Marshal(m, op)
}

type ObjectExists_Slice []ObjectExists

func (op *ObjectExists_Slice) GetType() string { return ObjectExists_Type }

func (op *ObjectExists_Slice) Marshal(m jsn.Marshaler) error {
	return ObjectExists_Repeats_Marshal(m, (*[]ObjectExists)(op))
}

func (op *ObjectExists_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ObjectExists_Slice) SetSize(cnt int) {
	var els []ObjectExists
	if cnt >= 0 {
		els = make(ObjectExists_Slice, cnt)
	}
	(*op) = els
}

func (op *ObjectExists_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ObjectExists_Marshal(m, &(*op)[i])
}

func ObjectExists_Repeats_Marshal(m jsn.Marshaler, vals *[]ObjectExists) error {
	return jsn.RepeatBlock(m, (*ObjectExists_Slice)(vals))
}

func ObjectExists_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ObjectExists) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ObjectExists_Repeats_Marshal(m, pv)
	}
	return
}

type ObjectExists_Flow struct{ ptr *ObjectExists }

func (n ObjectExists_Flow) GetType() string      { return ObjectExists_Type }
func (n ObjectExists_Flow) GetLede() string      { return "is" }
func (n ObjectExists_Flow) GetFlow() interface{} { return n.ptr }
func (n ObjectExists_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ObjectExists); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ObjectExists_Optional_Marshal(m jsn.Marshaler, pv **ObjectExists) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ObjectExists_Marshal(m, *pv)
	} else if !enc {
		var v ObjectExists
		if err = ObjectExists_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ObjectExists_Marshal(m jsn.Marshaler, val *ObjectExists) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ObjectExists_Flow{val}); err == nil {
		e0 := m.MarshalKey("valid", ObjectExists_Field_Object)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Object)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ObjectExists_Field_Object))
		}
		m.EndBlock()
	}
	return
}

// ObjectRef
type ObjectRef struct {
	Name   rt.TextEval `if:"label=_"`
	Field  rt.TextEval `if:"label=field"`
	Dot    []Dot       `if:"label=dot,optional"`
	Markup map[string]any
}

func (*ObjectRef) Compose() composer.Spec {
	return composer.Spec{
		Name: ObjectRef_Type,
		Uses: composer.Type_Flow,
		Lede: "object",
	}
}

const ObjectRef_Type = "object_ref"
const ObjectRef_Field_Name = "$NAME"
const ObjectRef_Field_Field = "$FIELD"
const ObjectRef_Field_Dot = "$DOT"

func (op *ObjectRef) Marshal(m jsn.Marshaler) error {
	return ObjectRef_Marshal(m, op)
}

type ObjectRef_Slice []ObjectRef

func (op *ObjectRef_Slice) GetType() string { return ObjectRef_Type }

func (op *ObjectRef_Slice) Marshal(m jsn.Marshaler) error {
	return ObjectRef_Repeats_Marshal(m, (*[]ObjectRef)(op))
}

func (op *ObjectRef_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ObjectRef_Slice) SetSize(cnt int) {
	var els []ObjectRef
	if cnt >= 0 {
		els = make(ObjectRef_Slice, cnt)
	}
	(*op) = els
}

func (op *ObjectRef_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ObjectRef_Marshal(m, &(*op)[i])
}

func ObjectRef_Repeats_Marshal(m jsn.Marshaler, vals *[]ObjectRef) error {
	return jsn.RepeatBlock(m, (*ObjectRef_Slice)(vals))
}

func ObjectRef_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ObjectRef) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ObjectRef_Repeats_Marshal(m, pv)
	}
	return
}

type ObjectRef_Flow struct{ ptr *ObjectRef }

func (n ObjectRef_Flow) GetType() string      { return ObjectRef_Type }
func (n ObjectRef_Flow) GetLede() string      { return "object" }
func (n ObjectRef_Flow) GetFlow() interface{} { return n.ptr }
func (n ObjectRef_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ObjectRef); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ObjectRef_Optional_Marshal(m jsn.Marshaler, pv **ObjectRef) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ObjectRef_Marshal(m, *pv)
	} else if !enc {
		var v ObjectRef
		if err = ObjectRef_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ObjectRef_Marshal(m jsn.Marshaler, val *ObjectRef) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ObjectRef_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ObjectRef_Field_Name)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ObjectRef_Field_Name))
		}
		e1 := m.MarshalKey("field", ObjectRef_Field_Field)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Field)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ObjectRef_Field_Field))
		}
		e2 := m.MarshalKey("dot", ObjectRef_Field_Dot)
		if e2 == nil {
			e2 = Dot_Optional_Repeats_Marshal(m, &val.Dot)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ObjectRef_Field_Dot))
		}
		m.EndBlock()
	}
	return
}

// PatternName requires a user-specified string.
type PatternName struct {
	Str string
}

func (op *PatternName) String() string {
	return op.Str
}

func (*PatternName) Compose() composer.Spec {
	return composer.Spec{
		Name:        PatternName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const PatternName_Type = "pattern_name"

func (op *PatternName) Marshal(m jsn.Marshaler) error {
	return PatternName_Marshal(m, op)
}

func PatternName_Optional_Marshal(m jsn.Marshaler, val *PatternName) (err error) {
	var zero PatternName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = PatternName_Marshal(m, val)
	}
	return
}

func PatternName_Marshal(m jsn.Marshaler, val *PatternName) (err error) {
	return m.MarshalValue(PatternName_Type, &val.Str)
}

type PatternName_Slice []PatternName

func (op *PatternName_Slice) GetType() string { return PatternName_Type }

func (op *PatternName_Slice) Marshal(m jsn.Marshaler) error {
	return PatternName_Repeats_Marshal(m, (*[]PatternName)(op))
}

func (op *PatternName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternName_Slice) SetSize(cnt int) {
	var els []PatternName
	if cnt >= 0 {
		els = make(PatternName_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternName_Marshal(m, &(*op)[i])
}

func PatternName_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternName) error {
	return jsn.RepeatBlock(m, (*PatternName_Slice)(vals))
}

func PatternName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternName) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PatternName_Repeats_Marshal(m, pv)
	}
	return
}

// Pluralize Returns the plural form of a singular word. (ex. apples for apple. ).
type Pluralize struct {
	Text   rt.TextEval `if:"label=of"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Pluralize)(nil)

func (*Pluralize) Compose() composer.Spec {
	return composer.Spec{
		Name: Pluralize_Type,
		Uses: composer.Type_Flow,
		Lede: "plural",
	}
}

const Pluralize_Type = "pluralize"
const Pluralize_Field_Text = "$TEXT"

func (op *Pluralize) Marshal(m jsn.Marshaler) error {
	return Pluralize_Marshal(m, op)
}

type Pluralize_Slice []Pluralize

func (op *Pluralize_Slice) GetType() string { return Pluralize_Type }

func (op *Pluralize_Slice) Marshal(m jsn.Marshaler) error {
	return Pluralize_Repeats_Marshal(m, (*[]Pluralize)(op))
}

func (op *Pluralize_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Pluralize_Slice) SetSize(cnt int) {
	var els []Pluralize
	if cnt >= 0 {
		els = make(Pluralize_Slice, cnt)
	}
	(*op) = els
}

func (op *Pluralize_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Pluralize_Marshal(m, &(*op)[i])
}

func Pluralize_Repeats_Marshal(m jsn.Marshaler, vals *[]Pluralize) error {
	return jsn.RepeatBlock(m, (*Pluralize_Slice)(vals))
}

func Pluralize_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Pluralize) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Pluralize_Repeats_Marshal(m, pv)
	}
	return
}

type Pluralize_Flow struct{ ptr *Pluralize }

func (n Pluralize_Flow) GetType() string      { return Pluralize_Type }
func (n Pluralize_Flow) GetLede() string      { return "plural" }
func (n Pluralize_Flow) GetFlow() interface{} { return n.ptr }
func (n Pluralize_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Pluralize); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Pluralize_Optional_Marshal(m jsn.Marshaler, pv **Pluralize) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Pluralize_Marshal(m, *pv)
	} else if !enc {
		var v Pluralize
		if err = Pluralize_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Pluralize_Marshal(m jsn.Marshaler, val *Pluralize) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Pluralize_Flow{val}); err == nil {
		e0 := m.MarshalKey("of", Pluralize_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Pluralize_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// PrintNum Writes a number using numerals, eg. '1'.
type PrintNum struct {
	Num    rt.NumberEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*PrintNum)(nil)

func (*PrintNum) Compose() composer.Spec {
	return composer.Spec{
		Name: PrintNum_Type,
		Uses: composer.Type_Flow,
		Lede: "numeral",
	}
}

const PrintNum_Type = "print_num"
const PrintNum_Field_Num = "$NUM"

func (op *PrintNum) Marshal(m jsn.Marshaler) error {
	return PrintNum_Marshal(m, op)
}

type PrintNum_Slice []PrintNum

func (op *PrintNum_Slice) GetType() string { return PrintNum_Type }

func (op *PrintNum_Slice) Marshal(m jsn.Marshaler) error {
	return PrintNum_Repeats_Marshal(m, (*[]PrintNum)(op))
}

func (op *PrintNum_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PrintNum_Slice) SetSize(cnt int) {
	var els []PrintNum
	if cnt >= 0 {
		els = make(PrintNum_Slice, cnt)
	}
	(*op) = els
}

func (op *PrintNum_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PrintNum_Marshal(m, &(*op)[i])
}

func PrintNum_Repeats_Marshal(m jsn.Marshaler, vals *[]PrintNum) error {
	return jsn.RepeatBlock(m, (*PrintNum_Slice)(vals))
}

func PrintNum_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PrintNum) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PrintNum_Repeats_Marshal(m, pv)
	}
	return
}

type PrintNum_Flow struct{ ptr *PrintNum }

func (n PrintNum_Flow) GetType() string      { return PrintNum_Type }
func (n PrintNum_Flow) GetLede() string      { return "numeral" }
func (n PrintNum_Flow) GetFlow() interface{} { return n.ptr }
func (n PrintNum_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PrintNum); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PrintNum_Optional_Marshal(m jsn.Marshaler, pv **PrintNum) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PrintNum_Marshal(m, *pv)
	} else if !enc {
		var v PrintNum
		if err = PrintNum_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PrintNum_Marshal(m jsn.Marshaler, val *PrintNum) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PrintNum_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PrintNum_Field_Num)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PrintNum_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// PrintNumWord Writes a number in plain english: eg. 'one'.
type PrintNumWord struct {
	Num    rt.NumberEval `if:"label=words"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*PrintNumWord)(nil)

func (*PrintNumWord) Compose() composer.Spec {
	return composer.Spec{
		Name: PrintNumWord_Type,
		Uses: composer.Type_Flow,
		Lede: "numeral",
	}
}

const PrintNumWord_Type = "print_num_word"
const PrintNumWord_Field_Num = "$NUM"

func (op *PrintNumWord) Marshal(m jsn.Marshaler) error {
	return PrintNumWord_Marshal(m, op)
}

type PrintNumWord_Slice []PrintNumWord

func (op *PrintNumWord_Slice) GetType() string { return PrintNumWord_Type }

func (op *PrintNumWord_Slice) Marshal(m jsn.Marshaler) error {
	return PrintNumWord_Repeats_Marshal(m, (*[]PrintNumWord)(op))
}

func (op *PrintNumWord_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PrintNumWord_Slice) SetSize(cnt int) {
	var els []PrintNumWord
	if cnt >= 0 {
		els = make(PrintNumWord_Slice, cnt)
	}
	(*op) = els
}

func (op *PrintNumWord_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PrintNumWord_Marshal(m, &(*op)[i])
}

func PrintNumWord_Repeats_Marshal(m jsn.Marshaler, vals *[]PrintNumWord) error {
	return jsn.RepeatBlock(m, (*PrintNumWord_Slice)(vals))
}

func PrintNumWord_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PrintNumWord) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PrintNumWord_Repeats_Marshal(m, pv)
	}
	return
}

type PrintNumWord_Flow struct{ ptr *PrintNumWord }

func (n PrintNumWord_Flow) GetType() string      { return PrintNumWord_Type }
func (n PrintNumWord_Flow) GetLede() string      { return "numeral" }
func (n PrintNumWord_Flow) GetFlow() interface{} { return n.ptr }
func (n PrintNumWord_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PrintNumWord); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PrintNumWord_Optional_Marshal(m jsn.Marshaler, pv **PrintNumWord) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PrintNumWord_Marshal(m, *pv)
	} else if !enc {
		var v PrintNumWord
		if err = PrintNumWord_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PrintNumWord_Marshal(m jsn.Marshaler, val *PrintNumWord) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PrintNumWord_Flow{val}); err == nil {
		e0 := m.MarshalKey("words", PrintNumWord_Field_Num)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PrintNumWord_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// ProductOf Multiply two numbers.
type ProductOf struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=by"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*ProductOf)(nil)

func (*ProductOf) Compose() composer.Spec {
	return composer.Spec{
		Name: ProductOf_Type,
		Uses: composer.Type_Flow,
		Lede: "mul",
	}
}

const ProductOf_Type = "product_of"
const ProductOf_Field_A = "$A"
const ProductOf_Field_B = "$B"

func (op *ProductOf) Marshal(m jsn.Marshaler) error {
	return ProductOf_Marshal(m, op)
}

type ProductOf_Slice []ProductOf

func (op *ProductOf_Slice) GetType() string { return ProductOf_Type }

func (op *ProductOf_Slice) Marshal(m jsn.Marshaler) error {
	return ProductOf_Repeats_Marshal(m, (*[]ProductOf)(op))
}

func (op *ProductOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ProductOf_Slice) SetSize(cnt int) {
	var els []ProductOf
	if cnt >= 0 {
		els = make(ProductOf_Slice, cnt)
	}
	(*op) = els
}

func (op *ProductOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ProductOf_Marshal(m, &(*op)[i])
}

func ProductOf_Repeats_Marshal(m jsn.Marshaler, vals *[]ProductOf) error {
	return jsn.RepeatBlock(m, (*ProductOf_Slice)(vals))
}

func ProductOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ProductOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ProductOf_Repeats_Marshal(m, pv)
	}
	return
}

type ProductOf_Flow struct{ ptr *ProductOf }

func (n ProductOf_Flow) GetType() string      { return ProductOf_Type }
func (n ProductOf_Flow) GetLede() string      { return "mul" }
func (n ProductOf_Flow) GetFlow() interface{} { return n.ptr }
func (n ProductOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ProductOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ProductOf_Optional_Marshal(m jsn.Marshaler, pv **ProductOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ProductOf_Marshal(m, *pv)
	} else if !enc {
		var v ProductOf
		if err = ProductOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ProductOf_Marshal(m jsn.Marshaler, val *ProductOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ProductOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ProductOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ProductOf_Field_A))
		}
		e1 := m.MarshalKey("by", ProductOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ProductOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

// QuotientOf Divide one number by another.
type QuotientOf struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=by"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*QuotientOf)(nil)

func (*QuotientOf) Compose() composer.Spec {
	return composer.Spec{
		Name: QuotientOf_Type,
		Uses: composer.Type_Flow,
		Lede: "div",
	}
}

const QuotientOf_Type = "quotient_of"
const QuotientOf_Field_A = "$A"
const QuotientOf_Field_B = "$B"

func (op *QuotientOf) Marshal(m jsn.Marshaler) error {
	return QuotientOf_Marshal(m, op)
}

type QuotientOf_Slice []QuotientOf

func (op *QuotientOf_Slice) GetType() string { return QuotientOf_Type }

func (op *QuotientOf_Slice) Marshal(m jsn.Marshaler) error {
	return QuotientOf_Repeats_Marshal(m, (*[]QuotientOf)(op))
}

func (op *QuotientOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *QuotientOf_Slice) SetSize(cnt int) {
	var els []QuotientOf
	if cnt >= 0 {
		els = make(QuotientOf_Slice, cnt)
	}
	(*op) = els
}

func (op *QuotientOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return QuotientOf_Marshal(m, &(*op)[i])
}

func QuotientOf_Repeats_Marshal(m jsn.Marshaler, vals *[]QuotientOf) error {
	return jsn.RepeatBlock(m, (*QuotientOf_Slice)(vals))
}

func QuotientOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]QuotientOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = QuotientOf_Repeats_Marshal(m, pv)
	}
	return
}

type QuotientOf_Flow struct{ ptr *QuotientOf }

func (n QuotientOf_Flow) GetType() string      { return QuotientOf_Type }
func (n QuotientOf_Flow) GetLede() string      { return "div" }
func (n QuotientOf_Flow) GetFlow() interface{} { return n.ptr }
func (n QuotientOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*QuotientOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func QuotientOf_Optional_Marshal(m jsn.Marshaler, pv **QuotientOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = QuotientOf_Marshal(m, *pv)
	} else if !enc {
		var v QuotientOf
		if err = QuotientOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func QuotientOf_Marshal(m jsn.Marshaler, val *QuotientOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(QuotientOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", QuotientOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", QuotientOf_Field_A))
		}
		e1 := m.MarshalKey("by", QuotientOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", QuotientOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

// RemainderOf Divide one number by another, and return the remainder.
type RemainderOf struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=by"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*RemainderOf)(nil)

func (*RemainderOf) Compose() composer.Spec {
	return composer.Spec{
		Name: RemainderOf_Type,
		Uses: composer.Type_Flow,
		Lede: "mod",
	}
}

const RemainderOf_Type = "remainder_of"
const RemainderOf_Field_A = "$A"
const RemainderOf_Field_B = "$B"

func (op *RemainderOf) Marshal(m jsn.Marshaler) error {
	return RemainderOf_Marshal(m, op)
}

type RemainderOf_Slice []RemainderOf

func (op *RemainderOf_Slice) GetType() string { return RemainderOf_Type }

func (op *RemainderOf_Slice) Marshal(m jsn.Marshaler) error {
	return RemainderOf_Repeats_Marshal(m, (*[]RemainderOf)(op))
}

func (op *RemainderOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RemainderOf_Slice) SetSize(cnt int) {
	var els []RemainderOf
	if cnt >= 0 {
		els = make(RemainderOf_Slice, cnt)
	}
	(*op) = els
}

func (op *RemainderOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RemainderOf_Marshal(m, &(*op)[i])
}

func RemainderOf_Repeats_Marshal(m jsn.Marshaler, vals *[]RemainderOf) error {
	return jsn.RepeatBlock(m, (*RemainderOf_Slice)(vals))
}

func RemainderOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RemainderOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = RemainderOf_Repeats_Marshal(m, pv)
	}
	return
}

type RemainderOf_Flow struct{ ptr *RemainderOf }

func (n RemainderOf_Flow) GetType() string      { return RemainderOf_Type }
func (n RemainderOf_Flow) GetLede() string      { return "mod" }
func (n RemainderOf_Flow) GetFlow() interface{} { return n.ptr }
func (n RemainderOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*RemainderOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func RemainderOf_Optional_Marshal(m jsn.Marshaler, pv **RemainderOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RemainderOf_Marshal(m, *pv)
	} else if !enc {
		var v RemainderOf
		if err = RemainderOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RemainderOf_Marshal(m jsn.Marshaler, val *RemainderOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(RemainderOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", RemainderOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", RemainderOf_Field_A))
		}
		e1 := m.MarshalKey("by", RemainderOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", RemainderOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

// Response Generate text in a replaceable manner.
type Response struct {
	Name   string      `if:"label=_,type=text"`
	Text   rt.TextEval `if:"label=text,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Response)(nil)

func (*Response) Compose() composer.Spec {
	return composer.Spec{
		Name: Response_Type,
		Uses: composer.Type_Flow,
	}
}

const Response_Type = "response"
const Response_Field_Name = "$NAME"
const Response_Field_Text = "$TEXT"

func (op *Response) Marshal(m jsn.Marshaler) error {
	return Response_Marshal(m, op)
}

type Response_Slice []Response

func (op *Response_Slice) GetType() string { return Response_Type }

func (op *Response_Slice) Marshal(m jsn.Marshaler) error {
	return Response_Repeats_Marshal(m, (*[]Response)(op))
}

func (op *Response_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Response_Slice) SetSize(cnt int) {
	var els []Response
	if cnt >= 0 {
		els = make(Response_Slice, cnt)
	}
	(*op) = els
}

func (op *Response_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Response_Marshal(m, &(*op)[i])
}

func Response_Repeats_Marshal(m jsn.Marshaler, vals *[]Response) error {
	return jsn.RepeatBlock(m, (*Response_Slice)(vals))
}

func Response_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Response) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Response_Repeats_Marshal(m, pv)
	}
	return
}

type Response_Flow struct{ ptr *Response }

func (n Response_Flow) GetType() string      { return Response_Type }
func (n Response_Flow) GetLede() string      { return Response_Type }
func (n Response_Flow) GetFlow() interface{} { return n.ptr }
func (n Response_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Response); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Response_Optional_Marshal(m jsn.Marshaler, pv **Response) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Response_Marshal(m, *pv)
	} else if !enc {
		var v Response
		if err = Response_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Response_Marshal(m jsn.Marshaler, val *Response) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Response_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Response_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Response_Field_Name))
		}
		e1 := m.MarshalKey("text", Response_Field_Text)
		if e1 == nil {
			e1 = rt.TextEval_Optional_Marshal(m, &val.Text)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Response_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// Row Group text into a single line <li> as part of a list of lines.
// See also: 'rows'.
type Row struct {
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Row)(nil)

func (*Row) Compose() composer.Spec {
	return composer.Spec{
		Name: Row_Type,
		Uses: composer.Type_Flow,
	}
}

const Row_Type = "row"
const Row_Field_Does = "$DOES"

func (op *Row) Marshal(m jsn.Marshaler) error {
	return Row_Marshal(m, op)
}

type Row_Slice []Row

func (op *Row_Slice) GetType() string { return Row_Type }

func (op *Row_Slice) Marshal(m jsn.Marshaler) error {
	return Row_Repeats_Marshal(m, (*[]Row)(op))
}

func (op *Row_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Row_Slice) SetSize(cnt int) {
	var els []Row
	if cnt >= 0 {
		els = make(Row_Slice, cnt)
	}
	(*op) = els
}

func (op *Row_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Row_Marshal(m, &(*op)[i])
}

func Row_Repeats_Marshal(m jsn.Marshaler, vals *[]Row) error {
	return jsn.RepeatBlock(m, (*Row_Slice)(vals))
}

func Row_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Row) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Row_Repeats_Marshal(m, pv)
	}
	return
}

type Row_Flow struct{ ptr *Row }

func (n Row_Flow) GetType() string      { return Row_Type }
func (n Row_Flow) GetLede() string      { return Row_Type }
func (n Row_Flow) GetFlow() interface{} { return n.ptr }
func (n Row_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Row); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Row_Optional_Marshal(m jsn.Marshaler, pv **Row) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Row_Marshal(m, *pv)
	} else if !enc {
		var v Row
		if err = Row_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Row_Marshal(m jsn.Marshaler, val *Row) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Row_Flow{val}); err == nil {
		e0 := m.MarshalKey("does", Row_Field_Does)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Row_Field_Does))
		}
		m.EndBlock()
	}
	return
}

// Rows Group text into an unordered list <ul>.
type Rows struct {
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Rows)(nil)

func (*Rows) Compose() composer.Spec {
	return composer.Spec{
		Name: Rows_Type,
		Uses: composer.Type_Flow,
	}
}

const Rows_Type = "rows"
const Rows_Field_Does = "$DOES"

func (op *Rows) Marshal(m jsn.Marshaler) error {
	return Rows_Marshal(m, op)
}

type Rows_Slice []Rows

func (op *Rows_Slice) GetType() string { return Rows_Type }

func (op *Rows_Slice) Marshal(m jsn.Marshaler) error {
	return Rows_Repeats_Marshal(m, (*[]Rows)(op))
}

func (op *Rows_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Rows_Slice) SetSize(cnt int) {
	var els []Rows
	if cnt >= 0 {
		els = make(Rows_Slice, cnt)
	}
	(*op) = els
}

func (op *Rows_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Rows_Marshal(m, &(*op)[i])
}

func Rows_Repeats_Marshal(m jsn.Marshaler, vals *[]Rows) error {
	return jsn.RepeatBlock(m, (*Rows_Slice)(vals))
}

func Rows_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Rows) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Rows_Repeats_Marshal(m, pv)
	}
	return
}

type Rows_Flow struct{ ptr *Rows }

func (n Rows_Flow) GetType() string      { return Rows_Type }
func (n Rows_Flow) GetLede() string      { return Rows_Type }
func (n Rows_Flow) GetFlow() interface{} { return n.ptr }
func (n Rows_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Rows); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Rows_Optional_Marshal(m jsn.Marshaler, pv **Rows) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Rows_Marshal(m, *pv)
	} else if !enc {
		var v Rows
		if err = Rows_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Rows_Marshal(m jsn.Marshaler, val *Rows) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Rows_Flow{val}); err == nil {
		e0 := m.MarshalKey("does", Rows_Field_Does)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Rows_Field_Does))
		}
		m.EndBlock()
	}
	return
}

// SayText Print some bit of text to the player.
type SayText struct {
	Text   rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*SayText)(nil)

func (*SayText) Compose() composer.Spec {
	return composer.Spec{
		Name: SayText_Type,
		Uses: composer.Type_Flow,
		Lede: "say",
	}
}

const SayText_Type = "say_text"
const SayText_Field_Text = "$TEXT"

func (op *SayText) Marshal(m jsn.Marshaler) error {
	return SayText_Marshal(m, op)
}

type SayText_Slice []SayText

func (op *SayText_Slice) GetType() string { return SayText_Type }

func (op *SayText_Slice) Marshal(m jsn.Marshaler) error {
	return SayText_Repeats_Marshal(m, (*[]SayText)(op))
}

func (op *SayText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SayText_Slice) SetSize(cnt int) {
	var els []SayText
	if cnt >= 0 {
		els = make(SayText_Slice, cnt)
	}
	(*op) = els
}

func (op *SayText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SayText_Marshal(m, &(*op)[i])
}

func SayText_Repeats_Marshal(m jsn.Marshaler, vals *[]SayText) error {
	return jsn.RepeatBlock(m, (*SayText_Slice)(vals))
}

func SayText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SayText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SayText_Repeats_Marshal(m, pv)
	}
	return
}

type SayText_Flow struct{ ptr *SayText }

func (n SayText_Flow) GetType() string      { return SayText_Type }
func (n SayText_Flow) GetLede() string      { return "say" }
func (n SayText_Flow) GetFlow() interface{} { return n.ptr }
func (n SayText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SayText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SayText_Optional_Marshal(m jsn.Marshaler, pv **SayText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SayText_Marshal(m, *pv)
	} else if !enc {
		var v SayText
		if err = SayText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SayText_Marshal(m jsn.Marshaler, val *SayText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SayText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", SayText_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SayText_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// SetValue Store a value into a local variable ( or pattern argument. )
type SetValue struct {
	Target Address    `if:"label=_"`
	Value  Assignment `if:"label=from"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*SetValue)(nil)

func (*SetValue) Compose() composer.Spec {
	return composer.Spec{
		Name: SetValue_Type,
		Uses: composer.Type_Flow,
		Lede: "set",
	}
}

const SetValue_Type = "set_value"
const SetValue_Field_Target = "$TARGET"
const SetValue_Field_Value = "$VALUE"

func (op *SetValue) Marshal(m jsn.Marshaler) error {
	return SetValue_Marshal(m, op)
}

type SetValue_Slice []SetValue

func (op *SetValue_Slice) GetType() string { return SetValue_Type }

func (op *SetValue_Slice) Marshal(m jsn.Marshaler) error {
	return SetValue_Repeats_Marshal(m, (*[]SetValue)(op))
}

func (op *SetValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SetValue_Slice) SetSize(cnt int) {
	var els []SetValue
	if cnt >= 0 {
		els = make(SetValue_Slice, cnt)
	}
	(*op) = els
}

func (op *SetValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SetValue_Marshal(m, &(*op)[i])
}

func SetValue_Repeats_Marshal(m jsn.Marshaler, vals *[]SetValue) error {
	return jsn.RepeatBlock(m, (*SetValue_Slice)(vals))
}

func SetValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SetValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SetValue_Repeats_Marshal(m, pv)
	}
	return
}

type SetValue_Flow struct{ ptr *SetValue }

func (n SetValue_Flow) GetType() string      { return SetValue_Type }
func (n SetValue_Flow) GetLede() string      { return "set" }
func (n SetValue_Flow) GetFlow() interface{} { return n.ptr }
func (n SetValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SetValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SetValue_Optional_Marshal(m jsn.Marshaler, pv **SetValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SetValue_Marshal(m, *pv)
	} else if !enc {
		var v SetValue
		if err = SetValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SetValue_Marshal(m jsn.Marshaler, val *SetValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SetValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", SetValue_Field_Target)
		if e0 == nil {
			e0 = Address_Marshal(m, &val.Target)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SetValue_Field_Target))
		}
		e1 := m.MarshalKey("from", SetValue_Field_Value)
		if e1 == nil {
			e1 = Assignment_Marshal(m, &val.Value)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", SetValue_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// Singularize Returns the singular form of a plural word. (ex. apple for apples ).
type Singularize struct {
	Text   rt.TextEval `if:"label=of"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*Singularize)(nil)

func (*Singularize) Compose() composer.Spec {
	return composer.Spec{
		Name: Singularize_Type,
		Uses: composer.Type_Flow,
		Lede: "singular",
	}
}

const Singularize_Type = "singularize"
const Singularize_Field_Text = "$TEXT"

func (op *Singularize) Marshal(m jsn.Marshaler) error {
	return Singularize_Marshal(m, op)
}

type Singularize_Slice []Singularize

func (op *Singularize_Slice) GetType() string { return Singularize_Type }

func (op *Singularize_Slice) Marshal(m jsn.Marshaler) error {
	return Singularize_Repeats_Marshal(m, (*[]Singularize)(op))
}

func (op *Singularize_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Singularize_Slice) SetSize(cnt int) {
	var els []Singularize
	if cnt >= 0 {
		els = make(Singularize_Slice, cnt)
	}
	(*op) = els
}

func (op *Singularize_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Singularize_Marshal(m, &(*op)[i])
}

func Singularize_Repeats_Marshal(m jsn.Marshaler, vals *[]Singularize) error {
	return jsn.RepeatBlock(m, (*Singularize_Slice)(vals))
}

func Singularize_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Singularize) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Singularize_Repeats_Marshal(m, pv)
	}
	return
}

type Singularize_Flow struct{ ptr *Singularize }

func (n Singularize_Flow) GetType() string      { return Singularize_Type }
func (n Singularize_Flow) GetLede() string      { return "singular" }
func (n Singularize_Flow) GetFlow() interface{} { return n.ptr }
func (n Singularize_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Singularize); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Singularize_Optional_Marshal(m jsn.Marshaler, pv **Singularize) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Singularize_Marshal(m, *pv)
	} else if !enc {
		var v Singularize
		if err = Singularize_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Singularize_Marshal(m jsn.Marshaler, val *Singularize) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Singularize_Flow{val}); err == nil {
		e0 := m.MarshalKey("of", Singularize_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Singularize_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// SlashText Separates words with left-leaning slashes '/'.
type SlashText struct {
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*SlashText)(nil)

func (*SlashText) Compose() composer.Spec {
	return composer.Spec{
		Name: SlashText_Type,
		Uses: composer.Type_Flow,
		Lede: "slashes",
	}
}

const SlashText_Type = "slash_text"
const SlashText_Field_Does = "$DOES"

func (op *SlashText) Marshal(m jsn.Marshaler) error {
	return SlashText_Marshal(m, op)
}

type SlashText_Slice []SlashText

func (op *SlashText_Slice) GetType() string { return SlashText_Type }

func (op *SlashText_Slice) Marshal(m jsn.Marshaler) error {
	return SlashText_Repeats_Marshal(m, (*[]SlashText)(op))
}

func (op *SlashText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SlashText_Slice) SetSize(cnt int) {
	var els []SlashText
	if cnt >= 0 {
		els = make(SlashText_Slice, cnt)
	}
	(*op) = els
}

func (op *SlashText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SlashText_Marshal(m, &(*op)[i])
}

func SlashText_Repeats_Marshal(m jsn.Marshaler, vals *[]SlashText) error {
	return jsn.RepeatBlock(m, (*SlashText_Slice)(vals))
}

func SlashText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SlashText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SlashText_Repeats_Marshal(m, pv)
	}
	return
}

type SlashText_Flow struct{ ptr *SlashText }

func (n SlashText_Flow) GetType() string      { return SlashText_Type }
func (n SlashText_Flow) GetLede() string      { return "slashes" }
func (n SlashText_Flow) GetFlow() interface{} { return n.ptr }
func (n SlashText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SlashText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SlashText_Optional_Marshal(m jsn.Marshaler, pv **SlashText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SlashText_Marshal(m, *pv)
	} else if !enc {
		var v SlashText
		if err = SlashText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SlashText_Marshal(m jsn.Marshaler, val *SlashText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SlashText_Flow{val}); err == nil {
		e0 := m.MarshalKey("does", SlashText_Field_Does)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SlashText_Field_Does))
		}
		m.EndBlock()
	}
	return
}

// Softline Start a new line ( if not already at a new line. ).
type Softline struct {
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Softline)(nil)

func (*Softline) Compose() composer.Spec {
	return composer.Spec{
		Name: Softline_Type,
		Uses: composer.Type_Flow,
		Lede: "wbr",
	}
}

const Softline_Type = "softline"

func (op *Softline) Marshal(m jsn.Marshaler) error {
	return Softline_Marshal(m, op)
}

type Softline_Slice []Softline

func (op *Softline_Slice) GetType() string { return Softline_Type }

func (op *Softline_Slice) Marshal(m jsn.Marshaler) error {
	return Softline_Repeats_Marshal(m, (*[]Softline)(op))
}

func (op *Softline_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Softline_Slice) SetSize(cnt int) {
	var els []Softline
	if cnt >= 0 {
		els = make(Softline_Slice, cnt)
	}
	(*op) = els
}

func (op *Softline_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Softline_Marshal(m, &(*op)[i])
}

func Softline_Repeats_Marshal(m jsn.Marshaler, vals *[]Softline) error {
	return jsn.RepeatBlock(m, (*Softline_Slice)(vals))
}

func Softline_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Softline) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Softline_Repeats_Marshal(m, pv)
	}
	return
}

type Softline_Flow struct{ ptr *Softline }

func (n Softline_Flow) GetType() string      { return Softline_Type }
func (n Softline_Flow) GetLede() string      { return "wbr" }
func (n Softline_Flow) GetFlow() interface{} { return n.ptr }
func (n Softline_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Softline); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Softline_Optional_Marshal(m jsn.Marshaler, pv **Softline) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Softline_Marshal(m, *pv)
	} else if !enc {
		var v Softline
		if err = Softline_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Softline_Marshal(m jsn.Marshaler, val *Softline) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Softline_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// SpanText Writes text with spaces between words.
type SpanText struct {
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*SpanText)(nil)

func (*SpanText) Compose() composer.Spec {
	return composer.Spec{
		Name: SpanText_Type,
		Uses: composer.Type_Flow,
		Lede: "spaces",
	}
}

const SpanText_Type = "span_text"
const SpanText_Field_Does = "$DOES"

func (op *SpanText) Marshal(m jsn.Marshaler) error {
	return SpanText_Marshal(m, op)
}

type SpanText_Slice []SpanText

func (op *SpanText_Slice) GetType() string { return SpanText_Type }

func (op *SpanText_Slice) Marshal(m jsn.Marshaler) error {
	return SpanText_Repeats_Marshal(m, (*[]SpanText)(op))
}

func (op *SpanText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SpanText_Slice) SetSize(cnt int) {
	var els []SpanText
	if cnt >= 0 {
		els = make(SpanText_Slice, cnt)
	}
	(*op) = els
}

func (op *SpanText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SpanText_Marshal(m, &(*op)[i])
}

func SpanText_Repeats_Marshal(m jsn.Marshaler, vals *[]SpanText) error {
	return jsn.RepeatBlock(m, (*SpanText_Slice)(vals))
}

func SpanText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SpanText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SpanText_Repeats_Marshal(m, pv)
	}
	return
}

type SpanText_Flow struct{ ptr *SpanText }

func (n SpanText_Flow) GetType() string      { return SpanText_Type }
func (n SpanText_Flow) GetLede() string      { return "spaces" }
func (n SpanText_Flow) GetFlow() interface{} { return n.ptr }
func (n SpanText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SpanText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SpanText_Optional_Marshal(m jsn.Marshaler, pv **SpanText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SpanText_Marshal(m, *pv)
	} else if !enc {
		var v SpanText
		if err = SpanText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SpanText_Marshal(m jsn.Marshaler, val *SpanText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SpanText_Flow{val}); err == nil {
		e0 := m.MarshalKey("does", SpanText_Field_Does)
		if e0 == nil {
			e0 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SpanText_Field_Does))
		}
		m.EndBlock()
	}
	return
}

// SumOf Add two numbers.
type SumOf struct {
	A      rt.NumberEval `if:"label=_"`
	B      rt.NumberEval `if:"label=by,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.NumberEval = (*SumOf)(nil)

func (*SumOf) Compose() composer.Spec {
	return composer.Spec{
		Name: SumOf_Type,
		Uses: composer.Type_Flow,
		Lede: "inc",
	}
}

const SumOf_Type = "sum_of"
const SumOf_Field_A = "$A"
const SumOf_Field_B = "$B"

func (op *SumOf) Marshal(m jsn.Marshaler) error {
	return SumOf_Marshal(m, op)
}

type SumOf_Slice []SumOf

func (op *SumOf_Slice) GetType() string { return SumOf_Type }

func (op *SumOf_Slice) Marshal(m jsn.Marshaler) error {
	return SumOf_Repeats_Marshal(m, (*[]SumOf)(op))
}

func (op *SumOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SumOf_Slice) SetSize(cnt int) {
	var els []SumOf
	if cnt >= 0 {
		els = make(SumOf_Slice, cnt)
	}
	(*op) = els
}

func (op *SumOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SumOf_Marshal(m, &(*op)[i])
}

func SumOf_Repeats_Marshal(m jsn.Marshaler, vals *[]SumOf) error {
	return jsn.RepeatBlock(m, (*SumOf_Slice)(vals))
}

func SumOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SumOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SumOf_Repeats_Marshal(m, pv)
	}
	return
}

type SumOf_Flow struct{ ptr *SumOf }

func (n SumOf_Flow) GetType() string      { return SumOf_Type }
func (n SumOf_Flow) GetLede() string      { return "inc" }
func (n SumOf_Flow) GetFlow() interface{} { return n.ptr }
func (n SumOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SumOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SumOf_Optional_Marshal(m jsn.Marshaler, pv **SumOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SumOf_Marshal(m, *pv)
	} else if !enc {
		var v SumOf
		if err = SumOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SumOf_Marshal(m jsn.Marshaler, val *SumOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SumOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", SumOf_Field_A)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.A)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SumOf_Field_A))
		}
		e1 := m.MarshalKey("by", SumOf_Field_B)
		if e1 == nil {
			e1 = rt.NumberEval_Optional_Marshal(m, &val.B)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", SumOf_Field_B))
		}
		m.EndBlock()
	}
	return
}

const Trigger_Type = "trigger"

var Trigger_Optional_Marshal = Trigger_Marshal

type Trigger_Slot struct{ Value *Trigger }

func (at Trigger_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Trigger_Slot) GetType() string              { return Trigger_Type }
func (at Trigger_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Trigger_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Trigger)
	return
}

func Trigger_Marshal(m jsn.Marshaler, ptr *Trigger) (err error) {
	slot := Trigger_Slot{ptr}
	return slot.Marshal(m)
}

type Trigger_Slice []Trigger

func (op *Trigger_Slice) GetType() string { return Trigger_Type }

func (op *Trigger_Slice) Marshal(m jsn.Marshaler) error {
	return Trigger_Repeats_Marshal(m, (*[]Trigger)(op))
}

func (op *Trigger_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Trigger_Slice) SetSize(cnt int) {
	var els []Trigger
	if cnt >= 0 {
		els = make(Trigger_Slice, cnt)
	}
	(*op) = els
}

func (op *Trigger_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Trigger_Marshal(m, &(*op)[i])
}

func Trigger_Repeats_Marshal(m jsn.Marshaler, vals *[]Trigger) error {
	return jsn.RepeatBlock(m, (*Trigger_Slice)(vals))
}

func Trigger_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Trigger) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Trigger_Repeats_Marshal(m, pv)
	}
	return
}

// TriggerCycle
type TriggerCycle struct {
	Markup map[string]any
}

// User implemented slots:
var _ Trigger = (*TriggerCycle)(nil)

func (*TriggerCycle) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerCycle_Type,
		Uses: composer.Type_Flow,
		Lede: "every",
	}
}

const TriggerCycle_Type = "trigger_cycle"

func (op *TriggerCycle) Marshal(m jsn.Marshaler) error {
	return TriggerCycle_Marshal(m, op)
}

type TriggerCycle_Slice []TriggerCycle

func (op *TriggerCycle_Slice) GetType() string { return TriggerCycle_Type }

func (op *TriggerCycle_Slice) Marshal(m jsn.Marshaler) error {
	return TriggerCycle_Repeats_Marshal(m, (*[]TriggerCycle)(op))
}

func (op *TriggerCycle_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TriggerCycle_Slice) SetSize(cnt int) {
	var els []TriggerCycle
	if cnt >= 0 {
		els = make(TriggerCycle_Slice, cnt)
	}
	(*op) = els
}

func (op *TriggerCycle_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TriggerCycle_Marshal(m, &(*op)[i])
}

func TriggerCycle_Repeats_Marshal(m jsn.Marshaler, vals *[]TriggerCycle) error {
	return jsn.RepeatBlock(m, (*TriggerCycle_Slice)(vals))
}

func TriggerCycle_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TriggerCycle) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TriggerCycle_Repeats_Marshal(m, pv)
	}
	return
}

type TriggerCycle_Flow struct{ ptr *TriggerCycle }

func (n TriggerCycle_Flow) GetType() string      { return TriggerCycle_Type }
func (n TriggerCycle_Flow) GetLede() string      { return "every" }
func (n TriggerCycle_Flow) GetFlow() interface{} { return n.ptr }
func (n TriggerCycle_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TriggerCycle); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TriggerCycle_Optional_Marshal(m jsn.Marshaler, pv **TriggerCycle) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TriggerCycle_Marshal(m, *pv)
	} else if !enc {
		var v TriggerCycle
		if err = TriggerCycle_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TriggerCycle_Marshal(m jsn.Marshaler, val *TriggerCycle) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(TriggerCycle_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// TriggerOnce
type TriggerOnce struct {
	Markup map[string]any
}

// User implemented slots:
var _ Trigger = (*TriggerOnce)(nil)

func (*TriggerOnce) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerOnce_Type,
		Uses: composer.Type_Flow,
		Lede: "at",
	}
}

const TriggerOnce_Type = "trigger_once"

func (op *TriggerOnce) Marshal(m jsn.Marshaler) error {
	return TriggerOnce_Marshal(m, op)
}

type TriggerOnce_Slice []TriggerOnce

func (op *TriggerOnce_Slice) GetType() string { return TriggerOnce_Type }

func (op *TriggerOnce_Slice) Marshal(m jsn.Marshaler) error {
	return TriggerOnce_Repeats_Marshal(m, (*[]TriggerOnce)(op))
}

func (op *TriggerOnce_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TriggerOnce_Slice) SetSize(cnt int) {
	var els []TriggerOnce
	if cnt >= 0 {
		els = make(TriggerOnce_Slice, cnt)
	}
	(*op) = els
}

func (op *TriggerOnce_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TriggerOnce_Marshal(m, &(*op)[i])
}

func TriggerOnce_Repeats_Marshal(m jsn.Marshaler, vals *[]TriggerOnce) error {
	return jsn.RepeatBlock(m, (*TriggerOnce_Slice)(vals))
}

func TriggerOnce_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TriggerOnce) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TriggerOnce_Repeats_Marshal(m, pv)
	}
	return
}

type TriggerOnce_Flow struct{ ptr *TriggerOnce }

func (n TriggerOnce_Flow) GetType() string      { return TriggerOnce_Type }
func (n TriggerOnce_Flow) GetLede() string      { return "at" }
func (n TriggerOnce_Flow) GetFlow() interface{} { return n.ptr }
func (n TriggerOnce_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TriggerOnce); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TriggerOnce_Optional_Marshal(m jsn.Marshaler, pv **TriggerOnce) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TriggerOnce_Marshal(m, *pv)
	} else if !enc {
		var v TriggerOnce
		if err = TriggerOnce_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TriggerOnce_Marshal(m jsn.Marshaler, val *TriggerOnce) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(TriggerOnce_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// TriggerSwitch
type TriggerSwitch struct {
	Markup map[string]any
}

// User implemented slots:
var _ Trigger = (*TriggerSwitch)(nil)

func (*TriggerSwitch) Compose() composer.Spec {
	return composer.Spec{
		Name: TriggerSwitch_Type,
		Uses: composer.Type_Flow,
		Lede: "after",
	}
}

const TriggerSwitch_Type = "trigger_switch"

func (op *TriggerSwitch) Marshal(m jsn.Marshaler) error {
	return TriggerSwitch_Marshal(m, op)
}

type TriggerSwitch_Slice []TriggerSwitch

func (op *TriggerSwitch_Slice) GetType() string { return TriggerSwitch_Type }

func (op *TriggerSwitch_Slice) Marshal(m jsn.Marshaler) error {
	return TriggerSwitch_Repeats_Marshal(m, (*[]TriggerSwitch)(op))
}

func (op *TriggerSwitch_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TriggerSwitch_Slice) SetSize(cnt int) {
	var els []TriggerSwitch
	if cnt >= 0 {
		els = make(TriggerSwitch_Slice, cnt)
	}
	(*op) = els
}

func (op *TriggerSwitch_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TriggerSwitch_Marshal(m, &(*op)[i])
}

func TriggerSwitch_Repeats_Marshal(m jsn.Marshaler, vals *[]TriggerSwitch) error {
	return jsn.RepeatBlock(m, (*TriggerSwitch_Slice)(vals))
}

func TriggerSwitch_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TriggerSwitch) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TriggerSwitch_Repeats_Marshal(m, pv)
	}
	return
}

type TriggerSwitch_Flow struct{ ptr *TriggerSwitch }

func (n TriggerSwitch_Flow) GetType() string      { return TriggerSwitch_Type }
func (n TriggerSwitch_Flow) GetLede() string      { return "after" }
func (n TriggerSwitch_Flow) GetFlow() interface{} { return n.ptr }
func (n TriggerSwitch_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TriggerSwitch); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TriggerSwitch_Optional_Marshal(m jsn.Marshaler, pv **TriggerSwitch) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TriggerSwitch_Marshal(m, *pv)
	} else if !enc {
		var v TriggerSwitch
		if err = TriggerSwitch_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TriggerSwitch_Marshal(m jsn.Marshaler, val *TriggerSwitch) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(TriggerSwitch_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// VariableName requires a user-specified string.
type VariableName struct {
	Str string
}

func (op *VariableName) String() string {
	return op.Str
}

func (*VariableName) Compose() composer.Spec {
	return composer.Spec{
		Name:        VariableName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const VariableName_Type = "variable_name"

func (op *VariableName) Marshal(m jsn.Marshaler) error {
	return VariableName_Marshal(m, op)
}

func VariableName_Optional_Marshal(m jsn.Marshaler, val *VariableName) (err error) {
	var zero VariableName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = VariableName_Marshal(m, val)
	}
	return
}

func VariableName_Marshal(m jsn.Marshaler, val *VariableName) (err error) {
	return m.MarshalValue(VariableName_Type, &val.Str)
}

type VariableName_Slice []VariableName

func (op *VariableName_Slice) GetType() string { return VariableName_Type }

func (op *VariableName_Slice) Marshal(m jsn.Marshaler) error {
	return VariableName_Repeats_Marshal(m, (*[]VariableName)(op))
}

func (op *VariableName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *VariableName_Slice) SetSize(cnt int) {
	var els []VariableName
	if cnt >= 0 {
		els = make(VariableName_Slice, cnt)
	}
	(*op) = els
}

func (op *VariableName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return VariableName_Marshal(m, &(*op)[i])
}

func VariableName_Repeats_Marshal(m jsn.Marshaler, vals *[]VariableName) error {
	return jsn.RepeatBlock(m, (*VariableName_Slice)(vals))
}

func VariableName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]VariableName) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = VariableName_Repeats_Marshal(m, pv)
	}
	return
}

// VariableRef
type VariableRef struct {
	Name   rt.TextEval `if:"label=_"`
	Dot    []Dot       `if:"label=dot,optional"`
	Markup map[string]any
}

func (*VariableRef) Compose() composer.Spec {
	return composer.Spec{
		Name: VariableRef_Type,
		Uses: composer.Type_Flow,
		Lede: "variable",
	}
}

const VariableRef_Type = "variable_ref"
const VariableRef_Field_Name = "$NAME"
const VariableRef_Field_Dot = "$DOT"

func (op *VariableRef) Marshal(m jsn.Marshaler) error {
	return VariableRef_Marshal(m, op)
}

type VariableRef_Slice []VariableRef

func (op *VariableRef_Slice) GetType() string { return VariableRef_Type }

func (op *VariableRef_Slice) Marshal(m jsn.Marshaler) error {
	return VariableRef_Repeats_Marshal(m, (*[]VariableRef)(op))
}

func (op *VariableRef_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *VariableRef_Slice) SetSize(cnt int) {
	var els []VariableRef
	if cnt >= 0 {
		els = make(VariableRef_Slice, cnt)
	}
	(*op) = els
}

func (op *VariableRef_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return VariableRef_Marshal(m, &(*op)[i])
}

func VariableRef_Repeats_Marshal(m jsn.Marshaler, vals *[]VariableRef) error {
	return jsn.RepeatBlock(m, (*VariableRef_Slice)(vals))
}

func VariableRef_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]VariableRef) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = VariableRef_Repeats_Marshal(m, pv)
	}
	return
}

type VariableRef_Flow struct{ ptr *VariableRef }

func (n VariableRef_Flow) GetType() string      { return VariableRef_Type }
func (n VariableRef_Flow) GetLede() string      { return "variable" }
func (n VariableRef_Flow) GetFlow() interface{} { return n.ptr }
func (n VariableRef_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*VariableRef); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func VariableRef_Optional_Marshal(m jsn.Marshaler, pv **VariableRef) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = VariableRef_Marshal(m, *pv)
	} else if !enc {
		var v VariableRef
		if err = VariableRef_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func VariableRef_Marshal(m jsn.Marshaler, val *VariableRef) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(VariableRef_Flow{val}); err == nil {
		e0 := m.MarshalKey("", VariableRef_Field_Name)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", VariableRef_Field_Name))
		}
		e1 := m.MarshalKey("dot", VariableRef_Field_Dot)
		if e1 == nil {
			e1 = Dot_Optional_Repeats_Marshal(m, &val.Dot)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", VariableRef_Field_Dot))
		}
		m.EndBlock()
	}
	return
}

// While Keep running a series of actions while a condition is true.
type While struct {
	True   rt.BoolEval  `if:"label=_"`
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*While)(nil)

func (*While) Compose() composer.Spec {
	return composer.Spec{
		Name: While_Type,
		Uses: composer.Type_Flow,
		Lede: "repeating",
	}
}

const While_Type = "while"
const While_Field_True = "$TRUE"
const While_Field_Does = "$DOES"

func (op *While) Marshal(m jsn.Marshaler) error {
	return While_Marshal(m, op)
}

type While_Slice []While

func (op *While_Slice) GetType() string { return While_Type }

func (op *While_Slice) Marshal(m jsn.Marshaler) error {
	return While_Repeats_Marshal(m, (*[]While)(op))
}

func (op *While_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *While_Slice) SetSize(cnt int) {
	var els []While
	if cnt >= 0 {
		els = make(While_Slice, cnt)
	}
	(*op) = els
}

func (op *While_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return While_Marshal(m, &(*op)[i])
}

func While_Repeats_Marshal(m jsn.Marshaler, vals *[]While) error {
	return jsn.RepeatBlock(m, (*While_Slice)(vals))
}

func While_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]While) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = While_Repeats_Marshal(m, pv)
	}
	return
}

type While_Flow struct{ ptr *While }

func (n While_Flow) GetType() string      { return While_Type }
func (n While_Flow) GetLede() string      { return "repeating" }
func (n While_Flow) GetFlow() interface{} { return n.ptr }
func (n While_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*While); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func While_Optional_Marshal(m jsn.Marshaler, pv **While) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = While_Marshal(m, *pv)
	} else if !enc {
		var v While
		if err = While_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func While_Marshal(m jsn.Marshaler, val *While) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(While_Flow{val}); err == nil {
		e0 := m.MarshalKey("", While_Field_True)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.True)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", While_Field_True))
		}
		e1 := m.MarshalKey("does", While_Field_Does)
		if e1 == nil {
			e1 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", While_Field_Does))
		}
		m.EndBlock()
	}
	return
}

var Slots = []interface{}{
	(*Brancher)(nil),
	(*Dot)(nil),
	(*Trigger)(nil),
}

var Slats = []composer.Composer{
	(*Address)(nil),
	(*AllTrue)(nil),
	(*Always)(nil),
	(*AnyTrue)(nil),
	(*Arg)(nil),
	(*Assignment)(nil),
	(*AtField)(nil),
	(*AtIndex)(nil),
	(*Blankline)(nil),
	(*BracketText)(nil),
	(*Break)(nil),
	(*BufferText)(nil),
	(*CallCycle)(nil),
	(*CallPattern)(nil),
	(*CallSend)(nil),
	(*CallShuffle)(nil),
	(*CallTerminal)(nil),
	(*CallTrigger)(nil),
	(*Capitalize)(nil),
	(*ChooseAction)(nil),
	(*ChooseMore)(nil),
	(*ChooseMoreValue)(nil),
	(*ChooseNothingElse)(nil),
	(*ChooseNum)(nil),
	(*ChooseText)(nil),
	(*ChooseValue)(nil),
	(*CommaText)(nil),
	(*CompareNum)(nil),
	(*CompareText)(nil),
	(*Comparison)(nil),
	(*DiffOf)(nil),
	(*During)(nil),
	(*FromBool)(nil),
	(*FromNumList)(nil),
	(*FromNumber)(nil),
	(*FromRecord)(nil),
	(*FromRecordList)(nil),
	(*FromText)(nil),
	(*FromTextList)(nil),
	(*GetValue)(nil),
	(*HasDominion)(nil),
	(*IdOf)(nil),
	(*Includes)(nil),
	(*IsEmpty)(nil),
	(*IsExactKindOf)(nil),
	(*IsKindOf)(nil),
	(*Join)(nil),
	(*KindOf)(nil),
	(*KindsOf)(nil),
	(*MakeLowercase)(nil),
	(*MakeReversed)(nil),
	(*MakeSentenceCase)(nil),
	(*MakeTitleCase)(nil),
	(*MakeUppercase)(nil),
	(*Matches)(nil),
	(*NameOf)(nil),
	(*Never)(nil),
	(*Newline)(nil),
	(*Next)(nil),
	(*Not)(nil),
	(*ObjectExists)(nil),
	(*ObjectRef)(nil),
	(*PatternName)(nil),
	(*Pluralize)(nil),
	(*PrintNum)(nil),
	(*PrintNumWord)(nil),
	(*ProductOf)(nil),
	(*QuotientOf)(nil),
	(*RemainderOf)(nil),
	(*Response)(nil),
	(*Row)(nil),
	(*Rows)(nil),
	(*SayText)(nil),
	(*SetValue)(nil),
	(*Singularize)(nil),
	(*SlashText)(nil),
	(*Softline)(nil),
	(*SpanText)(nil),
	(*SumOf)(nil),
	(*TriggerCycle)(nil),
	(*TriggerOnce)(nil),
	(*TriggerSwitch)(nil),
	(*VariableName)(nil),
	(*VariableRef)(nil),
	(*While)(nil),
}

var Signatures = map[uint64]interface{}{
	14830662449006440500: (*Address)(nil),           /* Address object: */
	15275535284729771537: (*Address)(nil),           /* Address variable: */
	2643197561265932993:  (*Arg)(nil),               /* Arg:from bool: */
	3912837313358859159:  (*Arg)(nil),               /* Arg:from numList: */
	2284773389402102018:  (*Arg)(nil),               /* Arg:from number: */
	14392737426111657934: (*Arg)(nil),               /* Arg:from record: */
	12978349289911234358: (*Arg)(nil),               /* Arg:from recordList: */
	1372780250379707384:  (*Arg)(nil),               /* Arg:from text: */
	4278237221364827484:  (*Arg)(nil),               /* Arg:from textList: */
	16242544916532759166: (*Assignment)(nil),        /* Assignment bool: */
	15699533039608894982: (*Assignment)(nil),        /* Assignment numList: */
	10616828856023779905: (*Assignment)(nil),        /* Assignment number: */
	3660245813868397981:  (*Assignment)(nil),        /* Assignment record: */
	15091606963976607825: (*Assignment)(nil),        /* Assignment recordList: */
	7982134690380973031:  (*Assignment)(nil),        /* Assignment text: */
	2522625035940055503:  (*Assignment)(nil),        /* Assignment textList: */
	15485098871275255450: (*Comparison)(nil),        /* Comparison: */
	12958508767616079733: (*FromBool)(nil),          /* FromBool: */
	18053230474023831203: (*FromNumList)(nil),       /* FromNumList: */
	1452195140371313150:  (*FromNumber)(nil),        /* FromNumber: */
	4970952219519099442:  (*FromRecord)(nil),        /* FromRecord: */
	12895254073041262266: (*FromRecordList)(nil),    /* FromRecordList: */
	2335611467037801148:  (*FromText)(nil),          /* FromText: */
	704696786365734016:   (*FromTextList)(nil),      /* FromTextList: */
	3451751676496979714:  (*ObjectRef)(nil),         /* Object:field: */
	9963017218628298537:  (*ObjectRef)(nil),         /* Object:field:dot: */
	10347746873548257800: (*PatternName)(nil),       /* PatternName: */
	12941385537088852909: (*VariableRef)(nil),       /* Variable: */
	4135812736705894454:  (*VariableRef)(nil),       /* Variable:dot: */
	10059194828506805844: (*VariableName)(nil),      /* VariableName: */
	9392469773844077696:  (*TriggerSwitch)(nil),     /* trigger=After */
	8082607244820951444:  (*AllTrue)(nil),           /* bool_eval=AllTrue: */
	1979437068831463006:  (*Always)(nil),            /* bool_eval=Always */
	1963945852392897915:  (*AnyTrue)(nil),           /* bool_eval=AnyTrue: */
	2233111806717201007:  (*TriggerOnce)(nil),       /* trigger=At */
	1683104564853176068:  (*AtField)(nil),           /* dot=AtField: */
	17908840355303216180: (*AtIndex)(nil),           /* dot=AtIndex: */
	15800853823523633295: (*Newline)(nil),           /* execute=Br */
	18222385133081373684: (*BracketText)(nil),       /* text_eval=Brackets does: */
	9570569845423374482:  (*Break)(nil),             /* execute=Break */
	11793928305886057198: (*BufferText)(nil),        /* text_eval=Buffers does: */
	8695677004499439692:  (*Capitalize)(nil),        /* text_eval=Capitalize: */
	5770232330560742655:  (*CompareNum)(nil),        /* bool_eval=Cmp:is:num: */
	3133023233294705026:  (*CompareNum)(nil),        /* bool_eval=Cmp:is:num:within: */
	3980368314252876379:  (*CompareText)(nil),       /* bool_eval=Cmp:is:txt: */
	16246548377343461249: (*CommaText)(nil),         /* text_eval=Commas does: */
	3601423820955950769:  (*Includes)(nil),          /* bool_eval=Contains:part: */
	2636120577324077328:  (*CallCycle)(nil),         /* text_eval=Cycle:over: */
	3530384008651052276:  (*DiffOf)(nil),            /* number_eval=Dec: */
	10788210406716082593: (*DiffOf)(nil),            /* number_eval=Dec:by: */
	5430006510328108403:  (*CallPattern)(nil),       /* bool_eval=Determine:args: */
	11666175118824200195: (*CallPattern)(nil),       /* execute=Determine:args: */
	16219448703619493492: (*CallPattern)(nil),       /* num_list_eval=Determine:args: */
	15584772020364696136: (*CallPattern)(nil),       /* number_eval=Determine:args: */
	13992013847750998452: (*CallPattern)(nil),       /* record_eval=Determine:args: */
	352268441608212603:   (*CallPattern)(nil),       /* record_list_eval=Determine:args: */
	5079530186593846942:  (*CallPattern)(nil),       /* text_eval=Determine:args: */
	13938609641525654217: (*CallPattern)(nil),       /* text_list_eval=Determine:args: */
	15996371593171599094: (*QuotientOf)(nil),        /* number_eval=Div:by: */
	6766679711322815220:  (*During)(nil),            /* bool_eval=During: */
	1731395596460545319:  (*During)(nil),            /* number_eval=During: */
	11253707510276332344: (*ChooseNothingElse)(nil), /* brancher=ElseDo does: */
	12123664166410465852: (*ChooseMore)(nil),        /* brancher=ElseIf:does: */
	10172152994557366141: (*ChooseMore)(nil),        /* brancher=ElseIf:does:else: */
	17293632830864708497: (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from bool:and:does: */
	10015039162719682858: (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from bool:and:does:else: */
	1263939422214672535:  (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from numList:and:does: */
	17344025009387239604: (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from numList:and:does:else: */
	4532307208258130872:  (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from number:and:does: */
	5555096878134439257:  (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from number:and:does:else: */
	3594951751884693612:  (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from record:and:does: */
	10314023593706445389: (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from record:and:does:else: */
	11847168890048694820: (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from recordList:and:does: */
	16079960067179687893: (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from recordList:and:does:else: */
	1721309710566118702:  (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from text:and:does: */
	6221455089989795667:  (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from text:and:does:else: */
	15888640652150297826: (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from textList:and:does: */
	270276177115702711:   (*ChooseMoreValue)(nil),   /* brancher=ElseIf:from textList:and:does:else: */
	1457631626735043065:  (*TriggerCycle)(nil),      /* trigger=Every */
	3787151486442609582:  (*GetValue)(nil),          /* bool_eval=Get object: */
	26868710420597201:    (*GetValue)(nil),          /* num_list_eval=Get object: */
	16455545370882345685: (*GetValue)(nil),          /* number_eval=Get object: */
	14570531964934484241: (*GetValue)(nil),          /* record_eval=Get object: */
	14048948711673899670: (*GetValue)(nil),          /* record_list_eval=Get object: */
	1528671032800848535:  (*GetValue)(nil),          /* text_eval=Get object: */
	503448901093551216:   (*GetValue)(nil),          /* text_list_eval=Get object: */
	14007997708357264695: (*GetValue)(nil),          /* bool_eval=Get variable: */
	8532050021068447980:  (*GetValue)(nil),          /* num_list_eval=Get variable: */
	8990883066418724800:  (*GetValue)(nil),          /* number_eval=Get variable: */
	14520048606590145068: (*GetValue)(nil),          /* record_eval=Get variable: */
	10684035817672719039: (*GetValue)(nil),          /* record_list_eval=Get variable: */
	1008087674907657262:  (*GetValue)(nil),          /* text_eval=Get variable: */
	7245136898346744605:  (*GetValue)(nil),          /* text_list_eval=Get variable: */
	7667478703662631060:  (*HasDominion)(nil),       /* bool_eval=HasDominion: */
	9805093500361992370:  (*IdOf)(nil),              /* text_eval=IdOf: */
	7148628340285471837:  (*ChooseAction)(nil),      /* brancher=If:does: */
	14393611566046450287: (*ChooseAction)(nil),      /* execute=If:does: */
	6302964726971699110:  (*ChooseAction)(nil),      /* brancher=If:does:else: */
	14501220926082590620: (*ChooseAction)(nil),      /* execute=If:does:else: */
	17422956557743702456: (*ChooseValue)(nil),       /* brancher=If:from bool:and:does: */
	15017254134758620782: (*ChooseValue)(nil),       /* execute=If:from bool:and:does: */
	1270781443612768089:  (*ChooseValue)(nil),       /* brancher=If:from bool:and:does:else: */
	9128016781271004179:  (*ChooseValue)(nil),       /* execute=If:from bool:and:does:else: */
	4239861794794232528:  (*ChooseValue)(nil),       /* brancher=If:from numList:and:does: */
	8840439650252490294:  (*ChooseValue)(nil),       /* execute=If:from numList:and:does: */
	5393227972194533473:  (*ChooseValue)(nil),       /* brancher=If:from numList:and:does:else: */
	1272278488687958251:  (*ChooseValue)(nil),       /* execute=If:from numList:and:does:else: */
	8956797246285213677:  (*ChooseValue)(nil),       /* brancher=If:from number:and:does: */
	16074758462198199363: (*ChooseValue)(nil),       /* execute=If:from number:and:does: */
	11241310528320233814: (*ChooseValue)(nil),       /* brancher=If:from number:and:does:else: */
	2025490709402994000:  (*ChooseValue)(nil),       /* execute=If:from number:and:does:else: */
	14630675154245371657: (*ChooseValue)(nil),       /* brancher=If:from record:and:does: */
	4839577635082465035:  (*ChooseValue)(nil),       /* execute=If:from record:and:does: */
	9961369399137109106:  (*ChooseValue)(nil),       /* brancher=If:from record:and:does:else: */
	909397421382488072:   (*ChooseValue)(nil),       /* execute=If:from record:and:does:else: */
	11402537131020082237: (*ChooseValue)(nil),       /* brancher=If:from recordList:and:does: */
	12430588408770992611: (*ChooseValue)(nil),       /* execute=If:from recordList:and:does: */
	10775883632195360518: (*ChooseValue)(nil),       /* brancher=If:from recordList:and:does:else: */
	4571023260385107056:  (*ChooseValue)(nil),       /* execute=If:from recordList:and:does:else: */
	15877245316294031595: (*ChooseValue)(nil),       /* brancher=If:from text:and:does: */
	4881940430906735205:  (*ChooseValue)(nil),       /* execute=If:from text:and:does: */
	2882126629424455016:  (*ChooseValue)(nil),       /* brancher=If:from text:and:does:else: */
	8368907915607348926:  (*ChooseValue)(nil),       /* execute=If:from text:and:does:else: */
	17858312151022311939: (*ChooseValue)(nil),       /* brancher=If:from textList:and:does: */
	13196879225624420393: (*ChooseValue)(nil),       /* execute=If:from textList:and:does: */
	10973082176696567440: (*ChooseValue)(nil),       /* brancher=If:from textList:and:does:else: */
	13447163397853831058: (*ChooseValue)(nil),       /* execute=If:from textList:and:does:else: */
	11335666314438122404: (*SumOf)(nil),             /* number_eval=Inc: */
	425597877445155633:   (*SumOf)(nil),             /* number_eval=Inc:by: */
	10867951538760575464: (*IsEmpty)(nil),           /* bool_eval=Is empty: */
	17183768313478169229: (*ObjectExists)(nil),      /* bool_eval=Is valid: */
	10106284345457008764: (*Join)(nil),              /* text_eval=Join parts: */
	16037301925772243654: (*Join)(nil),              /* text_eval=Join:parts: */
	16305715626122315047: (*KindOf)(nil),            /* text_eval=KindOf: */
	16744881049704292640: (*IsKindOf)(nil),          /* bool_eval=KindOf:is: */
	7296079450764183372:  (*IsExactKindOf)(nil),     /* bool_eval=KindOf:isExactly: */
	6869420318733086481:  (*KindsOf)(nil),           /* text_list_eval=KindsOf: */
	11334467785012784241: (*MakeLowercase)(nil),     /* text_eval=Lower: */
	7007374677444567783:  (*Matches)(nil),           /* bool_eval=Matches:to: */
	3739424143354382333:  (*RemainderOf)(nil),       /* number_eval=Mod:by: */
	4934610559616542639:  (*ProductOf)(nil),         /* number_eval=Mul:by: */
	15519818243985955688: (*NameOf)(nil),            /* text_eval=NameOf: */
	1310533520550597035:  (*Never)(nil),             /* bool_eval=Never */
	13242431772773468478: (*Next)(nil),              /* execute=Next */
	3572677870333466638:  (*Not)(nil),               /* bool_eval=Not: */
	2793972640309351788:  (*ChooseNum)(nil),         /* number_eval=Num if:then: */
	1916074756917320013:  (*ChooseNum)(nil),         /* number_eval=Num if:then:else: */
	18009133328614046007: (*PrintNumWord)(nil),      /* text_eval=Numeral words: */
	5709077775967698380:  (*PrintNum)(nil),          /* text_eval=Numeral: */
	7215745238754840573:  (*Blankline)(nil),         /* execute=P */
	11420921600352749983: (*Pluralize)(nil),         /* text_eval=Plural of: */
	2842299911742259355:  (*While)(nil),             /* execute=Repeating:does: */
	10473004701492618907: (*Response)(nil),          /* text_eval=Response: */
	7255385262037338050:  (*Response)(nil),          /* text_eval=Response:text: */
	12963686195606417453: (*MakeReversed)(nil),      /* text_eval=Reverse text: */
	18412814242923983245: (*Row)(nil),               /* text_eval=Row does: */
	176976729959796892:   (*Rows)(nil),              /* text_eval=Rows does: */
	9556993961571292952:  (*SayText)(nil),           /* execute=Say: */
	10829518726009615643: (*CallSend)(nil),          /* bool_eval=Send:event: */
	5953636708531320523:  (*CallSend)(nil),          /* execute=Send:event: */
	10747671703915852065: (*MakeSentenceCase)(nil),  /* text_eval=Sentence: */
	4965185253517693468:  (*SetValue)(nil),          /* execute=Set object:from bool: */
	7556745598404233428:  (*SetValue)(nil),          /* execute=Set object:from numList: */
	8735907795435309039:  (*SetValue)(nil),          /* execute=Set object:from number: */
	10709952200914288807: (*SetValue)(nil),          /* execute=Set object:from record: */
	5786508692994240911:  (*SetValue)(nil),          /* execute=Set object:from recordList: */
	8330522524214153001:  (*SetValue)(nil),          /* execute=Set object:from text: */
	8872658560125235229:  (*SetValue)(nil),          /* execute=Set object:from textList: */
	12346400342841196709: (*SetValue)(nil),          /* execute=Set variable:from bool: */
	12135759660878681043: (*SetValue)(nil),          /* execute=Set variable:from numList: */
	18353419269292744622: (*SetValue)(nil),          /* execute=Set variable:from number: */
	2428131260514854178:  (*SetValue)(nil),          /* execute=Set variable:from record: */
	10938150425622553578: (*SetValue)(nil),          /* execute=Set variable:from recordList: */
	7748975654977840844:  (*SetValue)(nil),          /* execute=Set variable:from text: */
	10840237758761273296: (*SetValue)(nil),          /* execute=Set variable:from textList: */
	3632089819497852687:  (*CallShuffle)(nil),       /* text_eval=Shuffle:over: */
	2397382738676796596:  (*Singularize)(nil),       /* text_eval=Singular of: */
	1629446371562398452:  (*SlashText)(nil),         /* text_eval=Slashes does: */
	11448029373331046522: (*SpanText)(nil),          /* text_eval=Spaces does: */
	10180508752412200934: (*CallTerminal)(nil),      /* text_eval=Stopping:over: */
	10878271994667616824: (*MakeTitleCase)(nil),     /* text_eval=Title: */
	2711869841453509536:  (*CallTrigger)(nil),       /* bool_eval=Trigger:on:num: */
	9953804072544503126:  (*ChooseText)(nil),        /* text_eval=Txt if:then: */
	5534583393866490763:  (*ChooseText)(nil),        /* text_eval=Txt if:then:else: */
	5481656653805454214:  (*MakeUppercase)(nil),     /* text_eval=Upper: */
	16612725309683107572: (*Softline)(nil),          /* execute=Wbr */
}
