package pattern

import (
	"git.sr.ht/~ionous/iffy/rt"
	g "git.sr.ht/~ionous/iffy/rt/generic"
	"git.sr.ht/~ionous/iffy/rt/safe"
)

// track the number of times a particular field gets successfully written to.
type Results struct {
	rt.Scope
	watch string
	sets  int
}

func NewResults(rec *g.Record, res string) *Results {
	return &Results{
		Scope: g.RecordOf(rec),
		watch: res,
	}
}

func (rw *Results) SetFieldByName(field string, val g.Value) (err error) {
	if e := rw.Scope.SetFieldByName(field, val); e != nil {
		err = e
	} else if field == rw.watch {
		rw.sets++
		// we could also store the last value set,
		// and use that for our result --
		// but if nothing is set, it feels better to use the default record value production
		// generated by record.GetNamedField
	}
	return
}

// // RunWithScope - note: assumes whatever scope is needed to run the pattern has already been setup.
func (rw *Results) ApplyRules(run rt.Runtime, rules []rt.Rule, allFlags rt.Flags) (err error) {
	sets := rw.sets
	for i, cnt := 0, len(rules); i < cnt && allFlags != 0; i++ {
		if ranFlag, e := safe.ApplyRule(run, rules[i], allFlags); e != nil {
			err = e
		} else if ranFlag != 0 {
			didSomething := (rw.sets > sets)
			sets = rw.sets
			// if we ran a prefix or a post fix rule and it did something, we are done.
			if didSomething && ranFlag != rt.Infix {
				break
			}
			// otherwise, if an infix rule did something
			// check the other kinds of rules
			// ditto if we dont expect the pattern to return anything:
			// in that case we just want to do the first of each rule type.
			if didSomething || len(rw.watch) == 0 {
				allFlags = allFlags &^ ranFlag
			}
		}
	}
	return
}
