// shuttle communication
package frame

//
// Code generated by Tapestry; edit at your own risk.
//

import (
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/lang/typeinfo"
)

// event, a type of slot.
var Zt_Event = typeinfo.Slot{
	Name: "event",
}

// Holds a single slot.
type Event_Slot struct{ Value Event }

// Implements [typeinfo.Instance] for a single slot.
func (*Event_Slot) TypeInfo() typeinfo.T {
	return &Zt_Event
}

// Holds a slice of slots.
type Event_Slots []Event

// Implements [typeinfo.Instance] for a slice of slots.
func (*Event_Slots) TypeInfo() typeinfo.T {
	return &Zt_Event
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *Event_Slots) Repeats() bool {
	return len(*op) > 0
}

type Frame struct {
	Result string
	Events []Event
	Error  string
	Markup map[string]any
}

// frame, a type of flow.
var Zt_Frame typeinfo.Flow

// Implements [typeinfo.Instance]
func (*Frame) TypeInfo() typeinfo.T {
	return &Zt_Frame
}

// Implements [typeinfo.Markup]
func (op *Frame) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// Holds a slice of type Frame.
type Frame_Slice []Frame

// Implements [typeinfo.Instance] for a slice of Frame.
func (*Frame_Slice) TypeInfo() typeinfo.T {
	return &Zt_Frame
}

// Implements [typeinfo.Repeats] for a slice of Frame.
func (op *Frame_Slice) Repeats() bool {
	return len(*op) > 0
}

type FrameOutput struct {
	Text   string
	Markup map[string]any
}

// frame_output, a type of flow.
var Zt_FrameOutput typeinfo.Flow

// Implements [typeinfo.Instance]
func (*FrameOutput) TypeInfo() typeinfo.T {
	return &Zt_FrameOutput
}

// Implements [typeinfo.Markup]
func (op *FrameOutput) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// Ensures the command implements its specified slots.
var _ Event = (*FrameOutput)(nil)

// Holds a slice of type FrameOutput.
type FrameOutput_Slice []FrameOutput

// Implements [typeinfo.Instance] for a slice of FrameOutput.
func (*FrameOutput_Slice) TypeInfo() typeinfo.T {
	return &Zt_FrameOutput
}

// Implements [typeinfo.Repeats] for a slice of FrameOutput.
func (op *FrameOutput_Slice) Repeats() bool {
	return len(*op) > 0
}

type SceneStarted struct {
	Domains []string
	Markup  map[string]any
}

// scene_started, a type of flow.
var Zt_SceneStarted typeinfo.Flow

// Implements [typeinfo.Instance]
func (*SceneStarted) TypeInfo() typeinfo.T {
	return &Zt_SceneStarted
}

// Implements [typeinfo.Markup]
func (op *SceneStarted) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// Ensures the command implements its specified slots.
var _ Event = (*SceneStarted)(nil)

// Holds a slice of type SceneStarted.
type SceneStarted_Slice []SceneStarted

// Implements [typeinfo.Instance] for a slice of SceneStarted.
func (*SceneStarted_Slice) TypeInfo() typeinfo.T {
	return &Zt_SceneStarted
}

// Implements [typeinfo.Repeats] for a slice of SceneStarted.
func (op *SceneStarted_Slice) Repeats() bool {
	return len(*op) > 0
}

type SceneEnded struct {
	Domains []string
	Markup  map[string]any
}

// scene_ended, a type of flow.
var Zt_SceneEnded typeinfo.Flow

// Implements [typeinfo.Instance]
func (*SceneEnded) TypeInfo() typeinfo.T {
	return &Zt_SceneEnded
}

// Implements [typeinfo.Markup]
func (op *SceneEnded) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// Ensures the command implements its specified slots.
var _ Event = (*SceneEnded)(nil)

// Holds a slice of type SceneEnded.
type SceneEnded_Slice []SceneEnded

// Implements [typeinfo.Instance] for a slice of SceneEnded.
func (*SceneEnded_Slice) TypeInfo() typeinfo.T {
	return &Zt_SceneEnded
}

// Implements [typeinfo.Repeats] for a slice of SceneEnded.
func (op *SceneEnded_Slice) Repeats() bool {
	return len(*op) > 0
}

type StateChanged struct {
	Noun   string
	Aspect string
	Prev   string
	Trait  string
	Markup map[string]any
}

// state_changed, a type of flow.
var Zt_StateChanged typeinfo.Flow

// Implements [typeinfo.Instance]
func (*StateChanged) TypeInfo() typeinfo.T {
	return &Zt_StateChanged
}

// Implements [typeinfo.Markup]
func (op *StateChanged) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// Ensures the command implements its specified slots.
var _ Event = (*StateChanged)(nil)

// Holds a slice of type StateChanged.
type StateChanged_Slice []StateChanged

// Implements [typeinfo.Instance] for a slice of StateChanged.
func (*StateChanged_Slice) TypeInfo() typeinfo.T {
	return &Zt_StateChanged
}

// Implements [typeinfo.Repeats] for a slice of StateChanged.
func (op *StateChanged_Slice) Repeats() bool {
	return len(*op) > 0
}

type PairChanged struct {
	A      string
	B      string
	Rel    string
	Markup map[string]any
}

// pair_changed, a type of flow.
var Zt_PairChanged typeinfo.Flow

// Implements [typeinfo.Instance]
func (*PairChanged) TypeInfo() typeinfo.T {
	return &Zt_PairChanged
}

// Implements [typeinfo.Markup]
func (op *PairChanged) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// Ensures the command implements its specified slots.
var _ Event = (*PairChanged)(nil)

// Holds a slice of type PairChanged.
type PairChanged_Slice []PairChanged

// Implements [typeinfo.Instance] for a slice of PairChanged.
func (*PairChanged_Slice) TypeInfo() typeinfo.T {
	return &Zt_PairChanged
}

// Implements [typeinfo.Repeats] for a slice of PairChanged.
func (op *PairChanged_Slice) Repeats() bool {
	return len(*op) > 0
}

// init the terms of all flows in init
// so that they can refer to each other when needed.
func init() {
	Zt_Frame = typeinfo.Flow{
		Name: "frame",
		Lede: "frame",
		Terms: []typeinfo.Term{{
			Name:  "result",
			Label: "result",
			Type:  &prim.Zt_Text,
		}, {
			Name:    "events",
			Label:   "events",
			Repeats: true,
			Type:    &Zt_Event,
		}, {
			Name:     "error",
			Label:    "error",
			Optional: true,
			Type:     &prim.Zt_Text,
		}},
	}
	Zt_FrameOutput = typeinfo.Flow{
		Name: "frame_output",
		Lede: "frame_output",
		Terms: []typeinfo.Term{{
			Name: "text",
			Type: &prim.Zt_Text,
		}},
		Slots: []*typeinfo.Slot{
			&Zt_Event,
		},
	}
	Zt_SceneStarted = typeinfo.Flow{
		Name: "scene_started",
		Lede: "scene_started",
		Terms: []typeinfo.Term{{
			Name:    "domains",
			Repeats: true,
			Type:    &prim.Zt_Text,
		}},
		Slots: []*typeinfo.Slot{
			&Zt_Event,
		},
	}
	Zt_SceneEnded = typeinfo.Flow{
		Name: "scene_ended",
		Lede: "scene_ended",
		Terms: []typeinfo.Term{{
			Name:    "domains",
			Repeats: true,
			Type:    &prim.Zt_Text,
		}},
		Slots: []*typeinfo.Slot{
			&Zt_Event,
		},
	}
	Zt_StateChanged = typeinfo.Flow{
		Name: "state_changed",
		Lede: "state_changed",
		Terms: []typeinfo.Term{{
			Name:  "noun",
			Label: "noun",
			Type:  &prim.Zt_Text,
		}, {
			Name:  "aspect",
			Label: "aspect",
			Type:  &prim.Zt_Text,
		}, {
			Name:  "prev",
			Label: "prev",
			Type:  &prim.Zt_Text,
		}, {
			Name:  "trait",
			Label: "trait",
			Type:  &prim.Zt_Text,
		}},
		Slots: []*typeinfo.Slot{
			&Zt_Event,
		},
	}
	Zt_PairChanged = typeinfo.Flow{
		Name: "pair_changed",
		Lede: "pair_changed",
		Terms: []typeinfo.Term{{
			Name:  "a",
			Label: "a",
			Type:  &prim.Zt_Text,
		}, {
			Name:  "b",
			Label: "b",
			Type:  &prim.Zt_Text,
		}, {
			Name:  "rel",
			Label: "rel",
			Type:  &prim.Zt_Text,
		}},
		Slots: []*typeinfo.Slot{
			&Zt_Event,
		},
	}
}

// package listing of type data
var Z_Types = typeinfo.TypeSet{
	Name: "frame",
	Comment: []string{
		"shuttle communication",
	},

	Slot:       z_slot_list,
	Flow:       z_flow_list,
	Signatures: z_signatures,
}

// A list of all slots in this this package.
// ( ex. for generating blockly shapes )
var z_slot_list = []*typeinfo.Slot{
	&Zt_Event,
}

// A list of all flows in this this package.
// ( ex. for reading blockly blocks )
var z_flow_list = []*typeinfo.Flow{
	&Zt_Frame,
	&Zt_FrameOutput,
	&Zt_SceneStarted,
	&Zt_SceneEnded,
	&Zt_StateChanged,
	&Zt_PairChanged,
}

// a list of all command signatures
// ( for processing and verifying story files )
var z_signatures = map[uint64]typeinfo.Instance{
	14657663848717440116: (*Frame)(nil),        /* Frame result:events: */
	2438049115146588168:  (*Frame)(nil),        /* Frame result:events:error: */
	4385780296792938688:  (*FrameOutput)(nil),  /* event=FrameOutput: */
	17021232753503984522: (*PairChanged)(nil),  /* event=PairChanged a:b:rel: */
	14005264853352099464: (*SceneEnded)(nil),   /* event=SceneEnded: */
	12902248384806780167: (*SceneStarted)(nil), /* event=SceneStarted: */
	7027046405509259850:  (*StateChanged)(nil), /* event=StateChanged noun:aspect:prev:trait: */
}
