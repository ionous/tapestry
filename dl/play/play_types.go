// Code generated by Tapestry; edit at your own risk.
package play

import (
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/lang/typeinfo"
	"strconv"
)

// play_message, a type of slot.
var Zt_PlayMessage = typeinfo.Slot{
	Name: "play_message",
	Markup: map[string]any{
		"comment": "a client-server message for the play app",
	},
}

// holds a single slot
// FIX: currently provided by the spec
type FIX_PlayMessage_Slot struct{ Value PlayMessage }

// implements typeinfo.Inspector for a single slot.
func (*FIX_PlayMessage_Slot) Inspect() (typeinfo.T, bool) {
	return &Zt_PlayMessage, false
}

// holds a slice of slots
type PlayMessage_Slots []PlayMessage

// implements typeinfo.Inspector for a series of slots.
func (*PlayMessage_Slots) Inspect() (typeinfo.T, bool) {
	return &Zt_PlayMessage, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_PlayLog struct {
	Log    string
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*PlayLog) Inspect() (typeinfo.T, bool) {
	return &Zt_PlayLog, false
}

// return a valid markup map, creating it if necessary.
func (op *PlayLog) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ PlayMessage = (*PlayLog)(nil)

// play_log, a type of flow.
var Zt_PlayLog = typeinfo.Flow{
	Name: "play_log",
	Lede: "play",
	Terms: []typeinfo.Term{{
		Name:  "log",
		Label: "log",
		Type:  &prim.Zt_Text,
	}},
	Slots: []*typeinfo.Slot{
		&Zt_PlayMessage,
	},
	Markup: map[string]any{
		"comment": "a log message that can optionally be displayed to the client.",
	},
}

// holds a slice of type play_log
// FIX: duplicates the spec decl.
type FIX_PlayLog_Slice []PlayLog

// implements typeinfo.Inspector
func (*PlayLog_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_PlayLog, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_PlayMode struct {
	Mode   FIX_PlayModes
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*PlayMode) Inspect() (typeinfo.T, bool) {
	return &Zt_PlayMode, false
}

// return a valid markup map, creating it if necessary.
func (op *PlayMode) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ PlayMessage = (*PlayMode)(nil)

// play_mode, a type of flow.
var Zt_PlayMode = typeinfo.Flow{
	Name: "play_mode",
	Lede: "play",
	Terms: []typeinfo.Term{{
		Name:  "mode",
		Label: "mode",
		Type:  &Zt_PlayModes,
	}},
	Slots: []*typeinfo.Slot{
		&Zt_PlayMessage,
	},
	Markup: map[string]any{
		"comment": "app level change in state.",
	},
}

// holds a slice of type play_mode
// FIX: duplicates the spec decl.
type FIX_PlayMode_Slice []PlayMode

// implements typeinfo.Inspector
func (*PlayMode_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_PlayMode, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_PlayOut struct {
	Out    string
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*PlayOut) Inspect() (typeinfo.T, bool) {
	return &Zt_PlayOut, false
}

// return a valid markup map, creating it if necessary.
func (op *PlayOut) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ PlayMessage = (*PlayOut)(nil)

// play_out, a type of flow.
var Zt_PlayOut = typeinfo.Flow{
	Name: "play_out",
	Lede: "play",
	Terms: []typeinfo.Term{{
		Name:  "out",
		Label: "out",
		Type:  &prim.Zt_Text,
	}},
	Slots: []*typeinfo.Slot{
		&Zt_PlayMessage,
	},
	Markup: map[string]any{
		"comment": "output from the game itself.",
	},
}

// holds a slice of type play_out
// FIX: duplicates the spec decl.
type FIX_PlayOut_Slice []PlayOut

// implements typeinfo.Inspector
func (*PlayOut_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_PlayOut, true
}

// PlayModes, a type of str enum.
type FIX_PlayModes int

// enumerated values of PlayModes
const (
	C_PlayModes_Asm FIX_PlayModes = iota
	C_PlayModes_Play
	C_PlayModes_Complete
	C_PlayModes_Error
)

func MakePlayModes(str string) (ret FIX_PlayModes, okay bool) {
	if i := Zt_PlayModes.FindOption(str); i >= 0 {
		ret, okay = FIX_PlayModes(i), true
	}
	return
}

func (op FIX_PlayModes) String() (ret string) {
	if i, opts := int(op), Zt_PlayModes.Options; i >= 0 && i < len(opts) {
		ret = opts[i]
	} else {
		ret = "Invalid PlayModes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return
}

// play_modes, a type of str enum.
var Zt_PlayModes = typeinfo.Str{
	Name: "play_modes",
	Options: []string{
		"asm",
		"play",
		"complete",
		"error",
	},
	Markup: map[string]any{
		"comment": "enum for play play_mode",
	},
}

// package listing of type data
var Z_Types = typeinfo.TypeSet{
	Name:       "play",
	Slot:       z_slot_list,
	Flow:       z_flow_list,
	Str:        z_str_list,
	Signatures: z_signatures,
}

// a list of all slots in this this package
// ( ex. for generating blockly shapes )
var z_slot_list = []*typeinfo.Slot{
	&Zt_PlayMessage,
}

// a list of all flows in this this package
// ( ex. for reading blockly blocks )
var z_flow_list = []*typeinfo.Flow{
	&Zt_PlayLog,
	&Zt_PlayMode,
	&Zt_PlayOut,
}

// a list of all strs in this this package
var z_str_list = []*typeinfo.Str{
	&Zt_PlayModes,
}

// a list of all command signatures
// ( for processing and verifying story files )
var z_signatures = map[uint64]any{
	17624726337788752012: (*PlayLog)(nil),  /* play_message=Play log: */
	4988029522939467359:  (*PlayMode)(nil), /* play_message=Play mode: */
	14741822345399231886: (*PlayOut)(nil),  /* play_message=Play out: */
}
