// rt
package rtti

//
// Code generated by Tapestry; edit at your own risk.
//

import (
	"git.sr.ht/~ionous/tapestry/lang/typeinfo"
)

// assignment, a type of slot.
var Zt_Assignment = typeinfo.Slot{
	Name: "assignment",
	Markup: map[string]any{
		"comment": "Reads from evals in a uniform manner for common functions.",
	},
}

// Holds a single slot.
type Assignment_Slot struct{ Value Assignment }

// Implements [typeinfo.Instance] for a single slot.
func (*Assignment_Slot) TypeInfo() typeinfo.T {
	return &Zt_Assignment
}

// Holds a slice of slots.
type Assignment_Slots []Assignment

// Implements [typeinfo.Instance] for a slice of slots.
func (*Assignment_Slots) TypeInfo() typeinfo.T {
	return &Zt_Assignment
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *Assignment_Slots) Repeats() bool {
	return len(*op) > 0
}

// bool_eval, a type of slot.
var Zt_BoolEval = typeinfo.Slot{
	Name: "bool_eval",
	Markup: map[string]any{
		"blockly-color": "LOGIC_HUE",
		"comment":       "Statements which return true/false values.",
	},
}

// Holds a single slot.
type BoolEval_Slot struct{ Value BoolEval }

// Implements [typeinfo.Instance] for a single slot.
func (*BoolEval_Slot) TypeInfo() typeinfo.T {
	return &Zt_BoolEval
}

// Holds a slice of slots.
type BoolEval_Slots []BoolEval

// Implements [typeinfo.Instance] for a slice of slots.
func (*BoolEval_Slots) TypeInfo() typeinfo.T {
	return &Zt_BoolEval
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *BoolEval_Slots) Repeats() bool {
	return len(*op) > 0
}

// execute, a type of slot.
var Zt_Execute = typeinfo.Slot{
	Name: "execute",
	Markup: map[string]any{
		"blockly-color": "PROCEDURES_HUE",
		"blockly-stack": true,
		"comment":       "Run a series of statements.",
	},
}

// Holds a single slot.
type Execute_Slot struct{ Value Execute }

// Implements [typeinfo.Instance] for a single slot.
func (*Execute_Slot) TypeInfo() typeinfo.T {
	return &Zt_Execute
}

// Holds a slice of slots.
type Execute_Slots []Execute

// Implements [typeinfo.Instance] for a slice of slots.
func (*Execute_Slots) TypeInfo() typeinfo.T {
	return &Zt_Execute
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *Execute_Slots) Repeats() bool {
	return len(*op) > 0
}

// num_list_eval, a type of slot.
var Zt_NumListEval = typeinfo.Slot{
	Name: "num_list_eval",
	Markup: map[string]any{
		"blockly-color": "MATH_HUE",
		"comment":       "Statements which return a list of numbers.",
	},
}

// Holds a single slot.
type NumListEval_Slot struct{ Value NumListEval }

// Implements [typeinfo.Instance] for a single slot.
func (*NumListEval_Slot) TypeInfo() typeinfo.T {
	return &Zt_NumListEval
}

// Holds a slice of slots.
type NumListEval_Slots []NumListEval

// Implements [typeinfo.Instance] for a slice of slots.
func (*NumListEval_Slots) TypeInfo() typeinfo.T {
	return &Zt_NumListEval
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *NumListEval_Slots) Repeats() bool {
	return len(*op) > 0
}

// number_eval, a type of slot.
var Zt_NumberEval = typeinfo.Slot{
	Name: "number_eval",
	Markup: map[string]any{
		"blockly-color": "MATH_HUE",
		"comment":       "Statements which return a number.",
	},
}

// Holds a single slot.
type NumberEval_Slot struct{ Value NumberEval }

// Implements [typeinfo.Instance] for a single slot.
func (*NumberEval_Slot) TypeInfo() typeinfo.T {
	return &Zt_NumberEval
}

// Holds a slice of slots.
type NumberEval_Slots []NumberEval

// Implements [typeinfo.Instance] for a slice of slots.
func (*NumberEval_Slots) TypeInfo() typeinfo.T {
	return &Zt_NumberEval
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *NumberEval_Slots) Repeats() bool {
	return len(*op) > 0
}

// text_eval, a type of slot.
var Zt_TextEval = typeinfo.Slot{
	Name: "text_eval",
	Markup: map[string]any{
		"blockly-color": "TEXTS_HUE",
		"comment":       "Statements which return text.",
	},
}

// Holds a single slot.
type TextEval_Slot struct{ Value TextEval }

// Implements [typeinfo.Instance] for a single slot.
func (*TextEval_Slot) TypeInfo() typeinfo.T {
	return &Zt_TextEval
}

// Holds a slice of slots.
type TextEval_Slots []TextEval

// Implements [typeinfo.Instance] for a slice of slots.
func (*TextEval_Slots) TypeInfo() typeinfo.T {
	return &Zt_TextEval
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *TextEval_Slots) Repeats() bool {
	return len(*op) > 0
}

// text_list_eval, a type of slot.
var Zt_TextListEval = typeinfo.Slot{
	Name: "text_list_eval",
	Markup: map[string]any{
		"blockly-color": "TEXTS_HUE",
		"comment":       "Statements which return a list of text.",
	},
}

// Holds a single slot.
type TextListEval_Slot struct{ Value TextListEval }

// Implements [typeinfo.Instance] for a single slot.
func (*TextListEval_Slot) TypeInfo() typeinfo.T {
	return &Zt_TextListEval
}

// Holds a slice of slots.
type TextListEval_Slots []TextListEval

// Implements [typeinfo.Instance] for a slice of slots.
func (*TextListEval_Slots) TypeInfo() typeinfo.T {
	return &Zt_TextListEval
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *TextListEval_Slots) Repeats() bool {
	return len(*op) > 0
}

// record_eval, a type of slot.
var Zt_RecordEval = typeinfo.Slot{
	Name: "record_eval",
	Markup: map[string]any{
		"blockly-color": "LISTS_HUE",
		"comment":       "Statements which return a record.",
	},
}

// Holds a single slot.
type RecordEval_Slot struct{ Value RecordEval }

// Implements [typeinfo.Instance] for a single slot.
func (*RecordEval_Slot) TypeInfo() typeinfo.T {
	return &Zt_RecordEval
}

// Holds a slice of slots.
type RecordEval_Slots []RecordEval

// Implements [typeinfo.Instance] for a slice of slots.
func (*RecordEval_Slots) TypeInfo() typeinfo.T {
	return &Zt_RecordEval
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *RecordEval_Slots) Repeats() bool {
	return len(*op) > 0
}

// record_list_eval, a type of slot.
var Zt_RecordListEval = typeinfo.Slot{
	Name: "record_list_eval",
	Markup: map[string]any{
		"blockly-color": "LISTS_HUE",
		"comment":       "Statements which return a list of records.",
	},
}

// Holds a single slot.
type RecordListEval_Slot struct{ Value RecordListEval }

// Implements [typeinfo.Instance] for a single slot.
func (*RecordListEval_Slot) TypeInfo() typeinfo.T {
	return &Zt_RecordListEval
}

// Holds a slice of slots.
type RecordListEval_Slots []RecordListEval

// Implements [typeinfo.Instance] for a slice of slots.
func (*RecordListEval_Slots) TypeInfo() typeinfo.T {
	return &Zt_RecordListEval
}

// Implements [typeinfo.Repeats] for a slice of slots.
func (op *RecordListEval_Slots) Repeats() bool {
	return len(*op) > 0
}

// package listing of type data
var Z_Types = typeinfo.TypeSet{
	Name: "rtti",
	Comment: []string{
		"rt",
	},

	Slot: z_slot_list,
}

// A list of all slots in this this package.
// ( ex. for generating blockly shapes )
var z_slot_list = []*typeinfo.Slot{
	&Zt_Assignment,
	&Zt_BoolEval,
	&Zt_Execute,
	&Zt_NumListEval,
	&Zt_NumberEval,
	&Zt_TextEval,
	&Zt_TextListEval,
	&Zt_RecordEval,
	&Zt_RecordListEval,
}
