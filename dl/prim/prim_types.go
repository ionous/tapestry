// Code generated by Tapestry; edit at your own risk.
package prim

import (
	"git.sr.ht/~ionous/tapestry/lang/typeinfo"
	"strconv"
)

// Bool, a type of str enum.
type FIX_Bool int

// enumerated values of Bool
const (
	C_Bool_True FIX_Bool = iota
	C_Bool_False
)

func (op FIX_Bool) String() (ret string) {
	if i, opts := int(op), Zt_Bool.Options; i >= 0 && i < len(opts) {
		ret = opts[i]
	} else {
		ret = "Invalid Bool(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return
}

// bool, a type of str enum.
var Zt_Bool = typeinfo.Str{
	Name: "bool",
	Options: []string{
		"true",
		"false",
	},
}
var Zt_Lines = typeinfo.Str{
	Name: "lines",
	Markup: map[string]any{
		"comment": "A sequence of characters of any length spanning multiple lines. See also: text.",
	},
}
var Zt_Text = typeinfo.Str{
	Name: "text",
	Markup: map[string]any{
		"comment": "A sequence of characters of any length, all on one line. Examples include letters, words, or short sentences. Text is generally something displayed to the player. See also: lines.",
	},
}

// number, a type of num.
var Zt_Number = typeinfo.Num{
	Name: "number",
}

// package listing of type data
var Z_Types = typeinfo.TypeSet{
	Name: "prim",
	Str:  z_str_list,
	Num:  z_num_list,
}

// a list of all strs in this this package
var z_str_list = []*typeinfo.Str{
	&Zt_Bool,
	&Zt_Lines,
	&Zt_Text,
}

// a list of all nums in this this package
var z_num_list = []*typeinfo.Num{
	&Zt_Number,
}
