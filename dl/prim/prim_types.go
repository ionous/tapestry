// prim
package prim

//
// Code generated by Tapestry; edit at your own risk.
//

import (
	"git.sr.ht/~ionous/tapestry/lang/typeinfo"
	"strconv"
)

// A true/false value. Technically, boolean values are described using strings.
// However, the tell, json, and generated go code all expect literal true/false values
// wherever this bool type is detected. Therefore, only the specs need to use this type.
type Bool int

// The enumerated values of Bool.
const (
	C_Bool_False Bool = iota
	C_Bool_True
)

func MakeBool(str string) (ret Bool, okay bool) {
	if i := Zt_Bool.FindOption(str); i >= 0 {
		ret, okay = Bool(i), true
	}
	return
}

func (op Bool) String() (ret string) {
	if i, opts := int(op), Zt_Bool.Options; i >= 0 && i < len(opts) {
		ret = opts[i]
	} else {
		ret = "Invalid Bool(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return
}

// bool, a type of str enum.
var Zt_Bool = typeinfo.Str{
	Name: "bool",
	Options: []string{
		"false",
		"true",
	},
	Markup: map[string]any{
		"comment": []interface{}{"A true/false value. Technically, boolean values are described using strings.", "However, the tell, json, and generated go code all expect literal true/false values", "wherever this bool type is detected. Therefore, only the specs need to use this type."},
	},
}

// A sequence of characters of any length spanning multiple lines. See also: text.
var Zt_Lines = typeinfo.Str{
	Name: "lines",
	Markup: map[string]any{
		"comment": "A sequence of characters of any length spanning multiple lines. See also: text.",
	},
}

// A sequence of characters of any length, all on one line. Examples include letters, words, or short sentences. Text is generally something displayed to the player. See also: lines.
var Zt_Text = typeinfo.Str{
	Name: "text",
	Markup: map[string]any{
		"comment": "A sequence of characters of any length, all on one line. Examples include letters, words, or short sentences. Text is generally something displayed to the player. See also: lines.",
	},
}

// An integer or floating point value.
var Zt_Num = typeinfo.Num{
	Name: "num",
	Markup: map[string]any{
		"comment": "An integer or floating point value.",
	},
}

// package listing of type data
var Z_Types = typeinfo.TypeSet{
	Name: "prim",
	Comment: []string{
		"prim",
	},

	Str: z_str_list,
	Num: z_num_list,
}

// A list of all strs in this this package.
var z_str_list = []*typeinfo.Str{
	&Zt_Bool,
	&Zt_Lines,
	&Zt_Text,
}

// A list of all nums in this this package.
var z_num_list = []*typeinfo.Num{
	&Zt_Num,
}
