// Code generated by "makeops"; edit at your own risk.
package story

import (
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/dl/core"
	"git.sr.ht/~ionous/tapestry/dl/grammar"
	"git.sr.ht/~ionous/tapestry/dl/literal"
	"git.sr.ht/~ionous/tapestry/dl/reader"
	"git.sr.ht/~ionous/tapestry/dl/rel"
	"git.sr.ht/~ionous/tapestry/jsn"
	"git.sr.ht/~ionous/tapestry/rt"
	"github.com/ionous/errutil"
)

// AbstractAction requires a predefined string.
type AbstractAction struct {
	Str string
}

func (op *AbstractAction) String() string {
	return op.Str
}

const AbstractAction_Nothing = "$NOTHING"

func (*AbstractAction) Compose() composer.Spec {
	return composer.Spec{
		Name: AbstractAction_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			AbstractAction_Nothing,
		},
		Strings: []string{
			"nothing",
		},
	}
}

const AbstractAction_Type = "abstract_action"

func (op *AbstractAction) Marshal(m jsn.Marshaler) error {
	return AbstractAction_Marshal(m, op)
}

func AbstractAction_Optional_Marshal(m jsn.Marshaler, val *AbstractAction) (err error) {
	var zero AbstractAction
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = AbstractAction_Marshal(m, val)
	}
	return
}

func AbstractAction_Marshal(m jsn.Marshaler, val *AbstractAction) (err error) {
	return m.MarshalValue(AbstractAction_Type, jsn.MakeEnum(val, &val.Str))
}

type AbstractAction_Slice []AbstractAction

func (op *AbstractAction_Slice) GetType() string { return AbstractAction_Type }

func (op *AbstractAction_Slice) Marshal(m jsn.Marshaler) error {
	return AbstractAction_Repeats_Marshal(m, (*[]AbstractAction)(op))
}

func (op *AbstractAction_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AbstractAction_Slice) SetSize(cnt int) {
	var els []AbstractAction
	if cnt >= 0 {
		els = make(AbstractAction_Slice, cnt)
	}
	(*op) = els
}

func (op *AbstractAction_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AbstractAction_Marshal(m, &(*op)[i])
}

func AbstractAction_Repeats_Marshal(m jsn.Marshaler, vals *[]AbstractAction) error {
	return jsn.RepeatBlock(m, (*AbstractAction_Slice)(vals))
}

func AbstractAction_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AbstractAction) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = AbstractAction_Repeats_Marshal(m, pv)
	}
	return
}

// ActionContext
type ActionContext struct {
	At   reader.Position `if:"internal"`
	Kind SingularKind    `if:"label=_"`
}

func (*ActionContext) Compose() composer.Spec {
	return composer.Spec{
		Name: ActionContext_Type,
		Uses: composer.Type_Flow,
	}
}

const ActionContext_Type = "action_context"
const ActionContext_Field_Kind = "$KIND"

func (op *ActionContext) Marshal(m jsn.Marshaler) error {
	return ActionContext_Marshal(m, op)
}

type ActionContext_Slice []ActionContext

func (op *ActionContext_Slice) GetType() string { return ActionContext_Type }

func (op *ActionContext_Slice) Marshal(m jsn.Marshaler) error {
	return ActionContext_Repeats_Marshal(m, (*[]ActionContext)(op))
}

func (op *ActionContext_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ActionContext_Slice) SetSize(cnt int) {
	var els []ActionContext
	if cnt >= 0 {
		els = make(ActionContext_Slice, cnt)
	}
	(*op) = els
}

func (op *ActionContext_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ActionContext_Marshal(m, &(*op)[i])
}

func ActionContext_Repeats_Marshal(m jsn.Marshaler, vals *[]ActionContext) error {
	return jsn.RepeatBlock(m, (*ActionContext_Slice)(vals))
}

func ActionContext_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ActionContext) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = ActionContext_Repeats_Marshal(m, pv)
	}
	return
}

type ActionContext_Flow struct{ ptr *ActionContext }

func (n ActionContext_Flow) GetType() string      { return ActionContext_Type }
func (n ActionContext_Flow) GetLede() string      { return ActionContext_Type }
func (n ActionContext_Flow) GetFlow() interface{} { return n.ptr }
func (n ActionContext_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ActionContext); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ActionContext_Optional_Marshal(m jsn.Marshaler, pv **ActionContext) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ActionContext_Marshal(m, *pv)
	} else if !enc {
		var v ActionContext
		if err = ActionContext_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ActionContext_Marshal(m jsn.Marshaler, val *ActionContext) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(ActionContext_Flow{val}); err == nil {
		e1 := m.MarshalKey("", ActionContext_Field_Kind)
		if e1 == nil {
			e1 = SingularKind_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ActionContext_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// ActionDecl
type ActionDecl struct {
	At           reader.Position `if:"internal"`
	Event        EventName       `if:"label=_"`
	Action       ActionName      `if:"label=action"`
	ActionParams ActionParams    `if:"label=action_params"`
}

// User implemented slots:
var _ StoryStatement = (*ActionDecl)(nil)

func (*ActionDecl) Compose() composer.Spec {
	return composer.Spec{
		Name: ActionDecl_Type,
		Uses: composer.Type_Flow,
	}
}

const ActionDecl_Type = "action_decl"
const ActionDecl_Field_Event = "$EVENT"
const ActionDecl_Field_Action = "$ACTION"
const ActionDecl_Field_ActionParams = "$ACTION_PARAMS"

func (op *ActionDecl) Marshal(m jsn.Marshaler) error {
	return ActionDecl_Marshal(m, op)
}

type ActionDecl_Slice []ActionDecl

func (op *ActionDecl_Slice) GetType() string { return ActionDecl_Type }

func (op *ActionDecl_Slice) Marshal(m jsn.Marshaler) error {
	return ActionDecl_Repeats_Marshal(m, (*[]ActionDecl)(op))
}

func (op *ActionDecl_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ActionDecl_Slice) SetSize(cnt int) {
	var els []ActionDecl
	if cnt >= 0 {
		els = make(ActionDecl_Slice, cnt)
	}
	(*op) = els
}

func (op *ActionDecl_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ActionDecl_Marshal(m, &(*op)[i])
}

func ActionDecl_Repeats_Marshal(m jsn.Marshaler, vals *[]ActionDecl) error {
	return jsn.RepeatBlock(m, (*ActionDecl_Slice)(vals))
}

func ActionDecl_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ActionDecl) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = ActionDecl_Repeats_Marshal(m, pv)
	}
	return
}

type ActionDecl_Flow struct{ ptr *ActionDecl }

func (n ActionDecl_Flow) GetType() string      { return ActionDecl_Type }
func (n ActionDecl_Flow) GetLede() string      { return ActionDecl_Type }
func (n ActionDecl_Flow) GetFlow() interface{} { return n.ptr }
func (n ActionDecl_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ActionDecl); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ActionDecl_Optional_Marshal(m jsn.Marshaler, pv **ActionDecl) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ActionDecl_Marshal(m, *pv)
	} else if !enc {
		var v ActionDecl
		if err = ActionDecl_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ActionDecl_Marshal(m jsn.Marshaler, val *ActionDecl) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(ActionDecl_Flow{val}); err == nil {
		e1 := m.MarshalKey("", ActionDecl_Field_Event)
		if e1 == nil {
			e1 = EventName_Marshal(m, &val.Event)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ActionDecl_Field_Event))
		}
		e2 := m.MarshalKey("action", ActionDecl_Field_Action)
		if e2 == nil {
			e2 = ActionName_Marshal(m, &val.Action)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ActionDecl_Field_Action))
		}
		e3 := m.MarshalKey("action_params", ActionDecl_Field_ActionParams)
		if e3 == nil {
			e3 = ActionParams_Marshal(m, &val.ActionParams)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", ActionDecl_Field_ActionParams))
		}
		m.EndBlock()
	}
	return
}

// ActionName requires a user-specified string.
type ActionName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *ActionName) String() string {
	return op.Str
}

func (*ActionName) Compose() composer.Spec {
	return composer.Spec{
		Name:        ActionName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const ActionName_Type = "action_name"

func (op *ActionName) Marshal(m jsn.Marshaler) error {
	return ActionName_Marshal(m, op)
}

func ActionName_Optional_Marshal(m jsn.Marshaler, val *ActionName) (err error) {
	var zero ActionName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = ActionName_Marshal(m, val)
	}
	return
}

func ActionName_Marshal(m jsn.Marshaler, val *ActionName) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(ActionName_Type, &val.Str)
}

type ActionName_Slice []ActionName

func (op *ActionName_Slice) GetType() string { return ActionName_Type }

func (op *ActionName_Slice) Marshal(m jsn.Marshaler) error {
	return ActionName_Repeats_Marshal(m, (*[]ActionName)(op))
}

func (op *ActionName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ActionName_Slice) SetSize(cnt int) {
	var els []ActionName
	if cnt >= 0 {
		els = make(ActionName_Slice, cnt)
	}
	(*op) = els
}

func (op *ActionName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ActionName_Marshal(m, &(*op)[i])
}

func ActionName_Repeats_Marshal(m jsn.Marshaler, vals *[]ActionName) error {
	return jsn.RepeatBlock(m, (*ActionName_Slice)(vals))
}

func ActionName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ActionName) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = ActionName_Repeats_Marshal(m, pv)
	}
	return
}

// ActionParams swaps between various options
type ActionParams struct {
	Choice string
	Value  interface{}
}

var ActionParams_Optional_Marshal = ActionParams_Marshal

const ActionParams_Common_Opt = "$COMMON"
const ActionParams_Dual_Opt = "$DUAL"
const ActionParams_None_Opt = "$NONE"

func (*ActionParams) Compose() composer.Spec {
	return composer.Spec{
		Name: ActionParams_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			ActionParams_Common_Opt, ActionParams_Dual_Opt, ActionParams_None_Opt,
		},
		Swaps: []interface{}{
			(*CommonAction)(nil),
			(*PairedAction)(nil),
			(*AbstractAction)(nil),
		},
	}
}

const ActionParams_Type = "action_params"

func (op *ActionParams) GetType() string { return ActionParams_Type }

func (op *ActionParams) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *ActionParams) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case ActionParams_Common_Opt:
		op.Choice, op.Value = c, new(CommonAction)
		okay = true
	case ActionParams_Dual_Opt:
		op.Choice, op.Value = c, new(PairedAction)
		okay = true
	case ActionParams_None_Opt:
		op.Choice, op.Value = c, new(AbstractAction)
		okay = true
	}
	return
}

func (op *ActionParams) Marshal(m jsn.Marshaler) error {
	return ActionParams_Marshal(m, op)
}
func ActionParams_Marshal(m jsn.Marshaler, val *ActionParams) (err error) {
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type ActionParams_Slice []ActionParams

func (op *ActionParams_Slice) GetType() string { return ActionParams_Type }

func (op *ActionParams_Slice) Marshal(m jsn.Marshaler) error {
	return ActionParams_Repeats_Marshal(m, (*[]ActionParams)(op))
}

func (op *ActionParams_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ActionParams_Slice) SetSize(cnt int) {
	var els []ActionParams
	if cnt >= 0 {
		els = make(ActionParams_Slice, cnt)
	}
	(*op) = els
}

func (op *ActionParams_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ActionParams_Marshal(m, &(*op)[i])
}

func ActionParams_Repeats_Marshal(m jsn.Marshaler, vals *[]ActionParams) error {
	return jsn.RepeatBlock(m, (*ActionParams_Slice)(vals))
}

func ActionParams_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ActionParams) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = ActionParams_Repeats_Marshal(m, pv)
	}
	return
}

// Ana requires a predefined string.
type Ana struct {
	Str string
}

func (op *Ana) String() string {
	return op.Str
}

const Ana_A = "$A"
const Ana_An = "$AN"

func (*Ana) Compose() composer.Spec {
	return composer.Spec{
		Name: Ana_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			Ana_A, Ana_An,
		},
		Strings: []string{
			"a", "an",
		},
	}
}

const Ana_Type = "ana"

func (op *Ana) Marshal(m jsn.Marshaler) error {
	return Ana_Marshal(m, op)
}

func Ana_Optional_Marshal(m jsn.Marshaler, val *Ana) (err error) {
	var zero Ana
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Ana_Marshal(m, val)
	}
	return
}

func Ana_Marshal(m jsn.Marshaler, val *Ana) (err error) {
	return m.MarshalValue(Ana_Type, jsn.MakeEnum(val, &val.Str))
}

type Ana_Slice []Ana

func (op *Ana_Slice) GetType() string { return Ana_Type }

func (op *Ana_Slice) Marshal(m jsn.Marshaler) error {
	return Ana_Repeats_Marshal(m, (*[]Ana)(op))
}

func (op *Ana_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Ana_Slice) SetSize(cnt int) {
	var els []Ana
	if cnt >= 0 {
		els = make(Ana_Slice, cnt)
	}
	(*op) = els
}

func (op *Ana_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Ana_Marshal(m, &(*op)[i])
}

func Ana_Repeats_Marshal(m jsn.Marshaler, vals *[]Ana) error {
	return jsn.RepeatBlock(m, (*Ana_Slice)(vals))
}

func Ana_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Ana) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Ana_Repeats_Marshal(m, pv)
	}
	return
}

// AreAn requires a predefined string.
type AreAn struct {
	Str string
}

func (op *AreAn) String() string {
	return op.Str
}

const AreAn_Are = "$ARE"
const AreAn_Area = "$AREA"
const AreAn_Arean = "$AREAN"
const AreAn_Is = "$IS"
const AreAn_Isa = "$ISA"
const AreAn_Isan = "$ISAN"

func (*AreAn) Compose() composer.Spec {
	return composer.Spec{
		Name: AreAn_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			AreAn_Are, AreAn_Area, AreAn_Arean, AreAn_Is, AreAn_Isa, AreAn_Isan,
		},
		Strings: []string{
			"are", "area", "arean", "is", "isa", "isan",
		},
	}
}

const AreAn_Type = "are_an"

func (op *AreAn) Marshal(m jsn.Marshaler) error {
	return AreAn_Marshal(m, op)
}

func AreAn_Optional_Marshal(m jsn.Marshaler, val *AreAn) (err error) {
	var zero AreAn
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = AreAn_Marshal(m, val)
	}
	return
}

func AreAn_Marshal(m jsn.Marshaler, val *AreAn) (err error) {
	return m.MarshalValue(AreAn_Type, jsn.MakeEnum(val, &val.Str))
}

type AreAn_Slice []AreAn

func (op *AreAn_Slice) GetType() string { return AreAn_Type }

func (op *AreAn_Slice) Marshal(m jsn.Marshaler) error {
	return AreAn_Repeats_Marshal(m, (*[]AreAn)(op))
}

func (op *AreAn_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AreAn_Slice) SetSize(cnt int) {
	var els []AreAn
	if cnt >= 0 {
		els = make(AreAn_Slice, cnt)
	}
	(*op) = els
}

func (op *AreAn_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AreAn_Marshal(m, &(*op)[i])
}

func AreAn_Repeats_Marshal(m jsn.Marshaler, vals *[]AreAn) error {
	return jsn.RepeatBlock(m, (*AreAn_Slice)(vals))
}

func AreAn_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AreAn) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = AreAn_Repeats_Marshal(m, pv)
	}
	return
}

// AreBeing requires a predefined string.
type AreBeing struct {
	Str string
}

func (op *AreBeing) String() string {
	return op.Str
}

const AreBeing_Are = "$ARE"
const AreBeing_Is = "$IS"

func (*AreBeing) Compose() composer.Spec {
	return composer.Spec{
		Name: AreBeing_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			AreBeing_Are, AreBeing_Is,
		},
		Strings: []string{
			"are", "is",
		},
	}
}

const AreBeing_Type = "are_being"

func (op *AreBeing) Marshal(m jsn.Marshaler) error {
	return AreBeing_Marshal(m, op)
}

func AreBeing_Optional_Marshal(m jsn.Marshaler, val *AreBeing) (err error) {
	var zero AreBeing
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = AreBeing_Marshal(m, val)
	}
	return
}

func AreBeing_Marshal(m jsn.Marshaler, val *AreBeing) (err error) {
	return m.MarshalValue(AreBeing_Type, jsn.MakeEnum(val, &val.Str))
}

type AreBeing_Slice []AreBeing

func (op *AreBeing_Slice) GetType() string { return AreBeing_Type }

func (op *AreBeing_Slice) Marshal(m jsn.Marshaler) error {
	return AreBeing_Repeats_Marshal(m, (*[]AreBeing)(op))
}

func (op *AreBeing_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AreBeing_Slice) SetSize(cnt int) {
	var els []AreBeing
	if cnt >= 0 {
		els = make(AreBeing_Slice, cnt)
	}
	(*op) = els
}

func (op *AreBeing_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AreBeing_Marshal(m, &(*op)[i])
}

func AreBeing_Repeats_Marshal(m jsn.Marshaler, vals *[]AreBeing) error {
	return jsn.RepeatBlock(m, (*AreBeing_Slice)(vals))
}

func AreBeing_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AreBeing) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = AreBeing_Repeats_Marshal(m, pv)
	}
	return
}

// AreEither requires a predefined string.
type AreEither struct {
	Str string
}

func (op *AreEither) String() string {
	return op.Str
}

const AreEither_Canbe = "$CANBE"
const AreEither_Either = "$EITHER"

func (*AreEither) Compose() composer.Spec {
	return composer.Spec{
		Name: AreEither_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			AreEither_Canbe, AreEither_Either,
		},
		Strings: []string{
			"canbe", "either",
		},
	}
}

const AreEither_Type = "are_either"

func (op *AreEither) Marshal(m jsn.Marshaler) error {
	return AreEither_Marshal(m, op)
}

func AreEither_Optional_Marshal(m jsn.Marshaler, val *AreEither) (err error) {
	var zero AreEither
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = AreEither_Marshal(m, val)
	}
	return
}

func AreEither_Marshal(m jsn.Marshaler, val *AreEither) (err error) {
	return m.MarshalValue(AreEither_Type, jsn.MakeEnum(val, &val.Str))
}

type AreEither_Slice []AreEither

func (op *AreEither_Slice) GetType() string { return AreEither_Type }

func (op *AreEither_Slice) Marshal(m jsn.Marshaler) error {
	return AreEither_Repeats_Marshal(m, (*[]AreEither)(op))
}

func (op *AreEither_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AreEither_Slice) SetSize(cnt int) {
	var els []AreEither
	if cnt >= 0 {
		els = make(AreEither_Slice, cnt)
	}
	(*op) = els
}

func (op *AreEither_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AreEither_Marshal(m, &(*op)[i])
}

func AreEither_Repeats_Marshal(m jsn.Marshaler, vals *[]AreEither) error {
	return jsn.RepeatBlock(m, (*AreEither_Slice)(vals))
}

func AreEither_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AreEither) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = AreEither_Repeats_Marshal(m, pv)
	}
	return
}

// Argument
type Argument struct {
	At   reader.Position `if:"internal"`
	Name string          `if:"label=_,type=text"`
	From rt.Assignment   `if:"label=from"`
}

func (*Argument) Compose() composer.Spec {
	return composer.Spec{
		Name: Argument_Type,
		Uses: composer.Type_Flow,
		Lede: "arg",
	}
}

const Argument_Type = "argument"
const Argument_Field_Name = "$NAME"
const Argument_Field_From = "$FROM"

func (op *Argument) Marshal(m jsn.Marshaler) error {
	return Argument_Marshal(m, op)
}

type Argument_Slice []Argument

func (op *Argument_Slice) GetType() string { return Argument_Type }

func (op *Argument_Slice) Marshal(m jsn.Marshaler) error {
	return Argument_Repeats_Marshal(m, (*[]Argument)(op))
}

func (op *Argument_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Argument_Slice) SetSize(cnt int) {
	var els []Argument
	if cnt >= 0 {
		els = make(Argument_Slice, cnt)
	}
	(*op) = els
}

func (op *Argument_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Argument_Marshal(m, &(*op)[i])
}

func Argument_Repeats_Marshal(m jsn.Marshaler, vals *[]Argument) error {
	return jsn.RepeatBlock(m, (*Argument_Slice)(vals))
}

func Argument_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Argument) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Argument_Repeats_Marshal(m, pv)
	}
	return
}

type Argument_Flow struct{ ptr *Argument }

func (n Argument_Flow) GetType() string      { return Argument_Type }
func (n Argument_Flow) GetLede() string      { return "arg" }
func (n Argument_Flow) GetFlow() interface{} { return n.ptr }
func (n Argument_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Argument); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Argument_Optional_Marshal(m jsn.Marshaler, pv **Argument) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Argument_Marshal(m, *pv)
	} else if !enc {
		var v Argument
		if err = Argument_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Argument_Marshal(m jsn.Marshaler, val *Argument) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(Argument_Flow{val}); err == nil {
		e1 := m.MarshalKey("", Argument_Field_Name)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Argument_Field_Name))
		}
		e2 := m.MarshalKey("from", Argument_Field_From)
		if e2 == nil {
			e2 = rt.Assignment_Marshal(m, &val.From)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", Argument_Field_From))
		}
		m.EndBlock()
	}
	return
}

// Arguments
type Arguments struct {
	At   reader.Position `if:"internal"`
	Args []Argument      `if:"label=_"`
}

func (*Arguments) Compose() composer.Spec {
	return composer.Spec{
		Name: Arguments_Type,
		Uses: composer.Type_Flow,
		Lede: "args",
	}
}

const Arguments_Type = "arguments"
const Arguments_Field_Args = "$ARGS"

func (op *Arguments) Marshal(m jsn.Marshaler) error {
	return Arguments_Marshal(m, op)
}

type Arguments_Slice []Arguments

func (op *Arguments_Slice) GetType() string { return Arguments_Type }

func (op *Arguments_Slice) Marshal(m jsn.Marshaler) error {
	return Arguments_Repeats_Marshal(m, (*[]Arguments)(op))
}

func (op *Arguments_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Arguments_Slice) SetSize(cnt int) {
	var els []Arguments
	if cnt >= 0 {
		els = make(Arguments_Slice, cnt)
	}
	(*op) = els
}

func (op *Arguments_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Arguments_Marshal(m, &(*op)[i])
}

func Arguments_Repeats_Marshal(m jsn.Marshaler, vals *[]Arguments) error {
	return jsn.RepeatBlock(m, (*Arguments_Slice)(vals))
}

func Arguments_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Arguments) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Arguments_Repeats_Marshal(m, pv)
	}
	return
}

type Arguments_Flow struct{ ptr *Arguments }

func (n Arguments_Flow) GetType() string      { return Arguments_Type }
func (n Arguments_Flow) GetLede() string      { return "args" }
func (n Arguments_Flow) GetFlow() interface{} { return n.ptr }
func (n Arguments_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Arguments); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Arguments_Optional_Marshal(m jsn.Marshaler, pv **Arguments) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Arguments_Marshal(m, *pv)
	} else if !enc {
		var v Arguments
		if err = Arguments_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Arguments_Marshal(m jsn.Marshaler, val *Arguments) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(Arguments_Flow{val}); err == nil {
		e1 := m.MarshalKey("", Arguments_Field_Args)
		if e1 == nil {
			e1 = Argument_Repeats_Marshal(m, &val.Args)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Arguments_Field_Args))
		}
		m.EndBlock()
	}
	return
}

// Aspect requires a user-specified string.
type Aspect struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *Aspect) String() string {
	return op.Str
}

func (*Aspect) Compose() composer.Spec {
	return composer.Spec{
		Name:        Aspect_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const Aspect_Type = "aspect"

func (op *Aspect) Marshal(m jsn.Marshaler) error {
	return Aspect_Marshal(m, op)
}

func Aspect_Optional_Marshal(m jsn.Marshaler, val *Aspect) (err error) {
	var zero Aspect
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Aspect_Marshal(m, val)
	}
	return
}

func Aspect_Marshal(m jsn.Marshaler, val *Aspect) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(Aspect_Type, &val.Str)
}

type Aspect_Slice []Aspect

func (op *Aspect_Slice) GetType() string { return Aspect_Type }

func (op *Aspect_Slice) Marshal(m jsn.Marshaler) error {
	return Aspect_Repeats_Marshal(m, (*[]Aspect)(op))
}

func (op *Aspect_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Aspect_Slice) SetSize(cnt int) {
	var els []Aspect
	if cnt >= 0 {
		els = make(Aspect_Slice, cnt)
	}
	(*op) = els
}

func (op *Aspect_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Aspect_Marshal(m, &(*op)[i])
}

func Aspect_Repeats_Marshal(m jsn.Marshaler, vals *[]Aspect) error {
	return jsn.RepeatBlock(m, (*Aspect_Slice)(vals))
}

func Aspect_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Aspect) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Aspect_Repeats_Marshal(m, pv)
	}
	return
}

// AspectProperty
type AspectProperty struct {
	Aspect  string `if:"label=of,type=text"`
	Comment Lines  `if:"label=desc,optional"`
}

// User implemented slots:
var _ PropertySlot = (*AspectProperty)(nil)

func (*AspectProperty) Compose() composer.Spec {
	return composer.Spec{
		Name: AspectProperty_Type,
		Uses: composer.Type_Flow,
		Lede: "aspect",
	}
}

const AspectProperty_Type = "aspect_property"
const AspectProperty_Field_Aspect = "$ASPECT"
const AspectProperty_Field_Comment = "$COMMENT"

func (op *AspectProperty) Marshal(m jsn.Marshaler) error {
	return AspectProperty_Marshal(m, op)
}

type AspectProperty_Slice []AspectProperty

func (op *AspectProperty_Slice) GetType() string { return AspectProperty_Type }

func (op *AspectProperty_Slice) Marshal(m jsn.Marshaler) error {
	return AspectProperty_Repeats_Marshal(m, (*[]AspectProperty)(op))
}

func (op *AspectProperty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AspectProperty_Slice) SetSize(cnt int) {
	var els []AspectProperty
	if cnt >= 0 {
		els = make(AspectProperty_Slice, cnt)
	}
	(*op) = els
}

func (op *AspectProperty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AspectProperty_Marshal(m, &(*op)[i])
}

func AspectProperty_Repeats_Marshal(m jsn.Marshaler, vals *[]AspectProperty) error {
	return jsn.RepeatBlock(m, (*AspectProperty_Slice)(vals))
}

func AspectProperty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AspectProperty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = AspectProperty_Repeats_Marshal(m, pv)
	}
	return
}

type AspectProperty_Flow struct{ ptr *AspectProperty }

func (n AspectProperty_Flow) GetType() string      { return AspectProperty_Type }
func (n AspectProperty_Flow) GetLede() string      { return "aspect" }
func (n AspectProperty_Flow) GetFlow() interface{} { return n.ptr }
func (n AspectProperty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AspectProperty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AspectProperty_Optional_Marshal(m jsn.Marshaler, pv **AspectProperty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AspectProperty_Marshal(m, *pv)
	} else if !enc {
		var v AspectProperty
		if err = AspectProperty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AspectProperty_Marshal(m jsn.Marshaler, val *AspectProperty) (err error) {
	if err = m.MarshalBlock(AspectProperty_Flow{val}); err == nil {
		e0 := m.MarshalKey("of", AspectProperty_Field_Aspect)
		if e0 == nil {
			e0 = literal.Text_Unboxed_Marshal(m, &val.Aspect)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AspectProperty_Field_Aspect))
		}
		e1 := m.MarshalKey("desc", AspectProperty_Field_Comment)
		if e1 == nil {
			e1 = Lines_Optional_Marshal(m, &val.Comment)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", AspectProperty_Field_Comment))
		}
		m.EndBlock()
	}
	return
}

// AspectTraits
type AspectTraits struct {
	Aspect      Aspect      `if:"label=_"`
	TraitPhrase TraitPhrase `if:"label=trait_phrase"`
}

// User implemented slots:
var _ StoryStatement = (*AspectTraits)(nil)

func (*AspectTraits) Compose() composer.Spec {
	return composer.Spec{
		Name: AspectTraits_Type,
		Uses: composer.Type_Flow,
	}
}

const AspectTraits_Type = "aspect_traits"
const AspectTraits_Field_Aspect = "$ASPECT"
const AspectTraits_Field_TraitPhrase = "$TRAIT_PHRASE"

func (op *AspectTraits) Marshal(m jsn.Marshaler) error {
	return AspectTraits_Marshal(m, op)
}

type AspectTraits_Slice []AspectTraits

func (op *AspectTraits_Slice) GetType() string { return AspectTraits_Type }

func (op *AspectTraits_Slice) Marshal(m jsn.Marshaler) error {
	return AspectTraits_Repeats_Marshal(m, (*[]AspectTraits)(op))
}

func (op *AspectTraits_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AspectTraits_Slice) SetSize(cnt int) {
	var els []AspectTraits
	if cnt >= 0 {
		els = make(AspectTraits_Slice, cnt)
	}
	(*op) = els
}

func (op *AspectTraits_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AspectTraits_Marshal(m, &(*op)[i])
}

func AspectTraits_Repeats_Marshal(m jsn.Marshaler, vals *[]AspectTraits) error {
	return jsn.RepeatBlock(m, (*AspectTraits_Slice)(vals))
}

func AspectTraits_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AspectTraits) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = AspectTraits_Repeats_Marshal(m, pv)
	}
	return
}

type AspectTraits_Flow struct{ ptr *AspectTraits }

func (n AspectTraits_Flow) GetType() string      { return AspectTraits_Type }
func (n AspectTraits_Flow) GetLede() string      { return AspectTraits_Type }
func (n AspectTraits_Flow) GetFlow() interface{} { return n.ptr }
func (n AspectTraits_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AspectTraits); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AspectTraits_Optional_Marshal(m jsn.Marshaler, pv **AspectTraits) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AspectTraits_Marshal(m, *pv)
	} else if !enc {
		var v AspectTraits
		if err = AspectTraits_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AspectTraits_Marshal(m jsn.Marshaler, val *AspectTraits) (err error) {
	if err = m.MarshalBlock(AspectTraits_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AspectTraits_Field_Aspect)
		if e0 == nil {
			e0 = Aspect_Marshal(m, &val.Aspect)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AspectTraits_Field_Aspect))
		}
		e1 := m.MarshalKey("trait_phrase", AspectTraits_Field_TraitPhrase)
		if e1 == nil {
			e1 = TraitPhrase_Marshal(m, &val.TraitPhrase)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", AspectTraits_Field_TraitPhrase))
		}
		m.EndBlock()
	}
	return
}

// BoolProperty
type BoolProperty struct {
	NamedProperty `if:"label=_"`
}

// User implemented slots:
var _ PropertySlot = (*BoolProperty)(nil)

func (*BoolProperty) Compose() composer.Spec {
	return composer.Spec{
		Name: BoolProperty_Type,
		Uses: composer.Type_Flow,
		Lede: "bool",
	}
}

const BoolProperty_Type = "bool_property"
const BoolProperty_Field_NamedProperty = "$NAMED_PROPERTY"
const BoolProperty_Field_Name = "$NAME"
const BoolProperty_Field_Type = "$TYPE"
const BoolProperty_Field_Comment = "$COMMENT"

func (op *BoolProperty) Marshal(m jsn.Marshaler) error {
	return BoolProperty_Marshal(m, op)
}

type BoolProperty_Slice []BoolProperty

func (op *BoolProperty_Slice) GetType() string { return BoolProperty_Type }

func (op *BoolProperty_Slice) Marshal(m jsn.Marshaler) error {
	return BoolProperty_Repeats_Marshal(m, (*[]BoolProperty)(op))
}

func (op *BoolProperty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *BoolProperty_Slice) SetSize(cnt int) {
	var els []BoolProperty
	if cnt >= 0 {
		els = make(BoolProperty_Slice, cnt)
	}
	(*op) = els
}

func (op *BoolProperty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return BoolProperty_Marshal(m, &(*op)[i])
}

func BoolProperty_Repeats_Marshal(m jsn.Marshaler, vals *[]BoolProperty) error {
	return jsn.RepeatBlock(m, (*BoolProperty_Slice)(vals))
}

func BoolProperty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]BoolProperty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = BoolProperty_Repeats_Marshal(m, pv)
	}
	return
}

type BoolProperty_Flow struct{ ptr *BoolProperty }

func (n BoolProperty_Flow) GetType() string      { return BoolProperty_Type }
func (n BoolProperty_Flow) GetLede() string      { return "bool" }
func (n BoolProperty_Flow) GetFlow() interface{} { return n.ptr }
func (n BoolProperty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*BoolProperty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func BoolProperty_Optional_Marshal(m jsn.Marshaler, pv **BoolProperty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BoolProperty_Marshal(m, *pv)
	} else if !enc {
		var v BoolProperty
		if err = BoolProperty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BoolProperty_Marshal(m jsn.Marshaler, val *BoolProperty) (err error) {
	if err = m.MarshalBlock(BoolProperty_Flow{val}); err == nil {
		e1 := m.MarshalKey("named", BoolProperty_Field_Name)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", BoolProperty_Field_Name))
		}
		e2 := m.MarshalKey("of", BoolProperty_Field_Type)
		if e2 == nil {
			e2 = literal.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", BoolProperty_Field_Type))
		}
		e3 := m.MarshalKey("desc", BoolProperty_Field_Comment)
		if e3 == nil {
			e3 = Lines_Optional_Marshal(m, &val.Comment)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", BoolProperty_Field_Comment))
		}
		m.EndBlock()
	}
	return
}

// Certainties
type Certainties struct {
	PluralKinds PluralKinds `if:"label=_"`
	AreBeing    AreBeing    `if:"label=are_being"`
	Certainty   Certainty   `if:"label=certainty"`
	Trait       Trait       `if:"label=trait"`
}

// User implemented slots:
var _ StoryStatement = (*Certainties)(nil)

func (*Certainties) Compose() composer.Spec {
	return composer.Spec{
		Name: Certainties_Type,
		Uses: composer.Type_Flow,
	}
}

const Certainties_Type = "certainties"
const Certainties_Field_PluralKinds = "$PLURAL_KINDS"
const Certainties_Field_AreBeing = "$ARE_BEING"
const Certainties_Field_Certainty = "$CERTAINTY"
const Certainties_Field_Trait = "$TRAIT"

func (op *Certainties) Marshal(m jsn.Marshaler) error {
	return Certainties_Marshal(m, op)
}

type Certainties_Slice []Certainties

func (op *Certainties_Slice) GetType() string { return Certainties_Type }

func (op *Certainties_Slice) Marshal(m jsn.Marshaler) error {
	return Certainties_Repeats_Marshal(m, (*[]Certainties)(op))
}

func (op *Certainties_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Certainties_Slice) SetSize(cnt int) {
	var els []Certainties
	if cnt >= 0 {
		els = make(Certainties_Slice, cnt)
	}
	(*op) = els
}

func (op *Certainties_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Certainties_Marshal(m, &(*op)[i])
}

func Certainties_Repeats_Marshal(m jsn.Marshaler, vals *[]Certainties) error {
	return jsn.RepeatBlock(m, (*Certainties_Slice)(vals))
}

func Certainties_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Certainties) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Certainties_Repeats_Marshal(m, pv)
	}
	return
}

type Certainties_Flow struct{ ptr *Certainties }

func (n Certainties_Flow) GetType() string      { return Certainties_Type }
func (n Certainties_Flow) GetLede() string      { return Certainties_Type }
func (n Certainties_Flow) GetFlow() interface{} { return n.ptr }
func (n Certainties_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Certainties); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Certainties_Optional_Marshal(m jsn.Marshaler, pv **Certainties) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Certainties_Marshal(m, *pv)
	} else if !enc {
		var v Certainties
		if err = Certainties_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Certainties_Marshal(m jsn.Marshaler, val *Certainties) (err error) {
	if err = m.MarshalBlock(Certainties_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Certainties_Field_PluralKinds)
		if e0 == nil {
			e0 = PluralKinds_Marshal(m, &val.PluralKinds)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Certainties_Field_PluralKinds))
		}
		e1 := m.MarshalKey("are_being", Certainties_Field_AreBeing)
		if e1 == nil {
			e1 = AreBeing_Marshal(m, &val.AreBeing)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Certainties_Field_AreBeing))
		}
		e2 := m.MarshalKey("certainty", Certainties_Field_Certainty)
		if e2 == nil {
			e2 = Certainty_Marshal(m, &val.Certainty)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", Certainties_Field_Certainty))
		}
		e3 := m.MarshalKey("trait", Certainties_Field_Trait)
		if e3 == nil {
			e3 = Trait_Marshal(m, &val.Trait)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", Certainties_Field_Trait))
		}
		m.EndBlock()
	}
	return
}

// Certainty requires a predefined string.
type Certainty struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *Certainty) String() string {
	return op.Str
}

const Certainty_Usually = "$USUALLY"
const Certainty_Always = "$ALWAYS"
const Certainty_Seldom = "$SELDOM"
const Certainty_Never = "$NEVER"

func (*Certainty) Compose() composer.Spec {
	return composer.Spec{
		Name: Certainty_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			Certainty_Usually, Certainty_Always, Certainty_Seldom, Certainty_Never,
		},
		Strings: []string{
			"usually", "always", "seldom", "never",
		},
	}
}

const Certainty_Type = "certainty"

func (op *Certainty) Marshal(m jsn.Marshaler) error {
	return Certainty_Marshal(m, op)
}

func Certainty_Optional_Marshal(m jsn.Marshaler, val *Certainty) (err error) {
	var zero Certainty
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Certainty_Marshal(m, val)
	}
	return
}

func Certainty_Marshal(m jsn.Marshaler, val *Certainty) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(Certainty_Type, jsn.MakeEnum(val, &val.Str))
}

type Certainty_Slice []Certainty

func (op *Certainty_Slice) GetType() string { return Certainty_Type }

func (op *Certainty_Slice) Marshal(m jsn.Marshaler) error {
	return Certainty_Repeats_Marshal(m, (*[]Certainty)(op))
}

func (op *Certainty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Certainty_Slice) SetSize(cnt int) {
	var els []Certainty
	if cnt >= 0 {
		els = make(Certainty_Slice, cnt)
	}
	(*op) = els
}

func (op *Certainty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Certainty_Marshal(m, &(*op)[i])
}

func Certainty_Repeats_Marshal(m jsn.Marshaler, vals *[]Certainty) error {
	return jsn.RepeatBlock(m, (*Certainty_Slice)(vals))
}

func Certainty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Certainty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Certainty_Repeats_Marshal(m, pv)
	}
	return
}

// Comment Information about the story for you and other authors.
type Comment struct {
	Lines Lines `if:"label=_"`
}

// User implemented slots:
var _ StoryStatement = (*Comment)(nil)
var _ rt.Execute = (*Comment)(nil)

func (*Comment) Compose() composer.Spec {
	return composer.Spec{
		Name: Comment_Type,
		Uses: composer.Type_Flow,
	}
}

const Comment_Type = "comment"
const Comment_Field_Lines = "$LINES"

func (op *Comment) Marshal(m jsn.Marshaler) error {
	return Comment_Marshal(m, op)
}

type Comment_Slice []Comment

func (op *Comment_Slice) GetType() string { return Comment_Type }

func (op *Comment_Slice) Marshal(m jsn.Marshaler) error {
	return Comment_Repeats_Marshal(m, (*[]Comment)(op))
}

func (op *Comment_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Comment_Slice) SetSize(cnt int) {
	var els []Comment
	if cnt >= 0 {
		els = make(Comment_Slice, cnt)
	}
	(*op) = els
}

func (op *Comment_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Comment_Marshal(m, &(*op)[i])
}

func Comment_Repeats_Marshal(m jsn.Marshaler, vals *[]Comment) error {
	return jsn.RepeatBlock(m, (*Comment_Slice)(vals))
}

func Comment_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Comment) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Comment_Repeats_Marshal(m, pv)
	}
	return
}

type Comment_Flow struct{ ptr *Comment }

func (n Comment_Flow) GetType() string      { return Comment_Type }
func (n Comment_Flow) GetLede() string      { return Comment_Type }
func (n Comment_Flow) GetFlow() interface{} { return n.ptr }
func (n Comment_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Comment); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Comment_Optional_Marshal(m jsn.Marshaler, pv **Comment) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Comment_Marshal(m, *pv)
	} else if !enc {
		var v Comment
		if err = Comment_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Comment_Marshal(m jsn.Marshaler, val *Comment) (err error) {
	if err = m.MarshalBlock(Comment_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Comment_Field_Lines)
		if e0 == nil {
			e0 = Lines_Marshal(m, &val.Lines)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Comment_Field_Lines))
		}
		m.EndBlock()
	}
	return
}

// CommonAction
type CommonAction struct {
	At            reader.Position `if:"internal"`
	Kind          SingularKind    `if:"label=_"`
	ActionContext *ActionContext  `if:"label=action_context,optional"`
}

func (*CommonAction) Compose() composer.Spec {
	return composer.Spec{
		Name: CommonAction_Type,
		Uses: composer.Type_Flow,
	}
}

const CommonAction_Type = "common_action"
const CommonAction_Field_Kind = "$KIND"
const CommonAction_Field_ActionContext = "$ACTION_CONTEXT"

func (op *CommonAction) Marshal(m jsn.Marshaler) error {
	return CommonAction_Marshal(m, op)
}

type CommonAction_Slice []CommonAction

func (op *CommonAction_Slice) GetType() string { return CommonAction_Type }

func (op *CommonAction_Slice) Marshal(m jsn.Marshaler) error {
	return CommonAction_Repeats_Marshal(m, (*[]CommonAction)(op))
}

func (op *CommonAction_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CommonAction_Slice) SetSize(cnt int) {
	var els []CommonAction
	if cnt >= 0 {
		els = make(CommonAction_Slice, cnt)
	}
	(*op) = els
}

func (op *CommonAction_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CommonAction_Marshal(m, &(*op)[i])
}

func CommonAction_Repeats_Marshal(m jsn.Marshaler, vals *[]CommonAction) error {
	return jsn.RepeatBlock(m, (*CommonAction_Slice)(vals))
}

func CommonAction_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CommonAction) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = CommonAction_Repeats_Marshal(m, pv)
	}
	return
}

type CommonAction_Flow struct{ ptr *CommonAction }

func (n CommonAction_Flow) GetType() string      { return CommonAction_Type }
func (n CommonAction_Flow) GetLede() string      { return CommonAction_Type }
func (n CommonAction_Flow) GetFlow() interface{} { return n.ptr }
func (n CommonAction_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CommonAction); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CommonAction_Optional_Marshal(m jsn.Marshaler, pv **CommonAction) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CommonAction_Marshal(m, *pv)
	} else if !enc {
		var v CommonAction
		if err = CommonAction_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CommonAction_Marshal(m jsn.Marshaler, val *CommonAction) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(CommonAction_Flow{val}); err == nil {
		e1 := m.MarshalKey("", CommonAction_Field_Kind)
		if e1 == nil {
			e1 = SingularKind_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CommonAction_Field_Kind))
		}
		e2 := m.MarshalKey("action_context", CommonAction_Field_ActionContext)
		if e2 == nil {
			e2 = ActionContext_Optional_Marshal(m, &val.ActionContext)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CommonAction_Field_ActionContext))
		}
		m.EndBlock()
	}
	return
}

// CountOf A guard which returns true based on a counter.
type CountOf struct {
	At      reader.Position `if:"internal"`
	Trigger core.Trigger    `if:"label=_"`
	Num     rt.NumberEval   `if:"label=num"`
}

// User implemented slots:
var _ rt.BoolEval = (*CountOf)(nil)

func (*CountOf) Compose() composer.Spec {
	return composer.Spec{
		Name: CountOf_Type,
		Uses: composer.Type_Flow,
	}
}

const CountOf_Type = "count_of"
const CountOf_Field_Trigger = "$TRIGGER"
const CountOf_Field_Num = "$NUM"

func (op *CountOf) Marshal(m jsn.Marshaler) error {
	return CountOf_Marshal(m, op)
}

type CountOf_Slice []CountOf

func (op *CountOf_Slice) GetType() string { return CountOf_Type }

func (op *CountOf_Slice) Marshal(m jsn.Marshaler) error {
	return CountOf_Repeats_Marshal(m, (*[]CountOf)(op))
}

func (op *CountOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CountOf_Slice) SetSize(cnt int) {
	var els []CountOf
	if cnt >= 0 {
		els = make(CountOf_Slice, cnt)
	}
	(*op) = els
}

func (op *CountOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CountOf_Marshal(m, &(*op)[i])
}

func CountOf_Repeats_Marshal(m jsn.Marshaler, vals *[]CountOf) error {
	return jsn.RepeatBlock(m, (*CountOf_Slice)(vals))
}

func CountOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CountOf) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = CountOf_Repeats_Marshal(m, pv)
	}
	return
}

type CountOf_Flow struct{ ptr *CountOf }

func (n CountOf_Flow) GetType() string      { return CountOf_Type }
func (n CountOf_Flow) GetLede() string      { return CountOf_Type }
func (n CountOf_Flow) GetFlow() interface{} { return n.ptr }
func (n CountOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CountOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CountOf_Optional_Marshal(m jsn.Marshaler, pv **CountOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CountOf_Marshal(m, *pv)
	} else if !enc {
		var v CountOf
		if err = CountOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CountOf_Marshal(m jsn.Marshaler, val *CountOf) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(CountOf_Flow{val}); err == nil {
		e1 := m.MarshalKey("", CountOf_Field_Trigger)
		if e1 == nil {
			e1 = core.Trigger_Marshal(m, &val.Trigger)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CountOf_Field_Trigger))
		}
		e2 := m.MarshalKey("num", CountOf_Field_Num)
		if e2 == nil {
			e2 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", CountOf_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// CycleText
type CycleText struct {
	At    reader.Position `if:"internal"`
	Parts []rt.TextEval   `if:"label=_"`
}

// User implemented slots:
var _ rt.TextEval = (*CycleText)(nil)

func (*CycleText) Compose() composer.Spec {
	return composer.Spec{
		Name: CycleText_Type,
		Uses: composer.Type_Flow,
	}
}

const CycleText_Type = "cycle_text"
const CycleText_Field_Parts = "$PARTS"

func (op *CycleText) Marshal(m jsn.Marshaler) error {
	return CycleText_Marshal(m, op)
}

type CycleText_Slice []CycleText

func (op *CycleText_Slice) GetType() string { return CycleText_Type }

func (op *CycleText_Slice) Marshal(m jsn.Marshaler) error {
	return CycleText_Repeats_Marshal(m, (*[]CycleText)(op))
}

func (op *CycleText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CycleText_Slice) SetSize(cnt int) {
	var els []CycleText
	if cnt >= 0 {
		els = make(CycleText_Slice, cnt)
	}
	(*op) = els
}

func (op *CycleText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CycleText_Marshal(m, &(*op)[i])
}

func CycleText_Repeats_Marshal(m jsn.Marshaler, vals *[]CycleText) error {
	return jsn.RepeatBlock(m, (*CycleText_Slice)(vals))
}

func CycleText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CycleText) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = CycleText_Repeats_Marshal(m, pv)
	}
	return
}

type CycleText_Flow struct{ ptr *CycleText }

func (n CycleText_Flow) GetType() string      { return CycleText_Type }
func (n CycleText_Flow) GetLede() string      { return CycleText_Type }
func (n CycleText_Flow) GetFlow() interface{} { return n.ptr }
func (n CycleText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CycleText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CycleText_Optional_Marshal(m jsn.Marshaler, pv **CycleText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CycleText_Marshal(m, *pv)
	} else if !enc {
		var v CycleText
		if err = CycleText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CycleText_Marshal(m jsn.Marshaler, val *CycleText) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(CycleText_Flow{val}); err == nil {
		e1 := m.MarshalKey("", CycleText_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CycleText_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// Determine
type Determine struct {
	Name      core.PatternName `if:"label=_"`
	Arguments *Arguments       `if:"label=arguments,optional"`
}

// User implemented slots:
var _ rt.Execute = (*Determine)(nil)
var _ rt.BoolEval = (*Determine)(nil)
var _ rt.NumberEval = (*Determine)(nil)
var _ rt.TextEval = (*Determine)(nil)
var _ rt.RecordEval = (*Determine)(nil)
var _ rt.NumListEval = (*Determine)(nil)
var _ rt.TextListEval = (*Determine)(nil)
var _ rt.RecordListEval = (*Determine)(nil)

func (*Determine) Compose() composer.Spec {
	return composer.Spec{
		Name: Determine_Type,
		Uses: composer.Type_Flow,
	}
}

const Determine_Type = "determine"
const Determine_Field_Name = "$NAME"
const Determine_Field_Arguments = "$ARGUMENTS"

func (op *Determine) Marshal(m jsn.Marshaler) error {
	return Determine_Marshal(m, op)
}

type Determine_Slice []Determine

func (op *Determine_Slice) GetType() string { return Determine_Type }

func (op *Determine_Slice) Marshal(m jsn.Marshaler) error {
	return Determine_Repeats_Marshal(m, (*[]Determine)(op))
}

func (op *Determine_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Determine_Slice) SetSize(cnt int) {
	var els []Determine
	if cnt >= 0 {
		els = make(Determine_Slice, cnt)
	}
	(*op) = els
}

func (op *Determine_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Determine_Marshal(m, &(*op)[i])
}

func Determine_Repeats_Marshal(m jsn.Marshaler, vals *[]Determine) error {
	return jsn.RepeatBlock(m, (*Determine_Slice)(vals))
}

func Determine_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Determine) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Determine_Repeats_Marshal(m, pv)
	}
	return
}

type Determine_Flow struct{ ptr *Determine }

func (n Determine_Flow) GetType() string      { return Determine_Type }
func (n Determine_Flow) GetLede() string      { return Determine_Type }
func (n Determine_Flow) GetFlow() interface{} { return n.ptr }
func (n Determine_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Determine); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Determine_Optional_Marshal(m jsn.Marshaler, pv **Determine) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Determine_Marshal(m, *pv)
	} else if !enc {
		var v Determine
		if err = Determine_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Determine_Marshal(m jsn.Marshaler, val *Determine) (err error) {
	if err = m.MarshalBlock(Determine_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Determine_Field_Name)
		if e0 == nil {
			e0 = core.PatternName_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Determine_Field_Name))
		}
		e1 := m.MarshalKey("arguments", Determine_Field_Arguments)
		if e1 == nil {
			e1 = Arguments_Optional_Marshal(m, &val.Arguments)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Determine_Field_Arguments))
		}
		m.EndBlock()
	}
	return
}

// Determiner requires a predefined or user-specified string.
type Determiner struct {
	Str string
}

func (op *Determiner) String() string {
	return op.Str
}

const Determiner_A = "$A"
const Determiner_An = "$AN"
const Determiner_The = "$THE"
const Determiner_Our = "$OUR"

func (*Determiner) Compose() composer.Spec {
	return composer.Spec{
		Name:        Determiner_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
		Choices: []string{
			Determiner_A, Determiner_An, Determiner_The, Determiner_Our,
		},
		Strings: []string{
			"a", "an", "the", "our",
		},
	}
}

const Determiner_Type = "determiner"

func (op *Determiner) Marshal(m jsn.Marshaler) error {
	return Determiner_Marshal(m, op)
}

func Determiner_Optional_Marshal(m jsn.Marshaler, val *Determiner) (err error) {
	var zero Determiner
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Determiner_Marshal(m, val)
	}
	return
}

func Determiner_Marshal(m jsn.Marshaler, val *Determiner) (err error) {
	return m.MarshalValue(Determiner_Type, jsn.MakeEnum(val, &val.Str))
}

type Determiner_Slice []Determiner

func (op *Determiner_Slice) GetType() string { return Determiner_Type }

func (op *Determiner_Slice) Marshal(m jsn.Marshaler) error {
	return Determiner_Repeats_Marshal(m, (*[]Determiner)(op))
}

func (op *Determiner_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Determiner_Slice) SetSize(cnt int) {
	var els []Determiner
	if cnt >= 0 {
		els = make(Determiner_Slice, cnt)
	}
	(*op) = els
}

func (op *Determiner_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Determiner_Marshal(m, &(*op)[i])
}

func Determiner_Repeats_Marshal(m jsn.Marshaler, vals *[]Determiner) error {
	return jsn.RepeatBlock(m, (*Determiner_Slice)(vals))
}

func Determiner_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Determiner) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Determiner_Repeats_Marshal(m, pv)
	}
	return
}

// EventBlock Listeners let objects in the game world react to changes before, during, or after they happen.
type EventBlock struct {
	At       reader.Position `if:"internal"`
	Target   EventTarget     `if:"label=_"`
	Handlers []EventHandler  `if:"label=handlers"`
}

// User implemented slots:
var _ StoryStatement = (*EventBlock)(nil)

func (*EventBlock) Compose() composer.Spec {
	return composer.Spec{
		Name: EventBlock_Type,
		Uses: composer.Type_Flow,
	}
}

const EventBlock_Type = "event_block"
const EventBlock_Field_Target = "$TARGET"
const EventBlock_Field_Handlers = "$HANDLERS"

func (op *EventBlock) Marshal(m jsn.Marshaler) error {
	return EventBlock_Marshal(m, op)
}

type EventBlock_Slice []EventBlock

func (op *EventBlock_Slice) GetType() string { return EventBlock_Type }

func (op *EventBlock_Slice) Marshal(m jsn.Marshaler) error {
	return EventBlock_Repeats_Marshal(m, (*[]EventBlock)(op))
}

func (op *EventBlock_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventBlock_Slice) SetSize(cnt int) {
	var els []EventBlock
	if cnt >= 0 {
		els = make(EventBlock_Slice, cnt)
	}
	(*op) = els
}

func (op *EventBlock_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventBlock_Marshal(m, &(*op)[i])
}

func EventBlock_Repeats_Marshal(m jsn.Marshaler, vals *[]EventBlock) error {
	return jsn.RepeatBlock(m, (*EventBlock_Slice)(vals))
}

func EventBlock_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventBlock) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = EventBlock_Repeats_Marshal(m, pv)
	}
	return
}

type EventBlock_Flow struct{ ptr *EventBlock }

func (n EventBlock_Flow) GetType() string      { return EventBlock_Type }
func (n EventBlock_Flow) GetLede() string      { return EventBlock_Type }
func (n EventBlock_Flow) GetFlow() interface{} { return n.ptr }
func (n EventBlock_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*EventBlock); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func EventBlock_Optional_Marshal(m jsn.Marshaler, pv **EventBlock) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = EventBlock_Marshal(m, *pv)
	} else if !enc {
		var v EventBlock
		if err = EventBlock_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func EventBlock_Marshal(m jsn.Marshaler, val *EventBlock) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(EventBlock_Flow{val}); err == nil {
		e1 := m.MarshalKey("", EventBlock_Field_Target)
		if e1 == nil {
			e1 = EventTarget_Marshal(m, &val.Target)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", EventBlock_Field_Target))
		}
		e2 := m.MarshalKey("handlers", EventBlock_Field_Handlers)
		if e2 == nil {
			e2 = EventHandler_Repeats_Marshal(m, &val.Handlers)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", EventBlock_Field_Handlers))
		}
		m.EndBlock()
	}
	return
}

// EventHandler
type EventHandler struct {
	EventPhase   EventPhase     `if:"label=_"`
	Event        EventName      `if:"label=event"`
	Locals       *PatternLocals `if:"label=locals,optional"`
	PatternRules PatternRules   `if:"label=pattern_rules"`
}

func (*EventHandler) Compose() composer.Spec {
	return composer.Spec{
		Name: EventHandler_Type,
		Uses: composer.Type_Flow,
	}
}

const EventHandler_Type = "event_handler"
const EventHandler_Field_EventPhase = "$EVENT_PHASE"
const EventHandler_Field_Event = "$EVENT"
const EventHandler_Field_Locals = "$LOCALS"
const EventHandler_Field_PatternRules = "$PATTERN_RULES"

func (op *EventHandler) Marshal(m jsn.Marshaler) error {
	return EventHandler_Marshal(m, op)
}

type EventHandler_Slice []EventHandler

func (op *EventHandler_Slice) GetType() string { return EventHandler_Type }

func (op *EventHandler_Slice) Marshal(m jsn.Marshaler) error {
	return EventHandler_Repeats_Marshal(m, (*[]EventHandler)(op))
}

func (op *EventHandler_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventHandler_Slice) SetSize(cnt int) {
	var els []EventHandler
	if cnt >= 0 {
		els = make(EventHandler_Slice, cnt)
	}
	(*op) = els
}

func (op *EventHandler_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventHandler_Marshal(m, &(*op)[i])
}

func EventHandler_Repeats_Marshal(m jsn.Marshaler, vals *[]EventHandler) error {
	return jsn.RepeatBlock(m, (*EventHandler_Slice)(vals))
}

func EventHandler_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventHandler) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = EventHandler_Repeats_Marshal(m, pv)
	}
	return
}

type EventHandler_Flow struct{ ptr *EventHandler }

func (n EventHandler_Flow) GetType() string      { return EventHandler_Type }
func (n EventHandler_Flow) GetLede() string      { return EventHandler_Type }
func (n EventHandler_Flow) GetFlow() interface{} { return n.ptr }
func (n EventHandler_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*EventHandler); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func EventHandler_Optional_Marshal(m jsn.Marshaler, pv **EventHandler) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = EventHandler_Marshal(m, *pv)
	} else if !enc {
		var v EventHandler
		if err = EventHandler_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func EventHandler_Marshal(m jsn.Marshaler, val *EventHandler) (err error) {
	if err = m.MarshalBlock(EventHandler_Flow{val}); err == nil {
		e0 := m.MarshalKey("", EventHandler_Field_EventPhase)
		if e0 == nil {
			e0 = EventPhase_Marshal(m, &val.EventPhase)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", EventHandler_Field_EventPhase))
		}
		e1 := m.MarshalKey("event", EventHandler_Field_Event)
		if e1 == nil {
			e1 = EventName_Marshal(m, &val.Event)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", EventHandler_Field_Event))
		}
		e2 := m.MarshalKey("locals", EventHandler_Field_Locals)
		if e2 == nil {
			e2 = PatternLocals_Optional_Marshal(m, &val.Locals)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", EventHandler_Field_Locals))
		}
		e3 := m.MarshalKey("pattern_rules", EventHandler_Field_PatternRules)
		if e3 == nil {
			e3 = PatternRules_Marshal(m, &val.PatternRules)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", EventHandler_Field_PatternRules))
		}
		m.EndBlock()
	}
	return
}

// EventName requires a user-specified string.
type EventName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *EventName) String() string {
	return op.Str
}

func (*EventName) Compose() composer.Spec {
	return composer.Spec{
		Name:        EventName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const EventName_Type = "event_name"

func (op *EventName) Marshal(m jsn.Marshaler) error {
	return EventName_Marshal(m, op)
}

func EventName_Optional_Marshal(m jsn.Marshaler, val *EventName) (err error) {
	var zero EventName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = EventName_Marshal(m, val)
	}
	return
}

func EventName_Marshal(m jsn.Marshaler, val *EventName) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(EventName_Type, &val.Str)
}

type EventName_Slice []EventName

func (op *EventName_Slice) GetType() string { return EventName_Type }

func (op *EventName_Slice) Marshal(m jsn.Marshaler) error {
	return EventName_Repeats_Marshal(m, (*[]EventName)(op))
}

func (op *EventName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventName_Slice) SetSize(cnt int) {
	var els []EventName
	if cnt >= 0 {
		els = make(EventName_Slice, cnt)
	}
	(*op) = els
}

func (op *EventName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventName_Marshal(m, &(*op)[i])
}

func EventName_Repeats_Marshal(m jsn.Marshaler, vals *[]EventName) error {
	return jsn.RepeatBlock(m, (*EventName_Slice)(vals))
}

func EventName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventName) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = EventName_Repeats_Marshal(m, pv)
	}
	return
}

// EventPhase requires a predefined string.
type EventPhase struct {
	Str string
}

func (op *EventPhase) String() string {
	return op.Str
}

const EventPhase_Before = "$BEFORE"
const EventPhase_While = "$WHILE"
const EventPhase_After = "$AFTER"

func (*EventPhase) Compose() composer.Spec {
	return composer.Spec{
		Name: EventPhase_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			EventPhase_Before, EventPhase_While, EventPhase_After,
		},
		Strings: []string{
			"before", "while", "after",
		},
	}
}

const EventPhase_Type = "event_phase"

func (op *EventPhase) Marshal(m jsn.Marshaler) error {
	return EventPhase_Marshal(m, op)
}

func EventPhase_Optional_Marshal(m jsn.Marshaler, val *EventPhase) (err error) {
	var zero EventPhase
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = EventPhase_Marshal(m, val)
	}
	return
}

func EventPhase_Marshal(m jsn.Marshaler, val *EventPhase) (err error) {
	return m.MarshalValue(EventPhase_Type, jsn.MakeEnum(val, &val.Str))
}

type EventPhase_Slice []EventPhase

func (op *EventPhase_Slice) GetType() string { return EventPhase_Type }

func (op *EventPhase_Slice) Marshal(m jsn.Marshaler) error {
	return EventPhase_Repeats_Marshal(m, (*[]EventPhase)(op))
}

func (op *EventPhase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventPhase_Slice) SetSize(cnt int) {
	var els []EventPhase
	if cnt >= 0 {
		els = make(EventPhase_Slice, cnt)
	}
	(*op) = els
}

func (op *EventPhase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventPhase_Marshal(m, &(*op)[i])
}

func EventPhase_Repeats_Marshal(m jsn.Marshaler, vals *[]EventPhase) error {
	return jsn.RepeatBlock(m, (*EventPhase_Slice)(vals))
}

func EventPhase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventPhase) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = EventPhase_Repeats_Marshal(m, pv)
	}
	return
}

// EventTarget swaps between various options
type EventTarget struct {
	Choice string
	Value  interface{}
}

var EventTarget_Optional_Marshal = EventTarget_Marshal

const EventTarget_Kinds_Opt = "$KINDS"
const EventTarget_NamedNoun_Opt = "$NAMED_NOUN"

func (*EventTarget) Compose() composer.Spec {
	return composer.Spec{
		Name: EventTarget_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			EventTarget_Kinds_Opt, EventTarget_NamedNoun_Opt,
		},
		Swaps: []interface{}{
			(*PluralKinds)(nil),
			(*NamedNoun)(nil),
		},
	}
}

const EventTarget_Type = "event_target"

func (op *EventTarget) GetType() string { return EventTarget_Type }

func (op *EventTarget) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *EventTarget) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case EventTarget_Kinds_Opt:
		op.Choice, op.Value = c, new(PluralKinds)
		okay = true
	case EventTarget_NamedNoun_Opt:
		op.Choice, op.Value = c, new(NamedNoun)
		okay = true
	}
	return
}

func (op *EventTarget) Marshal(m jsn.Marshaler) error {
	return EventTarget_Marshal(m, op)
}
func EventTarget_Marshal(m jsn.Marshaler, val *EventTarget) (err error) {
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type EventTarget_Slice []EventTarget

func (op *EventTarget_Slice) GetType() string { return EventTarget_Type }

func (op *EventTarget_Slice) Marshal(m jsn.Marshaler) error {
	return EventTarget_Repeats_Marshal(m, (*[]EventTarget)(op))
}

func (op *EventTarget_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventTarget_Slice) SetSize(cnt int) {
	var els []EventTarget
	if cnt >= 0 {
		els = make(EventTarget_Slice, cnt)
	}
	(*op) = els
}

func (op *EventTarget_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventTarget_Marshal(m, &(*op)[i])
}

func EventTarget_Repeats_Marshal(m jsn.Marshaler, vals *[]EventTarget) error {
	return jsn.RepeatBlock(m, (*EventTarget_Slice)(vals))
}

func EventTarget_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventTarget) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = EventTarget_Repeats_Marshal(m, pv)
	}
	return
}

// GrammarDecl
type GrammarDecl struct {
	Grammar grammar.GrammarMaker `if:"label=_"`
}

func (*GrammarDecl) Compose() composer.Spec {
	return composer.Spec{
		Name: GrammarDecl_Type,
		Uses: composer.Type_Flow,
	}
}

const GrammarDecl_Type = "grammar_decl"
const GrammarDecl_Field_Grammar = "$GRAMMAR"

func (op *GrammarDecl) Marshal(m jsn.Marshaler) error {
	return GrammarDecl_Marshal(m, op)
}

type GrammarDecl_Slice []GrammarDecl

func (op *GrammarDecl_Slice) GetType() string { return GrammarDecl_Type }

func (op *GrammarDecl_Slice) Marshal(m jsn.Marshaler) error {
	return GrammarDecl_Repeats_Marshal(m, (*[]GrammarDecl)(op))
}

func (op *GrammarDecl_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *GrammarDecl_Slice) SetSize(cnt int) {
	var els []GrammarDecl
	if cnt >= 0 {
		els = make(GrammarDecl_Slice, cnt)
	}
	(*op) = els
}

func (op *GrammarDecl_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return GrammarDecl_Marshal(m, &(*op)[i])
}

func GrammarDecl_Repeats_Marshal(m jsn.Marshaler, vals *[]GrammarDecl) error {
	return jsn.RepeatBlock(m, (*GrammarDecl_Slice)(vals))
}

func GrammarDecl_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]GrammarDecl) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = GrammarDecl_Repeats_Marshal(m, pv)
	}
	return
}

type GrammarDecl_Flow struct{ ptr *GrammarDecl }

func (n GrammarDecl_Flow) GetType() string      { return GrammarDecl_Type }
func (n GrammarDecl_Flow) GetLede() string      { return GrammarDecl_Type }
func (n GrammarDecl_Flow) GetFlow() interface{} { return n.ptr }
func (n GrammarDecl_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*GrammarDecl); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func GrammarDecl_Optional_Marshal(m jsn.Marshaler, pv **GrammarDecl) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = GrammarDecl_Marshal(m, *pv)
	} else if !enc {
		var v GrammarDecl
		if err = GrammarDecl_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func GrammarDecl_Marshal(m jsn.Marshaler, val *GrammarDecl) (err error) {
	if err = m.MarshalBlock(GrammarDecl_Flow{val}); err == nil {
		e0 := m.MarshalKey("", GrammarDecl_Field_Grammar)
		if e0 == nil {
			e0 = grammar.GrammarMaker_Marshal(m, &val.Grammar)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", GrammarDecl_Field_Grammar))
		}
		m.EndBlock()
	}
	return
}

// KindOfNoun
type KindOfNoun struct {
	AreAn        AreAn         `if:"label=_"`
	Trait        []Trait       `if:"label=trait,optional"`
	Kind         SingularKind  `if:"label=kind"`
	NounRelation *NounRelation `if:"label=noun_relation,optional"`
}

func (*KindOfNoun) Compose() composer.Spec {
	return composer.Spec{
		Name: KindOfNoun_Type,
		Uses: composer.Type_Flow,
	}
}

const KindOfNoun_Type = "kind_of_noun"
const KindOfNoun_Field_AreAn = "$ARE_AN"
const KindOfNoun_Field_Trait = "$TRAIT"
const KindOfNoun_Field_Kind = "$KIND"
const KindOfNoun_Field_NounRelation = "$NOUN_RELATION"

func (op *KindOfNoun) Marshal(m jsn.Marshaler) error {
	return KindOfNoun_Marshal(m, op)
}

type KindOfNoun_Slice []KindOfNoun

func (op *KindOfNoun_Slice) GetType() string { return KindOfNoun_Type }

func (op *KindOfNoun_Slice) Marshal(m jsn.Marshaler) error {
	return KindOfNoun_Repeats_Marshal(m, (*[]KindOfNoun)(op))
}

func (op *KindOfNoun_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindOfNoun_Slice) SetSize(cnt int) {
	var els []KindOfNoun
	if cnt >= 0 {
		els = make(KindOfNoun_Slice, cnt)
	}
	(*op) = els
}

func (op *KindOfNoun_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindOfNoun_Marshal(m, &(*op)[i])
}

func KindOfNoun_Repeats_Marshal(m jsn.Marshaler, vals *[]KindOfNoun) error {
	return jsn.RepeatBlock(m, (*KindOfNoun_Slice)(vals))
}

func KindOfNoun_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindOfNoun) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = KindOfNoun_Repeats_Marshal(m, pv)
	}
	return
}

type KindOfNoun_Flow struct{ ptr *KindOfNoun }

func (n KindOfNoun_Flow) GetType() string      { return KindOfNoun_Type }
func (n KindOfNoun_Flow) GetLede() string      { return KindOfNoun_Type }
func (n KindOfNoun_Flow) GetFlow() interface{} { return n.ptr }
func (n KindOfNoun_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindOfNoun); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindOfNoun_Optional_Marshal(m jsn.Marshaler, pv **KindOfNoun) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindOfNoun_Marshal(m, *pv)
	} else if !enc {
		var v KindOfNoun
		if err = KindOfNoun_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindOfNoun_Marshal(m jsn.Marshaler, val *KindOfNoun) (err error) {
	if err = m.MarshalBlock(KindOfNoun_Flow{val}); err == nil {
		e0 := m.MarshalKey("", KindOfNoun_Field_AreAn)
		if e0 == nil {
			e0 = AreAn_Marshal(m, &val.AreAn)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindOfNoun_Field_AreAn))
		}
		e1 := m.MarshalKey("trait", KindOfNoun_Field_Trait)
		if e1 == nil {
			e1 = Trait_Optional_Repeats_Marshal(m, &val.Trait)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", KindOfNoun_Field_Trait))
		}
		e2 := m.MarshalKey("kind", KindOfNoun_Field_Kind)
		if e2 == nil {
			e2 = SingularKind_Marshal(m, &val.Kind)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", KindOfNoun_Field_Kind))
		}
		e3 := m.MarshalKey("noun_relation", KindOfNoun_Field_NounRelation)
		if e3 == nil {
			e3 = NounRelation_Optional_Marshal(m, &val.NounRelation)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", KindOfNoun_Field_NounRelation))
		}
		m.EndBlock()
	}
	return
}

// KindOfRelation
type KindOfRelation struct {
	Relation    rel.RelationName    `if:"label=_"`
	Cardinality RelationCardinality `if:"label=cardinality"`
}

// User implemented slots:
var _ StoryStatement = (*KindOfRelation)(nil)

func (*KindOfRelation) Compose() composer.Spec {
	return composer.Spec{
		Name: KindOfRelation_Type,
		Uses: composer.Type_Flow,
	}
}

const KindOfRelation_Type = "kind_of_relation"
const KindOfRelation_Field_Relation = "$RELATION"
const KindOfRelation_Field_Cardinality = "$CARDINALITY"

func (op *KindOfRelation) Marshal(m jsn.Marshaler) error {
	return KindOfRelation_Marshal(m, op)
}

type KindOfRelation_Slice []KindOfRelation

func (op *KindOfRelation_Slice) GetType() string { return KindOfRelation_Type }

func (op *KindOfRelation_Slice) Marshal(m jsn.Marshaler) error {
	return KindOfRelation_Repeats_Marshal(m, (*[]KindOfRelation)(op))
}

func (op *KindOfRelation_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindOfRelation_Slice) SetSize(cnt int) {
	var els []KindOfRelation
	if cnt >= 0 {
		els = make(KindOfRelation_Slice, cnt)
	}
	(*op) = els
}

func (op *KindOfRelation_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindOfRelation_Marshal(m, &(*op)[i])
}

func KindOfRelation_Repeats_Marshal(m jsn.Marshaler, vals *[]KindOfRelation) error {
	return jsn.RepeatBlock(m, (*KindOfRelation_Slice)(vals))
}

func KindOfRelation_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindOfRelation) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = KindOfRelation_Repeats_Marshal(m, pv)
	}
	return
}

type KindOfRelation_Flow struct{ ptr *KindOfRelation }

func (n KindOfRelation_Flow) GetType() string      { return KindOfRelation_Type }
func (n KindOfRelation_Flow) GetLede() string      { return KindOfRelation_Type }
func (n KindOfRelation_Flow) GetFlow() interface{} { return n.ptr }
func (n KindOfRelation_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindOfRelation); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindOfRelation_Optional_Marshal(m jsn.Marshaler, pv **KindOfRelation) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindOfRelation_Marshal(m, *pv)
	} else if !enc {
		var v KindOfRelation
		if err = KindOfRelation_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindOfRelation_Marshal(m jsn.Marshaler, val *KindOfRelation) (err error) {
	if err = m.MarshalBlock(KindOfRelation_Flow{val}); err == nil {
		e0 := m.MarshalKey("", KindOfRelation_Field_Relation)
		if e0 == nil {
			e0 = rel.RelationName_Marshal(m, &val.Relation)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindOfRelation_Field_Relation))
		}
		e1 := m.MarshalKey("cardinality", KindOfRelation_Field_Cardinality)
		if e1 == nil {
			e1 = RelationCardinality_Marshal(m, &val.Cardinality)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", KindOfRelation_Field_Cardinality))
		}
		m.EndBlock()
	}
	return
}

// KindsHaveProperties
type KindsHaveProperties struct {
	PluralKinds PluralKinds    `if:"label=_"`
	Props       []PropertySlot `if:"label=have"`
}

// User implemented slots:
var _ StoryStatement = (*KindsHaveProperties)(nil)

func (*KindsHaveProperties) Compose() composer.Spec {
	return composer.Spec{
		Name: KindsHaveProperties_Type,
		Uses: composer.Type_Flow,
		Lede: "Kinds",
	}
}

const KindsHaveProperties_Type = "kinds_have_properties"
const KindsHaveProperties_Field_PluralKinds = "$PLURAL_KINDS"
const KindsHaveProperties_Field_Props = "$PROPS"

func (op *KindsHaveProperties) Marshal(m jsn.Marshaler) error {
	return KindsHaveProperties_Marshal(m, op)
}

type KindsHaveProperties_Slice []KindsHaveProperties

func (op *KindsHaveProperties_Slice) GetType() string { return KindsHaveProperties_Type }

func (op *KindsHaveProperties_Slice) Marshal(m jsn.Marshaler) error {
	return KindsHaveProperties_Repeats_Marshal(m, (*[]KindsHaveProperties)(op))
}

func (op *KindsHaveProperties_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindsHaveProperties_Slice) SetSize(cnt int) {
	var els []KindsHaveProperties
	if cnt >= 0 {
		els = make(KindsHaveProperties_Slice, cnt)
	}
	(*op) = els
}

func (op *KindsHaveProperties_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindsHaveProperties_Marshal(m, &(*op)[i])
}

func KindsHaveProperties_Repeats_Marshal(m jsn.Marshaler, vals *[]KindsHaveProperties) error {
	return jsn.RepeatBlock(m, (*KindsHaveProperties_Slice)(vals))
}

func KindsHaveProperties_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindsHaveProperties) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = KindsHaveProperties_Repeats_Marshal(m, pv)
	}
	return
}

type KindsHaveProperties_Flow struct{ ptr *KindsHaveProperties }

func (n KindsHaveProperties_Flow) GetType() string      { return KindsHaveProperties_Type }
func (n KindsHaveProperties_Flow) GetLede() string      { return "Kinds" }
func (n KindsHaveProperties_Flow) GetFlow() interface{} { return n.ptr }
func (n KindsHaveProperties_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindsHaveProperties); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindsHaveProperties_Optional_Marshal(m jsn.Marshaler, pv **KindsHaveProperties) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindsHaveProperties_Marshal(m, *pv)
	} else if !enc {
		var v KindsHaveProperties
		if err = KindsHaveProperties_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindsHaveProperties_Marshal(m jsn.Marshaler, val *KindsHaveProperties) (err error) {
	if err = m.MarshalBlock(KindsHaveProperties_Flow{val}); err == nil {
		e0 := m.MarshalKey("", KindsHaveProperties_Field_PluralKinds)
		if e0 == nil {
			e0 = PluralKinds_Marshal(m, &val.PluralKinds)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindsHaveProperties_Field_PluralKinds))
		}
		e1 := m.MarshalKey("have", KindsHaveProperties_Field_Props)
		if e1 == nil {
			e1 = PropertySlot_Repeats_Marshal(m, &val.Props)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", KindsHaveProperties_Field_Props))
		}
		m.EndBlock()
	}
	return
}

// KindsOfAspect
type KindsOfAspect struct {
	Aspect Aspect `if:"label=_"`
}

// User implemented slots:
var _ StoryStatement = (*KindsOfAspect)(nil)

func (*KindsOfAspect) Compose() composer.Spec {
	return composer.Spec{
		Name: KindsOfAspect_Type,
		Uses: composer.Type_Flow,
	}
}

const KindsOfAspect_Type = "kinds_of_aspect"
const KindsOfAspect_Field_Aspect = "$ASPECT"

func (op *KindsOfAspect) Marshal(m jsn.Marshaler) error {
	return KindsOfAspect_Marshal(m, op)
}

type KindsOfAspect_Slice []KindsOfAspect

func (op *KindsOfAspect_Slice) GetType() string { return KindsOfAspect_Type }

func (op *KindsOfAspect_Slice) Marshal(m jsn.Marshaler) error {
	return KindsOfAspect_Repeats_Marshal(m, (*[]KindsOfAspect)(op))
}

func (op *KindsOfAspect_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindsOfAspect_Slice) SetSize(cnt int) {
	var els []KindsOfAspect
	if cnt >= 0 {
		els = make(KindsOfAspect_Slice, cnt)
	}
	(*op) = els
}

func (op *KindsOfAspect_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindsOfAspect_Marshal(m, &(*op)[i])
}

func KindsOfAspect_Repeats_Marshal(m jsn.Marshaler, vals *[]KindsOfAspect) error {
	return jsn.RepeatBlock(m, (*KindsOfAspect_Slice)(vals))
}

func KindsOfAspect_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindsOfAspect) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = KindsOfAspect_Repeats_Marshal(m, pv)
	}
	return
}

type KindsOfAspect_Flow struct{ ptr *KindsOfAspect }

func (n KindsOfAspect_Flow) GetType() string      { return KindsOfAspect_Type }
func (n KindsOfAspect_Flow) GetLede() string      { return KindsOfAspect_Type }
func (n KindsOfAspect_Flow) GetFlow() interface{} { return n.ptr }
func (n KindsOfAspect_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindsOfAspect); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindsOfAspect_Optional_Marshal(m jsn.Marshaler, pv **KindsOfAspect) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindsOfAspect_Marshal(m, *pv)
	} else if !enc {
		var v KindsOfAspect
		if err = KindsOfAspect_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindsOfAspect_Marshal(m jsn.Marshaler, val *KindsOfAspect) (err error) {
	if err = m.MarshalBlock(KindsOfAspect_Flow{val}); err == nil {
		e0 := m.MarshalKey("", KindsOfAspect_Field_Aspect)
		if e0 == nil {
			e0 = Aspect_Marshal(m, &val.Aspect)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindsOfAspect_Field_Aspect))
		}
		m.EndBlock()
	}
	return
}

// KindsOfKind
type KindsOfKind struct {
	PluralKinds  PluralKinds  `if:"label=kinds"`
	SingularKind SingularKind `if:"label=of"`
}

// User implemented slots:
var _ StoryStatement = (*KindsOfKind)(nil)

func (*KindsOfKind) Compose() composer.Spec {
	return composer.Spec{
		Name: KindsOfKind_Type,
		Uses: composer.Type_Flow,
		Lede: "Make",
	}
}

const KindsOfKind_Type = "kinds_of_kind"
const KindsOfKind_Field_PluralKinds = "$PLURAL_KINDS"
const KindsOfKind_Field_SingularKind = "$SINGULAR_KIND"

func (op *KindsOfKind) Marshal(m jsn.Marshaler) error {
	return KindsOfKind_Marshal(m, op)
}

type KindsOfKind_Slice []KindsOfKind

func (op *KindsOfKind_Slice) GetType() string { return KindsOfKind_Type }

func (op *KindsOfKind_Slice) Marshal(m jsn.Marshaler) error {
	return KindsOfKind_Repeats_Marshal(m, (*[]KindsOfKind)(op))
}

func (op *KindsOfKind_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindsOfKind_Slice) SetSize(cnt int) {
	var els []KindsOfKind
	if cnt >= 0 {
		els = make(KindsOfKind_Slice, cnt)
	}
	(*op) = els
}

func (op *KindsOfKind_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindsOfKind_Marshal(m, &(*op)[i])
}

func KindsOfKind_Repeats_Marshal(m jsn.Marshaler, vals *[]KindsOfKind) error {
	return jsn.RepeatBlock(m, (*KindsOfKind_Slice)(vals))
}

func KindsOfKind_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindsOfKind) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = KindsOfKind_Repeats_Marshal(m, pv)
	}
	return
}

type KindsOfKind_Flow struct{ ptr *KindsOfKind }

func (n KindsOfKind_Flow) GetType() string      { return KindsOfKind_Type }
func (n KindsOfKind_Flow) GetLede() string      { return "Make" }
func (n KindsOfKind_Flow) GetFlow() interface{} { return n.ptr }
func (n KindsOfKind_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindsOfKind); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindsOfKind_Optional_Marshal(m jsn.Marshaler, pv **KindsOfKind) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindsOfKind_Marshal(m, *pv)
	} else if !enc {
		var v KindsOfKind
		if err = KindsOfKind_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindsOfKind_Marshal(m jsn.Marshaler, val *KindsOfKind) (err error) {
	if err = m.MarshalBlock(KindsOfKind_Flow{val}); err == nil {
		e0 := m.MarshalKey("kinds", KindsOfKind_Field_PluralKinds)
		if e0 == nil {
			e0 = PluralKinds_Marshal(m, &val.PluralKinds)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindsOfKind_Field_PluralKinds))
		}
		e1 := m.MarshalKey("of", KindsOfKind_Field_SingularKind)
		if e1 == nil {
			e1 = SingularKind_Marshal(m, &val.SingularKind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", KindsOfKind_Field_SingularKind))
		}
		m.EndBlock()
	}
	return
}

// Lede Describes one or more nouns.
type Lede struct {
	Nouns      []NamedNoun `if:"label=_"`
	NounPhrase NounPhrase  `if:"label=noun_phrase"`
}

func (*Lede) Compose() composer.Spec {
	return composer.Spec{
		Name: Lede_Type,
		Uses: composer.Type_Flow,
	}
}

const Lede_Type = "lede"
const Lede_Field_Nouns = "$NOUNS"
const Lede_Field_NounPhrase = "$NOUN_PHRASE"

func (op *Lede) Marshal(m jsn.Marshaler) error {
	return Lede_Marshal(m, op)
}

type Lede_Slice []Lede

func (op *Lede_Slice) GetType() string { return Lede_Type }

func (op *Lede_Slice) Marshal(m jsn.Marshaler) error {
	return Lede_Repeats_Marshal(m, (*[]Lede)(op))
}

func (op *Lede_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Lede_Slice) SetSize(cnt int) {
	var els []Lede
	if cnt >= 0 {
		els = make(Lede_Slice, cnt)
	}
	(*op) = els
}

func (op *Lede_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Lede_Marshal(m, &(*op)[i])
}

func Lede_Repeats_Marshal(m jsn.Marshaler, vals *[]Lede) error {
	return jsn.RepeatBlock(m, (*Lede_Slice)(vals))
}

func Lede_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Lede) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Lede_Repeats_Marshal(m, pv)
	}
	return
}

type Lede_Flow struct{ ptr *Lede }

func (n Lede_Flow) GetType() string      { return Lede_Type }
func (n Lede_Flow) GetLede() string      { return Lede_Type }
func (n Lede_Flow) GetFlow() interface{} { return n.ptr }
func (n Lede_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Lede); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Lede_Optional_Marshal(m jsn.Marshaler, pv **Lede) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Lede_Marshal(m, *pv)
	} else if !enc {
		var v Lede
		if err = Lede_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Lede_Marshal(m jsn.Marshaler, val *Lede) (err error) {
	if err = m.MarshalBlock(Lede_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Lede_Field_Nouns)
		if e0 == nil {
			e0 = NamedNoun_Repeats_Marshal(m, &val.Nouns)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Lede_Field_Nouns))
		}
		e1 := m.MarshalKey("noun_phrase", Lede_Field_NounPhrase)
		if e1 == nil {
			e1 = NounPhrase_Marshal(m, &val.NounPhrase)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Lede_Field_NounPhrase))
		}
		m.EndBlock()
	}
	return
}

// Lines requires a user-specified string.
type Lines struct {
	Str string
}

func (op *Lines) String() string {
	return op.Str
}

func (*Lines) Compose() composer.Spec {
	return composer.Spec{
		Name:        Lines_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const Lines_Type = "lines"

func (op *Lines) Marshal(m jsn.Marshaler) error {
	return Lines_Marshal(m, op)
}

func Lines_Optional_Marshal(m jsn.Marshaler, val *Lines) (err error) {
	var zero Lines
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Lines_Marshal(m, val)
	}
	return
}

func Lines_Marshal(m jsn.Marshaler, val *Lines) (err error) {
	return m.MarshalValue(Lines_Type, &val.Str)
}

type Lines_Slice []Lines

func (op *Lines_Slice) GetType() string { return Lines_Type }

func (op *Lines_Slice) Marshal(m jsn.Marshaler) error {
	return Lines_Repeats_Marshal(m, (*[]Lines)(op))
}

func (op *Lines_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Lines_Slice) SetSize(cnt int) {
	var els []Lines
	if cnt >= 0 {
		els = make(Lines_Slice, cnt)
	}
	(*op) = els
}

func (op *Lines_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Lines_Marshal(m, &(*op)[i])
}

func Lines_Repeats_Marshal(m jsn.Marshaler, vals *[]Lines) error {
	return jsn.RepeatBlock(m, (*Lines_Slice)(vals))
}

func Lines_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Lines) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Lines_Repeats_Marshal(m, pv)
	}
	return
}

// LocalDecl
type LocalDecl struct {
	Local PropertySlot `if:"label=_"`
	Value *LocalInit   `if:"label=value,optional"`
}

func (*LocalDecl) Compose() composer.Spec {
	return composer.Spec{
		Name: LocalDecl_Type,
		Uses: composer.Type_Flow,
	}
}

const LocalDecl_Type = "local_decl"
const LocalDecl_Field_Local = "$LOCAL"
const LocalDecl_Field_Value = "$VALUE"

func (op *LocalDecl) Marshal(m jsn.Marshaler) error {
	return LocalDecl_Marshal(m, op)
}

type LocalDecl_Slice []LocalDecl

func (op *LocalDecl_Slice) GetType() string { return LocalDecl_Type }

func (op *LocalDecl_Slice) Marshal(m jsn.Marshaler) error {
	return LocalDecl_Repeats_Marshal(m, (*[]LocalDecl)(op))
}

func (op *LocalDecl_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *LocalDecl_Slice) SetSize(cnt int) {
	var els []LocalDecl
	if cnt >= 0 {
		els = make(LocalDecl_Slice, cnt)
	}
	(*op) = els
}

func (op *LocalDecl_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return LocalDecl_Marshal(m, &(*op)[i])
}

func LocalDecl_Repeats_Marshal(m jsn.Marshaler, vals *[]LocalDecl) error {
	return jsn.RepeatBlock(m, (*LocalDecl_Slice)(vals))
}

func LocalDecl_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]LocalDecl) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = LocalDecl_Repeats_Marshal(m, pv)
	}
	return
}

type LocalDecl_Flow struct{ ptr *LocalDecl }

func (n LocalDecl_Flow) GetType() string      { return LocalDecl_Type }
func (n LocalDecl_Flow) GetLede() string      { return LocalDecl_Type }
func (n LocalDecl_Flow) GetFlow() interface{} { return n.ptr }
func (n LocalDecl_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*LocalDecl); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func LocalDecl_Optional_Marshal(m jsn.Marshaler, pv **LocalDecl) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = LocalDecl_Marshal(m, *pv)
	} else if !enc {
		var v LocalDecl
		if err = LocalDecl_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func LocalDecl_Marshal(m jsn.Marshaler, val *LocalDecl) (err error) {
	if err = m.MarshalBlock(LocalDecl_Flow{val}); err == nil {
		e0 := m.MarshalKey("", LocalDecl_Field_Local)
		if e0 == nil {
			e0 = PropertySlot_Marshal(m, &val.Local)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", LocalDecl_Field_Local))
		}
		e1 := m.MarshalKey("value", LocalDecl_Field_Value)
		if e1 == nil {
			e1 = LocalInit_Optional_Marshal(m, &val.Value)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", LocalDecl_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// LocalInit
type LocalInit struct {
	Value rt.Assignment `if:"label=_"`
}

func (*LocalInit) Compose() composer.Spec {
	return composer.Spec{
		Name: LocalInit_Type,
		Uses: composer.Type_Flow,
	}
}

const LocalInit_Type = "local_init"
const LocalInit_Field_Value = "$VALUE"

func (op *LocalInit) Marshal(m jsn.Marshaler) error {
	return LocalInit_Marshal(m, op)
}

type LocalInit_Slice []LocalInit

func (op *LocalInit_Slice) GetType() string { return LocalInit_Type }

func (op *LocalInit_Slice) Marshal(m jsn.Marshaler) error {
	return LocalInit_Repeats_Marshal(m, (*[]LocalInit)(op))
}

func (op *LocalInit_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *LocalInit_Slice) SetSize(cnt int) {
	var els []LocalInit
	if cnt >= 0 {
		els = make(LocalInit_Slice, cnt)
	}
	(*op) = els
}

func (op *LocalInit_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return LocalInit_Marshal(m, &(*op)[i])
}

func LocalInit_Repeats_Marshal(m jsn.Marshaler, vals *[]LocalInit) error {
	return jsn.RepeatBlock(m, (*LocalInit_Slice)(vals))
}

func LocalInit_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]LocalInit) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = LocalInit_Repeats_Marshal(m, pv)
	}
	return
}

type LocalInit_Flow struct{ ptr *LocalInit }

func (n LocalInit_Flow) GetType() string      { return LocalInit_Type }
func (n LocalInit_Flow) GetLede() string      { return LocalInit_Type }
func (n LocalInit_Flow) GetFlow() interface{} { return n.ptr }
func (n LocalInit_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*LocalInit); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func LocalInit_Optional_Marshal(m jsn.Marshaler, pv **LocalInit) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = LocalInit_Marshal(m, *pv)
	} else if !enc {
		var v LocalInit
		if err = LocalInit_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func LocalInit_Marshal(m jsn.Marshaler, val *LocalInit) (err error) {
	if err = m.MarshalBlock(LocalInit_Flow{val}); err == nil {
		e0 := m.MarshalKey("", LocalInit_Field_Value)
		if e0 == nil {
			e0 = rt.Assignment_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", LocalInit_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// Make
type Make struct {
	Name      string     `if:"label=_,type=text"`
	Arguments *Arguments `if:"label=arguments,optional"`
}

// User implemented slots:
var _ rt.RecordEval = (*Make)(nil)

func (*Make) Compose() composer.Spec {
	return composer.Spec{
		Name: Make_Type,
		Uses: composer.Type_Flow,
	}
}

const Make_Type = "make"
const Make_Field_Name = "$NAME"
const Make_Field_Arguments = "$ARGUMENTS"

func (op *Make) Marshal(m jsn.Marshaler) error {
	return Make_Marshal(m, op)
}

type Make_Slice []Make

func (op *Make_Slice) GetType() string { return Make_Type }

func (op *Make_Slice) Marshal(m jsn.Marshaler) error {
	return Make_Repeats_Marshal(m, (*[]Make)(op))
}

func (op *Make_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Make_Slice) SetSize(cnt int) {
	var els []Make
	if cnt >= 0 {
		els = make(Make_Slice, cnt)
	}
	(*op) = els
}

func (op *Make_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Make_Marshal(m, &(*op)[i])
}

func Make_Repeats_Marshal(m jsn.Marshaler, vals *[]Make) error {
	return jsn.RepeatBlock(m, (*Make_Slice)(vals))
}

func Make_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Make) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Make_Repeats_Marshal(m, pv)
	}
	return
}

type Make_Flow struct{ ptr *Make }

func (n Make_Flow) GetType() string      { return Make_Type }
func (n Make_Flow) GetLede() string      { return Make_Type }
func (n Make_Flow) GetFlow() interface{} { return n.ptr }
func (n Make_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Make); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Make_Optional_Marshal(m jsn.Marshaler, pv **Make) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Make_Marshal(m, *pv)
	} else if !enc {
		var v Make
		if err = Make_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Make_Marshal(m jsn.Marshaler, val *Make) (err error) {
	if err = m.MarshalBlock(Make_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Make_Field_Name)
		if e0 == nil {
			e0 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Make_Field_Name))
		}
		e1 := m.MarshalKey("arguments", Make_Field_Arguments)
		if e1 == nil {
			e1 = Arguments_Optional_Marshal(m, &val.Arguments)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Make_Field_Arguments))
		}
		m.EndBlock()
	}
	return
}

// MakePlural The plural of person is people.
type MakePlural struct {
	Singular string `if:"label=_,type=text"`
	Plural   string `if:"label=plural,type=text"`
}

// User implemented slots:
var _ StoryStatement = (*MakePlural)(nil)

func (*MakePlural) Compose() composer.Spec {
	return composer.Spec{
		Name: MakePlural_Type,
		Uses: composer.Type_Flow,
		Lede: "make",
	}
}

const MakePlural_Type = "make_plural"
const MakePlural_Field_Singular = "$SINGULAR"
const MakePlural_Field_Plural = "$PLURAL"

func (op *MakePlural) Marshal(m jsn.Marshaler) error {
	return MakePlural_Marshal(m, op)
}

type MakePlural_Slice []MakePlural

func (op *MakePlural_Slice) GetType() string { return MakePlural_Type }

func (op *MakePlural_Slice) Marshal(m jsn.Marshaler) error {
	return MakePlural_Repeats_Marshal(m, (*[]MakePlural)(op))
}

func (op *MakePlural_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakePlural_Slice) SetSize(cnt int) {
	var els []MakePlural
	if cnt >= 0 {
		els = make(MakePlural_Slice, cnt)
	}
	(*op) = els
}

func (op *MakePlural_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakePlural_Marshal(m, &(*op)[i])
}

func MakePlural_Repeats_Marshal(m jsn.Marshaler, vals *[]MakePlural) error {
	return jsn.RepeatBlock(m, (*MakePlural_Slice)(vals))
}

func MakePlural_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakePlural) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = MakePlural_Repeats_Marshal(m, pv)
	}
	return
}

type MakePlural_Flow struct{ ptr *MakePlural }

func (n MakePlural_Flow) GetType() string      { return MakePlural_Type }
func (n MakePlural_Flow) GetLede() string      { return "make" }
func (n MakePlural_Flow) GetFlow() interface{} { return n.ptr }
func (n MakePlural_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakePlural); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakePlural_Optional_Marshal(m jsn.Marshaler, pv **MakePlural) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakePlural_Marshal(m, *pv)
	} else if !enc {
		var v MakePlural
		if err = MakePlural_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakePlural_Marshal(m jsn.Marshaler, val *MakePlural) (err error) {
	if err = m.MarshalBlock(MakePlural_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakePlural_Field_Singular)
		if e0 == nil {
			e0 = literal.Text_Unboxed_Marshal(m, &val.Singular)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakePlural_Field_Singular))
		}
		e1 := m.MarshalKey("plural", MakePlural_Field_Plural)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Marshal(m, &val.Plural)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", MakePlural_Field_Plural))
		}
		m.EndBlock()
	}
	return
}

// ManyToMany
type ManyToMany struct {
	Kinds      PluralKinds `if:"label=_"`
	OtherKinds PluralKinds `if:"label=other_kinds"`
}

func (*ManyToMany) Compose() composer.Spec {
	return composer.Spec{
		Name: ManyToMany_Type,
		Uses: composer.Type_Flow,
	}
}

const ManyToMany_Type = "many_to_many"
const ManyToMany_Field_Kinds = "$KINDS"
const ManyToMany_Field_OtherKinds = "$OTHER_KINDS"

func (op *ManyToMany) Marshal(m jsn.Marshaler) error {
	return ManyToMany_Marshal(m, op)
}

type ManyToMany_Slice []ManyToMany

func (op *ManyToMany_Slice) GetType() string { return ManyToMany_Type }

func (op *ManyToMany_Slice) Marshal(m jsn.Marshaler) error {
	return ManyToMany_Repeats_Marshal(m, (*[]ManyToMany)(op))
}

func (op *ManyToMany_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ManyToMany_Slice) SetSize(cnt int) {
	var els []ManyToMany
	if cnt >= 0 {
		els = make(ManyToMany_Slice, cnt)
	}
	(*op) = els
}

func (op *ManyToMany_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ManyToMany_Marshal(m, &(*op)[i])
}

func ManyToMany_Repeats_Marshal(m jsn.Marshaler, vals *[]ManyToMany) error {
	return jsn.RepeatBlock(m, (*ManyToMany_Slice)(vals))
}

func ManyToMany_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ManyToMany) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = ManyToMany_Repeats_Marshal(m, pv)
	}
	return
}

type ManyToMany_Flow struct{ ptr *ManyToMany }

func (n ManyToMany_Flow) GetType() string      { return ManyToMany_Type }
func (n ManyToMany_Flow) GetLede() string      { return ManyToMany_Type }
func (n ManyToMany_Flow) GetFlow() interface{} { return n.ptr }
func (n ManyToMany_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ManyToMany); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ManyToMany_Optional_Marshal(m jsn.Marshaler, pv **ManyToMany) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ManyToMany_Marshal(m, *pv)
	} else if !enc {
		var v ManyToMany
		if err = ManyToMany_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ManyToMany_Marshal(m jsn.Marshaler, val *ManyToMany) (err error) {
	if err = m.MarshalBlock(ManyToMany_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ManyToMany_Field_Kinds)
		if e0 == nil {
			e0 = PluralKinds_Marshal(m, &val.Kinds)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ManyToMany_Field_Kinds))
		}
		e1 := m.MarshalKey("other_kinds", ManyToMany_Field_OtherKinds)
		if e1 == nil {
			e1 = PluralKinds_Marshal(m, &val.OtherKinds)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ManyToMany_Field_OtherKinds))
		}
		m.EndBlock()
	}
	return
}

// ManyToOne
type ManyToOne struct {
	Kinds PluralKinds  `if:"label=_"`
	Kind  SingularKind `if:"label=kind"`
}

func (*ManyToOne) Compose() composer.Spec {
	return composer.Spec{
		Name: ManyToOne_Type,
		Uses: composer.Type_Flow,
	}
}

const ManyToOne_Type = "many_to_one"
const ManyToOne_Field_Kinds = "$KINDS"
const ManyToOne_Field_Kind = "$KIND"

func (op *ManyToOne) Marshal(m jsn.Marshaler) error {
	return ManyToOne_Marshal(m, op)
}

type ManyToOne_Slice []ManyToOne

func (op *ManyToOne_Slice) GetType() string { return ManyToOne_Type }

func (op *ManyToOne_Slice) Marshal(m jsn.Marshaler) error {
	return ManyToOne_Repeats_Marshal(m, (*[]ManyToOne)(op))
}

func (op *ManyToOne_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ManyToOne_Slice) SetSize(cnt int) {
	var els []ManyToOne
	if cnt >= 0 {
		els = make(ManyToOne_Slice, cnt)
	}
	(*op) = els
}

func (op *ManyToOne_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ManyToOne_Marshal(m, &(*op)[i])
}

func ManyToOne_Repeats_Marshal(m jsn.Marshaler, vals *[]ManyToOne) error {
	return jsn.RepeatBlock(m, (*ManyToOne_Slice)(vals))
}

func ManyToOne_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ManyToOne) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = ManyToOne_Repeats_Marshal(m, pv)
	}
	return
}

type ManyToOne_Flow struct{ ptr *ManyToOne }

func (n ManyToOne_Flow) GetType() string      { return ManyToOne_Type }
func (n ManyToOne_Flow) GetLede() string      { return ManyToOne_Type }
func (n ManyToOne_Flow) GetFlow() interface{} { return n.ptr }
func (n ManyToOne_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ManyToOne); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ManyToOne_Optional_Marshal(m jsn.Marshaler, pv **ManyToOne) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ManyToOne_Marshal(m, *pv)
	} else if !enc {
		var v ManyToOne
		if err = ManyToOne_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ManyToOne_Marshal(m jsn.Marshaler, val *ManyToOne) (err error) {
	if err = m.MarshalBlock(ManyToOne_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ManyToOne_Field_Kinds)
		if e0 == nil {
			e0 = PluralKinds_Marshal(m, &val.Kinds)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ManyToOne_Field_Kinds))
		}
		e1 := m.MarshalKey("kind", ManyToOne_Field_Kind)
		if e1 == nil {
			e1 = SingularKind_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ManyToOne_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// MapConnection swaps between various options
type MapConnection struct {
	Choice string
	Value  interface{}
}

var MapConnection_Optional_Marshal = MapConnection_Marshal

const MapConnection_ArrivingAt_Opt = "$ARRIVING_AT"
const MapConnection_ConnectingTo_Opt = "$CONNECTING_TO"

func (*MapConnection) Compose() composer.Spec {
	return composer.Spec{
		Name: MapConnection_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			MapConnection_ArrivingAt_Opt, MapConnection_ConnectingTo_Opt,
		},
		Swaps: []interface{}{
			(*MapDestination)(nil),
			(*MapDestination)(nil),
		},
	}
}

const MapConnection_Type = "map_connection"

func (op *MapConnection) GetType() string { return MapConnection_Type }

func (op *MapConnection) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *MapConnection) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case MapConnection_ArrivingAt_Opt:
		op.Choice, op.Value = c, new(MapDestination)
		okay = true
	case MapConnection_ConnectingTo_Opt:
		op.Choice, op.Value = c, new(MapDestination)
		okay = true
	}
	return
}

func (op *MapConnection) Marshal(m jsn.Marshaler) error {
	return MapConnection_Marshal(m, op)
}
func MapConnection_Marshal(m jsn.Marshaler, val *MapConnection) (err error) {
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type MapConnection_Slice []MapConnection

func (op *MapConnection_Slice) GetType() string { return MapConnection_Type }

func (op *MapConnection_Slice) Marshal(m jsn.Marshaler) error {
	return MapConnection_Repeats_Marshal(m, (*[]MapConnection)(op))
}

func (op *MapConnection_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MapConnection_Slice) SetSize(cnt int) {
	var els []MapConnection
	if cnt >= 0 {
		els = make(MapConnection_Slice, cnt)
	}
	(*op) = els
}

func (op *MapConnection_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MapConnection_Marshal(m, &(*op)[i])
}

func MapConnection_Repeats_Marshal(m jsn.Marshaler, vals *[]MapConnection) error {
	return jsn.RepeatBlock(m, (*MapConnection_Slice)(vals))
}

func MapConnection_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MapConnection) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = MapConnection_Repeats_Marshal(m, pv)
	}
	return
}

// MapDeparting
type MapDeparting struct {
	Door          NamedNoun     `if:"label=via"`
	MapConnection MapConnection `if:"label=and"`
}

// User implemented slots:
var _ StoryStatement = (*MapDeparting)(nil)

func (*MapDeparting) Compose() composer.Spec {
	return composer.Spec{
		Name: MapDeparting_Type,
		Uses: composer.Type_Flow,
		Lede: "departing",
	}
}

const MapDeparting_Type = "map_departing"
const MapDeparting_Field_Door = "$DOOR"
const MapDeparting_Field_MapConnection = "$MAP_CONNECTION"

func (op *MapDeparting) Marshal(m jsn.Marshaler) error {
	return MapDeparting_Marshal(m, op)
}

type MapDeparting_Slice []MapDeparting

func (op *MapDeparting_Slice) GetType() string { return MapDeparting_Type }

func (op *MapDeparting_Slice) Marshal(m jsn.Marshaler) error {
	return MapDeparting_Repeats_Marshal(m, (*[]MapDeparting)(op))
}

func (op *MapDeparting_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MapDeparting_Slice) SetSize(cnt int) {
	var els []MapDeparting
	if cnt >= 0 {
		els = make(MapDeparting_Slice, cnt)
	}
	(*op) = els
}

func (op *MapDeparting_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MapDeparting_Marshal(m, &(*op)[i])
}

func MapDeparting_Repeats_Marshal(m jsn.Marshaler, vals *[]MapDeparting) error {
	return jsn.RepeatBlock(m, (*MapDeparting_Slice)(vals))
}

func MapDeparting_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MapDeparting) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = MapDeparting_Repeats_Marshal(m, pv)
	}
	return
}

type MapDeparting_Flow struct{ ptr *MapDeparting }

func (n MapDeparting_Flow) GetType() string      { return MapDeparting_Type }
func (n MapDeparting_Flow) GetLede() string      { return "departing" }
func (n MapDeparting_Flow) GetFlow() interface{} { return n.ptr }
func (n MapDeparting_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MapDeparting); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MapDeparting_Optional_Marshal(m jsn.Marshaler, pv **MapDeparting) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MapDeparting_Marshal(m, *pv)
	} else if !enc {
		var v MapDeparting
		if err = MapDeparting_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MapDeparting_Marshal(m jsn.Marshaler, val *MapDeparting) (err error) {
	if err = m.MarshalBlock(MapDeparting_Flow{val}); err == nil {
		e0 := m.MarshalKey("via", MapDeparting_Field_Door)
		if e0 == nil {
			e0 = NamedNoun_Marshal(m, &val.Door)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MapDeparting_Field_Door))
		}
		e1 := m.MarshalKey("and", MapDeparting_Field_MapConnection)
		if e1 == nil {
			e1 = MapConnection_Marshal(m, &val.MapConnection)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", MapDeparting_Field_MapConnection))
		}
		m.EndBlock()
	}
	return
}

// MapDestination
type MapDestination struct {
	Room NamedNoun  `if:"label=_"`
	Door *NamedNoun `if:"label=door,optional"`
}

func (*MapDestination) Compose() composer.Spec {
	return composer.Spec{
		Name: MapDestination_Type,
		Uses: composer.Type_Flow,
	}
}

const MapDestination_Type = "map_destination"
const MapDestination_Field_Room = "$ROOM"
const MapDestination_Field_Door = "$DOOR"

func (op *MapDestination) Marshal(m jsn.Marshaler) error {
	return MapDestination_Marshal(m, op)
}

type MapDestination_Slice []MapDestination

func (op *MapDestination_Slice) GetType() string { return MapDestination_Type }

func (op *MapDestination_Slice) Marshal(m jsn.Marshaler) error {
	return MapDestination_Repeats_Marshal(m, (*[]MapDestination)(op))
}

func (op *MapDestination_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MapDestination_Slice) SetSize(cnt int) {
	var els []MapDestination
	if cnt >= 0 {
		els = make(MapDestination_Slice, cnt)
	}
	(*op) = els
}

func (op *MapDestination_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MapDestination_Marshal(m, &(*op)[i])
}

func MapDestination_Repeats_Marshal(m jsn.Marshaler, vals *[]MapDestination) error {
	return jsn.RepeatBlock(m, (*MapDestination_Slice)(vals))
}

func MapDestination_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MapDestination) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = MapDestination_Repeats_Marshal(m, pv)
	}
	return
}

type MapDestination_Flow struct{ ptr *MapDestination }

func (n MapDestination_Flow) GetType() string      { return MapDestination_Type }
func (n MapDestination_Flow) GetLede() string      { return MapDestination_Type }
func (n MapDestination_Flow) GetFlow() interface{} { return n.ptr }
func (n MapDestination_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MapDestination); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MapDestination_Optional_Marshal(m jsn.Marshaler, pv **MapDestination) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MapDestination_Marshal(m, *pv)
	} else if !enc {
		var v MapDestination
		if err = MapDestination_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MapDestination_Marshal(m jsn.Marshaler, val *MapDestination) (err error) {
	if err = m.MarshalBlock(MapDestination_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MapDestination_Field_Room)
		if e0 == nil {
			e0 = NamedNoun_Marshal(m, &val.Room)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MapDestination_Field_Room))
		}
		e1 := m.MarshalKey("door", MapDestination_Field_Door)
		if e1 == nil {
			e1 = NamedNoun_Optional_Marshal(m, &val.Door)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", MapDestination_Field_Door))
		}
		m.EndBlock()
	}
	return
}

// MapDirection requires a user-specified string.
type MapDirection struct {
	Str string
}

func (op *MapDirection) String() string {
	return op.Str
}

func (*MapDirection) Compose() composer.Spec {
	return composer.Spec{
		Name:        MapDirection_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const MapDirection_Type = "map_direction"

func (op *MapDirection) Marshal(m jsn.Marshaler) error {
	return MapDirection_Marshal(m, op)
}

func MapDirection_Optional_Marshal(m jsn.Marshaler, val *MapDirection) (err error) {
	var zero MapDirection
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = MapDirection_Marshal(m, val)
	}
	return
}

func MapDirection_Marshal(m jsn.Marshaler, val *MapDirection) (err error) {
	return m.MarshalValue(MapDirection_Type, &val.Str)
}

type MapDirection_Slice []MapDirection

func (op *MapDirection_Slice) GetType() string { return MapDirection_Type }

func (op *MapDirection_Slice) Marshal(m jsn.Marshaler) error {
	return MapDirection_Repeats_Marshal(m, (*[]MapDirection)(op))
}

func (op *MapDirection_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MapDirection_Slice) SetSize(cnt int) {
	var els []MapDirection
	if cnt >= 0 {
		els = make(MapDirection_Slice, cnt)
	}
	(*op) = els
}

func (op *MapDirection_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MapDirection_Marshal(m, &(*op)[i])
}

func MapDirection_Repeats_Marshal(m jsn.Marshaler, vals *[]MapDirection) error {
	return jsn.RepeatBlock(m, (*MapDirection_Slice)(vals))
}

func MapDirection_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MapDirection) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = MapDirection_Repeats_Marshal(m, pv)
	}
	return
}

// MapHeading
type MapHeading struct {
	MapDirection  MapDirection  `if:"label=_"`
	Door          *NamedNoun    `if:"label=via,optional"`
	MapConnection MapConnection `if:"label=and"`
}

// User implemented slots:
var _ StoryStatement = (*MapHeading)(nil)

func (*MapHeading) Compose() composer.Spec {
	return composer.Spec{
		Name: MapHeading_Type,
		Uses: composer.Type_Flow,
		Lede: "heading",
	}
}

const MapHeading_Type = "map_heading"
const MapHeading_Field_MapDirection = "$MAP_DIRECTION"
const MapHeading_Field_Door = "$DOOR"
const MapHeading_Field_MapConnection = "$MAP_CONNECTION"

func (op *MapHeading) Marshal(m jsn.Marshaler) error {
	return MapHeading_Marshal(m, op)
}

type MapHeading_Slice []MapHeading

func (op *MapHeading_Slice) GetType() string { return MapHeading_Type }

func (op *MapHeading_Slice) Marshal(m jsn.Marshaler) error {
	return MapHeading_Repeats_Marshal(m, (*[]MapHeading)(op))
}

func (op *MapHeading_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MapHeading_Slice) SetSize(cnt int) {
	var els []MapHeading
	if cnt >= 0 {
		els = make(MapHeading_Slice, cnt)
	}
	(*op) = els
}

func (op *MapHeading_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MapHeading_Marshal(m, &(*op)[i])
}

func MapHeading_Repeats_Marshal(m jsn.Marshaler, vals *[]MapHeading) error {
	return jsn.RepeatBlock(m, (*MapHeading_Slice)(vals))
}

func MapHeading_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MapHeading) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = MapHeading_Repeats_Marshal(m, pv)
	}
	return
}

type MapHeading_Flow struct{ ptr *MapHeading }

func (n MapHeading_Flow) GetType() string      { return MapHeading_Type }
func (n MapHeading_Flow) GetLede() string      { return "heading" }
func (n MapHeading_Flow) GetFlow() interface{} { return n.ptr }
func (n MapHeading_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MapHeading); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MapHeading_Optional_Marshal(m jsn.Marshaler, pv **MapHeading) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MapHeading_Marshal(m, *pv)
	} else if !enc {
		var v MapHeading
		if err = MapHeading_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MapHeading_Marshal(m jsn.Marshaler, val *MapHeading) (err error) {
	if err = m.MarshalBlock(MapHeading_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MapHeading_Field_MapDirection)
		if e0 == nil {
			e0 = MapDirection_Marshal(m, &val.MapDirection)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MapHeading_Field_MapDirection))
		}
		e1 := m.MarshalKey("via", MapHeading_Field_Door)
		if e1 == nil {
			e1 = NamedNoun_Optional_Marshal(m, &val.Door)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", MapHeading_Field_Door))
		}
		e2 := m.MarshalKey("and", MapHeading_Field_MapConnection)
		if e2 == nil {
			e2 = MapConnection_Marshal(m, &val.MapConnection)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", MapHeading_Field_MapConnection))
		}
		m.EndBlock()
	}
	return
}

// NamedNoun
type NamedNoun struct {
	Determiner Determiner `if:"label=_"`
	Name       NounName   `if:"label=name"`
}

func (*NamedNoun) Compose() composer.Spec {
	return composer.Spec{
		Name: NamedNoun_Type,
		Uses: composer.Type_Flow,
	}
}

const NamedNoun_Type = "named_noun"
const NamedNoun_Field_Determiner = "$DETERMINER"
const NamedNoun_Field_Name = "$NAME"

func (op *NamedNoun) Marshal(m jsn.Marshaler) error {
	return NamedNoun_Marshal(m, op)
}

type NamedNoun_Slice []NamedNoun

func (op *NamedNoun_Slice) GetType() string { return NamedNoun_Type }

func (op *NamedNoun_Slice) Marshal(m jsn.Marshaler) error {
	return NamedNoun_Repeats_Marshal(m, (*[]NamedNoun)(op))
}

func (op *NamedNoun_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NamedNoun_Slice) SetSize(cnt int) {
	var els []NamedNoun
	if cnt >= 0 {
		els = make(NamedNoun_Slice, cnt)
	}
	(*op) = els
}

func (op *NamedNoun_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NamedNoun_Marshal(m, &(*op)[i])
}

func NamedNoun_Repeats_Marshal(m jsn.Marshaler, vals *[]NamedNoun) error {
	return jsn.RepeatBlock(m, (*NamedNoun_Slice)(vals))
}

func NamedNoun_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NamedNoun) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NamedNoun_Repeats_Marshal(m, pv)
	}
	return
}

type NamedNoun_Flow struct{ ptr *NamedNoun }

func (n NamedNoun_Flow) GetType() string      { return NamedNoun_Type }
func (n NamedNoun_Flow) GetLede() string      { return NamedNoun_Type }
func (n NamedNoun_Flow) GetFlow() interface{} { return n.ptr }
func (n NamedNoun_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NamedNoun); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NamedNoun_Optional_Marshal(m jsn.Marshaler, pv **NamedNoun) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NamedNoun_Marshal(m, *pv)
	} else if !enc {
		var v NamedNoun
		if err = NamedNoun_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NamedNoun_Marshal(m jsn.Marshaler, val *NamedNoun) (err error) {
	if err = m.MarshalBlock(NamedNoun_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NamedNoun_Field_Determiner)
		if e0 == nil {
			e0 = Determiner_Marshal(m, &val.Determiner)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NamedNoun_Field_Determiner))
		}
		e1 := m.MarshalKey("name", NamedNoun_Field_Name)
		if e1 == nil {
			e1 = NounName_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NamedNoun_Field_Name))
		}
		m.EndBlock()
	}
	return
}

// NamedProperty
type NamedProperty struct {
	Name    string `if:"label=_,type=text"`
	Type    string `if:"label=type,optional,type=text"`
	Comment Lines  `if:"label=comment,optional"`
}

func (*NamedProperty) Compose() composer.Spec {
	return composer.Spec{
		Name: NamedProperty_Type,
		Uses: composer.Type_Flow,
	}
}

const NamedProperty_Type = "named_property"
const NamedProperty_Field_Name = "$NAME"
const NamedProperty_Field_Type = "$TYPE"
const NamedProperty_Field_Comment = "$COMMENT"

func (op *NamedProperty) Marshal(m jsn.Marshaler) error {
	return NamedProperty_Marshal(m, op)
}

type NamedProperty_Slice []NamedProperty

func (op *NamedProperty_Slice) GetType() string { return NamedProperty_Type }

func (op *NamedProperty_Slice) Marshal(m jsn.Marshaler) error {
	return NamedProperty_Repeats_Marshal(m, (*[]NamedProperty)(op))
}

func (op *NamedProperty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NamedProperty_Slice) SetSize(cnt int) {
	var els []NamedProperty
	if cnt >= 0 {
		els = make(NamedProperty_Slice, cnt)
	}
	(*op) = els
}

func (op *NamedProperty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NamedProperty_Marshal(m, &(*op)[i])
}

func NamedProperty_Repeats_Marshal(m jsn.Marshaler, vals *[]NamedProperty) error {
	return jsn.RepeatBlock(m, (*NamedProperty_Slice)(vals))
}

func NamedProperty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NamedProperty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NamedProperty_Repeats_Marshal(m, pv)
	}
	return
}

type NamedProperty_Flow struct{ ptr *NamedProperty }

func (n NamedProperty_Flow) GetType() string      { return NamedProperty_Type }
func (n NamedProperty_Flow) GetLede() string      { return NamedProperty_Type }
func (n NamedProperty_Flow) GetFlow() interface{} { return n.ptr }
func (n NamedProperty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NamedProperty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NamedProperty_Optional_Marshal(m jsn.Marshaler, pv **NamedProperty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NamedProperty_Marshal(m, *pv)
	} else if !enc {
		var v NamedProperty
		if err = NamedProperty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NamedProperty_Marshal(m jsn.Marshaler, val *NamedProperty) (err error) {
	if err = m.MarshalBlock(NamedProperty_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NamedProperty_Field_Name)
		if e0 == nil {
			e0 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NamedProperty_Field_Name))
		}
		e1 := m.MarshalKey("type", NamedProperty_Field_Type)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NamedProperty_Field_Type))
		}
		e2 := m.MarshalKey("comment", NamedProperty_Field_Comment)
		if e2 == nil {
			e2 = Lines_Optional_Marshal(m, &val.Comment)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", NamedProperty_Field_Comment))
		}
		m.EndBlock()
	}
	return
}

// NounAssignment Assign text.
type NounAssignment struct {
	Property Property    `if:"label=_"`
	Nouns    []NamedNoun `if:"label=nouns"`
	Lines    Lines       `if:"label=lines"`
}

// User implemented slots:
var _ StoryStatement = (*NounAssignment)(nil)

func (*NounAssignment) Compose() composer.Spec {
	return composer.Spec{
		Name: NounAssignment_Type,
		Uses: composer.Type_Flow,
	}
}

const NounAssignment_Type = "noun_assignment"
const NounAssignment_Field_Property = "$PROPERTY"
const NounAssignment_Field_Nouns = "$NOUNS"
const NounAssignment_Field_Lines = "$LINES"

func (op *NounAssignment) Marshal(m jsn.Marshaler) error {
	return NounAssignment_Marshal(m, op)
}

type NounAssignment_Slice []NounAssignment

func (op *NounAssignment_Slice) GetType() string { return NounAssignment_Type }

func (op *NounAssignment_Slice) Marshal(m jsn.Marshaler) error {
	return NounAssignment_Repeats_Marshal(m, (*[]NounAssignment)(op))
}

func (op *NounAssignment_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NounAssignment_Slice) SetSize(cnt int) {
	var els []NounAssignment
	if cnt >= 0 {
		els = make(NounAssignment_Slice, cnt)
	}
	(*op) = els
}

func (op *NounAssignment_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NounAssignment_Marshal(m, &(*op)[i])
}

func NounAssignment_Repeats_Marshal(m jsn.Marshaler, vals *[]NounAssignment) error {
	return jsn.RepeatBlock(m, (*NounAssignment_Slice)(vals))
}

func NounAssignment_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NounAssignment) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NounAssignment_Repeats_Marshal(m, pv)
	}
	return
}

type NounAssignment_Flow struct{ ptr *NounAssignment }

func (n NounAssignment_Flow) GetType() string      { return NounAssignment_Type }
func (n NounAssignment_Flow) GetLede() string      { return NounAssignment_Type }
func (n NounAssignment_Flow) GetFlow() interface{} { return n.ptr }
func (n NounAssignment_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NounAssignment); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NounAssignment_Optional_Marshal(m jsn.Marshaler, pv **NounAssignment) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NounAssignment_Marshal(m, *pv)
	} else if !enc {
		var v NounAssignment
		if err = NounAssignment_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NounAssignment_Marshal(m jsn.Marshaler, val *NounAssignment) (err error) {
	if err = m.MarshalBlock(NounAssignment_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NounAssignment_Field_Property)
		if e0 == nil {
			e0 = Property_Marshal(m, &val.Property)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NounAssignment_Field_Property))
		}
		e1 := m.MarshalKey("nouns", NounAssignment_Field_Nouns)
		if e1 == nil {
			e1 = NamedNoun_Repeats_Marshal(m, &val.Nouns)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NounAssignment_Field_Nouns))
		}
		e2 := m.MarshalKey("lines", NounAssignment_Field_Lines)
		if e2 == nil {
			e2 = Lines_Marshal(m, &val.Lines)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", NounAssignment_Field_Lines))
		}
		m.EndBlock()
	}
	return
}

// NounName requires a user-specified string.
type NounName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *NounName) String() string {
	return op.Str
}

func (*NounName) Compose() composer.Spec {
	return composer.Spec{
		Name:        NounName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const NounName_Type = "noun_name"

func (op *NounName) Marshal(m jsn.Marshaler) error {
	return NounName_Marshal(m, op)
}

func NounName_Optional_Marshal(m jsn.Marshaler, val *NounName) (err error) {
	var zero NounName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = NounName_Marshal(m, val)
	}
	return
}

func NounName_Marshal(m jsn.Marshaler, val *NounName) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(NounName_Type, &val.Str)
}

type NounName_Slice []NounName

func (op *NounName_Slice) GetType() string { return NounName_Type }

func (op *NounName_Slice) Marshal(m jsn.Marshaler) error {
	return NounName_Repeats_Marshal(m, (*[]NounName)(op))
}

func (op *NounName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NounName_Slice) SetSize(cnt int) {
	var els []NounName
	if cnt >= 0 {
		els = make(NounName_Slice, cnt)
	}
	(*op) = els
}

func (op *NounName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NounName_Marshal(m, &(*op)[i])
}

func NounName_Repeats_Marshal(m jsn.Marshaler, vals *[]NounName) error {
	return jsn.RepeatBlock(m, (*NounName_Slice)(vals))
}

func NounName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NounName) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NounName_Repeats_Marshal(m, pv)
	}
	return
}

// NounPhrase swaps between various options
type NounPhrase struct {
	At     reader.Position `if:"internal"`
	Choice string
	Value  interface{}
}

var NounPhrase_Optional_Marshal = NounPhrase_Marshal

const NounPhrase_KindOfNoun_Opt = "$KIND_OF_NOUN"
const NounPhrase_NounTraits_Opt = "$NOUN_TRAITS"
const NounPhrase_NounRelation_Opt = "$NOUN_RELATION"

func (*NounPhrase) Compose() composer.Spec {
	return composer.Spec{
		Name: NounPhrase_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			NounPhrase_KindOfNoun_Opt, NounPhrase_NounTraits_Opt, NounPhrase_NounRelation_Opt,
		},
		Swaps: []interface{}{
			(*KindOfNoun)(nil),
			(*NounTraits)(nil),
			(*NounRelation)(nil),
		},
	}
}

const NounPhrase_Type = "noun_phrase"

func (op *NounPhrase) GetType() string { return NounPhrase_Type }

func (op *NounPhrase) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *NounPhrase) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case NounPhrase_KindOfNoun_Opt:
		op.Choice, op.Value = c, new(KindOfNoun)
		okay = true
	case NounPhrase_NounTraits_Opt:
		op.Choice, op.Value = c, new(NounTraits)
		okay = true
	case NounPhrase_NounRelation_Opt:
		op.Choice, op.Value = c, new(NounRelation)
		okay = true
	}
	return
}

func (op *NounPhrase) Marshal(m jsn.Marshaler) error {
	return NounPhrase_Marshal(m, op)
}
func NounPhrase_Marshal(m jsn.Marshaler, val *NounPhrase) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type NounPhrase_Slice []NounPhrase

func (op *NounPhrase_Slice) GetType() string { return NounPhrase_Type }

func (op *NounPhrase_Slice) Marshal(m jsn.Marshaler) error {
	return NounPhrase_Repeats_Marshal(m, (*[]NounPhrase)(op))
}

func (op *NounPhrase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NounPhrase_Slice) SetSize(cnt int) {
	var els []NounPhrase
	if cnt >= 0 {
		els = make(NounPhrase_Slice, cnt)
	}
	(*op) = els
}

func (op *NounPhrase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NounPhrase_Marshal(m, &(*op)[i])
}

func NounPhrase_Repeats_Marshal(m jsn.Marshaler, vals *[]NounPhrase) error {
	return jsn.RepeatBlock(m, (*NounPhrase_Slice)(vals))
}

func NounPhrase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NounPhrase) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NounPhrase_Repeats_Marshal(m, pv)
	}
	return
}

// NounRelation
type NounRelation struct {
	AreBeing AreBeing         `if:"label=are_being,optional"`
	Relation rel.RelationName `if:"label=relation"`
	Nouns    []NamedNoun      `if:"label=nouns"`
}

func (*NounRelation) Compose() composer.Spec {
	return composer.Spec{
		Name: NounRelation_Type,
		Uses: composer.Type_Flow,
	}
}

const NounRelation_Type = "noun_relation"
const NounRelation_Field_AreBeing = "$ARE_BEING"
const NounRelation_Field_Relation = "$RELATION"
const NounRelation_Field_Nouns = "$NOUNS"

func (op *NounRelation) Marshal(m jsn.Marshaler) error {
	return NounRelation_Marshal(m, op)
}

type NounRelation_Slice []NounRelation

func (op *NounRelation_Slice) GetType() string { return NounRelation_Type }

func (op *NounRelation_Slice) Marshal(m jsn.Marshaler) error {
	return NounRelation_Repeats_Marshal(m, (*[]NounRelation)(op))
}

func (op *NounRelation_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NounRelation_Slice) SetSize(cnt int) {
	var els []NounRelation
	if cnt >= 0 {
		els = make(NounRelation_Slice, cnt)
	}
	(*op) = els
}

func (op *NounRelation_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NounRelation_Marshal(m, &(*op)[i])
}

func NounRelation_Repeats_Marshal(m jsn.Marshaler, vals *[]NounRelation) error {
	return jsn.RepeatBlock(m, (*NounRelation_Slice)(vals))
}

func NounRelation_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NounRelation) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NounRelation_Repeats_Marshal(m, pv)
	}
	return
}

type NounRelation_Flow struct{ ptr *NounRelation }

func (n NounRelation_Flow) GetType() string      { return NounRelation_Type }
func (n NounRelation_Flow) GetLede() string      { return NounRelation_Type }
func (n NounRelation_Flow) GetFlow() interface{} { return n.ptr }
func (n NounRelation_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NounRelation); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NounRelation_Optional_Marshal(m jsn.Marshaler, pv **NounRelation) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NounRelation_Marshal(m, *pv)
	} else if !enc {
		var v NounRelation
		if err = NounRelation_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NounRelation_Marshal(m jsn.Marshaler, val *NounRelation) (err error) {
	if err = m.MarshalBlock(NounRelation_Flow{val}); err == nil {
		e0 := m.MarshalKey("are_being", NounRelation_Field_AreBeing)
		if e0 == nil {
			e0 = AreBeing_Optional_Marshal(m, &val.AreBeing)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NounRelation_Field_AreBeing))
		}
		e1 := m.MarshalKey("relation", NounRelation_Field_Relation)
		if e1 == nil {
			e1 = rel.RelationName_Marshal(m, &val.Relation)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NounRelation_Field_Relation))
		}
		e2 := m.MarshalKey("nouns", NounRelation_Field_Nouns)
		if e2 == nil {
			e2 = NamedNoun_Repeats_Marshal(m, &val.Nouns)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", NounRelation_Field_Nouns))
		}
		m.EndBlock()
	}
	return
}

// NounStatement Describes people, places, or things.
type NounStatement struct {
	Lede    Lede     `if:"label=_"`
	Tail    []Tail   `if:"label=tail,optional"`
	Summary *Summary `if:"label=summary,optional"`
}

// User implemented slots:
var _ StoryStatement = (*NounStatement)(nil)

func (*NounStatement) Compose() composer.Spec {
	return composer.Spec{
		Name: NounStatement_Type,
		Uses: composer.Type_Flow,
	}
}

const NounStatement_Type = "noun_statement"
const NounStatement_Field_Lede = "$LEDE"
const NounStatement_Field_Tail = "$TAIL"
const NounStatement_Field_Summary = "$SUMMARY"

func (op *NounStatement) Marshal(m jsn.Marshaler) error {
	return NounStatement_Marshal(m, op)
}

type NounStatement_Slice []NounStatement

func (op *NounStatement_Slice) GetType() string { return NounStatement_Type }

func (op *NounStatement_Slice) Marshal(m jsn.Marshaler) error {
	return NounStatement_Repeats_Marshal(m, (*[]NounStatement)(op))
}

func (op *NounStatement_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NounStatement_Slice) SetSize(cnt int) {
	var els []NounStatement
	if cnt >= 0 {
		els = make(NounStatement_Slice, cnt)
	}
	(*op) = els
}

func (op *NounStatement_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NounStatement_Marshal(m, &(*op)[i])
}

func NounStatement_Repeats_Marshal(m jsn.Marshaler, vals *[]NounStatement) error {
	return jsn.RepeatBlock(m, (*NounStatement_Slice)(vals))
}

func NounStatement_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NounStatement) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NounStatement_Repeats_Marshal(m, pv)
	}
	return
}

type NounStatement_Flow struct{ ptr *NounStatement }

func (n NounStatement_Flow) GetType() string      { return NounStatement_Type }
func (n NounStatement_Flow) GetLede() string      { return NounStatement_Type }
func (n NounStatement_Flow) GetFlow() interface{} { return n.ptr }
func (n NounStatement_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NounStatement); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NounStatement_Optional_Marshal(m jsn.Marshaler, pv **NounStatement) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NounStatement_Marshal(m, *pv)
	} else if !enc {
		var v NounStatement
		if err = NounStatement_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NounStatement_Marshal(m jsn.Marshaler, val *NounStatement) (err error) {
	if err = m.MarshalBlock(NounStatement_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NounStatement_Field_Lede)
		if e0 == nil {
			e0 = Lede_Marshal(m, &val.Lede)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NounStatement_Field_Lede))
		}
		e1 := m.MarshalKey("tail", NounStatement_Field_Tail)
		if e1 == nil {
			e1 = Tail_Optional_Repeats_Marshal(m, &val.Tail)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NounStatement_Field_Tail))
		}
		e2 := m.MarshalKey("summary", NounStatement_Field_Summary)
		if e2 == nil {
			e2 = Summary_Optional_Marshal(m, &val.Summary)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", NounStatement_Field_Summary))
		}
		m.EndBlock()
	}
	return
}

// NounTraits
type NounTraits struct {
	AreBeing AreBeing `if:"label=_"`
	Trait    []Trait  `if:"label=trait"`
}

func (*NounTraits) Compose() composer.Spec {
	return composer.Spec{
		Name: NounTraits_Type,
		Uses: composer.Type_Flow,
	}
}

const NounTraits_Type = "noun_traits"
const NounTraits_Field_AreBeing = "$ARE_BEING"
const NounTraits_Field_Trait = "$TRAIT"

func (op *NounTraits) Marshal(m jsn.Marshaler) error {
	return NounTraits_Marshal(m, op)
}

type NounTraits_Slice []NounTraits

func (op *NounTraits_Slice) GetType() string { return NounTraits_Type }

func (op *NounTraits_Slice) Marshal(m jsn.Marshaler) error {
	return NounTraits_Repeats_Marshal(m, (*[]NounTraits)(op))
}

func (op *NounTraits_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NounTraits_Slice) SetSize(cnt int) {
	var els []NounTraits
	if cnt >= 0 {
		els = make(NounTraits_Slice, cnt)
	}
	(*op) = els
}

func (op *NounTraits_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NounTraits_Marshal(m, &(*op)[i])
}

func NounTraits_Repeats_Marshal(m jsn.Marshaler, vals *[]NounTraits) error {
	return jsn.RepeatBlock(m, (*NounTraits_Slice)(vals))
}

func NounTraits_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NounTraits) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NounTraits_Repeats_Marshal(m, pv)
	}
	return
}

type NounTraits_Flow struct{ ptr *NounTraits }

func (n NounTraits_Flow) GetType() string      { return NounTraits_Type }
func (n NounTraits_Flow) GetLede() string      { return NounTraits_Type }
func (n NounTraits_Flow) GetFlow() interface{} { return n.ptr }
func (n NounTraits_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NounTraits); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NounTraits_Optional_Marshal(m jsn.Marshaler, pv **NounTraits) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NounTraits_Marshal(m, *pv)
	} else if !enc {
		var v NounTraits
		if err = NounTraits_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NounTraits_Marshal(m jsn.Marshaler, val *NounTraits) (err error) {
	if err = m.MarshalBlock(NounTraits_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NounTraits_Field_AreBeing)
		if e0 == nil {
			e0 = AreBeing_Marshal(m, &val.AreBeing)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NounTraits_Field_AreBeing))
		}
		e1 := m.MarshalKey("trait", NounTraits_Field_Trait)
		if e1 == nil {
			e1 = Trait_Repeats_Marshal(m, &val.Trait)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NounTraits_Field_Trait))
		}
		m.EndBlock()
	}
	return
}

// NumListProperty
type NumListProperty struct {
	NamedProperty `if:"label=_"`
}

// User implemented slots:
var _ PropertySlot = (*NumListProperty)(nil)

func (*NumListProperty) Compose() composer.Spec {
	return composer.Spec{
		Name: NumListProperty_Type,
		Uses: composer.Type_Flow,
		Lede: "num_list",
	}
}

const NumListProperty_Type = "num_list_property"
const NumListProperty_Field_NamedProperty = "$NAMED_PROPERTY"
const NumListProperty_Field_Name = "$NAME"
const NumListProperty_Field_Type = "$TYPE"
const NumListProperty_Field_Comment = "$COMMENT"

func (op *NumListProperty) Marshal(m jsn.Marshaler) error {
	return NumListProperty_Marshal(m, op)
}

type NumListProperty_Slice []NumListProperty

func (op *NumListProperty_Slice) GetType() string { return NumListProperty_Type }

func (op *NumListProperty_Slice) Marshal(m jsn.Marshaler) error {
	return NumListProperty_Repeats_Marshal(m, (*[]NumListProperty)(op))
}

func (op *NumListProperty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NumListProperty_Slice) SetSize(cnt int) {
	var els []NumListProperty
	if cnt >= 0 {
		els = make(NumListProperty_Slice, cnt)
	}
	(*op) = els
}

func (op *NumListProperty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NumListProperty_Marshal(m, &(*op)[i])
}

func NumListProperty_Repeats_Marshal(m jsn.Marshaler, vals *[]NumListProperty) error {
	return jsn.RepeatBlock(m, (*NumListProperty_Slice)(vals))
}

func NumListProperty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NumListProperty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NumListProperty_Repeats_Marshal(m, pv)
	}
	return
}

type NumListProperty_Flow struct{ ptr *NumListProperty }

func (n NumListProperty_Flow) GetType() string      { return NumListProperty_Type }
func (n NumListProperty_Flow) GetLede() string      { return "num_list" }
func (n NumListProperty_Flow) GetFlow() interface{} { return n.ptr }
func (n NumListProperty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NumListProperty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NumListProperty_Optional_Marshal(m jsn.Marshaler, pv **NumListProperty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NumListProperty_Marshal(m, *pv)
	} else if !enc {
		var v NumListProperty
		if err = NumListProperty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NumListProperty_Marshal(m jsn.Marshaler, val *NumListProperty) (err error) {
	if err = m.MarshalBlock(NumListProperty_Flow{val}); err == nil {
		e1 := m.MarshalKey("named", NumListProperty_Field_Name)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NumListProperty_Field_Name))
		}
		e2 := m.MarshalKey("of", NumListProperty_Field_Type)
		if e2 == nil {
			e2 = literal.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", NumListProperty_Field_Type))
		}
		e3 := m.MarshalKey("desc", NumListProperty_Field_Comment)
		if e3 == nil {
			e3 = Lines_Optional_Marshal(m, &val.Comment)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", NumListProperty_Field_Comment))
		}
		m.EndBlock()
	}
	return
}

// NumberProperty
type NumberProperty struct {
	NamedProperty `if:"label=_"`
}

// User implemented slots:
var _ PropertySlot = (*NumberProperty)(nil)

func (*NumberProperty) Compose() composer.Spec {
	return composer.Spec{
		Name: NumberProperty_Type,
		Uses: composer.Type_Flow,
		Lede: "number",
	}
}

const NumberProperty_Type = "number_property"
const NumberProperty_Field_NamedProperty = "$NAMED_PROPERTY"
const NumberProperty_Field_Name = "$NAME"
const NumberProperty_Field_Type = "$TYPE"
const NumberProperty_Field_Comment = "$COMMENT"

func (op *NumberProperty) Marshal(m jsn.Marshaler) error {
	return NumberProperty_Marshal(m, op)
}

type NumberProperty_Slice []NumberProperty

func (op *NumberProperty_Slice) GetType() string { return NumberProperty_Type }

func (op *NumberProperty_Slice) Marshal(m jsn.Marshaler) error {
	return NumberProperty_Repeats_Marshal(m, (*[]NumberProperty)(op))
}

func (op *NumberProperty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NumberProperty_Slice) SetSize(cnt int) {
	var els []NumberProperty
	if cnt >= 0 {
		els = make(NumberProperty_Slice, cnt)
	}
	(*op) = els
}

func (op *NumberProperty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NumberProperty_Marshal(m, &(*op)[i])
}

func NumberProperty_Repeats_Marshal(m jsn.Marshaler, vals *[]NumberProperty) error {
	return jsn.RepeatBlock(m, (*NumberProperty_Slice)(vals))
}

func NumberProperty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NumberProperty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = NumberProperty_Repeats_Marshal(m, pv)
	}
	return
}

type NumberProperty_Flow struct{ ptr *NumberProperty }

func (n NumberProperty_Flow) GetType() string      { return NumberProperty_Type }
func (n NumberProperty_Flow) GetLede() string      { return "number" }
func (n NumberProperty_Flow) GetFlow() interface{} { return n.ptr }
func (n NumberProperty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NumberProperty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NumberProperty_Optional_Marshal(m jsn.Marshaler, pv **NumberProperty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NumberProperty_Marshal(m, *pv)
	} else if !enc {
		var v NumberProperty
		if err = NumberProperty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NumberProperty_Marshal(m jsn.Marshaler, val *NumberProperty) (err error) {
	if err = m.MarshalBlock(NumberProperty_Flow{val}); err == nil {
		e1 := m.MarshalKey("named", NumberProperty_Field_Name)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NumberProperty_Field_Name))
		}
		e2 := m.MarshalKey("of", NumberProperty_Field_Type)
		if e2 == nil {
			e2 = literal.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", NumberProperty_Field_Type))
		}
		e3 := m.MarshalKey("desc", NumberProperty_Field_Comment)
		if e3 == nil {
			e3 = Lines_Optional_Marshal(m, &val.Comment)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", NumberProperty_Field_Comment))
		}
		m.EndBlock()
	}
	return
}

// OneToMany
type OneToMany struct {
	Kind  SingularKind `if:"label=_"`
	Kinds PluralKinds  `if:"label=kinds"`
}

func (*OneToMany) Compose() composer.Spec {
	return composer.Spec{
		Name: OneToMany_Type,
		Uses: composer.Type_Flow,
	}
}

const OneToMany_Type = "one_to_many"
const OneToMany_Field_Kind = "$KIND"
const OneToMany_Field_Kinds = "$KINDS"

func (op *OneToMany) Marshal(m jsn.Marshaler) error {
	return OneToMany_Marshal(m, op)
}

type OneToMany_Slice []OneToMany

func (op *OneToMany_Slice) GetType() string { return OneToMany_Type }

func (op *OneToMany_Slice) Marshal(m jsn.Marshaler) error {
	return OneToMany_Repeats_Marshal(m, (*[]OneToMany)(op))
}

func (op *OneToMany_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *OneToMany_Slice) SetSize(cnt int) {
	var els []OneToMany
	if cnt >= 0 {
		els = make(OneToMany_Slice, cnt)
	}
	(*op) = els
}

func (op *OneToMany_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return OneToMany_Marshal(m, &(*op)[i])
}

func OneToMany_Repeats_Marshal(m jsn.Marshaler, vals *[]OneToMany) error {
	return jsn.RepeatBlock(m, (*OneToMany_Slice)(vals))
}

func OneToMany_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]OneToMany) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = OneToMany_Repeats_Marshal(m, pv)
	}
	return
}

type OneToMany_Flow struct{ ptr *OneToMany }

func (n OneToMany_Flow) GetType() string      { return OneToMany_Type }
func (n OneToMany_Flow) GetLede() string      { return OneToMany_Type }
func (n OneToMany_Flow) GetFlow() interface{} { return n.ptr }
func (n OneToMany_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*OneToMany); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func OneToMany_Optional_Marshal(m jsn.Marshaler, pv **OneToMany) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = OneToMany_Marshal(m, *pv)
	} else if !enc {
		var v OneToMany
		if err = OneToMany_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func OneToMany_Marshal(m jsn.Marshaler, val *OneToMany) (err error) {
	if err = m.MarshalBlock(OneToMany_Flow{val}); err == nil {
		e0 := m.MarshalKey("", OneToMany_Field_Kind)
		if e0 == nil {
			e0 = SingularKind_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", OneToMany_Field_Kind))
		}
		e1 := m.MarshalKey("kinds", OneToMany_Field_Kinds)
		if e1 == nil {
			e1 = PluralKinds_Marshal(m, &val.Kinds)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", OneToMany_Field_Kinds))
		}
		m.EndBlock()
	}
	return
}

// OneToOne
type OneToOne struct {
	Kind      SingularKind `if:"label=_"`
	OtherKind SingularKind `if:"label=other_kind"`
}

func (*OneToOne) Compose() composer.Spec {
	return composer.Spec{
		Name: OneToOne_Type,
		Uses: composer.Type_Flow,
	}
}

const OneToOne_Type = "one_to_one"
const OneToOne_Field_Kind = "$KIND"
const OneToOne_Field_OtherKind = "$OTHER_KIND"

func (op *OneToOne) Marshal(m jsn.Marshaler) error {
	return OneToOne_Marshal(m, op)
}

type OneToOne_Slice []OneToOne

func (op *OneToOne_Slice) GetType() string { return OneToOne_Type }

func (op *OneToOne_Slice) Marshal(m jsn.Marshaler) error {
	return OneToOne_Repeats_Marshal(m, (*[]OneToOne)(op))
}

func (op *OneToOne_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *OneToOne_Slice) SetSize(cnt int) {
	var els []OneToOne
	if cnt >= 0 {
		els = make(OneToOne_Slice, cnt)
	}
	(*op) = els
}

func (op *OneToOne_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return OneToOne_Marshal(m, &(*op)[i])
}

func OneToOne_Repeats_Marshal(m jsn.Marshaler, vals *[]OneToOne) error {
	return jsn.RepeatBlock(m, (*OneToOne_Slice)(vals))
}

func OneToOne_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]OneToOne) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = OneToOne_Repeats_Marshal(m, pv)
	}
	return
}

type OneToOne_Flow struct{ ptr *OneToOne }

func (n OneToOne_Flow) GetType() string      { return OneToOne_Type }
func (n OneToOne_Flow) GetLede() string      { return OneToOne_Type }
func (n OneToOne_Flow) GetFlow() interface{} { return n.ptr }
func (n OneToOne_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*OneToOne); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func OneToOne_Optional_Marshal(m jsn.Marshaler, pv **OneToOne) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = OneToOne_Marshal(m, *pv)
	} else if !enc {
		var v OneToOne
		if err = OneToOne_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func OneToOne_Marshal(m jsn.Marshaler, val *OneToOne) (err error) {
	if err = m.MarshalBlock(OneToOne_Flow{val}); err == nil {
		e0 := m.MarshalKey("", OneToOne_Field_Kind)
		if e0 == nil {
			e0 = SingularKind_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", OneToOne_Field_Kind))
		}
		e1 := m.MarshalKey("other_kind", OneToOne_Field_OtherKind)
		if e1 == nil {
			e1 = SingularKind_Marshal(m, &val.OtherKind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", OneToOne_Field_OtherKind))
		}
		m.EndBlock()
	}
	return
}

// PairedAction
type PairedAction struct {
	At    reader.Position `if:"internal"`
	Kinds PluralKinds     `if:"label=_"`
}

func (*PairedAction) Compose() composer.Spec {
	return composer.Spec{
		Name: PairedAction_Type,
		Uses: composer.Type_Flow,
	}
}

const PairedAction_Type = "paired_action"
const PairedAction_Field_Kinds = "$KINDS"

func (op *PairedAction) Marshal(m jsn.Marshaler) error {
	return PairedAction_Marshal(m, op)
}

type PairedAction_Slice []PairedAction

func (op *PairedAction_Slice) GetType() string { return PairedAction_Type }

func (op *PairedAction_Slice) Marshal(m jsn.Marshaler) error {
	return PairedAction_Repeats_Marshal(m, (*[]PairedAction)(op))
}

func (op *PairedAction_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PairedAction_Slice) SetSize(cnt int) {
	var els []PairedAction
	if cnt >= 0 {
		els = make(PairedAction_Slice, cnt)
	}
	(*op) = els
}

func (op *PairedAction_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PairedAction_Marshal(m, &(*op)[i])
}

func PairedAction_Repeats_Marshal(m jsn.Marshaler, vals *[]PairedAction) error {
	return jsn.RepeatBlock(m, (*PairedAction_Slice)(vals))
}

func PairedAction_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PairedAction) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PairedAction_Repeats_Marshal(m, pv)
	}
	return
}

type PairedAction_Flow struct{ ptr *PairedAction }

func (n PairedAction_Flow) GetType() string      { return PairedAction_Type }
func (n PairedAction_Flow) GetLede() string      { return PairedAction_Type }
func (n PairedAction_Flow) GetFlow() interface{} { return n.ptr }
func (n PairedAction_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PairedAction); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PairedAction_Optional_Marshal(m jsn.Marshaler, pv **PairedAction) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PairedAction_Marshal(m, *pv)
	} else if !enc {
		var v PairedAction
		if err = PairedAction_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PairedAction_Marshal(m jsn.Marshaler, val *PairedAction) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(PairedAction_Flow{val}); err == nil {
		e1 := m.MarshalKey("", PairedAction_Field_Kinds)
		if e1 == nil {
			e1 = PluralKinds_Marshal(m, &val.Kinds)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", PairedAction_Field_Kinds))
		}
		m.EndBlock()
	}
	return
}

// Paragraph
type Paragraph struct {
	StoryStatement []StoryStatement `if:"label=_,optional"`
}

func (*Paragraph) Compose() composer.Spec {
	return composer.Spec{
		Name: Paragraph_Type,
		Uses: composer.Type_Flow,
	}
}

const Paragraph_Type = "paragraph"
const Paragraph_Field_StoryStatement = "$STORY_STATEMENT"

func (op *Paragraph) Marshal(m jsn.Marshaler) error {
	return Paragraph_Marshal(m, op)
}

type Paragraph_Slice []Paragraph

func (op *Paragraph_Slice) GetType() string { return Paragraph_Type }

func (op *Paragraph_Slice) Marshal(m jsn.Marshaler) error {
	return Paragraph_Repeats_Marshal(m, (*[]Paragraph)(op))
}

func (op *Paragraph_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Paragraph_Slice) SetSize(cnt int) {
	var els []Paragraph
	if cnt >= 0 {
		els = make(Paragraph_Slice, cnt)
	}
	(*op) = els
}

func (op *Paragraph_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Paragraph_Marshal(m, &(*op)[i])
}

func Paragraph_Repeats_Marshal(m jsn.Marshaler, vals *[]Paragraph) error {
	return jsn.RepeatBlock(m, (*Paragraph_Slice)(vals))
}

func Paragraph_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Paragraph) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Paragraph_Repeats_Marshal(m, pv)
	}
	return
}

type Paragraph_Flow struct{ ptr *Paragraph }

func (n Paragraph_Flow) GetType() string      { return Paragraph_Type }
func (n Paragraph_Flow) GetLede() string      { return Paragraph_Type }
func (n Paragraph_Flow) GetFlow() interface{} { return n.ptr }
func (n Paragraph_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Paragraph); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Paragraph_Optional_Marshal(m jsn.Marshaler, pv **Paragraph) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Paragraph_Marshal(m, *pv)
	} else if !enc {
		var v Paragraph
		if err = Paragraph_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Paragraph_Marshal(m jsn.Marshaler, val *Paragraph) (err error) {
	if err = m.MarshalBlock(Paragraph_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Paragraph_Field_StoryStatement)
		if e0 == nil {
			e0 = StoryStatement_Optional_Repeats_Marshal(m, &val.StoryStatement)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Paragraph_Field_StoryStatement))
		}
		m.EndBlock()
	}
	return
}

// PatternActions Actions to take when using a pattern.
type PatternActions struct {
	Name          core.PatternName `if:"label=_"`
	PatternLocals *PatternLocals   `if:"label=pattern_locals,optional"`
	PatternReturn *PatternReturn   `if:"label=pattern_return,optional"`
	PatternRules  PatternRules     `if:"label=pattern_rules"`
}

// User implemented slots:
var _ StoryStatement = (*PatternActions)(nil)

func (*PatternActions) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternActions_Type,
		Uses: composer.Type_Flow,
	}
}

const PatternActions_Type = "pattern_actions"
const PatternActions_Field_Name = "$NAME"
const PatternActions_Field_PatternLocals = "$PATTERN_LOCALS"
const PatternActions_Field_PatternReturn = "$PATTERN_RETURN"
const PatternActions_Field_PatternRules = "$PATTERN_RULES"

func (op *PatternActions) Marshal(m jsn.Marshaler) error {
	return PatternActions_Marshal(m, op)
}

type PatternActions_Slice []PatternActions

func (op *PatternActions_Slice) GetType() string { return PatternActions_Type }

func (op *PatternActions_Slice) Marshal(m jsn.Marshaler) error {
	return PatternActions_Repeats_Marshal(m, (*[]PatternActions)(op))
}

func (op *PatternActions_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternActions_Slice) SetSize(cnt int) {
	var els []PatternActions
	if cnt >= 0 {
		els = make(PatternActions_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternActions_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternActions_Marshal(m, &(*op)[i])
}

func PatternActions_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternActions) error {
	return jsn.RepeatBlock(m, (*PatternActions_Slice)(vals))
}

func PatternActions_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternActions) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternActions_Repeats_Marshal(m, pv)
	}
	return
}

type PatternActions_Flow struct{ ptr *PatternActions }

func (n PatternActions_Flow) GetType() string      { return PatternActions_Type }
func (n PatternActions_Flow) GetLede() string      { return PatternActions_Type }
func (n PatternActions_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternActions_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternActions); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternActions_Optional_Marshal(m jsn.Marshaler, pv **PatternActions) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternActions_Marshal(m, *pv)
	} else if !enc {
		var v PatternActions
		if err = PatternActions_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternActions_Marshal(m jsn.Marshaler, val *PatternActions) (err error) {
	if err = m.MarshalBlock(PatternActions_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternActions_Field_Name)
		if e0 == nil {
			e0 = core.PatternName_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternActions_Field_Name))
		}
		e1 := m.MarshalKey("pattern_locals", PatternActions_Field_PatternLocals)
		if e1 == nil {
			e1 = PatternLocals_Optional_Marshal(m, &val.PatternLocals)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", PatternActions_Field_PatternLocals))
		}
		e2 := m.MarshalKey("pattern_return", PatternActions_Field_PatternReturn)
		if e2 == nil {
			e2 = PatternReturn_Optional_Marshal(m, &val.PatternReturn)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", PatternActions_Field_PatternReturn))
		}
		e3 := m.MarshalKey("pattern_rules", PatternActions_Field_PatternRules)
		if e3 == nil {
			e3 = PatternRules_Marshal(m, &val.PatternRules)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", PatternActions_Field_PatternRules))
		}
		m.EndBlock()
	}
	return
}

// PatternDecl
type PatternDecl struct {
	Type          PatternType           `if:"label=_"`
	Name          core.PatternName      `if:"label=name"`
	Optvars       *PatternVariablesTail `if:"label=optvars,optional"`
	PatternReturn *PatternReturn        `if:"label=pattern_return,optional"`
	About         *Comment              `if:"label=about,optional"`
}

// User implemented slots:
var _ StoryStatement = (*PatternDecl)(nil)

func (*PatternDecl) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternDecl_Type,
		Uses: composer.Type_Flow,
	}
}

const PatternDecl_Type = "pattern_decl"
const PatternDecl_Field_Type = "$TYPE"
const PatternDecl_Field_Name = "$NAME"
const PatternDecl_Field_Optvars = "$OPTVARS"
const PatternDecl_Field_PatternReturn = "$PATTERN_RETURN"
const PatternDecl_Field_About = "$ABOUT"

func (op *PatternDecl) Marshal(m jsn.Marshaler) error {
	return PatternDecl_Marshal(m, op)
}

type PatternDecl_Slice []PatternDecl

func (op *PatternDecl_Slice) GetType() string { return PatternDecl_Type }

func (op *PatternDecl_Slice) Marshal(m jsn.Marshaler) error {
	return PatternDecl_Repeats_Marshal(m, (*[]PatternDecl)(op))
}

func (op *PatternDecl_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternDecl_Slice) SetSize(cnt int) {
	var els []PatternDecl
	if cnt >= 0 {
		els = make(PatternDecl_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternDecl_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternDecl_Marshal(m, &(*op)[i])
}

func PatternDecl_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternDecl) error {
	return jsn.RepeatBlock(m, (*PatternDecl_Slice)(vals))
}

func PatternDecl_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternDecl) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternDecl_Repeats_Marshal(m, pv)
	}
	return
}

type PatternDecl_Flow struct{ ptr *PatternDecl }

func (n PatternDecl_Flow) GetType() string      { return PatternDecl_Type }
func (n PatternDecl_Flow) GetLede() string      { return PatternDecl_Type }
func (n PatternDecl_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternDecl_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternDecl); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternDecl_Optional_Marshal(m jsn.Marshaler, pv **PatternDecl) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternDecl_Marshal(m, *pv)
	} else if !enc {
		var v PatternDecl
		if err = PatternDecl_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternDecl_Marshal(m jsn.Marshaler, val *PatternDecl) (err error) {
	if err = m.MarshalBlock(PatternDecl_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternDecl_Field_Type)
		if e0 == nil {
			e0 = PatternType_Marshal(m, &val.Type)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternDecl_Field_Type))
		}
		e1 := m.MarshalKey("name", PatternDecl_Field_Name)
		if e1 == nil {
			e1 = core.PatternName_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", PatternDecl_Field_Name))
		}
		e2 := m.MarshalKey("optvars", PatternDecl_Field_Optvars)
		if e2 == nil {
			e2 = PatternVariablesTail_Optional_Marshal(m, &val.Optvars)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", PatternDecl_Field_Optvars))
		}
		e3 := m.MarshalKey("pattern_return", PatternDecl_Field_PatternReturn)
		if e3 == nil {
			e3 = PatternReturn_Optional_Marshal(m, &val.PatternReturn)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", PatternDecl_Field_PatternReturn))
		}
		e4 := m.MarshalKey("about", PatternDecl_Field_About)
		if e4 == nil {
			e4 = Comment_Optional_Marshal(m, &val.About)
		}
		if e4 != nil && e4 != jsn.Missing {
			m.Error(errutil.New(e4, "in flow at", PatternDecl_Field_About))
		}
		m.EndBlock()
	}
	return
}

// PatternFlags requires a predefined string.
type PatternFlags struct {
	Str string
}

func (op *PatternFlags) String() string {
	return op.Str
}

const PatternFlags_Before = "$BEFORE"
const PatternFlags_After = "$AFTER"
const PatternFlags_Terminate = "$TERMINATE"

func (*PatternFlags) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternFlags_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			PatternFlags_Before, PatternFlags_After, PatternFlags_Terminate,
		},
		Strings: []string{
			"before", "after", "terminate",
		},
	}
}

const PatternFlags_Type = "pattern_flags"

func (op *PatternFlags) Marshal(m jsn.Marshaler) error {
	return PatternFlags_Marshal(m, op)
}

func PatternFlags_Optional_Marshal(m jsn.Marshaler, val *PatternFlags) (err error) {
	var zero PatternFlags
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = PatternFlags_Marshal(m, val)
	}
	return
}

func PatternFlags_Marshal(m jsn.Marshaler, val *PatternFlags) (err error) {
	return m.MarshalValue(PatternFlags_Type, jsn.MakeEnum(val, &val.Str))
}

type PatternFlags_Slice []PatternFlags

func (op *PatternFlags_Slice) GetType() string { return PatternFlags_Type }

func (op *PatternFlags_Slice) Marshal(m jsn.Marshaler) error {
	return PatternFlags_Repeats_Marshal(m, (*[]PatternFlags)(op))
}

func (op *PatternFlags_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternFlags_Slice) SetSize(cnt int) {
	var els []PatternFlags
	if cnt >= 0 {
		els = make(PatternFlags_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternFlags_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternFlags_Marshal(m, &(*op)[i])
}

func PatternFlags_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternFlags) error {
	return jsn.RepeatBlock(m, (*PatternFlags_Slice)(vals))
}

func PatternFlags_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternFlags) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternFlags_Repeats_Marshal(m, pv)
	}
	return
}

// PatternLocals
type PatternLocals struct {
	LocalDecl []LocalDecl `if:"label=_"`
}

func (*PatternLocals) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternLocals_Type,
		Uses: composer.Type_Flow,
	}
}

const PatternLocals_Type = "pattern_locals"
const PatternLocals_Field_LocalDecl = "$LOCAL_DECL"

func (op *PatternLocals) Marshal(m jsn.Marshaler) error {
	return PatternLocals_Marshal(m, op)
}

type PatternLocals_Slice []PatternLocals

func (op *PatternLocals_Slice) GetType() string { return PatternLocals_Type }

func (op *PatternLocals_Slice) Marshal(m jsn.Marshaler) error {
	return PatternLocals_Repeats_Marshal(m, (*[]PatternLocals)(op))
}

func (op *PatternLocals_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternLocals_Slice) SetSize(cnt int) {
	var els []PatternLocals
	if cnt >= 0 {
		els = make(PatternLocals_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternLocals_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternLocals_Marshal(m, &(*op)[i])
}

func PatternLocals_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternLocals) error {
	return jsn.RepeatBlock(m, (*PatternLocals_Slice)(vals))
}

func PatternLocals_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternLocals) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternLocals_Repeats_Marshal(m, pv)
	}
	return
}

type PatternLocals_Flow struct{ ptr *PatternLocals }

func (n PatternLocals_Flow) GetType() string      { return PatternLocals_Type }
func (n PatternLocals_Flow) GetLede() string      { return PatternLocals_Type }
func (n PatternLocals_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternLocals_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternLocals); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternLocals_Optional_Marshal(m jsn.Marshaler, pv **PatternLocals) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternLocals_Marshal(m, *pv)
	} else if !enc {
		var v PatternLocals
		if err = PatternLocals_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternLocals_Marshal(m jsn.Marshaler, val *PatternLocals) (err error) {
	if err = m.MarshalBlock(PatternLocals_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternLocals_Field_LocalDecl)
		if e0 == nil {
			e0 = LocalDecl_Repeats_Marshal(m, &val.LocalDecl)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternLocals_Field_LocalDecl))
		}
		m.EndBlock()
	}
	return
}

// PatternReturn
type PatternReturn struct {
	Result PropertySlot `if:"label=_"`
}

func (*PatternReturn) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternReturn_Type,
		Uses: composer.Type_Flow,
	}
}

const PatternReturn_Type = "pattern_return"
const PatternReturn_Field_Result = "$RESULT"

func (op *PatternReturn) Marshal(m jsn.Marshaler) error {
	return PatternReturn_Marshal(m, op)
}

type PatternReturn_Slice []PatternReturn

func (op *PatternReturn_Slice) GetType() string { return PatternReturn_Type }

func (op *PatternReturn_Slice) Marshal(m jsn.Marshaler) error {
	return PatternReturn_Repeats_Marshal(m, (*[]PatternReturn)(op))
}

func (op *PatternReturn_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternReturn_Slice) SetSize(cnt int) {
	var els []PatternReturn
	if cnt >= 0 {
		els = make(PatternReturn_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternReturn_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternReturn_Marshal(m, &(*op)[i])
}

func PatternReturn_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternReturn) error {
	return jsn.RepeatBlock(m, (*PatternReturn_Slice)(vals))
}

func PatternReturn_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternReturn) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternReturn_Repeats_Marshal(m, pv)
	}
	return
}

type PatternReturn_Flow struct{ ptr *PatternReturn }

func (n PatternReturn_Flow) GetType() string      { return PatternReturn_Type }
func (n PatternReturn_Flow) GetLede() string      { return PatternReturn_Type }
func (n PatternReturn_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternReturn_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternReturn); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternReturn_Optional_Marshal(m jsn.Marshaler, pv **PatternReturn) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternReturn_Marshal(m, *pv)
	} else if !enc {
		var v PatternReturn
		if err = PatternReturn_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternReturn_Marshal(m jsn.Marshaler, val *PatternReturn) (err error) {
	if err = m.MarshalBlock(PatternReturn_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternReturn_Field_Result)
		if e0 == nil {
			e0 = PropertySlot_Marshal(m, &val.Result)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternReturn_Field_Result))
		}
		m.EndBlock()
	}
	return
}

// PatternRule
type PatternRule struct {
	Guard rt.BoolEval  `if:"label=_"`
	Flags PatternFlags `if:"label=flags,optional"`
	Hook  ProgramHook  `if:"label=hook"`
}

func (*PatternRule) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternRule_Type,
		Uses: composer.Type_Flow,
	}
}

const PatternRule_Type = "pattern_rule"
const PatternRule_Field_Guard = "$GUARD"
const PatternRule_Field_Flags = "$FLAGS"
const PatternRule_Field_Hook = "$HOOK"

func (op *PatternRule) Marshal(m jsn.Marshaler) error {
	return PatternRule_Marshal(m, op)
}

type PatternRule_Slice []PatternRule

func (op *PatternRule_Slice) GetType() string { return PatternRule_Type }

func (op *PatternRule_Slice) Marshal(m jsn.Marshaler) error {
	return PatternRule_Repeats_Marshal(m, (*[]PatternRule)(op))
}

func (op *PatternRule_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternRule_Slice) SetSize(cnt int) {
	var els []PatternRule
	if cnt >= 0 {
		els = make(PatternRule_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternRule_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternRule_Marshal(m, &(*op)[i])
}

func PatternRule_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternRule) error {
	return jsn.RepeatBlock(m, (*PatternRule_Slice)(vals))
}

func PatternRule_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternRule) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternRule_Repeats_Marshal(m, pv)
	}
	return
}

type PatternRule_Flow struct{ ptr *PatternRule }

func (n PatternRule_Flow) GetType() string      { return PatternRule_Type }
func (n PatternRule_Flow) GetLede() string      { return PatternRule_Type }
func (n PatternRule_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternRule_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternRule); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternRule_Optional_Marshal(m jsn.Marshaler, pv **PatternRule) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternRule_Marshal(m, *pv)
	} else if !enc {
		var v PatternRule
		if err = PatternRule_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternRule_Marshal(m jsn.Marshaler, val *PatternRule) (err error) {
	if err = m.MarshalBlock(PatternRule_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternRule_Field_Guard)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Guard)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternRule_Field_Guard))
		}
		e1 := m.MarshalKey("flags", PatternRule_Field_Flags)
		if e1 == nil {
			e1 = PatternFlags_Optional_Marshal(m, &val.Flags)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", PatternRule_Field_Flags))
		}
		e2 := m.MarshalKey("hook", PatternRule_Field_Hook)
		if e2 == nil {
			e2 = ProgramHook_Marshal(m, &val.Hook)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", PatternRule_Field_Hook))
		}
		m.EndBlock()
	}
	return
}

// PatternRules
type PatternRules struct {
	PatternRule []PatternRule `if:"label=_,optional"`
}

func (*PatternRules) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternRules_Type,
		Uses: composer.Type_Flow,
	}
}

const PatternRules_Type = "pattern_rules"
const PatternRules_Field_PatternRule = "$PATTERN_RULE"

func (op *PatternRules) Marshal(m jsn.Marshaler) error {
	return PatternRules_Marshal(m, op)
}

type PatternRules_Slice []PatternRules

func (op *PatternRules_Slice) GetType() string { return PatternRules_Type }

func (op *PatternRules_Slice) Marshal(m jsn.Marshaler) error {
	return PatternRules_Repeats_Marshal(m, (*[]PatternRules)(op))
}

func (op *PatternRules_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternRules_Slice) SetSize(cnt int) {
	var els []PatternRules
	if cnt >= 0 {
		els = make(PatternRules_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternRules_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternRules_Marshal(m, &(*op)[i])
}

func PatternRules_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternRules) error {
	return jsn.RepeatBlock(m, (*PatternRules_Slice)(vals))
}

func PatternRules_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternRules) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternRules_Repeats_Marshal(m, pv)
	}
	return
}

type PatternRules_Flow struct{ ptr *PatternRules }

func (n PatternRules_Flow) GetType() string      { return PatternRules_Type }
func (n PatternRules_Flow) GetLede() string      { return PatternRules_Type }
func (n PatternRules_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternRules_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternRules); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternRules_Optional_Marshal(m jsn.Marshaler, pv **PatternRules) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternRules_Marshal(m, *pv)
	} else if !enc {
		var v PatternRules
		if err = PatternRules_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternRules_Marshal(m jsn.Marshaler, val *PatternRules) (err error) {
	if err = m.MarshalBlock(PatternRules_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternRules_Field_PatternRule)
		if e0 == nil {
			e0 = PatternRule_Optional_Repeats_Marshal(m, &val.PatternRule)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternRules_Field_PatternRule))
		}
		m.EndBlock()
	}
	return
}

// PatternType requires a predefined or user-specified string.
type PatternType struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *PatternType) String() string {
	return op.Str
}

const PatternType_Patterns = "$PATTERNS"
const PatternType_Actions = "$ACTIONS"
const PatternType_Events = "$EVENTS"

func (*PatternType) Compose() composer.Spec {
	return composer.Spec{
		Name:        PatternType_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
		Choices: []string{
			PatternType_Patterns, PatternType_Actions, PatternType_Events,
		},
		Strings: []string{
			"patterns", "actions", "events",
		},
	}
}

const PatternType_Type = "pattern_type"

func (op *PatternType) Marshal(m jsn.Marshaler) error {
	return PatternType_Marshal(m, op)
}

func PatternType_Optional_Marshal(m jsn.Marshaler, val *PatternType) (err error) {
	var zero PatternType
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = PatternType_Marshal(m, val)
	}
	return
}

func PatternType_Marshal(m jsn.Marshaler, val *PatternType) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(PatternType_Type, jsn.MakeEnum(val, &val.Str))
}

type PatternType_Slice []PatternType

func (op *PatternType_Slice) GetType() string { return PatternType_Type }

func (op *PatternType_Slice) Marshal(m jsn.Marshaler) error {
	return PatternType_Repeats_Marshal(m, (*[]PatternType)(op))
}

func (op *PatternType_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternType_Slice) SetSize(cnt int) {
	var els []PatternType
	if cnt >= 0 {
		els = make(PatternType_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternType_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternType_Marshal(m, &(*op)[i])
}

func PatternType_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternType) error {
	return jsn.RepeatBlock(m, (*PatternType_Slice)(vals))
}

func PatternType_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternType) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternType_Repeats_Marshal(m, pv)
	}
	return
}

// PatternVariablesDecl Values provided when calling a pattern.
type PatternVariablesDecl struct {
	PatternName core.PatternName `if:"label=_"`
	Props       []PropertySlot   `if:"label=requires"`
}

// User implemented slots:
var _ StoryStatement = (*PatternVariablesDecl)(nil)

func (*PatternVariablesDecl) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternVariablesDecl_Type,
		Uses: composer.Type_Flow,
		Lede: "pattern",
	}
}

const PatternVariablesDecl_Type = "pattern_variables_decl"
const PatternVariablesDecl_Field_PatternName = "$PATTERN_NAME"
const PatternVariablesDecl_Field_Props = "$PROPS"

func (op *PatternVariablesDecl) Marshal(m jsn.Marshaler) error {
	return PatternVariablesDecl_Marshal(m, op)
}

type PatternVariablesDecl_Slice []PatternVariablesDecl

func (op *PatternVariablesDecl_Slice) GetType() string { return PatternVariablesDecl_Type }

func (op *PatternVariablesDecl_Slice) Marshal(m jsn.Marshaler) error {
	return PatternVariablesDecl_Repeats_Marshal(m, (*[]PatternVariablesDecl)(op))
}

func (op *PatternVariablesDecl_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternVariablesDecl_Slice) SetSize(cnt int) {
	var els []PatternVariablesDecl
	if cnt >= 0 {
		els = make(PatternVariablesDecl_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternVariablesDecl_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternVariablesDecl_Marshal(m, &(*op)[i])
}

func PatternVariablesDecl_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternVariablesDecl) error {
	return jsn.RepeatBlock(m, (*PatternVariablesDecl_Slice)(vals))
}

func PatternVariablesDecl_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternVariablesDecl) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternVariablesDecl_Repeats_Marshal(m, pv)
	}
	return
}

type PatternVariablesDecl_Flow struct{ ptr *PatternVariablesDecl }

func (n PatternVariablesDecl_Flow) GetType() string      { return PatternVariablesDecl_Type }
func (n PatternVariablesDecl_Flow) GetLede() string      { return "pattern" }
func (n PatternVariablesDecl_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternVariablesDecl_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternVariablesDecl); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternVariablesDecl_Optional_Marshal(m jsn.Marshaler, pv **PatternVariablesDecl) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternVariablesDecl_Marshal(m, *pv)
	} else if !enc {
		var v PatternVariablesDecl
		if err = PatternVariablesDecl_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternVariablesDecl_Marshal(m jsn.Marshaler, val *PatternVariablesDecl) (err error) {
	if err = m.MarshalBlock(PatternVariablesDecl_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternVariablesDecl_Field_PatternName)
		if e0 == nil {
			e0 = core.PatternName_Marshal(m, &val.PatternName)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternVariablesDecl_Field_PatternName))
		}
		e1 := m.MarshalKey("requires", PatternVariablesDecl_Field_Props)
		if e1 == nil {
			e1 = PropertySlot_Repeats_Marshal(m, &val.Props)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", PatternVariablesDecl_Field_Props))
		}
		m.EndBlock()
	}
	return
}

// PatternVariablesTail Storage for values used during the execution of a pattern.
type PatternVariablesTail struct {
	Props []PropertySlot `if:"label=_"`
}

func (*PatternVariablesTail) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternVariablesTail_Type,
		Uses: composer.Type_Flow,
	}
}

const PatternVariablesTail_Type = "pattern_variables_tail"
const PatternVariablesTail_Field_Props = "$PROPS"

func (op *PatternVariablesTail) Marshal(m jsn.Marshaler) error {
	return PatternVariablesTail_Marshal(m, op)
}

type PatternVariablesTail_Slice []PatternVariablesTail

func (op *PatternVariablesTail_Slice) GetType() string { return PatternVariablesTail_Type }

func (op *PatternVariablesTail_Slice) Marshal(m jsn.Marshaler) error {
	return PatternVariablesTail_Repeats_Marshal(m, (*[]PatternVariablesTail)(op))
}

func (op *PatternVariablesTail_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternVariablesTail_Slice) SetSize(cnt int) {
	var els []PatternVariablesTail
	if cnt >= 0 {
		els = make(PatternVariablesTail_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternVariablesTail_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternVariablesTail_Marshal(m, &(*op)[i])
}

func PatternVariablesTail_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternVariablesTail) error {
	return jsn.RepeatBlock(m, (*PatternVariablesTail_Slice)(vals))
}

func PatternVariablesTail_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternVariablesTail) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PatternVariablesTail_Repeats_Marshal(m, pv)
	}
	return
}

type PatternVariablesTail_Flow struct{ ptr *PatternVariablesTail }

func (n PatternVariablesTail_Flow) GetType() string      { return PatternVariablesTail_Type }
func (n PatternVariablesTail_Flow) GetLede() string      { return PatternVariablesTail_Type }
func (n PatternVariablesTail_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternVariablesTail_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternVariablesTail); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternVariablesTail_Optional_Marshal(m jsn.Marshaler, pv **PatternVariablesTail) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternVariablesTail_Marshal(m, *pv)
	} else if !enc {
		var v PatternVariablesTail
		if err = PatternVariablesTail_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternVariablesTail_Marshal(m jsn.Marshaler, val *PatternVariablesTail) (err error) {
	if err = m.MarshalBlock(PatternVariablesTail_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternVariablesTail_Field_Props)
		if e0 == nil {
			e0 = PropertySlot_Repeats_Marshal(m, &val.Props)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternVariablesTail_Field_Props))
		}
		m.EndBlock()
	}
	return
}

// PluralKinds requires a user-specified string.
type PluralKinds struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *PluralKinds) String() string {
	return op.Str
}

func (*PluralKinds) Compose() composer.Spec {
	return composer.Spec{
		Name:        PluralKinds_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const PluralKinds_Type = "plural_kinds"

func (op *PluralKinds) Marshal(m jsn.Marshaler) error {
	return PluralKinds_Marshal(m, op)
}

func PluralKinds_Optional_Marshal(m jsn.Marshaler, val *PluralKinds) (err error) {
	var zero PluralKinds
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = PluralKinds_Marshal(m, val)
	}
	return
}

func PluralKinds_Marshal(m jsn.Marshaler, val *PluralKinds) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(PluralKinds_Type, &val.Str)
}

type PluralKinds_Slice []PluralKinds

func (op *PluralKinds_Slice) GetType() string { return PluralKinds_Type }

func (op *PluralKinds_Slice) Marshal(m jsn.Marshaler) error {
	return PluralKinds_Repeats_Marshal(m, (*[]PluralKinds)(op))
}

func (op *PluralKinds_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PluralKinds_Slice) SetSize(cnt int) {
	var els []PluralKinds
	if cnt >= 0 {
		els = make(PluralKinds_Slice, cnt)
	}
	(*op) = els
}

func (op *PluralKinds_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PluralKinds_Marshal(m, &(*op)[i])
}

func PluralKinds_Repeats_Marshal(m jsn.Marshaler, vals *[]PluralKinds) error {
	return jsn.RepeatBlock(m, (*PluralKinds_Slice)(vals))
}

func PluralKinds_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PluralKinds) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PluralKinds_Repeats_Marshal(m, pv)
	}
	return
}

// ProgramHook swaps between various options
type ProgramHook struct {
	At     reader.Position `if:"internal"`
	Choice string
	Value  interface{}
}

var ProgramHook_Optional_Marshal = ProgramHook_Marshal

const ProgramHook_Activity_Opt = "$ACTIVITY"

func (*ProgramHook) Compose() composer.Spec {
	return composer.Spec{
		Name: ProgramHook_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			ProgramHook_Activity_Opt,
		},
		Swaps: []interface{}{
			(*core.Activity)(nil),
		},
	}
}

const ProgramHook_Type = "program_hook"

func (op *ProgramHook) GetType() string { return ProgramHook_Type }

func (op *ProgramHook) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *ProgramHook) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case ProgramHook_Activity_Opt:
		op.Choice, op.Value = c, new(core.Activity)
		okay = true
	}
	return
}

func (op *ProgramHook) Marshal(m jsn.Marshaler) error {
	return ProgramHook_Marshal(m, op)
}
func ProgramHook_Marshal(m jsn.Marshaler, val *ProgramHook) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type ProgramHook_Slice []ProgramHook

func (op *ProgramHook_Slice) GetType() string { return ProgramHook_Type }

func (op *ProgramHook_Slice) Marshal(m jsn.Marshaler) error {
	return ProgramHook_Repeats_Marshal(m, (*[]ProgramHook)(op))
}

func (op *ProgramHook_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ProgramHook_Slice) SetSize(cnt int) {
	var els []ProgramHook
	if cnt >= 0 {
		els = make(ProgramHook_Slice, cnt)
	}
	(*op) = els
}

func (op *ProgramHook_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ProgramHook_Marshal(m, &(*op)[i])
}

func ProgramHook_Repeats_Marshal(m jsn.Marshaler, vals *[]ProgramHook) error {
	return jsn.RepeatBlock(m, (*ProgramHook_Slice)(vals))
}

func ProgramHook_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ProgramHook) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = ProgramHook_Repeats_Marshal(m, pv)
	}
	return
}

// Pronoun requires a predefined or user-specified string.
type Pronoun struct {
	Str string
}

func (op *Pronoun) String() string {
	return op.Str
}

const Pronoun_It = "$IT"
const Pronoun_They = "$THEY"

func (*Pronoun) Compose() composer.Spec {
	return composer.Spec{
		Name:        Pronoun_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
		Choices: []string{
			Pronoun_It, Pronoun_They,
		},
		Strings: []string{
			"it", "they",
		},
	}
}

const Pronoun_Type = "pronoun"

func (op *Pronoun) Marshal(m jsn.Marshaler) error {
	return Pronoun_Marshal(m, op)
}

func Pronoun_Optional_Marshal(m jsn.Marshaler, val *Pronoun) (err error) {
	var zero Pronoun
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Pronoun_Marshal(m, val)
	}
	return
}

func Pronoun_Marshal(m jsn.Marshaler, val *Pronoun) (err error) {
	return m.MarshalValue(Pronoun_Type, jsn.MakeEnum(val, &val.Str))
}

type Pronoun_Slice []Pronoun

func (op *Pronoun_Slice) GetType() string { return Pronoun_Type }

func (op *Pronoun_Slice) Marshal(m jsn.Marshaler) error {
	return Pronoun_Repeats_Marshal(m, (*[]Pronoun)(op))
}

func (op *Pronoun_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Pronoun_Slice) SetSize(cnt int) {
	var els []Pronoun
	if cnt >= 0 {
		els = make(Pronoun_Slice, cnt)
	}
	(*op) = els
}

func (op *Pronoun_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Pronoun_Marshal(m, &(*op)[i])
}

func Pronoun_Repeats_Marshal(m jsn.Marshaler, vals *[]Pronoun) error {
	return jsn.RepeatBlock(m, (*Pronoun_Slice)(vals))
}

func Pronoun_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Pronoun) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Pronoun_Repeats_Marshal(m, pv)
	}
	return
}

// Property requires a user-specified string.
type Property struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *Property) String() string {
	return op.Str
}

func (*Property) Compose() composer.Spec {
	return composer.Spec{
		Name:        Property_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const Property_Type = "property"

func (op *Property) Marshal(m jsn.Marshaler) error {
	return Property_Marshal(m, op)
}

func Property_Optional_Marshal(m jsn.Marshaler, val *Property) (err error) {
	var zero Property
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Property_Marshal(m, val)
	}
	return
}

func Property_Marshal(m jsn.Marshaler, val *Property) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(Property_Type, &val.Str)
}

type Property_Slice []Property

func (op *Property_Slice) GetType() string { return Property_Type }

func (op *Property_Slice) Marshal(m jsn.Marshaler) error {
	return Property_Repeats_Marshal(m, (*[]Property)(op))
}

func (op *Property_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Property_Slice) SetSize(cnt int) {
	var els []Property
	if cnt >= 0 {
		els = make(Property_Slice, cnt)
	}
	(*op) = els
}

func (op *Property_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Property_Marshal(m, &(*op)[i])
}

func Property_Repeats_Marshal(m jsn.Marshaler, vals *[]Property) error {
	return jsn.RepeatBlock(m, (*Property_Slice)(vals))
}

func Property_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Property) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Property_Repeats_Marshal(m, pv)
	}
	return
}

const PropertySlot_Type = "property_slot"

var PropertySlot_Optional_Marshal = PropertySlot_Marshal

type PropertySlot_Slot struct{ Value *PropertySlot }

func (at PropertySlot_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at PropertySlot_Slot) GetType() string              { return PropertySlot_Type }
func (at PropertySlot_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at PropertySlot_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(PropertySlot)
	return
}

func PropertySlot_Marshal(m jsn.Marshaler, ptr *PropertySlot) (err error) {
	slot := PropertySlot_Slot{ptr}
	return slot.Marshal(m)
}

type PropertySlot_Slice []PropertySlot

func (op *PropertySlot_Slice) GetType() string { return PropertySlot_Type }

func (op *PropertySlot_Slice) Marshal(m jsn.Marshaler) error {
	return PropertySlot_Repeats_Marshal(m, (*[]PropertySlot)(op))
}

func (op *PropertySlot_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PropertySlot_Slice) SetSize(cnt int) {
	var els []PropertySlot
	if cnt >= 0 {
		els = make(PropertySlot_Slice, cnt)
	}
	(*op) = els
}

func (op *PropertySlot_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PropertySlot_Marshal(m, &(*op)[i])
}

func PropertySlot_Repeats_Marshal(m jsn.Marshaler, vals *[]PropertySlot) error {
	return jsn.RepeatBlock(m, (*PropertySlot_Slice)(vals))
}

func PropertySlot_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PropertySlot) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = PropertySlot_Repeats_Marshal(m, pv)
	}
	return
}

// RecordListProperty
type RecordListProperty struct {
	NamedProperty `if:"label=_"`
}

// User implemented slots:
var _ PropertySlot = (*RecordListProperty)(nil)

func (*RecordListProperty) Compose() composer.Spec {
	return composer.Spec{
		Name: RecordListProperty_Type,
		Uses: composer.Type_Flow,
		Lede: "record_list",
	}
}

const RecordListProperty_Type = "record_list_property"
const RecordListProperty_Field_NamedProperty = "$NAMED_PROPERTY"
const RecordListProperty_Field_Name = "$NAME"
const RecordListProperty_Field_Type = "$TYPE"
const RecordListProperty_Field_Comment = "$COMMENT"

func (op *RecordListProperty) Marshal(m jsn.Marshaler) error {
	return RecordListProperty_Marshal(m, op)
}

type RecordListProperty_Slice []RecordListProperty

func (op *RecordListProperty_Slice) GetType() string { return RecordListProperty_Type }

func (op *RecordListProperty_Slice) Marshal(m jsn.Marshaler) error {
	return RecordListProperty_Repeats_Marshal(m, (*[]RecordListProperty)(op))
}

func (op *RecordListProperty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RecordListProperty_Slice) SetSize(cnt int) {
	var els []RecordListProperty
	if cnt >= 0 {
		els = make(RecordListProperty_Slice, cnt)
	}
	(*op) = els
}

func (op *RecordListProperty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RecordListProperty_Marshal(m, &(*op)[i])
}

func RecordListProperty_Repeats_Marshal(m jsn.Marshaler, vals *[]RecordListProperty) error {
	return jsn.RepeatBlock(m, (*RecordListProperty_Slice)(vals))
}

func RecordListProperty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RecordListProperty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = RecordListProperty_Repeats_Marshal(m, pv)
	}
	return
}

type RecordListProperty_Flow struct{ ptr *RecordListProperty }

func (n RecordListProperty_Flow) GetType() string      { return RecordListProperty_Type }
func (n RecordListProperty_Flow) GetLede() string      { return "record_list" }
func (n RecordListProperty_Flow) GetFlow() interface{} { return n.ptr }
func (n RecordListProperty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*RecordListProperty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func RecordListProperty_Optional_Marshal(m jsn.Marshaler, pv **RecordListProperty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RecordListProperty_Marshal(m, *pv)
	} else if !enc {
		var v RecordListProperty
		if err = RecordListProperty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RecordListProperty_Marshal(m jsn.Marshaler, val *RecordListProperty) (err error) {
	if err = m.MarshalBlock(RecordListProperty_Flow{val}); err == nil {
		e1 := m.MarshalKey("named", RecordListProperty_Field_Name)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", RecordListProperty_Field_Name))
		}
		e2 := m.MarshalKey("of", RecordListProperty_Field_Type)
		if e2 == nil {
			e2 = literal.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", RecordListProperty_Field_Type))
		}
		e3 := m.MarshalKey("desc", RecordListProperty_Field_Comment)
		if e3 == nil {
			e3 = Lines_Optional_Marshal(m, &val.Comment)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", RecordListProperty_Field_Comment))
		}
		m.EndBlock()
	}
	return
}

// RecordProperty
type RecordProperty struct {
	NamedProperty `if:"label=_"`
}

// User implemented slots:
var _ PropertySlot = (*RecordProperty)(nil)

func (*RecordProperty) Compose() composer.Spec {
	return composer.Spec{
		Name: RecordProperty_Type,
		Uses: composer.Type_Flow,
		Lede: "record",
	}
}

const RecordProperty_Type = "record_property"
const RecordProperty_Field_NamedProperty = "$NAMED_PROPERTY"
const RecordProperty_Field_Name = "$NAME"
const RecordProperty_Field_Type = "$TYPE"
const RecordProperty_Field_Comment = "$COMMENT"

func (op *RecordProperty) Marshal(m jsn.Marshaler) error {
	return RecordProperty_Marshal(m, op)
}

type RecordProperty_Slice []RecordProperty

func (op *RecordProperty_Slice) GetType() string { return RecordProperty_Type }

func (op *RecordProperty_Slice) Marshal(m jsn.Marshaler) error {
	return RecordProperty_Repeats_Marshal(m, (*[]RecordProperty)(op))
}

func (op *RecordProperty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RecordProperty_Slice) SetSize(cnt int) {
	var els []RecordProperty
	if cnt >= 0 {
		els = make(RecordProperty_Slice, cnt)
	}
	(*op) = els
}

func (op *RecordProperty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RecordProperty_Marshal(m, &(*op)[i])
}

func RecordProperty_Repeats_Marshal(m jsn.Marshaler, vals *[]RecordProperty) error {
	return jsn.RepeatBlock(m, (*RecordProperty_Slice)(vals))
}

func RecordProperty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RecordProperty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = RecordProperty_Repeats_Marshal(m, pv)
	}
	return
}

type RecordProperty_Flow struct{ ptr *RecordProperty }

func (n RecordProperty_Flow) GetType() string      { return RecordProperty_Type }
func (n RecordProperty_Flow) GetLede() string      { return "record" }
func (n RecordProperty_Flow) GetFlow() interface{} { return n.ptr }
func (n RecordProperty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*RecordProperty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func RecordProperty_Optional_Marshal(m jsn.Marshaler, pv **RecordProperty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RecordProperty_Marshal(m, *pv)
	} else if !enc {
		var v RecordProperty
		if err = RecordProperty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RecordProperty_Marshal(m jsn.Marshaler, val *RecordProperty) (err error) {
	if err = m.MarshalBlock(RecordProperty_Flow{val}); err == nil {
		e1 := m.MarshalKey("named", RecordProperty_Field_Name)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", RecordProperty_Field_Name))
		}
		e2 := m.MarshalKey("of", RecordProperty_Field_Type)
		if e2 == nil {
			e2 = literal.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", RecordProperty_Field_Type))
		}
		e3 := m.MarshalKey("desc", RecordProperty_Field_Comment)
		if e3 == nil {
			e3 = Lines_Optional_Marshal(m, &val.Comment)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", RecordProperty_Field_Comment))
		}
		m.EndBlock()
	}
	return
}

// RelationCardinality swaps between various options
type RelationCardinality struct {
	At     reader.Position `if:"internal"`
	Choice string
	Value  interface{}
}

var RelationCardinality_Optional_Marshal = RelationCardinality_Marshal

const RelationCardinality_OneToOne_Opt = "$ONE_TO_ONE"
const RelationCardinality_OneToMany_Opt = "$ONE_TO_MANY"
const RelationCardinality_ManyToOne_Opt = "$MANY_TO_ONE"
const RelationCardinality_ManyToMany_Opt = "$MANY_TO_MANY"

func (*RelationCardinality) Compose() composer.Spec {
	return composer.Spec{
		Name: RelationCardinality_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			RelationCardinality_OneToOne_Opt, RelationCardinality_OneToMany_Opt, RelationCardinality_ManyToOne_Opt, RelationCardinality_ManyToMany_Opt,
		},
		Swaps: []interface{}{
			(*OneToOne)(nil),
			(*OneToMany)(nil),
			(*ManyToOne)(nil),
			(*ManyToMany)(nil),
		},
	}
}

const RelationCardinality_Type = "relation_cardinality"

func (op *RelationCardinality) GetType() string { return RelationCardinality_Type }

func (op *RelationCardinality) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *RelationCardinality) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case RelationCardinality_OneToOne_Opt:
		op.Choice, op.Value = c, new(OneToOne)
		okay = true
	case RelationCardinality_OneToMany_Opt:
		op.Choice, op.Value = c, new(OneToMany)
		okay = true
	case RelationCardinality_ManyToOne_Opt:
		op.Choice, op.Value = c, new(ManyToOne)
		okay = true
	case RelationCardinality_ManyToMany_Opt:
		op.Choice, op.Value = c, new(ManyToMany)
		okay = true
	}
	return
}

func (op *RelationCardinality) Marshal(m jsn.Marshaler) error {
	return RelationCardinality_Marshal(m, op)
}
func RelationCardinality_Marshal(m jsn.Marshaler, val *RelationCardinality) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type RelationCardinality_Slice []RelationCardinality

func (op *RelationCardinality_Slice) GetType() string { return RelationCardinality_Type }

func (op *RelationCardinality_Slice) Marshal(m jsn.Marshaler) error {
	return RelationCardinality_Repeats_Marshal(m, (*[]RelationCardinality)(op))
}

func (op *RelationCardinality_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RelationCardinality_Slice) SetSize(cnt int) {
	var els []RelationCardinality
	if cnt >= 0 {
		els = make(RelationCardinality_Slice, cnt)
	}
	(*op) = els
}

func (op *RelationCardinality_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RelationCardinality_Marshal(m, &(*op)[i])
}

func RelationCardinality_Repeats_Marshal(m jsn.Marshaler, vals *[]RelationCardinality) error {
	return jsn.RepeatBlock(m, (*RelationCardinality_Slice)(vals))
}

func RelationCardinality_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RelationCardinality) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = RelationCardinality_Repeats_Marshal(m, pv)
	}
	return
}

// RelativeToNoun
type RelativeToNoun struct {
	Relation rel.RelationName `if:"label=_"`
	Nouns    []NamedNoun      `if:"label=nouns"`
	AreBeing AreBeing         `if:"label=are_being"`
	Nouns1   []NamedNoun      `if:"label=nouns1"`
}

// User implemented slots:
var _ StoryStatement = (*RelativeToNoun)(nil)

func (*RelativeToNoun) Compose() composer.Spec {
	return composer.Spec{
		Name: RelativeToNoun_Type,
		Uses: composer.Type_Flow,
	}
}

const RelativeToNoun_Type = "relative_to_noun"
const RelativeToNoun_Field_Relation = "$RELATION"
const RelativeToNoun_Field_Nouns = "$NOUNS"
const RelativeToNoun_Field_AreBeing = "$ARE_BEING"
const RelativeToNoun_Field_Nouns1 = "$NOUNS1"

func (op *RelativeToNoun) Marshal(m jsn.Marshaler) error {
	return RelativeToNoun_Marshal(m, op)
}

type RelativeToNoun_Slice []RelativeToNoun

func (op *RelativeToNoun_Slice) GetType() string { return RelativeToNoun_Type }

func (op *RelativeToNoun_Slice) Marshal(m jsn.Marshaler) error {
	return RelativeToNoun_Repeats_Marshal(m, (*[]RelativeToNoun)(op))
}

func (op *RelativeToNoun_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RelativeToNoun_Slice) SetSize(cnt int) {
	var els []RelativeToNoun
	if cnt >= 0 {
		els = make(RelativeToNoun_Slice, cnt)
	}
	(*op) = els
}

func (op *RelativeToNoun_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RelativeToNoun_Marshal(m, &(*op)[i])
}

func RelativeToNoun_Repeats_Marshal(m jsn.Marshaler, vals *[]RelativeToNoun) error {
	return jsn.RepeatBlock(m, (*RelativeToNoun_Slice)(vals))
}

func RelativeToNoun_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RelativeToNoun) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = RelativeToNoun_Repeats_Marshal(m, pv)
	}
	return
}

type RelativeToNoun_Flow struct{ ptr *RelativeToNoun }

func (n RelativeToNoun_Flow) GetType() string      { return RelativeToNoun_Type }
func (n RelativeToNoun_Flow) GetLede() string      { return RelativeToNoun_Type }
func (n RelativeToNoun_Flow) GetFlow() interface{} { return n.ptr }
func (n RelativeToNoun_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*RelativeToNoun); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func RelativeToNoun_Optional_Marshal(m jsn.Marshaler, pv **RelativeToNoun) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RelativeToNoun_Marshal(m, *pv)
	} else if !enc {
		var v RelativeToNoun
		if err = RelativeToNoun_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RelativeToNoun_Marshal(m jsn.Marshaler, val *RelativeToNoun) (err error) {
	if err = m.MarshalBlock(RelativeToNoun_Flow{val}); err == nil {
		e0 := m.MarshalKey("", RelativeToNoun_Field_Relation)
		if e0 == nil {
			e0 = rel.RelationName_Marshal(m, &val.Relation)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", RelativeToNoun_Field_Relation))
		}
		e1 := m.MarshalKey("nouns", RelativeToNoun_Field_Nouns)
		if e1 == nil {
			e1 = NamedNoun_Repeats_Marshal(m, &val.Nouns)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", RelativeToNoun_Field_Nouns))
		}
		e2 := m.MarshalKey("are_being", RelativeToNoun_Field_AreBeing)
		if e2 == nil {
			e2 = AreBeing_Marshal(m, &val.AreBeing)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", RelativeToNoun_Field_AreBeing))
		}
		e3 := m.MarshalKey("nouns1", RelativeToNoun_Field_Nouns1)
		if e3 == nil {
			e3 = NamedNoun_Repeats_Marshal(m, &val.Nouns1)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", RelativeToNoun_Field_Nouns1))
		}
		m.EndBlock()
	}
	return
}

// RenderTemplate Parse text using templates.
type RenderTemplate struct {
	Template Lines `if:"label=_"`
}

// User implemented slots:
var _ rt.TextEval = (*RenderTemplate)(nil)

func (*RenderTemplate) Compose() composer.Spec {
	return composer.Spec{
		Name: RenderTemplate_Type,
		Uses: composer.Type_Flow,
	}
}

const RenderTemplate_Type = "render_template"
const RenderTemplate_Field_Template = "$TEMPLATE"

func (op *RenderTemplate) Marshal(m jsn.Marshaler) error {
	return RenderTemplate_Marshal(m, op)
}

type RenderTemplate_Slice []RenderTemplate

func (op *RenderTemplate_Slice) GetType() string { return RenderTemplate_Type }

func (op *RenderTemplate_Slice) Marshal(m jsn.Marshaler) error {
	return RenderTemplate_Repeats_Marshal(m, (*[]RenderTemplate)(op))
}

func (op *RenderTemplate_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RenderTemplate_Slice) SetSize(cnt int) {
	var els []RenderTemplate
	if cnt >= 0 {
		els = make(RenderTemplate_Slice, cnt)
	}
	(*op) = els
}

func (op *RenderTemplate_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RenderTemplate_Marshal(m, &(*op)[i])
}

func RenderTemplate_Repeats_Marshal(m jsn.Marshaler, vals *[]RenderTemplate) error {
	return jsn.RepeatBlock(m, (*RenderTemplate_Slice)(vals))
}

func RenderTemplate_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RenderTemplate) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = RenderTemplate_Repeats_Marshal(m, pv)
	}
	return
}

type RenderTemplate_Flow struct{ ptr *RenderTemplate }

func (n RenderTemplate_Flow) GetType() string      { return RenderTemplate_Type }
func (n RenderTemplate_Flow) GetLede() string      { return RenderTemplate_Type }
func (n RenderTemplate_Flow) GetFlow() interface{} { return n.ptr }
func (n RenderTemplate_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*RenderTemplate); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func RenderTemplate_Optional_Marshal(m jsn.Marshaler, pv **RenderTemplate) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RenderTemplate_Marshal(m, *pv)
	} else if !enc {
		var v RenderTemplate
		if err = RenderTemplate_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RenderTemplate_Marshal(m jsn.Marshaler, val *RenderTemplate) (err error) {
	if err = m.MarshalBlock(RenderTemplate_Flow{val}); err == nil {
		e0 := m.MarshalKey("", RenderTemplate_Field_Template)
		if e0 == nil {
			e0 = Lines_Marshal(m, &val.Template)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", RenderTemplate_Field_Template))
		}
		m.EndBlock()
	}
	return
}

// Send
type Send struct {
	Event     string          `if:"label=_,type=text"`
	Path      rt.TextListEval `if:"label=path"`
	Arguments *Arguments      `if:"label=arguments,optional"`
}

// User implemented slots:
var _ rt.Execute = (*Send)(nil)
var _ rt.BoolEval = (*Send)(nil)

func (*Send) Compose() composer.Spec {
	return composer.Spec{
		Name: Send_Type,
		Uses: composer.Type_Flow,
	}
}

const Send_Type = "send"
const Send_Field_Event = "$EVENT"
const Send_Field_Path = "$PATH"
const Send_Field_Arguments = "$ARGUMENTS"

func (op *Send) Marshal(m jsn.Marshaler) error {
	return Send_Marshal(m, op)
}

type Send_Slice []Send

func (op *Send_Slice) GetType() string { return Send_Type }

func (op *Send_Slice) Marshal(m jsn.Marshaler) error {
	return Send_Repeats_Marshal(m, (*[]Send)(op))
}

func (op *Send_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Send_Slice) SetSize(cnt int) {
	var els []Send
	if cnt >= 0 {
		els = make(Send_Slice, cnt)
	}
	(*op) = els
}

func (op *Send_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Send_Marshal(m, &(*op)[i])
}

func Send_Repeats_Marshal(m jsn.Marshaler, vals *[]Send) error {
	return jsn.RepeatBlock(m, (*Send_Slice)(vals))
}

func Send_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Send) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Send_Repeats_Marshal(m, pv)
	}
	return
}

type Send_Flow struct{ ptr *Send }

func (n Send_Flow) GetType() string      { return Send_Type }
func (n Send_Flow) GetLede() string      { return Send_Type }
func (n Send_Flow) GetFlow() interface{} { return n.ptr }
func (n Send_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Send); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Send_Optional_Marshal(m jsn.Marshaler, pv **Send) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Send_Marshal(m, *pv)
	} else if !enc {
		var v Send
		if err = Send_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Send_Marshal(m jsn.Marshaler, val *Send) (err error) {
	if err = m.MarshalBlock(Send_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Send_Field_Event)
		if e0 == nil {
			e0 = literal.Text_Unboxed_Marshal(m, &val.Event)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Send_Field_Event))
		}
		e1 := m.MarshalKey("path", Send_Field_Path)
		if e1 == nil {
			e1 = rt.TextListEval_Marshal(m, &val.Path)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Send_Field_Path))
		}
		e2 := m.MarshalKey("arguments", Send_Field_Arguments)
		if e2 == nil {
			e2 = Arguments_Optional_Marshal(m, &val.Arguments)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", Send_Field_Arguments))
		}
		m.EndBlock()
	}
	return
}

// ShuffleText
type ShuffleText struct {
	At    reader.Position `if:"internal"`
	Parts []rt.TextEval   `if:"label=_"`
}

// User implemented slots:
var _ rt.TextEval = (*ShuffleText)(nil)

func (*ShuffleText) Compose() composer.Spec {
	return composer.Spec{
		Name: ShuffleText_Type,
		Uses: composer.Type_Flow,
	}
}

const ShuffleText_Type = "shuffle_text"
const ShuffleText_Field_Parts = "$PARTS"

func (op *ShuffleText) Marshal(m jsn.Marshaler) error {
	return ShuffleText_Marshal(m, op)
}

type ShuffleText_Slice []ShuffleText

func (op *ShuffleText_Slice) GetType() string { return ShuffleText_Type }

func (op *ShuffleText_Slice) Marshal(m jsn.Marshaler) error {
	return ShuffleText_Repeats_Marshal(m, (*[]ShuffleText)(op))
}

func (op *ShuffleText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ShuffleText_Slice) SetSize(cnt int) {
	var els []ShuffleText
	if cnt >= 0 {
		els = make(ShuffleText_Slice, cnt)
	}
	(*op) = els
}

func (op *ShuffleText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ShuffleText_Marshal(m, &(*op)[i])
}

func ShuffleText_Repeats_Marshal(m jsn.Marshaler, vals *[]ShuffleText) error {
	return jsn.RepeatBlock(m, (*ShuffleText_Slice)(vals))
}

func ShuffleText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ShuffleText) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = ShuffleText_Repeats_Marshal(m, pv)
	}
	return
}

type ShuffleText_Flow struct{ ptr *ShuffleText }

func (n ShuffleText_Flow) GetType() string      { return ShuffleText_Type }
func (n ShuffleText_Flow) GetLede() string      { return ShuffleText_Type }
func (n ShuffleText_Flow) GetFlow() interface{} { return n.ptr }
func (n ShuffleText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ShuffleText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ShuffleText_Optional_Marshal(m jsn.Marshaler, pv **ShuffleText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ShuffleText_Marshal(m, *pv)
	} else if !enc {
		var v ShuffleText
		if err = ShuffleText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ShuffleText_Marshal(m jsn.Marshaler, val *ShuffleText) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(ShuffleText_Flow{val}); err == nil {
		e1 := m.MarshalKey("", ShuffleText_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ShuffleText_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// SingularKind requires a user-specified string.
type SingularKind struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *SingularKind) String() string {
	return op.Str
}

func (*SingularKind) Compose() composer.Spec {
	return composer.Spec{
		Name:        SingularKind_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const SingularKind_Type = "singular_kind"

func (op *SingularKind) Marshal(m jsn.Marshaler) error {
	return SingularKind_Marshal(m, op)
}

func SingularKind_Optional_Marshal(m jsn.Marshaler, val *SingularKind) (err error) {
	var zero SingularKind
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = SingularKind_Marshal(m, val)
	}
	return
}

func SingularKind_Marshal(m jsn.Marshaler, val *SingularKind) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(SingularKind_Type, &val.Str)
}

type SingularKind_Slice []SingularKind

func (op *SingularKind_Slice) GetType() string { return SingularKind_Type }

func (op *SingularKind_Slice) Marshal(m jsn.Marshaler) error {
	return SingularKind_Repeats_Marshal(m, (*[]SingularKind)(op))
}

func (op *SingularKind_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SingularKind_Slice) SetSize(cnt int) {
	var els []SingularKind
	if cnt >= 0 {
		els = make(SingularKind_Slice, cnt)
	}
	(*op) = els
}

func (op *SingularKind_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SingularKind_Marshal(m, &(*op)[i])
}

func SingularKind_Repeats_Marshal(m jsn.Marshaler, vals *[]SingularKind) error {
	return jsn.RepeatBlock(m, (*SingularKind_Slice)(vals))
}

func SingularKind_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SingularKind) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = SingularKind_Repeats_Marshal(m, pv)
	}
	return
}

// StoppingText
type StoppingText struct {
	At    reader.Position `if:"internal"`
	Parts []rt.TextEval   `if:"label=_"`
}

// User implemented slots:
var _ rt.TextEval = (*StoppingText)(nil)

func (*StoppingText) Compose() composer.Spec {
	return composer.Spec{
		Name: StoppingText_Type,
		Uses: composer.Type_Flow,
	}
}

const StoppingText_Type = "stopping_text"
const StoppingText_Field_Parts = "$PARTS"

func (op *StoppingText) Marshal(m jsn.Marshaler) error {
	return StoppingText_Marshal(m, op)
}

type StoppingText_Slice []StoppingText

func (op *StoppingText_Slice) GetType() string { return StoppingText_Type }

func (op *StoppingText_Slice) Marshal(m jsn.Marshaler) error {
	return StoppingText_Repeats_Marshal(m, (*[]StoppingText)(op))
}

func (op *StoppingText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *StoppingText_Slice) SetSize(cnt int) {
	var els []StoppingText
	if cnt >= 0 {
		els = make(StoppingText_Slice, cnt)
	}
	(*op) = els
}

func (op *StoppingText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return StoppingText_Marshal(m, &(*op)[i])
}

func StoppingText_Repeats_Marshal(m jsn.Marshaler, vals *[]StoppingText) error {
	return jsn.RepeatBlock(m, (*StoppingText_Slice)(vals))
}

func StoppingText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]StoppingText) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = StoppingText_Repeats_Marshal(m, pv)
	}
	return
}

type StoppingText_Flow struct{ ptr *StoppingText }

func (n StoppingText_Flow) GetType() string      { return StoppingText_Type }
func (n StoppingText_Flow) GetLede() string      { return StoppingText_Type }
func (n StoppingText_Flow) GetFlow() interface{} { return n.ptr }
func (n StoppingText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*StoppingText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func StoppingText_Optional_Marshal(m jsn.Marshaler, pv **StoppingText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = StoppingText_Marshal(m, *pv)
	} else if !enc {
		var v StoppingText
		if err = StoppingText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func StoppingText_Marshal(m jsn.Marshaler, val *StoppingText) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(StoppingText_Flow{val}); err == nil {
		e1 := m.MarshalKey("", StoppingText_Field_Parts)
		if e1 == nil {
			e1 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", StoppingText_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// Story
type Story struct {
	Paragraph []Paragraph `if:"label=_"`
}

func (*Story) Compose() composer.Spec {
	return composer.Spec{
		Name: Story_Type,
		Uses: composer.Type_Flow,
	}
}

const Story_Type = "story"
const Story_Field_Paragraph = "$PARAGRAPH"

func (op *Story) Marshal(m jsn.Marshaler) error {
	return Story_Marshal(m, op)
}

type Story_Slice []Story

func (op *Story_Slice) GetType() string { return Story_Type }

func (op *Story_Slice) Marshal(m jsn.Marshaler) error {
	return Story_Repeats_Marshal(m, (*[]Story)(op))
}

func (op *Story_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Story_Slice) SetSize(cnt int) {
	var els []Story
	if cnt >= 0 {
		els = make(Story_Slice, cnt)
	}
	(*op) = els
}

func (op *Story_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Story_Marshal(m, &(*op)[i])
}

func Story_Repeats_Marshal(m jsn.Marshaler, vals *[]Story) error {
	return jsn.RepeatBlock(m, (*Story_Slice)(vals))
}

func Story_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Story) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Story_Repeats_Marshal(m, pv)
	}
	return
}

type Story_Flow struct{ ptr *Story }

func (n Story_Flow) GetType() string      { return Story_Type }
func (n Story_Flow) GetLede() string      { return Story_Type }
func (n Story_Flow) GetFlow() interface{} { return n.ptr }
func (n Story_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Story); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Story_Optional_Marshal(m jsn.Marshaler, pv **Story) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Story_Marshal(m, *pv)
	} else if !enc {
		var v Story
		if err = Story_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Story_Marshal(m jsn.Marshaler, val *Story) (err error) {
	if err = m.MarshalBlock(Story_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Story_Field_Paragraph)
		if e0 == nil {
			e0 = Paragraph_Repeats_Marshal(m, &val.Paragraph)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Story_Field_Paragraph))
		}
		m.EndBlock()
	}
	return
}

const StoryStatement_Type = "story_statement"

var StoryStatement_Optional_Marshal = StoryStatement_Marshal

type StoryStatement_Slot struct{ Value *StoryStatement }

func (at StoryStatement_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at StoryStatement_Slot) GetType() string              { return StoryStatement_Type }
func (at StoryStatement_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at StoryStatement_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(StoryStatement)
	return
}

func StoryStatement_Marshal(m jsn.Marshaler, ptr *StoryStatement) (err error) {
	slot := StoryStatement_Slot{ptr}
	return slot.Marshal(m)
}

type StoryStatement_Slice []StoryStatement

func (op *StoryStatement_Slice) GetType() string { return StoryStatement_Type }

func (op *StoryStatement_Slice) Marshal(m jsn.Marshaler) error {
	return StoryStatement_Repeats_Marshal(m, (*[]StoryStatement)(op))
}

func (op *StoryStatement_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *StoryStatement_Slice) SetSize(cnt int) {
	var els []StoryStatement
	if cnt >= 0 {
		els = make(StoryStatement_Slice, cnt)
	}
	(*op) = els
}

func (op *StoryStatement_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return StoryStatement_Marshal(m, &(*op)[i])
}

func StoryStatement_Repeats_Marshal(m jsn.Marshaler, vals *[]StoryStatement) error {
	return jsn.RepeatBlock(m, (*StoryStatement_Slice)(vals))
}

func StoryStatement_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]StoryStatement) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = StoryStatement_Repeats_Marshal(m, pv)
	}
	return
}

// Summary
type Summary struct {
	At    reader.Position `if:"internal"`
	Lines Lines           `if:"label=_"`
}

func (*Summary) Compose() composer.Spec {
	return composer.Spec{
		Name: Summary_Type,
		Uses: composer.Type_Flow,
	}
}

const Summary_Type = "summary"
const Summary_Field_Lines = "$LINES"

func (op *Summary) Marshal(m jsn.Marshaler) error {
	return Summary_Marshal(m, op)
}

type Summary_Slice []Summary

func (op *Summary_Slice) GetType() string { return Summary_Type }

func (op *Summary_Slice) Marshal(m jsn.Marshaler) error {
	return Summary_Repeats_Marshal(m, (*[]Summary)(op))
}

func (op *Summary_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Summary_Slice) SetSize(cnt int) {
	var els []Summary
	if cnt >= 0 {
		els = make(Summary_Slice, cnt)
	}
	(*op) = els
}

func (op *Summary_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Summary_Marshal(m, &(*op)[i])
}

func Summary_Repeats_Marshal(m jsn.Marshaler, vals *[]Summary) error {
	return jsn.RepeatBlock(m, (*Summary_Slice)(vals))
}

func Summary_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Summary) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Summary_Repeats_Marshal(m, pv)
	}
	return
}

type Summary_Flow struct{ ptr *Summary }

func (n Summary_Flow) GetType() string      { return Summary_Type }
func (n Summary_Flow) GetLede() string      { return Summary_Type }
func (n Summary_Flow) GetFlow() interface{} { return n.ptr }
func (n Summary_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Summary); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Summary_Optional_Marshal(m jsn.Marshaler, pv **Summary) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Summary_Marshal(m, *pv)
	} else if !enc {
		var v Summary
		if err = Summary_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Summary_Marshal(m jsn.Marshaler, val *Summary) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(Summary_Flow{val}); err == nil {
		e1 := m.MarshalKey("", Summary_Field_Lines)
		if e1 == nil {
			e1 = Lines_Marshal(m, &val.Lines)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Summary_Field_Lines))
		}
		m.EndBlock()
	}
	return
}

// Tail Adds details about the preceding noun or nouns.
type Tail struct {
	Pronoun    Pronoun    `if:"label=_"`
	NounPhrase NounPhrase `if:"label=noun_phrase"`
}

func (*Tail) Compose() composer.Spec {
	return composer.Spec{
		Name: Tail_Type,
		Uses: composer.Type_Flow,
	}
}

const Tail_Type = "tail"
const Tail_Field_Pronoun = "$PRONOUN"
const Tail_Field_NounPhrase = "$NOUN_PHRASE"

func (op *Tail) Marshal(m jsn.Marshaler) error {
	return Tail_Marshal(m, op)
}

type Tail_Slice []Tail

func (op *Tail_Slice) GetType() string { return Tail_Type }

func (op *Tail_Slice) Marshal(m jsn.Marshaler) error {
	return Tail_Repeats_Marshal(m, (*[]Tail)(op))
}

func (op *Tail_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Tail_Slice) SetSize(cnt int) {
	var els []Tail
	if cnt >= 0 {
		els = make(Tail_Slice, cnt)
	}
	(*op) = els
}

func (op *Tail_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Tail_Marshal(m, &(*op)[i])
}

func Tail_Repeats_Marshal(m jsn.Marshaler, vals *[]Tail) error {
	return jsn.RepeatBlock(m, (*Tail_Slice)(vals))
}

func Tail_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Tail) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Tail_Repeats_Marshal(m, pv)
	}
	return
}

type Tail_Flow struct{ ptr *Tail }

func (n Tail_Flow) GetType() string      { return Tail_Type }
func (n Tail_Flow) GetLede() string      { return Tail_Type }
func (n Tail_Flow) GetFlow() interface{} { return n.ptr }
func (n Tail_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Tail); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Tail_Optional_Marshal(m jsn.Marshaler, pv **Tail) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Tail_Marshal(m, *pv)
	} else if !enc {
		var v Tail
		if err = Tail_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Tail_Marshal(m jsn.Marshaler, val *Tail) (err error) {
	if err = m.MarshalBlock(Tail_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Tail_Field_Pronoun)
		if e0 == nil {
			e0 = Pronoun_Marshal(m, &val.Pronoun)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Tail_Field_Pronoun))
		}
		e1 := m.MarshalKey("noun_phrase", Tail_Field_NounPhrase)
		if e1 == nil {
			e1 = NounPhrase_Marshal(m, &val.NounPhrase)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Tail_Field_NounPhrase))
		}
		m.EndBlock()
	}
	return
}

// TestName requires a predefined or user-specified string.
type TestName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *TestName) String() string {
	return op.Str
}

const TestName_CurrentTest = "$CURRENT_TEST"

func (*TestName) Compose() composer.Spec {
	return composer.Spec{
		Name:        TestName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
		Choices: []string{
			TestName_CurrentTest,
		},
		Strings: []string{
			"current_test",
		},
	}
}

const TestName_Type = "test_name"

func (op *TestName) Marshal(m jsn.Marshaler) error {
	return TestName_Marshal(m, op)
}

func TestName_Optional_Marshal(m jsn.Marshaler, val *TestName) (err error) {
	var zero TestName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = TestName_Marshal(m, val)
	}
	return
}

func TestName_Marshal(m jsn.Marshaler, val *TestName) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(TestName_Type, jsn.MakeEnum(val, &val.Str))
}

type TestName_Slice []TestName

func (op *TestName_Slice) GetType() string { return TestName_Type }

func (op *TestName_Slice) Marshal(m jsn.Marshaler) error {
	return TestName_Repeats_Marshal(m, (*[]TestName)(op))
}

func (op *TestName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TestName_Slice) SetSize(cnt int) {
	var els []TestName
	if cnt >= 0 {
		els = make(TestName_Slice, cnt)
	}
	(*op) = els
}

func (op *TestName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TestName_Marshal(m, &(*op)[i])
}

func TestName_Repeats_Marshal(m jsn.Marshaler, vals *[]TestName) error {
	return jsn.RepeatBlock(m, (*TestName_Slice)(vals))
}

func TestName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TestName) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TestName_Repeats_Marshal(m, pv)
	}
	return
}

// TestOutput Expect that a test uses 'Say' to print some specific text.
type TestOutput struct {
	Lines Lines `if:"label=_"`
}

// User implemented slots:
var _ Testing = (*TestOutput)(nil)

func (*TestOutput) Compose() composer.Spec {
	return composer.Spec{
		Name: TestOutput_Type,
		Uses: composer.Type_Flow,
	}
}

const TestOutput_Type = "test_output"
const TestOutput_Field_Lines = "$LINES"

func (op *TestOutput) Marshal(m jsn.Marshaler) error {
	return TestOutput_Marshal(m, op)
}

type TestOutput_Slice []TestOutput

func (op *TestOutput_Slice) GetType() string { return TestOutput_Type }

func (op *TestOutput_Slice) Marshal(m jsn.Marshaler) error {
	return TestOutput_Repeats_Marshal(m, (*[]TestOutput)(op))
}

func (op *TestOutput_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TestOutput_Slice) SetSize(cnt int) {
	var els []TestOutput
	if cnt >= 0 {
		els = make(TestOutput_Slice, cnt)
	}
	(*op) = els
}

func (op *TestOutput_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TestOutput_Marshal(m, &(*op)[i])
}

func TestOutput_Repeats_Marshal(m jsn.Marshaler, vals *[]TestOutput) error {
	return jsn.RepeatBlock(m, (*TestOutput_Slice)(vals))
}

func TestOutput_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TestOutput) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TestOutput_Repeats_Marshal(m, pv)
	}
	return
}

type TestOutput_Flow struct{ ptr *TestOutput }

func (n TestOutput_Flow) GetType() string      { return TestOutput_Type }
func (n TestOutput_Flow) GetLede() string      { return TestOutput_Type }
func (n TestOutput_Flow) GetFlow() interface{} { return n.ptr }
func (n TestOutput_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TestOutput); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TestOutput_Optional_Marshal(m jsn.Marshaler, pv **TestOutput) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TestOutput_Marshal(m, *pv)
	} else if !enc {
		var v TestOutput
		if err = TestOutput_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TestOutput_Marshal(m jsn.Marshaler, val *TestOutput) (err error) {
	if err = m.MarshalBlock(TestOutput_Flow{val}); err == nil {
		e0 := m.MarshalKey("", TestOutput_Field_Lines)
		if e0 == nil {
			e0 = Lines_Marshal(m, &val.Lines)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", TestOutput_Field_Lines))
		}
		m.EndBlock()
	}
	return
}

// TestRule
type TestRule struct {
	TestName TestName    `if:"label=_"`
	Hook     ProgramHook `if:"label=hook"`
}

// User implemented slots:
var _ StoryStatement = (*TestRule)(nil)

func (*TestRule) Compose() composer.Spec {
	return composer.Spec{
		Name: TestRule_Type,
		Uses: composer.Type_Flow,
	}
}

const TestRule_Type = "test_rule"
const TestRule_Field_TestName = "$TEST_NAME"
const TestRule_Field_Hook = "$HOOK"

func (op *TestRule) Marshal(m jsn.Marshaler) error {
	return TestRule_Marshal(m, op)
}

type TestRule_Slice []TestRule

func (op *TestRule_Slice) GetType() string { return TestRule_Type }

func (op *TestRule_Slice) Marshal(m jsn.Marshaler) error {
	return TestRule_Repeats_Marshal(m, (*[]TestRule)(op))
}

func (op *TestRule_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TestRule_Slice) SetSize(cnt int) {
	var els []TestRule
	if cnt >= 0 {
		els = make(TestRule_Slice, cnt)
	}
	(*op) = els
}

func (op *TestRule_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TestRule_Marshal(m, &(*op)[i])
}

func TestRule_Repeats_Marshal(m jsn.Marshaler, vals *[]TestRule) error {
	return jsn.RepeatBlock(m, (*TestRule_Slice)(vals))
}

func TestRule_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TestRule) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TestRule_Repeats_Marshal(m, pv)
	}
	return
}

type TestRule_Flow struct{ ptr *TestRule }

func (n TestRule_Flow) GetType() string      { return TestRule_Type }
func (n TestRule_Flow) GetLede() string      { return TestRule_Type }
func (n TestRule_Flow) GetFlow() interface{} { return n.ptr }
func (n TestRule_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TestRule); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TestRule_Optional_Marshal(m jsn.Marshaler, pv **TestRule) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TestRule_Marshal(m, *pv)
	} else if !enc {
		var v TestRule
		if err = TestRule_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TestRule_Marshal(m jsn.Marshaler, val *TestRule) (err error) {
	if err = m.MarshalBlock(TestRule_Flow{val}); err == nil {
		e0 := m.MarshalKey("", TestRule_Field_TestName)
		if e0 == nil {
			e0 = TestName_Marshal(m, &val.TestName)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", TestRule_Field_TestName))
		}
		e1 := m.MarshalKey("hook", TestRule_Field_Hook)
		if e1 == nil {
			e1 = ProgramHook_Marshal(m, &val.Hook)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TestRule_Field_Hook))
		}
		m.EndBlock()
	}
	return
}

// TestScene
type TestScene struct {
	TestName TestName `if:"label=_"`
	Story    Story    `if:"label=story"`
}

// User implemented slots:
var _ StoryStatement = (*TestScene)(nil)

func (*TestScene) Compose() composer.Spec {
	return composer.Spec{
		Name: TestScene_Type,
		Uses: composer.Type_Flow,
	}
}

const TestScene_Type = "test_scene"
const TestScene_Field_TestName = "$TEST_NAME"
const TestScene_Field_Story = "$STORY"

func (op *TestScene) Marshal(m jsn.Marshaler) error {
	return TestScene_Marshal(m, op)
}

type TestScene_Slice []TestScene

func (op *TestScene_Slice) GetType() string { return TestScene_Type }

func (op *TestScene_Slice) Marshal(m jsn.Marshaler) error {
	return TestScene_Repeats_Marshal(m, (*[]TestScene)(op))
}

func (op *TestScene_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TestScene_Slice) SetSize(cnt int) {
	var els []TestScene
	if cnt >= 0 {
		els = make(TestScene_Slice, cnt)
	}
	(*op) = els
}

func (op *TestScene_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TestScene_Marshal(m, &(*op)[i])
}

func TestScene_Repeats_Marshal(m jsn.Marshaler, vals *[]TestScene) error {
	return jsn.RepeatBlock(m, (*TestScene_Slice)(vals))
}

func TestScene_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TestScene) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TestScene_Repeats_Marshal(m, pv)
	}
	return
}

type TestScene_Flow struct{ ptr *TestScene }

func (n TestScene_Flow) GetType() string      { return TestScene_Type }
func (n TestScene_Flow) GetLede() string      { return TestScene_Type }
func (n TestScene_Flow) GetFlow() interface{} { return n.ptr }
func (n TestScene_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TestScene); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TestScene_Optional_Marshal(m jsn.Marshaler, pv **TestScene) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TestScene_Marshal(m, *pv)
	} else if !enc {
		var v TestScene
		if err = TestScene_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TestScene_Marshal(m jsn.Marshaler, val *TestScene) (err error) {
	if err = m.MarshalBlock(TestScene_Flow{val}); err == nil {
		e0 := m.MarshalKey("", TestScene_Field_TestName)
		if e0 == nil {
			e0 = TestName_Marshal(m, &val.TestName)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", TestScene_Field_TestName))
		}
		e1 := m.MarshalKey("story", TestScene_Field_Story)
		if e1 == nil {
			e1 = Story_Marshal(m, &val.Story)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TestScene_Field_Story))
		}
		m.EndBlock()
	}
	return
}

// TestStatement
type TestStatement struct {
	At       reader.Position `if:"internal"`
	TestName TestName        `if:"label=_"`
	Test     Testing         `if:"label=test"`
}

// User implemented slots:
var _ StoryStatement = (*TestStatement)(nil)

func (*TestStatement) Compose() composer.Spec {
	return composer.Spec{
		Name: TestStatement_Type,
		Uses: composer.Type_Flow,
	}
}

const TestStatement_Type = "test_statement"
const TestStatement_Field_TestName = "$TEST_NAME"
const TestStatement_Field_Test = "$TEST"

func (op *TestStatement) Marshal(m jsn.Marshaler) error {
	return TestStatement_Marshal(m, op)
}

type TestStatement_Slice []TestStatement

func (op *TestStatement_Slice) GetType() string { return TestStatement_Type }

func (op *TestStatement_Slice) Marshal(m jsn.Marshaler) error {
	return TestStatement_Repeats_Marshal(m, (*[]TestStatement)(op))
}

func (op *TestStatement_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TestStatement_Slice) SetSize(cnt int) {
	var els []TestStatement
	if cnt >= 0 {
		els = make(TestStatement_Slice, cnt)
	}
	(*op) = els
}

func (op *TestStatement_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TestStatement_Marshal(m, &(*op)[i])
}

func TestStatement_Repeats_Marshal(m jsn.Marshaler, vals *[]TestStatement) error {
	return jsn.RepeatBlock(m, (*TestStatement_Slice)(vals))
}

func TestStatement_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TestStatement) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TestStatement_Repeats_Marshal(m, pv)
	}
	return
}

type TestStatement_Flow struct{ ptr *TestStatement }

func (n TestStatement_Flow) GetType() string      { return TestStatement_Type }
func (n TestStatement_Flow) GetLede() string      { return TestStatement_Type }
func (n TestStatement_Flow) GetFlow() interface{} { return n.ptr }
func (n TestStatement_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TestStatement); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TestStatement_Optional_Marshal(m jsn.Marshaler, pv **TestStatement) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TestStatement_Marshal(m, *pv)
	} else if !enc {
		var v TestStatement
		if err = TestStatement_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TestStatement_Marshal(m jsn.Marshaler, val *TestStatement) (err error) {
	m.SetCursor(val.At.Offset)
	if err = m.MarshalBlock(TestStatement_Flow{val}); err == nil {
		e1 := m.MarshalKey("", TestStatement_Field_TestName)
		if e1 == nil {
			e1 = TestName_Marshal(m, &val.TestName)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TestStatement_Field_TestName))
		}
		e2 := m.MarshalKey("test", TestStatement_Field_Test)
		if e2 == nil {
			e2 = Testing_Marshal(m, &val.Test)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", TestStatement_Field_Test))
		}
		m.EndBlock()
	}
	return
}

const Testing_Type = "testing"

var Testing_Optional_Marshal = Testing_Marshal

type Testing_Slot struct{ Value *Testing }

func (at Testing_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Testing_Slot) GetType() string              { return Testing_Type }
func (at Testing_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Testing_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Testing)
	return
}

func Testing_Marshal(m jsn.Marshaler, ptr *Testing) (err error) {
	slot := Testing_Slot{ptr}
	return slot.Marshal(m)
}

type Testing_Slice []Testing

func (op *Testing_Slice) GetType() string { return Testing_Type }

func (op *Testing_Slice) Marshal(m jsn.Marshaler) error {
	return Testing_Repeats_Marshal(m, (*[]Testing)(op))
}

func (op *Testing_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Testing_Slice) SetSize(cnt int) {
	var els []Testing
	if cnt >= 0 {
		els = make(Testing_Slice, cnt)
	}
	(*op) = els
}

func (op *Testing_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Testing_Marshal(m, &(*op)[i])
}

func Testing_Repeats_Marshal(m jsn.Marshaler, vals *[]Testing) error {
	return jsn.RepeatBlock(m, (*Testing_Slice)(vals))
}

func Testing_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Testing) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Testing_Repeats_Marshal(m, pv)
	}
	return
}

// TextListProperty
type TextListProperty struct {
	NamedProperty `if:"label=_"`
}

// User implemented slots:
var _ PropertySlot = (*TextListProperty)(nil)

func (*TextListProperty) Compose() composer.Spec {
	return composer.Spec{
		Name: TextListProperty_Type,
		Uses: composer.Type_Flow,
		Lede: "text_list",
	}
}

const TextListProperty_Type = "text_list_property"
const TextListProperty_Field_NamedProperty = "$NAMED_PROPERTY"
const TextListProperty_Field_Name = "$NAME"
const TextListProperty_Field_Type = "$TYPE"
const TextListProperty_Field_Comment = "$COMMENT"

func (op *TextListProperty) Marshal(m jsn.Marshaler) error {
	return TextListProperty_Marshal(m, op)
}

type TextListProperty_Slice []TextListProperty

func (op *TextListProperty_Slice) GetType() string { return TextListProperty_Type }

func (op *TextListProperty_Slice) Marshal(m jsn.Marshaler) error {
	return TextListProperty_Repeats_Marshal(m, (*[]TextListProperty)(op))
}

func (op *TextListProperty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TextListProperty_Slice) SetSize(cnt int) {
	var els []TextListProperty
	if cnt >= 0 {
		els = make(TextListProperty_Slice, cnt)
	}
	(*op) = els
}

func (op *TextListProperty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TextListProperty_Marshal(m, &(*op)[i])
}

func TextListProperty_Repeats_Marshal(m jsn.Marshaler, vals *[]TextListProperty) error {
	return jsn.RepeatBlock(m, (*TextListProperty_Slice)(vals))
}

func TextListProperty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TextListProperty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TextListProperty_Repeats_Marshal(m, pv)
	}
	return
}

type TextListProperty_Flow struct{ ptr *TextListProperty }

func (n TextListProperty_Flow) GetType() string      { return TextListProperty_Type }
func (n TextListProperty_Flow) GetLede() string      { return "text_list" }
func (n TextListProperty_Flow) GetFlow() interface{} { return n.ptr }
func (n TextListProperty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TextListProperty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TextListProperty_Optional_Marshal(m jsn.Marshaler, pv **TextListProperty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TextListProperty_Marshal(m, *pv)
	} else if !enc {
		var v TextListProperty
		if err = TextListProperty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TextListProperty_Marshal(m jsn.Marshaler, val *TextListProperty) (err error) {
	if err = m.MarshalBlock(TextListProperty_Flow{val}); err == nil {
		e1 := m.MarshalKey("named", TextListProperty_Field_Name)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TextListProperty_Field_Name))
		}
		e2 := m.MarshalKey("of", TextListProperty_Field_Type)
		if e2 == nil {
			e2 = literal.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", TextListProperty_Field_Type))
		}
		e3 := m.MarshalKey("desc", TextListProperty_Field_Comment)
		if e3 == nil {
			e3 = Lines_Optional_Marshal(m, &val.Comment)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", TextListProperty_Field_Comment))
		}
		m.EndBlock()
	}
	return
}

// TextProperty
type TextProperty struct {
	NamedProperty `if:"label=_"`
}

// User implemented slots:
var _ PropertySlot = (*TextProperty)(nil)

func (*TextProperty) Compose() composer.Spec {
	return composer.Spec{
		Name: TextProperty_Type,
		Uses: composer.Type_Flow,
		Lede: "text",
	}
}

const TextProperty_Type = "text_property"
const TextProperty_Field_NamedProperty = "$NAMED_PROPERTY"
const TextProperty_Field_Name = "$NAME"
const TextProperty_Field_Type = "$TYPE"
const TextProperty_Field_Comment = "$COMMENT"

func (op *TextProperty) Marshal(m jsn.Marshaler) error {
	return TextProperty_Marshal(m, op)
}

type TextProperty_Slice []TextProperty

func (op *TextProperty_Slice) GetType() string { return TextProperty_Type }

func (op *TextProperty_Slice) Marshal(m jsn.Marshaler) error {
	return TextProperty_Repeats_Marshal(m, (*[]TextProperty)(op))
}

func (op *TextProperty_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TextProperty_Slice) SetSize(cnt int) {
	var els []TextProperty
	if cnt >= 0 {
		els = make(TextProperty_Slice, cnt)
	}
	(*op) = els
}

func (op *TextProperty_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TextProperty_Marshal(m, &(*op)[i])
}

func TextProperty_Repeats_Marshal(m jsn.Marshaler, vals *[]TextProperty) error {
	return jsn.RepeatBlock(m, (*TextProperty_Slice)(vals))
}

func TextProperty_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TextProperty) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TextProperty_Repeats_Marshal(m, pv)
	}
	return
}

type TextProperty_Flow struct{ ptr *TextProperty }

func (n TextProperty_Flow) GetType() string      { return TextProperty_Type }
func (n TextProperty_Flow) GetLede() string      { return "text" }
func (n TextProperty_Flow) GetFlow() interface{} { return n.ptr }
func (n TextProperty_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TextProperty); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TextProperty_Optional_Marshal(m jsn.Marshaler, pv **TextProperty) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TextProperty_Marshal(m, *pv)
	} else if !enc {
		var v TextProperty
		if err = TextProperty_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TextProperty_Marshal(m jsn.Marshaler, val *TextProperty) (err error) {
	if err = m.MarshalBlock(TextProperty_Flow{val}); err == nil {
		e1 := m.MarshalKey("named", TextProperty_Field_Name)
		if e1 == nil {
			e1 = literal.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TextProperty_Field_Name))
		}
		e2 := m.MarshalKey("of", TextProperty_Field_Type)
		if e2 == nil {
			e2 = literal.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", TextProperty_Field_Type))
		}
		e3 := m.MarshalKey("desc", TextProperty_Field_Comment)
		if e3 == nil {
			e3 = Lines_Optional_Marshal(m, &val.Comment)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", TextProperty_Field_Comment))
		}
		m.EndBlock()
	}
	return
}

// Trait requires a user-specified string.
type Trait struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *Trait) String() string {
	return op.Str
}

func (*Trait) Compose() composer.Spec {
	return composer.Spec{
		Name:        Trait_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const Trait_Type = "trait"

func (op *Trait) Marshal(m jsn.Marshaler) error {
	return Trait_Marshal(m, op)
}

func Trait_Optional_Marshal(m jsn.Marshaler, val *Trait) (err error) {
	var zero Trait
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Trait_Marshal(m, val)
	}
	return
}

func Trait_Marshal(m jsn.Marshaler, val *Trait) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(Trait_Type, &val.Str)
}

type Trait_Slice []Trait

func (op *Trait_Slice) GetType() string { return Trait_Type }

func (op *Trait_Slice) Marshal(m jsn.Marshaler) error {
	return Trait_Repeats_Marshal(m, (*[]Trait)(op))
}

func (op *Trait_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Trait_Slice) SetSize(cnt int) {
	var els []Trait
	if cnt >= 0 {
		els = make(Trait_Slice, cnt)
	}
	(*op) = els
}

func (op *Trait_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Trait_Marshal(m, &(*op)[i])
}

func Trait_Repeats_Marshal(m jsn.Marshaler, vals *[]Trait) error {
	return jsn.RepeatBlock(m, (*Trait_Slice)(vals))
}

func Trait_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Trait) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = Trait_Repeats_Marshal(m, pv)
	}
	return
}

// TraitPhrase
type TraitPhrase struct {
	AreEither AreEither `if:"label=_"`
	Trait     []Trait   `if:"label=trait"`
}

func (*TraitPhrase) Compose() composer.Spec {
	return composer.Spec{
		Name: TraitPhrase_Type,
		Uses: composer.Type_Flow,
	}
}

const TraitPhrase_Type = "trait_phrase"
const TraitPhrase_Field_AreEither = "$ARE_EITHER"
const TraitPhrase_Field_Trait = "$TRAIT"

func (op *TraitPhrase) Marshal(m jsn.Marshaler) error {
	return TraitPhrase_Marshal(m, op)
}

type TraitPhrase_Slice []TraitPhrase

func (op *TraitPhrase_Slice) GetType() string { return TraitPhrase_Type }

func (op *TraitPhrase_Slice) Marshal(m jsn.Marshaler) error {
	return TraitPhrase_Repeats_Marshal(m, (*[]TraitPhrase)(op))
}

func (op *TraitPhrase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TraitPhrase_Slice) SetSize(cnt int) {
	var els []TraitPhrase
	if cnt >= 0 {
		els = make(TraitPhrase_Slice, cnt)
	}
	(*op) = els
}

func (op *TraitPhrase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TraitPhrase_Marshal(m, &(*op)[i])
}

func TraitPhrase_Repeats_Marshal(m jsn.Marshaler, vals *[]TraitPhrase) error {
	return jsn.RepeatBlock(m, (*TraitPhrase_Slice)(vals))
}

func TraitPhrase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TraitPhrase) (err error) {
	if *pv != nil || !m.IsEncoding() {
		err = TraitPhrase_Repeats_Marshal(m, pv)
	}
	return
}

type TraitPhrase_Flow struct{ ptr *TraitPhrase }

func (n TraitPhrase_Flow) GetType() string      { return TraitPhrase_Type }
func (n TraitPhrase_Flow) GetLede() string      { return TraitPhrase_Type }
func (n TraitPhrase_Flow) GetFlow() interface{} { return n.ptr }
func (n TraitPhrase_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TraitPhrase); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TraitPhrase_Optional_Marshal(m jsn.Marshaler, pv **TraitPhrase) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TraitPhrase_Marshal(m, *pv)
	} else if !enc {
		var v TraitPhrase
		if err = TraitPhrase_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TraitPhrase_Marshal(m jsn.Marshaler, val *TraitPhrase) (err error) {
	if err = m.MarshalBlock(TraitPhrase_Flow{val}); err == nil {
		e0 := m.MarshalKey("", TraitPhrase_Field_AreEither)
		if e0 == nil {
			e0 = AreEither_Marshal(m, &val.AreEither)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", TraitPhrase_Field_AreEither))
		}
		e1 := m.MarshalKey("trait", TraitPhrase_Field_Trait)
		if e1 == nil {
			e1 = Trait_Repeats_Marshal(m, &val.Trait)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TraitPhrase_Field_Trait))
		}
		m.EndBlock()
	}
	return
}

var Slots = []interface{}{
	(*PropertySlot)(nil),
	(*StoryStatement)(nil),
	(*Testing)(nil),
}

var Slats = []composer.Composer{
	(*AbstractAction)(nil),
	(*ActionContext)(nil),
	(*ActionDecl)(nil),
	(*ActionName)(nil),
	(*ActionParams)(nil),
	(*Ana)(nil),
	(*AreAn)(nil),
	(*AreBeing)(nil),
	(*AreEither)(nil),
	(*Argument)(nil),
	(*Arguments)(nil),
	(*Aspect)(nil),
	(*AspectProperty)(nil),
	(*AspectTraits)(nil),
	(*BoolProperty)(nil),
	(*Certainties)(nil),
	(*Certainty)(nil),
	(*Comment)(nil),
	(*CommonAction)(nil),
	(*CountOf)(nil),
	(*CycleText)(nil),
	(*Determine)(nil),
	(*Determiner)(nil),
	(*EventBlock)(nil),
	(*EventHandler)(nil),
	(*EventName)(nil),
	(*EventPhase)(nil),
	(*EventTarget)(nil),
	(*GrammarDecl)(nil),
	(*KindOfNoun)(nil),
	(*KindOfRelation)(nil),
	(*KindsHaveProperties)(nil),
	(*KindsOfAspect)(nil),
	(*KindsOfKind)(nil),
	(*Lede)(nil),
	(*Lines)(nil),
	(*LocalDecl)(nil),
	(*LocalInit)(nil),
	(*Make)(nil),
	(*MakePlural)(nil),
	(*ManyToMany)(nil),
	(*ManyToOne)(nil),
	(*MapConnection)(nil),
	(*MapDeparting)(nil),
	(*MapDestination)(nil),
	(*MapDirection)(nil),
	(*MapHeading)(nil),
	(*NamedNoun)(nil),
	(*NamedProperty)(nil),
	(*NounAssignment)(nil),
	(*NounName)(nil),
	(*NounPhrase)(nil),
	(*NounRelation)(nil),
	(*NounStatement)(nil),
	(*NounTraits)(nil),
	(*NumListProperty)(nil),
	(*NumberProperty)(nil),
	(*OneToMany)(nil),
	(*OneToOne)(nil),
	(*PairedAction)(nil),
	(*Paragraph)(nil),
	(*PatternActions)(nil),
	(*PatternDecl)(nil),
	(*PatternFlags)(nil),
	(*PatternLocals)(nil),
	(*PatternReturn)(nil),
	(*PatternRule)(nil),
	(*PatternRules)(nil),
	(*PatternType)(nil),
	(*PatternVariablesDecl)(nil),
	(*PatternVariablesTail)(nil),
	(*PluralKinds)(nil),
	(*ProgramHook)(nil),
	(*Pronoun)(nil),
	(*Property)(nil),
	(*RecordListProperty)(nil),
	(*RecordProperty)(nil),
	(*RelationCardinality)(nil),
	(*RelativeToNoun)(nil),
	(*RenderTemplate)(nil),
	(*Send)(nil),
	(*ShuffleText)(nil),
	(*SingularKind)(nil),
	(*StoppingText)(nil),
	(*Story)(nil),
	(*Summary)(nil),
	(*Tail)(nil),
	(*TestName)(nil),
	(*TestOutput)(nil),
	(*TestRule)(nil),
	(*TestScene)(nil),
	(*TestStatement)(nil),
	(*TextListProperty)(nil),
	(*TextProperty)(nil),
	(*Trait)(nil),
	(*TraitPhrase)(nil),
}

var Signatures = map[uint64]interface{}{
	7872120455849093108:  (*ActionContext)(nil),        /* ActionContext: */
	2237475528376444648:  (*ActionDecl)(nil),           /* ActionDecl:action:actionParams common: */
	18212021549969329253: (*ActionDecl)(nil),           /* ActionDecl:action:actionParams dual: */
	10825614489046735389: (*ActionDecl)(nil),           /* ActionDecl:action:actionParams none: */
	14902711848163440508: (*ActionParams)(nil),         /* ActionParams common: */
	11902859627634050329: (*ActionParams)(nil),         /* ActionParams dual: */
	5868886119925925865:  (*ActionParams)(nil),         /* ActionParams none: */
	6291103735245333139:  (*Argument)(nil),             /* Arg:from: */
	2275326896920679506:  (*Arguments)(nil),            /* Args: */
	4946346507935163764:  (*AspectProperty)(nil),       /* Aspect of: */
	2627975827633552637:  (*AspectProperty)(nil),       /* Aspect of:desc: */
	17855209504331534011: (*AspectTraits)(nil),         /* AspectTraits:traitPhrase: */
	10466815184164589710: (*BoolProperty)(nil),         /* Bool named: */
	7864268224293611023:  (*BoolProperty)(nil),         /* Bool named:of: */
	15292113293401271919: (*BoolProperty)(nil),         /* Bool named:desc: */
	12288912254770942240: (*BoolProperty)(nil),         /* Bool named:of:desc: */
	170374163879469822:   (*Certainties)(nil),          /* Certainties:areBeing:certainty:trait: */
	15857890977690710700: (*Comment)(nil),              /* Comment: */
	13295757043766156580: (*CommonAction)(nil),         /* CommonAction: */
	11796688776587655409: (*CommonAction)(nil),         /* CommonAction:actionContext: */
	10211567489959209123: (*CountOf)(nil),              /* CountOf:num: */
	475310308664194536:   (*CycleText)(nil),            /* CycleText: */
	14117144937213193556: (*Determine)(nil),            /* Determine: */
	18058198214790918510: (*Determine)(nil),            /* Determine:arguments: */
	11093854973825287408: (*EventBlock)(nil),           /* EventBlock kinds:handlers: */
	11855563103941044442: (*EventBlock)(nil),           /* EventBlock namedNoun:handlers: */
	8929470137779261632:  (*EventHandler)(nil),         /* EventHandler:event:patternRules: */
	4061872818055525560:  (*EventHandler)(nil),         /* EventHandler:event:locals:patternRules: */
	18010503397334720257: (*EventTarget)(nil),          /* EventTarget kinds: */
	17197340468883043891: (*EventTarget)(nil),          /* EventTarget namedNoun: */
	351838510430560892:   (*GrammarDecl)(nil),          /* GrammarDecl: */
	8395536647843606072:  (*KindOfNoun)(nil),           /* KindOfNoun:kind: */
	2174943222093748082:  (*KindOfNoun)(nil),           /* KindOfNoun:trait:kind: */
	7004049933953251122:  (*KindOfNoun)(nil),           /* KindOfNoun:kind:nounRelation: */
	9031009285767794428:  (*KindOfNoun)(nil),           /* KindOfNoun:trait:kind:nounRelation: */
	650960042632654891:   (*KindOfRelation)(nil),       /* KindOfRelation:cardinality oneToOne: */
	1081167552428580836:  (*KindOfRelation)(nil),       /* KindOfRelation:cardinality oneToMany: */
	10771046767095423028: (*KindOfRelation)(nil),       /* KindOfRelation:cardinality manyToOne: */
	5852635308349599025:  (*KindOfRelation)(nil),       /* KindOfRelation:cardinality manyToMany: */
	11241512832861714070: (*KindsHaveProperties)(nil),  /* Kinds:have: */
	16689641787061327381: (*KindsOfAspect)(nil),        /* KindsOfAspect: */
	5919854034648203527:  (*KindsOfKind)(nil),          /* Make kinds:of: */
	2335979695347311111:  (*Lede)(nil),                 /* Lede:nounPhrase kindOfNoun: */
	14199050960332677505: (*Lede)(nil),                 /* Lede:nounPhrase nounTraits: */
	10694393583567459526: (*Lede)(nil),                 /* Lede:nounPhrase nounRelation: */
	10446315654994385322: (*LocalDecl)(nil),            /* LocalDecl: */
	6009252662016869003:  (*LocalDecl)(nil),            /* LocalDecl:value: */
	11789909816860756800: (*LocalInit)(nil),            /* LocalInit: */
	9981010364372027439:  (*Make)(nil),                 /* Make: */
	12609627593403083413: (*Make)(nil),                 /* Make:arguments: */
	3572160234867157749:  (*MakePlural)(nil),           /* Make:plural: */
	17563761532337350103: (*ManyToMany)(nil),           /* ManyToMany:otherKinds: */
	4129025779762507875:  (*ManyToOne)(nil),            /* ManyToOne:kind: */
	4746882967578843264:  (*MapConnection)(nil),        /* MapConnection arrivingAt: */
	165100527430166082:   (*MapConnection)(nil),        /* MapConnection connectingTo: */
	12664747872301222635: (*MapDeparting)(nil),         /* Departing via:and arrivingAt: */
	10592711885881153145: (*MapDeparting)(nil),         /* Departing via:and connectingTo: */
	13573264837262063235: (*MapDestination)(nil),       /* MapDestination: */
	16504428073969307483: (*MapDestination)(nil),       /* MapDestination:door: */
	14572254943646304587: (*MapHeading)(nil),           /* Heading:and arrivingAt: */
	1270222318052581361:  (*MapHeading)(nil),           /* Heading:via:and arrivingAt: */
	3571539926920082009:  (*MapHeading)(nil),           /* Heading:and connectingTo: */
	6820364618168717163:  (*MapHeading)(nil),           /* Heading:via:and connectingTo: */
	16572015744003324651: (*NamedNoun)(nil),            /* NamedNoun:name: */
	7600243833025335851:  (*NamedProperty)(nil),        /* NamedProperty: */
	11281497065498302283: (*NamedProperty)(nil),        /* NamedProperty:type: */
	8883280437292140850:  (*NamedProperty)(nil),        /* NamedProperty:comment: */
	847370382734809298:   (*NamedProperty)(nil),        /* NamedProperty:type:comment: */
	10597814521259612392: (*NounAssignment)(nil),       /* NounAssignment:nouns:lines: */
	11271220813702679015: (*NounPhrase)(nil),           /* NounPhrase kindOfNoun: */
	6923309721749493537:  (*NounPhrase)(nil),           /* NounPhrase nounTraits: */
	15909676719983789414: (*NounPhrase)(nil),           /* NounPhrase nounRelation: */
	8358327072078132634:  (*NounRelation)(nil),         /* NounRelation relation:nouns: */
	7157825634536191111:  (*NounRelation)(nil),         /* NounRelation areBeing:relation:nouns: */
	16756778993528596640: (*NounStatement)(nil),        /* NounStatement: */
	13104026651265504280: (*NounStatement)(nil),        /* NounStatement:tail: */
	5039251519992036198:  (*NounStatement)(nil),        /* NounStatement:summary: */
	4978269156154497630:  (*NounStatement)(nil),        /* NounStatement:tail:summary: */
	18242559699550270796: (*NounTraits)(nil),           /* NounTraits:trait: */
	10570788478167904864: (*NumListProperty)(nil),      /* NumList named: */
	1134638206967616033:  (*NumListProperty)(nil),      /* NumList named:of: */
	12067969820633710801: (*NumListProperty)(nil),      /* NumList named:desc: */
	4350453418069638626:  (*NumListProperty)(nil),      /* NumList named:of:desc: */
	1229800714295622509:  (*NumberProperty)(nil),       /* Number named: */
	11728451174312232590: (*NumberProperty)(nil),       /* Number named:of: */
	8220001352821667446:  (*NumberProperty)(nil),       /* Number named:desc: */
	8225044541532672111:  (*NumberProperty)(nil),       /* Number named:of:desc: */
	17075866407822548206: (*OneToMany)(nil),            /* OneToMany:kinds: */
	13766274136867271026: (*OneToOne)(nil),             /* OneToOne:otherKind: */
	18143853777230560632: (*PairedAction)(nil),         /* PairedAction: */
	6457542997147343897:  (*Paragraph)(nil),            /* Paragraph */
	1044755875845214073:  (*Paragraph)(nil),            /* Paragraph: */
	10735038169260724899: (*PatternActions)(nil),       /* PatternActions:patternRules: */
	626108847940444615:   (*PatternActions)(nil),       /* PatternActions:patternLocals:patternRules: */
	8043268755698861333:  (*PatternActions)(nil),       /* PatternActions:patternReturn:patternRules: */
	14295113253706291193: (*PatternActions)(nil),       /* PatternActions:patternLocals:patternReturn:patternRules: */
	12269627840097064600: (*PatternDecl)(nil),          /* PatternDecl:name: */
	14226432888280203235: (*PatternDecl)(nil),          /* PatternDecl:name:optvars: */
	16699606798420796914: (*PatternDecl)(nil),          /* PatternDecl:name:patternReturn: */
	12239987563966389881: (*PatternDecl)(nil),          /* PatternDecl:name:optvars:patternReturn: */
	15390970540499719701: (*PatternDecl)(nil),          /* PatternDecl:name:about: */
	2773647507718310398:  (*PatternDecl)(nil),          /* PatternDecl:name:optvars:about: */
	15396002863266428067: (*PatternDecl)(nil),          /* PatternDecl:name:patternReturn:about: */
	18176072221785763176: (*PatternDecl)(nil),          /* PatternDecl:name:optvars:patternReturn:about: */
	16940656754612309445: (*PatternLocals)(nil),        /* PatternLocals: */
	9272141818556957835:  (*PatternReturn)(nil),        /* PatternReturn: */
	15914753357447503965: (*PatternRule)(nil),          /* PatternRule:hook activity: */
	14391699440407036198: (*PatternRule)(nil),          /* PatternRule:flags:hook activity: */
	15881043500959019380: (*PatternRules)(nil),         /* PatternRules */
	12644281899387438986: (*PatternRules)(nil),         /* PatternRules: */
	9595265807710753233:  (*PatternVariablesDecl)(nil), /* Pattern:requires: */
	2318440529621094838:  (*PatternVariablesTail)(nil), /* PatternVariablesTail: */
	13417511286363622337: (*ProgramHook)(nil),          /* ProgramHook activity: */
	8380731787009175721:  (*RecordListProperty)(nil),   /* RecordList named: */
	16326018873841140594: (*RecordListProperty)(nil),   /* RecordList named:of: */
	13065085319992699434: (*RecordListProperty)(nil),   /* RecordList named:desc: */
	8809350479853098315:  (*RecordListProperty)(nil),   /* RecordList named:of:desc: */
	9421894963555981921:  (*RecordProperty)(nil),       /* Record named: */
	15273128656504901402: (*RecordProperty)(nil),       /* Record named:of: */
	1627613176937258658:  (*RecordProperty)(nil),       /* Record named:desc: */
	8491419645379028179:  (*RecordProperty)(nil),       /* Record named:of:desc: */
	5587008972147064084:  (*RelationCardinality)(nil),  /* RelationCardinality oneToOne: */
	18092929693239672593: (*RelationCardinality)(nil),  /* RelationCardinality oneToMany: */
	10453256446593418889: (*RelationCardinality)(nil),  /* RelationCardinality manyToOne: */
	14287924768394488954: (*RelationCardinality)(nil),  /* RelationCardinality manyToMany: */
	7151092568991800158:  (*RelativeToNoun)(nil),       /* RelativeToNoun:nouns:areBeing:nouns1: */
	15988073058027477451: (*RenderTemplate)(nil),       /* RenderTemplate: */
	2420057392455761494:  (*Send)(nil),                 /* Send:path: */
	10010483713146895284: (*Send)(nil),                 /* Send:path:arguments: */
	7279273919312137397:  (*ShuffleText)(nil),          /* ShuffleText: */
	10085329253831819088: (*StoppingText)(nil),         /* StoppingText: */
	13392546219852761816: (*Story)(nil),                /* Story: */
	7688593191439831819:  (*Summary)(nil),              /* Summary: */
	5318973557611273585:  (*Tail)(nil),                 /* Tail:nounPhrase kindOfNoun: */
	5583135325088318667:  (*Tail)(nil),                 /* Tail:nounPhrase nounTraits: */
	7950604148908680916:  (*Tail)(nil),                 /* Tail:nounPhrase nounRelation: */
	15090827023293362138: (*TestOutput)(nil),           /* TestOutput: */
	11231723833188820353: (*TestRule)(nil),             /* TestRule:hook activity: */
	15304439741055926590: (*TestScene)(nil),            /* TestScene:story: */
	1385539489971009934:  (*TestStatement)(nil),        /* TestStatement:test: */
	12060628209423567251: (*TextListProperty)(nil),     /* TextList named: */
	17501273845802809220: (*TextListProperty)(nil),     /* TextList named:of: */
	8790232589946234908:  (*TextListProperty)(nil),     /* TextList named:desc: */
	10102728286923952045: (*TextListProperty)(nil),     /* TextList named:of:desc: */
	34813485952713023:    (*TextProperty)(nil),         /* Text named: */
	15716906332929430280: (*TextProperty)(nil),         /* Text named:of: */
	8821446596613108912:  (*TextProperty)(nil),         /* Text named:desc: */
	10950529590260468345: (*TextProperty)(nil),         /* Text named:of:desc: */
	14061432096605043790: (*TraitPhrase)(nil),          /* TraitPhrase:trait: */
}
