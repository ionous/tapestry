// Code generated by "makeops"; edit at your own risk.
package story

import (
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/dl/core"
	"git.sr.ht/~ionous/tapestry/dl/grammar"
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/dl/rel"
	"git.sr.ht/~ionous/tapestry/jsn"
	"git.sr.ht/~ionous/tapestry/rt"
	"github.com/ionous/errutil"
)

// AbstractAction requires a predefined string.
type AbstractAction struct {
	Str string
}

func (op *AbstractAction) String() string {
	return op.Str
}

const AbstractAction_Nothing = "$NOTHING"

func (*AbstractAction) Compose() composer.Spec {
	return composer.Spec{
		Name: AbstractAction_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			AbstractAction_Nothing,
		},
		Strings: []string{
			"nothing",
		},
	}
}

const AbstractAction_Type = "abstract_action"

func (op *AbstractAction) Marshal(m jsn.Marshaler) error {
	return AbstractAction_Marshal(m, op)
}

func AbstractAction_Optional_Marshal(m jsn.Marshaler, val *AbstractAction) (err error) {
	var zero AbstractAction
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = AbstractAction_Marshal(m, val)
	}
	return
}

func AbstractAction_Marshal(m jsn.Marshaler, val *AbstractAction) (err error) {
	return m.MarshalValue(AbstractAction_Type, jsn.MakeEnum(val, &val.Str))
}

type AbstractAction_Slice []AbstractAction

func (op *AbstractAction_Slice) GetType() string { return AbstractAction_Type }

func (op *AbstractAction_Slice) Marshal(m jsn.Marshaler) error {
	return AbstractAction_Repeats_Marshal(m, (*[]AbstractAction)(op))
}

func (op *AbstractAction_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AbstractAction_Slice) SetSize(cnt int) {
	var els []AbstractAction
	if cnt >= 0 {
		els = make(AbstractAction_Slice, cnt)
	}
	(*op) = els
}

func (op *AbstractAction_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AbstractAction_Marshal(m, &(*op)[i])
}

func AbstractAction_Repeats_Marshal(m jsn.Marshaler, vals *[]AbstractAction) error {
	return jsn.RepeatBlock(m, (*AbstractAction_Slice)(vals))
}

func AbstractAction_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AbstractAction) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AbstractAction_Repeats_Marshal(m, pv)
	}
	return
}

// ActionContext
type ActionContext struct {
	Kind   SingularKind `if:"label=_"`
	Markup map[string]any
}

func (*ActionContext) Compose() composer.Spec {
	return composer.Spec{
		Name: ActionContext_Type,
		Uses: composer.Type_Flow,
	}
}

const ActionContext_Type = "action_context"
const ActionContext_Field_Kind = "$KIND"

func (op *ActionContext) Marshal(m jsn.Marshaler) error {
	return ActionContext_Marshal(m, op)
}

type ActionContext_Slice []ActionContext

func (op *ActionContext_Slice) GetType() string { return ActionContext_Type }

func (op *ActionContext_Slice) Marshal(m jsn.Marshaler) error {
	return ActionContext_Repeats_Marshal(m, (*[]ActionContext)(op))
}

func (op *ActionContext_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ActionContext_Slice) SetSize(cnt int) {
	var els []ActionContext
	if cnt >= 0 {
		els = make(ActionContext_Slice, cnt)
	}
	(*op) = els
}

func (op *ActionContext_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ActionContext_Marshal(m, &(*op)[i])
}

func ActionContext_Repeats_Marshal(m jsn.Marshaler, vals *[]ActionContext) error {
	return jsn.RepeatBlock(m, (*ActionContext_Slice)(vals))
}

func ActionContext_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ActionContext) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ActionContext_Repeats_Marshal(m, pv)
	}
	return
}

type ActionContext_Flow struct{ ptr *ActionContext }

func (n ActionContext_Flow) GetType() string      { return ActionContext_Type }
func (n ActionContext_Flow) GetLede() string      { return ActionContext_Type }
func (n ActionContext_Flow) GetFlow() interface{} { return n.ptr }
func (n ActionContext_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ActionContext); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ActionContext_Optional_Marshal(m jsn.Marshaler, pv **ActionContext) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ActionContext_Marshal(m, *pv)
	} else if !enc {
		var v ActionContext
		if err = ActionContext_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ActionContext_Marshal(m jsn.Marshaler, val *ActionContext) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ActionContext_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ActionContext_Field_Kind)
		if e0 == nil {
			e0 = SingularKind_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ActionContext_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// ActionDecl Declare an activity: Activities help actors perform tasks: for instance, picking up or dropping items.  Activities involve either the player or an npc and possibly one or two other objects.
type ActionDecl struct {
	Event        EventName    `if:"label=_"`
	Action       ActionName   `if:"label=action"`
	ActionParams ActionParams `if:"label=args"`
	Markup       map[string]any
}

// User implemented slots:
var _ StoryStatement = (*ActionDecl)(nil)

func (*ActionDecl) Compose() composer.Spec {
	return composer.Spec{
		Name: ActionDecl_Type,
		Uses: composer.Type_Flow,
		Lede: "Event",
	}
}

const ActionDecl_Type = "action_decl"
const ActionDecl_Field_Event = "$EVENT"
const ActionDecl_Field_Action = "$ACTION"
const ActionDecl_Field_ActionParams = "$ACTION_PARAMS"

func (op *ActionDecl) Marshal(m jsn.Marshaler) error {
	return ActionDecl_Marshal(m, op)
}

type ActionDecl_Slice []ActionDecl

func (op *ActionDecl_Slice) GetType() string { return ActionDecl_Type }

func (op *ActionDecl_Slice) Marshal(m jsn.Marshaler) error {
	return ActionDecl_Repeats_Marshal(m, (*[]ActionDecl)(op))
}

func (op *ActionDecl_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ActionDecl_Slice) SetSize(cnt int) {
	var els []ActionDecl
	if cnt >= 0 {
		els = make(ActionDecl_Slice, cnt)
	}
	(*op) = els
}

func (op *ActionDecl_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ActionDecl_Marshal(m, &(*op)[i])
}

func ActionDecl_Repeats_Marshal(m jsn.Marshaler, vals *[]ActionDecl) error {
	return jsn.RepeatBlock(m, (*ActionDecl_Slice)(vals))
}

func ActionDecl_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ActionDecl) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ActionDecl_Repeats_Marshal(m, pv)
	}
	return
}

type ActionDecl_Flow struct{ ptr *ActionDecl }

func (n ActionDecl_Flow) GetType() string      { return ActionDecl_Type }
func (n ActionDecl_Flow) GetLede() string      { return "Event" }
func (n ActionDecl_Flow) GetFlow() interface{} { return n.ptr }
func (n ActionDecl_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ActionDecl); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ActionDecl_Optional_Marshal(m jsn.Marshaler, pv **ActionDecl) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ActionDecl_Marshal(m, *pv)
	} else if !enc {
		var v ActionDecl
		if err = ActionDecl_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ActionDecl_Marshal(m jsn.Marshaler, val *ActionDecl) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ActionDecl_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ActionDecl_Field_Event)
		if e0 == nil {
			e0 = EventName_Marshal(m, &val.Event)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ActionDecl_Field_Event))
		}
		e1 := m.MarshalKey("action", ActionDecl_Field_Action)
		if e1 == nil {
			e1 = ActionName_Marshal(m, &val.Action)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ActionDecl_Field_Action))
		}
		e2 := m.MarshalKey("args", ActionDecl_Field_ActionParams)
		if e2 == nil {
			e2 = ActionParams_Marshal(m, &val.ActionParams)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ActionDecl_Field_ActionParams))
		}
		m.EndBlock()
	}
	return
}

// ActionName requires a user-specified string.
type ActionName struct {
	Str string
}

func (op *ActionName) String() string {
	return op.Str
}

func (*ActionName) Compose() composer.Spec {
	return composer.Spec{
		Name:        ActionName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const ActionName_Type = "action_name"

func (op *ActionName) Marshal(m jsn.Marshaler) error {
	return ActionName_Marshal(m, op)
}

func ActionName_Optional_Marshal(m jsn.Marshaler, val *ActionName) (err error) {
	var zero ActionName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = ActionName_Marshal(m, val)
	}
	return
}

func ActionName_Marshal(m jsn.Marshaler, val *ActionName) (err error) {
	return m.MarshalValue(ActionName_Type, &val.Str)
}

type ActionName_Slice []ActionName

func (op *ActionName_Slice) GetType() string { return ActionName_Type }

func (op *ActionName_Slice) Marshal(m jsn.Marshaler) error {
	return ActionName_Repeats_Marshal(m, (*[]ActionName)(op))
}

func (op *ActionName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ActionName_Slice) SetSize(cnt int) {
	var els []ActionName
	if cnt >= 0 {
		els = make(ActionName_Slice, cnt)
	}
	(*op) = els
}

func (op *ActionName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ActionName_Marshal(m, &(*op)[i])
}

func ActionName_Repeats_Marshal(m jsn.Marshaler, vals *[]ActionName) error {
	return jsn.RepeatBlock(m, (*ActionName_Slice)(vals))
}

func ActionName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ActionName) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ActionName_Repeats_Marshal(m, pv)
	}
	return
}

// ActionParams swaps between various options
type ActionParams struct {
	Choice string
	Value  interface{}
}

var ActionParams_Optional_Marshal = ActionParams_Marshal

const ActionParams_Common_Opt = "$COMMON"
const ActionParams_Dual_Opt = "$DUAL"
const ActionParams_None_Opt = "$NONE"

func (*ActionParams) Compose() composer.Spec {
	return composer.Spec{
		Name: ActionParams_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			ActionParams_Common_Opt, ActionParams_Dual_Opt, ActionParams_None_Opt,
		},
		Swaps: []interface{}{
			(*CommonAction)(nil),
			(*PairedAction)(nil),
			(*AbstractAction)(nil),
		},
	}
}

const ActionParams_Type = "action_params"

func (op *ActionParams) GetType() string { return ActionParams_Type }

func (op *ActionParams) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *ActionParams) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case ActionParams_Common_Opt:
		op.Choice, op.Value = c, new(CommonAction)
		okay = true
	case ActionParams_Dual_Opt:
		op.Choice, op.Value = c, new(PairedAction)
		okay = true
	case ActionParams_None_Opt:
		op.Choice, op.Value = c, new(AbstractAction)
		okay = true
	}
	return
}

func (op *ActionParams) Marshal(m jsn.Marshaler) error {
	return ActionParams_Marshal(m, op)
}
func ActionParams_Marshal(m jsn.Marshaler, val *ActionParams) (err error) {
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type ActionParams_Slice []ActionParams

func (op *ActionParams_Slice) GetType() string { return ActionParams_Type }

func (op *ActionParams_Slice) Marshal(m jsn.Marshaler) error {
	return ActionParams_Repeats_Marshal(m, (*[]ActionParams)(op))
}

func (op *ActionParams_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ActionParams_Slice) SetSize(cnt int) {
	var els []ActionParams
	if cnt >= 0 {
		els = make(ActionParams_Slice, cnt)
	}
	(*op) = els
}

func (op *ActionParams_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ActionParams_Marshal(m, &(*op)[i])
}

func ActionParams_Repeats_Marshal(m jsn.Marshaler, vals *[]ActionParams) error {
	return jsn.RepeatBlock(m, (*ActionParams_Slice)(vals))
}

func ActionParams_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ActionParams) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ActionParams_Repeats_Marshal(m, pv)
	}
	return
}

// AspectField
type AspectField struct {
	Aspect string `if:"label=_,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ Field = (*AspectField)(nil)

func (*AspectField) Compose() composer.Spec {
	return composer.Spec{
		Name: AspectField_Type,
		Uses: composer.Type_Flow,
		Lede: "aspect",
	}
}

const AspectField_Type = "aspect_field"
const AspectField_Field_Aspect = "$ASPECT"

func (op *AspectField) Marshal(m jsn.Marshaler) error {
	return AspectField_Marshal(m, op)
}

type AspectField_Slice []AspectField

func (op *AspectField_Slice) GetType() string { return AspectField_Type }

func (op *AspectField_Slice) Marshal(m jsn.Marshaler) error {
	return AspectField_Repeats_Marshal(m, (*[]AspectField)(op))
}

func (op *AspectField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AspectField_Slice) SetSize(cnt int) {
	var els []AspectField
	if cnt >= 0 {
		els = make(AspectField_Slice, cnt)
	}
	(*op) = els
}

func (op *AspectField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AspectField_Marshal(m, &(*op)[i])
}

func AspectField_Repeats_Marshal(m jsn.Marshaler, vals *[]AspectField) error {
	return jsn.RepeatBlock(m, (*AspectField_Slice)(vals))
}

func AspectField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AspectField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AspectField_Repeats_Marshal(m, pv)
	}
	return
}

type AspectField_Flow struct{ ptr *AspectField }

func (n AspectField_Flow) GetType() string      { return AspectField_Type }
func (n AspectField_Flow) GetLede() string      { return "aspect" }
func (n AspectField_Flow) GetFlow() interface{} { return n.ptr }
func (n AspectField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AspectField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AspectField_Optional_Marshal(m jsn.Marshaler, pv **AspectField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AspectField_Marshal(m, *pv)
	} else if !enc {
		var v AspectField
		if err = AspectField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AspectField_Marshal(m jsn.Marshaler, val *AspectField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AspectField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AspectField_Field_Aspect)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Aspect)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AspectField_Field_Aspect))
		}
		m.EndBlock()
	}
	return
}

// BoolField
type BoolField struct {
	Name      string      `if:"label=_,type=text"`
	Type      string      `if:"label=kind,optional,type=text"`
	Initially rt.BoolEval `if:"label=initially,optional"`
	Markup    map[string]any
}

// User implemented slots:
var _ Field = (*BoolField)(nil)

func (*BoolField) Compose() composer.Spec {
	return composer.Spec{
		Name: BoolField_Type,
		Uses: composer.Type_Flow,
		Lede: "bool",
	}
}

const BoolField_Type = "bool_field"
const BoolField_Field_Name = "$NAME"
const BoolField_Field_Type = "$TYPE"
const BoolField_Field_Initially = "$INITIALLY"

func (op *BoolField) Marshal(m jsn.Marshaler) error {
	return BoolField_Marshal(m, op)
}

type BoolField_Slice []BoolField

func (op *BoolField_Slice) GetType() string { return BoolField_Type }

func (op *BoolField_Slice) Marshal(m jsn.Marshaler) error {
	return BoolField_Repeats_Marshal(m, (*[]BoolField)(op))
}

func (op *BoolField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *BoolField_Slice) SetSize(cnt int) {
	var els []BoolField
	if cnt >= 0 {
		els = make(BoolField_Slice, cnt)
	}
	(*op) = els
}

func (op *BoolField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return BoolField_Marshal(m, &(*op)[i])
}

func BoolField_Repeats_Marshal(m jsn.Marshaler, vals *[]BoolField) error {
	return jsn.RepeatBlock(m, (*BoolField_Slice)(vals))
}

func BoolField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]BoolField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = BoolField_Repeats_Marshal(m, pv)
	}
	return
}

type BoolField_Flow struct{ ptr *BoolField }

func (n BoolField_Flow) GetType() string      { return BoolField_Type }
func (n BoolField_Flow) GetLede() string      { return "bool" }
func (n BoolField_Flow) GetFlow() interface{} { return n.ptr }
func (n BoolField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*BoolField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func BoolField_Optional_Marshal(m jsn.Marshaler, pv **BoolField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BoolField_Marshal(m, *pv)
	} else if !enc {
		var v BoolField
		if err = BoolField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BoolField_Marshal(m jsn.Marshaler, val *BoolField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(BoolField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", BoolField_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", BoolField_Field_Name))
		}
		e1 := m.MarshalKey("kind", BoolField_Field_Type)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", BoolField_Field_Type))
		}
		e2 := m.MarshalKey("initially", BoolField_Field_Initially)
		if e2 == nil {
			e2 = rt.BoolEval_Optional_Marshal(m, &val.Initially)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", BoolField_Field_Initially))
		}
		m.EndBlock()
	}
	return
}

// CommonAction
type CommonAction struct {
	Kind          SingularKind   `if:"label=_"`
	ActionContext *ActionContext `if:"label=action_context,optional"`
	Markup        map[string]any
}

func (*CommonAction) Compose() composer.Spec {
	return composer.Spec{
		Name: CommonAction_Type,
		Uses: composer.Type_Flow,
	}
}

const CommonAction_Type = "common_action"
const CommonAction_Field_Kind = "$KIND"
const CommonAction_Field_ActionContext = "$ACTION_CONTEXT"

func (op *CommonAction) Marshal(m jsn.Marshaler) error {
	return CommonAction_Marshal(m, op)
}

type CommonAction_Slice []CommonAction

func (op *CommonAction_Slice) GetType() string { return CommonAction_Type }

func (op *CommonAction_Slice) Marshal(m jsn.Marshaler) error {
	return CommonAction_Repeats_Marshal(m, (*[]CommonAction)(op))
}

func (op *CommonAction_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CommonAction_Slice) SetSize(cnt int) {
	var els []CommonAction
	if cnt >= 0 {
		els = make(CommonAction_Slice, cnt)
	}
	(*op) = els
}

func (op *CommonAction_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CommonAction_Marshal(m, &(*op)[i])
}

func CommonAction_Repeats_Marshal(m jsn.Marshaler, vals *[]CommonAction) error {
	return jsn.RepeatBlock(m, (*CommonAction_Slice)(vals))
}

func CommonAction_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CommonAction) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CommonAction_Repeats_Marshal(m, pv)
	}
	return
}

type CommonAction_Flow struct{ ptr *CommonAction }

func (n CommonAction_Flow) GetType() string      { return CommonAction_Type }
func (n CommonAction_Flow) GetLede() string      { return CommonAction_Type }
func (n CommonAction_Flow) GetFlow() interface{} { return n.ptr }
func (n CommonAction_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CommonAction); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CommonAction_Optional_Marshal(m jsn.Marshaler, pv **CommonAction) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CommonAction_Marshal(m, *pv)
	} else if !enc {
		var v CommonAction
		if err = CommonAction_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CommonAction_Marshal(m jsn.Marshaler, val *CommonAction) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CommonAction_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CommonAction_Field_Kind)
		if e0 == nil {
			e0 = SingularKind_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CommonAction_Field_Kind))
		}
		e1 := m.MarshalKey("action_context", CommonAction_Field_ActionContext)
		if e1 == nil {
			e1 = ActionContext_Optional_Marshal(m, &val.ActionContext)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CommonAction_Field_ActionContext))
		}
		m.EndBlock()
	}
	return
}

// CommonNoun Some person, place, or thing which lacks a specific name.
// For example, maybe: 'a helicopter', 'some hooded figures', or 'the dog park'.
type CommonNoun struct {
	Determiner Determiner `if:"label=_"`
	Noun       NounNamed  `if:"label=named"`
	Markup     map[string]any
}

// User implemented slots:
var _ NamedNoun = (*CommonNoun)(nil)
var _ SingularNoun = (*CommonNoun)(nil)

func (*CommonNoun) Compose() composer.Spec {
	return composer.Spec{
		Name: CommonNoun_Type,
		Uses: composer.Type_Flow,
		Lede: "noun",
	}
}

const CommonNoun_Type = "common_noun"
const CommonNoun_Field_Determiner = "$DETERMINER"
const CommonNoun_Field_Noun = "$NOUN"

func (op *CommonNoun) Marshal(m jsn.Marshaler) error {
	return CommonNoun_Marshal(m, op)
}

type CommonNoun_Slice []CommonNoun

func (op *CommonNoun_Slice) GetType() string { return CommonNoun_Type }

func (op *CommonNoun_Slice) Marshal(m jsn.Marshaler) error {
	return CommonNoun_Repeats_Marshal(m, (*[]CommonNoun)(op))
}

func (op *CommonNoun_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CommonNoun_Slice) SetSize(cnt int) {
	var els []CommonNoun
	if cnt >= 0 {
		els = make(CommonNoun_Slice, cnt)
	}
	(*op) = els
}

func (op *CommonNoun_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CommonNoun_Marshal(m, &(*op)[i])
}

func CommonNoun_Repeats_Marshal(m jsn.Marshaler, vals *[]CommonNoun) error {
	return jsn.RepeatBlock(m, (*CommonNoun_Slice)(vals))
}

func CommonNoun_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CommonNoun) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CommonNoun_Repeats_Marshal(m, pv)
	}
	return
}

type CommonNoun_Flow struct{ ptr *CommonNoun }

func (n CommonNoun_Flow) GetType() string      { return CommonNoun_Type }
func (n CommonNoun_Flow) GetLede() string      { return "noun" }
func (n CommonNoun_Flow) GetFlow() interface{} { return n.ptr }
func (n CommonNoun_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CommonNoun); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CommonNoun_Optional_Marshal(m jsn.Marshaler, pv **CommonNoun) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CommonNoun_Marshal(m, *pv)
	} else if !enc {
		var v CommonNoun
		if err = CommonNoun_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CommonNoun_Marshal(m jsn.Marshaler, val *CommonNoun) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CommonNoun_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CommonNoun_Field_Determiner)
		if e0 == nil {
			e0 = Determiner_Marshal(m, &val.Determiner)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CommonNoun_Field_Determiner))
		}
		e1 := m.MarshalKey("named", CommonNoun_Field_Noun)
		if e1 == nil {
			e1 = NounNamed_Marshal(m, &val.Noun)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CommonNoun_Field_Noun))
		}
		m.EndBlock()
	}
	return
}

// CountOf A guard which returns true based on a counter.
// Counters start at zero and are incremented every time the guard gets checked.
type CountOf struct {
	Trigger core.Trigger  `if:"label=_"`
	Num     rt.NumberEval `if:"label=num"`
	Markup  map[string]any
}

// User implemented slots:
var _ rt.BoolEval = (*CountOf)(nil)

func (*CountOf) Compose() composer.Spec {
	return composer.Spec{
		Name: CountOf_Type,
		Uses: composer.Type_Flow,
	}
}

const CountOf_Type = "count_of"
const CountOf_Field_Trigger = "$TRIGGER"
const CountOf_Field_Num = "$NUM"

func (op *CountOf) Marshal(m jsn.Marshaler) error {
	return CountOf_Marshal(m, op)
}

type CountOf_Slice []CountOf

func (op *CountOf_Slice) GetType() string { return CountOf_Type }

func (op *CountOf_Slice) Marshal(m jsn.Marshaler) error {
	return CountOf_Repeats_Marshal(m, (*[]CountOf)(op))
}

func (op *CountOf_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CountOf_Slice) SetSize(cnt int) {
	var els []CountOf
	if cnt >= 0 {
		els = make(CountOf_Slice, cnt)
	}
	(*op) = els
}

func (op *CountOf_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CountOf_Marshal(m, &(*op)[i])
}

func CountOf_Repeats_Marshal(m jsn.Marshaler, vals *[]CountOf) error {
	return jsn.RepeatBlock(m, (*CountOf_Slice)(vals))
}

func CountOf_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CountOf) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CountOf_Repeats_Marshal(m, pv)
	}
	return
}

type CountOf_Flow struct{ ptr *CountOf }

func (n CountOf_Flow) GetType() string      { return CountOf_Type }
func (n CountOf_Flow) GetLede() string      { return CountOf_Type }
func (n CountOf_Flow) GetFlow() interface{} { return n.ptr }
func (n CountOf_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CountOf); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CountOf_Optional_Marshal(m jsn.Marshaler, pv **CountOf) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CountOf_Marshal(m, *pv)
	} else if !enc {
		var v CountOf
		if err = CountOf_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CountOf_Marshal(m jsn.Marshaler, val *CountOf) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CountOf_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CountOf_Field_Trigger)
		if e0 == nil {
			e0 = core.Trigger_Marshal(m, &val.Trigger)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CountOf_Field_Trigger))
		}
		e1 := m.MarshalKey("num", CountOf_Field_Num)
		if e1 == nil {
			e1 = rt.NumberEval_Marshal(m, &val.Num)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CountOf_Field_Num))
		}
		m.EndBlock()
	}
	return
}

// CountedNouns
type CountedNouns struct {
	Count  string      `if:"label=_,type=text"`
	Kinds  PluralKinds `if:"label=named"`
	Markup map[string]any
}

// User implemented slots:
var _ NamedNoun = (*CountedNouns)(nil)

func (*CountedNouns) Compose() composer.Spec {
	return composer.Spec{
		Name: CountedNouns_Type,
		Uses: composer.Type_Flow,
		Lede: "nouns",
	}
}

const CountedNouns_Type = "counted_nouns"
const CountedNouns_Field_Count = "$COUNT"
const CountedNouns_Field_Kinds = "$KINDS"

func (op *CountedNouns) Marshal(m jsn.Marshaler) error {
	return CountedNouns_Marshal(m, op)
}

type CountedNouns_Slice []CountedNouns

func (op *CountedNouns_Slice) GetType() string { return CountedNouns_Type }

func (op *CountedNouns_Slice) Marshal(m jsn.Marshaler) error {
	return CountedNouns_Repeats_Marshal(m, (*[]CountedNouns)(op))
}

func (op *CountedNouns_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CountedNouns_Slice) SetSize(cnt int) {
	var els []CountedNouns
	if cnt >= 0 {
		els = make(CountedNouns_Slice, cnt)
	}
	(*op) = els
}

func (op *CountedNouns_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CountedNouns_Marshal(m, &(*op)[i])
}

func CountedNouns_Repeats_Marshal(m jsn.Marshaler, vals *[]CountedNouns) error {
	return jsn.RepeatBlock(m, (*CountedNouns_Slice)(vals))
}

func CountedNouns_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CountedNouns) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CountedNouns_Repeats_Marshal(m, pv)
	}
	return
}

type CountedNouns_Flow struct{ ptr *CountedNouns }

func (n CountedNouns_Flow) GetType() string      { return CountedNouns_Type }
func (n CountedNouns_Flow) GetLede() string      { return "nouns" }
func (n CountedNouns_Flow) GetFlow() interface{} { return n.ptr }
func (n CountedNouns_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CountedNouns); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CountedNouns_Optional_Marshal(m jsn.Marshaler, pv **CountedNouns) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CountedNouns_Marshal(m, *pv)
	} else if !enc {
		var v CountedNouns
		if err = CountedNouns_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CountedNouns_Marshal(m jsn.Marshaler, val *CountedNouns) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CountedNouns_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CountedNouns_Field_Count)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Count)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CountedNouns_Field_Count))
		}
		e1 := m.MarshalKey("named", CountedNouns_Field_Kinds)
		if e1 == nil {
			e1 = PluralKinds_Marshal(m, &val.Kinds)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CountedNouns_Field_Kinds))
		}
		m.EndBlock()
	}
	return
}

// CycleText When called multiple times, returns each of its inputs in turn.
type CycleText struct {
	Parts  []rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*CycleText)(nil)

func (*CycleText) Compose() composer.Spec {
	return composer.Spec{
		Name: CycleText_Type,
		Uses: composer.Type_Flow,
	}
}

const CycleText_Type = "cycle_text"
const CycleText_Field_Parts = "$PARTS"

func (op *CycleText) Marshal(m jsn.Marshaler) error {
	return CycleText_Marshal(m, op)
}

type CycleText_Slice []CycleText

func (op *CycleText_Slice) GetType() string { return CycleText_Type }

func (op *CycleText_Slice) Marshal(m jsn.Marshaler) error {
	return CycleText_Repeats_Marshal(m, (*[]CycleText)(op))
}

func (op *CycleText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CycleText_Slice) SetSize(cnt int) {
	var els []CycleText
	if cnt >= 0 {
		els = make(CycleText_Slice, cnt)
	}
	(*op) = els
}

func (op *CycleText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CycleText_Marshal(m, &(*op)[i])
}

func CycleText_Repeats_Marshal(m jsn.Marshaler, vals *[]CycleText) error {
	return jsn.RepeatBlock(m, (*CycleText_Slice)(vals))
}

func CycleText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CycleText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CycleText_Repeats_Marshal(m, pv)
	}
	return
}

type CycleText_Flow struct{ ptr *CycleText }

func (n CycleText_Flow) GetType() string      { return CycleText_Type }
func (n CycleText_Flow) GetLede() string      { return CycleText_Type }
func (n CycleText_Flow) GetFlow() interface{} { return n.ptr }
func (n CycleText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CycleText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CycleText_Optional_Marshal(m jsn.Marshaler, pv **CycleText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CycleText_Marshal(m, *pv)
	} else if !enc {
		var v CycleText
		if err = CycleText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CycleText_Marshal(m jsn.Marshaler, val *CycleText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CycleText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CycleText_Field_Parts)
		if e0 == nil {
			e0 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CycleText_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// DefineFields Add properties to a kind
type DefineFields struct {
	Kind   rt.TextEval `if:"label=kind"`
	Props  []Field     `if:"label=has"`
	Markup map[string]any
}

// User implemented slots:
var _ StoryStatement = (*DefineFields)(nil)

func (*DefineFields) Compose() composer.Spec {
	return composer.Spec{
		Name: DefineFields_Type,
		Uses: composer.Type_Flow,
		Lede: "define",
	}
}

const DefineFields_Type = "define_fields"
const DefineFields_Field_Kind = "$KIND"
const DefineFields_Field_Props = "$PROPS"

func (op *DefineFields) Marshal(m jsn.Marshaler) error {
	return DefineFields_Marshal(m, op)
}

type DefineFields_Slice []DefineFields

func (op *DefineFields_Slice) GetType() string { return DefineFields_Type }

func (op *DefineFields_Slice) Marshal(m jsn.Marshaler) error {
	return DefineFields_Repeats_Marshal(m, (*[]DefineFields)(op))
}

func (op *DefineFields_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DefineFields_Slice) SetSize(cnt int) {
	var els []DefineFields
	if cnt >= 0 {
		els = make(DefineFields_Slice, cnt)
	}
	(*op) = els
}

func (op *DefineFields_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DefineFields_Marshal(m, &(*op)[i])
}

func DefineFields_Repeats_Marshal(m jsn.Marshaler, vals *[]DefineFields) error {
	return jsn.RepeatBlock(m, (*DefineFields_Slice)(vals))
}

func DefineFields_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DefineFields) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DefineFields_Repeats_Marshal(m, pv)
	}
	return
}

type DefineFields_Flow struct{ ptr *DefineFields }

func (n DefineFields_Flow) GetType() string      { return DefineFields_Type }
func (n DefineFields_Flow) GetLede() string      { return "define" }
func (n DefineFields_Flow) GetFlow() interface{} { return n.ptr }
func (n DefineFields_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DefineFields); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DefineFields_Optional_Marshal(m jsn.Marshaler, pv **DefineFields) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DefineFields_Marshal(m, *pv)
	} else if !enc {
		var v DefineFields
		if err = DefineFields_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DefineFields_Marshal(m jsn.Marshaler, val *DefineFields) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DefineFields_Flow{val}); err == nil {
		e0 := m.MarshalKey("kind", DefineFields_Field_Kind)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DefineFields_Field_Kind))
		}
		e1 := m.MarshalKey("has", DefineFields_Field_Props)
		if e1 == nil {
			e1 = Field_Repeats_Marshal(m, &val.Props)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DefineFields_Field_Props))
		}
		m.EndBlock()
	}
	return
}

// DefineKinds
type DefineKinds struct {
	Kinds    rt.TextListEval `if:"label=kinds"`
	Ancestor rt.TextEval     `if:"label=as"`
	Markup   map[string]any
}

// User implemented slots:
var _ StoryStatement = (*DefineKinds)(nil)

func (*DefineKinds) Compose() composer.Spec {
	return composer.Spec{
		Name: DefineKinds_Type,
		Uses: composer.Type_Flow,
		Lede: "define",
	}
}

const DefineKinds_Type = "define_kinds"
const DefineKinds_Field_Kinds = "$KINDS"
const DefineKinds_Field_Ancestor = "$ANCESTOR"

func (op *DefineKinds) Marshal(m jsn.Marshaler) error {
	return DefineKinds_Marshal(m, op)
}

type DefineKinds_Slice []DefineKinds

func (op *DefineKinds_Slice) GetType() string { return DefineKinds_Type }

func (op *DefineKinds_Slice) Marshal(m jsn.Marshaler) error {
	return DefineKinds_Repeats_Marshal(m, (*[]DefineKinds)(op))
}

func (op *DefineKinds_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DefineKinds_Slice) SetSize(cnt int) {
	var els []DefineKinds
	if cnt >= 0 {
		els = make(DefineKinds_Slice, cnt)
	}
	(*op) = els
}

func (op *DefineKinds_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DefineKinds_Marshal(m, &(*op)[i])
}

func DefineKinds_Repeats_Marshal(m jsn.Marshaler, vals *[]DefineKinds) error {
	return jsn.RepeatBlock(m, (*DefineKinds_Slice)(vals))
}

func DefineKinds_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DefineKinds) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DefineKinds_Repeats_Marshal(m, pv)
	}
	return
}

type DefineKinds_Flow struct{ ptr *DefineKinds }

func (n DefineKinds_Flow) GetType() string      { return DefineKinds_Type }
func (n DefineKinds_Flow) GetLede() string      { return "define" }
func (n DefineKinds_Flow) GetFlow() interface{} { return n.ptr }
func (n DefineKinds_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DefineKinds); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DefineKinds_Optional_Marshal(m jsn.Marshaler, pv **DefineKinds) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DefineKinds_Marshal(m, *pv)
	} else if !enc {
		var v DefineKinds
		if err = DefineKinds_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DefineKinds_Marshal(m jsn.Marshaler, val *DefineKinds) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DefineKinds_Flow{val}); err == nil {
		e0 := m.MarshalKey("kinds", DefineKinds_Field_Kinds)
		if e0 == nil {
			e0 = rt.TextListEval_Marshal(m, &val.Kinds)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DefineKinds_Field_Kinds))
		}
		e1 := m.MarshalKey("as", DefineKinds_Field_Ancestor)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Ancestor)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DefineKinds_Field_Ancestor))
		}
		m.EndBlock()
	}
	return
}

// DefineNouns
type DefineNouns struct {
	Nouns  rt.TextListEval `if:"label=nouns"`
	Kind   rt.TextEval     `if:"label=as"`
	Traits rt.TextListEval `if:"label=traits,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ StoryStatement = (*DefineNouns)(nil)

func (*DefineNouns) Compose() composer.Spec {
	return composer.Spec{
		Name: DefineNouns_Type,
		Uses: composer.Type_Flow,
		Lede: "define",
	}
}

const DefineNouns_Type = "define_nouns"
const DefineNouns_Field_Nouns = "$NOUNS"
const DefineNouns_Field_Kind = "$KIND"
const DefineNouns_Field_Traits = "$TRAITS"

func (op *DefineNouns) Marshal(m jsn.Marshaler) error {
	return DefineNouns_Marshal(m, op)
}

type DefineNouns_Slice []DefineNouns

func (op *DefineNouns_Slice) GetType() string { return DefineNouns_Type }

func (op *DefineNouns_Slice) Marshal(m jsn.Marshaler) error {
	return DefineNouns_Repeats_Marshal(m, (*[]DefineNouns)(op))
}

func (op *DefineNouns_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DefineNouns_Slice) SetSize(cnt int) {
	var els []DefineNouns
	if cnt >= 0 {
		els = make(DefineNouns_Slice, cnt)
	}
	(*op) = els
}

func (op *DefineNouns_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DefineNouns_Marshal(m, &(*op)[i])
}

func DefineNouns_Repeats_Marshal(m jsn.Marshaler, vals *[]DefineNouns) error {
	return jsn.RepeatBlock(m, (*DefineNouns_Slice)(vals))
}

func DefineNouns_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DefineNouns) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DefineNouns_Repeats_Marshal(m, pv)
	}
	return
}

type DefineNouns_Flow struct{ ptr *DefineNouns }

func (n DefineNouns_Flow) GetType() string      { return DefineNouns_Type }
func (n DefineNouns_Flow) GetLede() string      { return "define" }
func (n DefineNouns_Flow) GetFlow() interface{} { return n.ptr }
func (n DefineNouns_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DefineNouns); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DefineNouns_Optional_Marshal(m jsn.Marshaler, pv **DefineNouns) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DefineNouns_Marshal(m, *pv)
	} else if !enc {
		var v DefineNouns
		if err = DefineNouns_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DefineNouns_Marshal(m jsn.Marshaler, val *DefineNouns) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DefineNouns_Flow{val}); err == nil {
		e0 := m.MarshalKey("nouns", DefineNouns_Field_Nouns)
		if e0 == nil {
			e0 = rt.TextListEval_Marshal(m, &val.Nouns)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DefineNouns_Field_Nouns))
		}
		e1 := m.MarshalKey("as", DefineNouns_Field_Kind)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DefineNouns_Field_Kind))
		}
		e2 := m.MarshalKey("traits", DefineNouns_Field_Traits)
		if e2 == nil {
			e2 = rt.TextListEval_Optional_Marshal(m, &val.Traits)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", DefineNouns_Field_Traits))
		}
		m.EndBlock()
	}
	return
}

// DefineRelatives Relate nouns to each other
type DefineRelatives struct {
	Nouns     rt.TextListEval `if:"label=nouns"`
	Kind      rt.TextEval     `if:"label=as,optional"`
	Relation  rt.TextEval     `if:"label=relation"`
	OtherNoun rt.TextEval     `if:"label=noun"`
	Markup    map[string]any
}

// User implemented slots:
var _ StoryStatement = (*DefineRelatives)(nil)

func (*DefineRelatives) Compose() composer.Spec {
	return composer.Spec{
		Name: DefineRelatives_Type,
		Uses: composer.Type_Flow,
		Lede: "define",
	}
}

const DefineRelatives_Type = "define_relatives"
const DefineRelatives_Field_Nouns = "$NOUNS"
const DefineRelatives_Field_Kind = "$KIND"
const DefineRelatives_Field_Relation = "$RELATION"
const DefineRelatives_Field_OtherNoun = "$OTHER_NOUN"

func (op *DefineRelatives) Marshal(m jsn.Marshaler) error {
	return DefineRelatives_Marshal(m, op)
}

type DefineRelatives_Slice []DefineRelatives

func (op *DefineRelatives_Slice) GetType() string { return DefineRelatives_Type }

func (op *DefineRelatives_Slice) Marshal(m jsn.Marshaler) error {
	return DefineRelatives_Repeats_Marshal(m, (*[]DefineRelatives)(op))
}

func (op *DefineRelatives_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DefineRelatives_Slice) SetSize(cnt int) {
	var els []DefineRelatives
	if cnt >= 0 {
		els = make(DefineRelatives_Slice, cnt)
	}
	(*op) = els
}

func (op *DefineRelatives_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DefineRelatives_Marshal(m, &(*op)[i])
}

func DefineRelatives_Repeats_Marshal(m jsn.Marshaler, vals *[]DefineRelatives) error {
	return jsn.RepeatBlock(m, (*DefineRelatives_Slice)(vals))
}

func DefineRelatives_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DefineRelatives) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DefineRelatives_Repeats_Marshal(m, pv)
	}
	return
}

type DefineRelatives_Flow struct{ ptr *DefineRelatives }

func (n DefineRelatives_Flow) GetType() string      { return DefineRelatives_Type }
func (n DefineRelatives_Flow) GetLede() string      { return "define" }
func (n DefineRelatives_Flow) GetFlow() interface{} { return n.ptr }
func (n DefineRelatives_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DefineRelatives); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DefineRelatives_Optional_Marshal(m jsn.Marshaler, pv **DefineRelatives) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DefineRelatives_Marshal(m, *pv)
	} else if !enc {
		var v DefineRelatives
		if err = DefineRelatives_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DefineRelatives_Marshal(m jsn.Marshaler, val *DefineRelatives) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DefineRelatives_Flow{val}); err == nil {
		e0 := m.MarshalKey("nouns", DefineRelatives_Field_Nouns)
		if e0 == nil {
			e0 = rt.TextListEval_Marshal(m, &val.Nouns)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DefineRelatives_Field_Nouns))
		}
		e1 := m.MarshalKey("as", DefineRelatives_Field_Kind)
		if e1 == nil {
			e1 = rt.TextEval_Optional_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DefineRelatives_Field_Kind))
		}
		e2 := m.MarshalKey("relation", DefineRelatives_Field_Relation)
		if e2 == nil {
			e2 = rt.TextEval_Marshal(m, &val.Relation)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", DefineRelatives_Field_Relation))
		}
		e3 := m.MarshalKey("noun", DefineRelatives_Field_OtherNoun)
		if e3 == nil {
			e3 = rt.TextEval_Marshal(m, &val.OtherNoun)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", DefineRelatives_Field_OtherNoun))
		}
		m.EndBlock()
	}
	return
}

// DefineTraits Add traits to an aspect
type DefineTraits struct {
	Traits rt.TextListEval `if:"label=traits"`
	Aspect rt.TextEval     `if:"label=aspect"`
	Markup map[string]any
}

// User implemented slots:
var _ StoryStatement = (*DefineTraits)(nil)

func (*DefineTraits) Compose() composer.Spec {
	return composer.Spec{
		Name: DefineTraits_Type,
		Uses: composer.Type_Flow,
		Lede: "define",
	}
}

const DefineTraits_Type = "define_traits"
const DefineTraits_Field_Traits = "$TRAITS"
const DefineTraits_Field_Aspect = "$ASPECT"

func (op *DefineTraits) Marshal(m jsn.Marshaler) error {
	return DefineTraits_Marshal(m, op)
}

type DefineTraits_Slice []DefineTraits

func (op *DefineTraits_Slice) GetType() string { return DefineTraits_Type }

func (op *DefineTraits_Slice) Marshal(m jsn.Marshaler) error {
	return DefineTraits_Repeats_Marshal(m, (*[]DefineTraits)(op))
}

func (op *DefineTraits_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DefineTraits_Slice) SetSize(cnt int) {
	var els []DefineTraits
	if cnt >= 0 {
		els = make(DefineTraits_Slice, cnt)
	}
	(*op) = els
}

func (op *DefineTraits_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DefineTraits_Marshal(m, &(*op)[i])
}

func DefineTraits_Repeats_Marshal(m jsn.Marshaler, vals *[]DefineTraits) error {
	return jsn.RepeatBlock(m, (*DefineTraits_Slice)(vals))
}

func DefineTraits_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DefineTraits) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DefineTraits_Repeats_Marshal(m, pv)
	}
	return
}

type DefineTraits_Flow struct{ ptr *DefineTraits }

func (n DefineTraits_Flow) GetType() string      { return DefineTraits_Type }
func (n DefineTraits_Flow) GetLede() string      { return "define" }
func (n DefineTraits_Flow) GetFlow() interface{} { return n.ptr }
func (n DefineTraits_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DefineTraits); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DefineTraits_Optional_Marshal(m jsn.Marshaler, pv **DefineTraits) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DefineTraits_Marshal(m, *pv)
	} else if !enc {
		var v DefineTraits
		if err = DefineTraits_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DefineTraits_Marshal(m jsn.Marshaler, val *DefineTraits) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DefineTraits_Flow{val}); err == nil {
		e0 := m.MarshalKey("traits", DefineTraits_Field_Traits)
		if e0 == nil {
			e0 = rt.TextListEval_Marshal(m, &val.Traits)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DefineTraits_Field_Traits))
		}
		e1 := m.MarshalKey("aspect", DefineTraits_Field_Aspect)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Aspect)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DefineTraits_Field_Aspect))
		}
		m.EndBlock()
	}
	return
}

// Determiner requires a predefined or user-specified string.
type Determiner struct {
	Str string
}

func (op *Determiner) String() string {
	return op.Str
}

const Determiner_A = "$A"
const Determiner_An = "$AN"
const Determiner_The = "$THE"
const Determiner_Our = "$OUR"

func (*Determiner) Compose() composer.Spec {
	return composer.Spec{
		Name:        Determiner_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
		Choices: []string{
			Determiner_A, Determiner_An, Determiner_The, Determiner_Our,
		},
		Strings: []string{
			"a", "an", "the", "our",
		},
	}
}

const Determiner_Type = "determiner"

func (op *Determiner) Marshal(m jsn.Marshaler) error {
	return Determiner_Marshal(m, op)
}

func Determiner_Optional_Marshal(m jsn.Marshaler, val *Determiner) (err error) {
	var zero Determiner
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Determiner_Marshal(m, val)
	}
	return
}

func Determiner_Marshal(m jsn.Marshaler, val *Determiner) (err error) {
	return m.MarshalValue(Determiner_Type, jsn.MakeEnum(val, &val.Str))
}

type Determiner_Slice []Determiner

func (op *Determiner_Slice) GetType() string { return Determiner_Type }

func (op *Determiner_Slice) Marshal(m jsn.Marshaler) error {
	return Determiner_Repeats_Marshal(m, (*[]Determiner)(op))
}

func (op *Determiner_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Determiner_Slice) SetSize(cnt int) {
	var els []Determiner
	if cnt >= 0 {
		els = make(Determiner_Slice, cnt)
	}
	(*op) = els
}

func (op *Determiner_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Determiner_Marshal(m, &(*op)[i])
}

func Determiner_Repeats_Marshal(m jsn.Marshaler, vals *[]Determiner) error {
	return jsn.RepeatBlock(m, (*Determiner_Slice)(vals))
}

func Determiner_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Determiner) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Determiner_Repeats_Marshal(m, pv)
	}
	return
}

// EventBlock Declare event listeners.
// Listeners let objects in the game world react to changes before, during, or after they happen.
type EventBlock struct {
	Target   EventTarget    `if:"label=_"`
	Handlers []EventHandler `if:"label=handlers"`
	Markup   map[string]any
}

// User implemented slots:
var _ StoryStatement = (*EventBlock)(nil)

func (*EventBlock) Compose() composer.Spec {
	return composer.Spec{
		Name: EventBlock_Type,
		Uses: composer.Type_Flow,
		Lede: "listen",
	}
}

const EventBlock_Type = "event_block"
const EventBlock_Field_Target = "$TARGET"
const EventBlock_Field_Handlers = "$HANDLERS"

func (op *EventBlock) Marshal(m jsn.Marshaler) error {
	return EventBlock_Marshal(m, op)
}

type EventBlock_Slice []EventBlock

func (op *EventBlock_Slice) GetType() string { return EventBlock_Type }

func (op *EventBlock_Slice) Marshal(m jsn.Marshaler) error {
	return EventBlock_Repeats_Marshal(m, (*[]EventBlock)(op))
}

func (op *EventBlock_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventBlock_Slice) SetSize(cnt int) {
	var els []EventBlock
	if cnt >= 0 {
		els = make(EventBlock_Slice, cnt)
	}
	(*op) = els
}

func (op *EventBlock_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventBlock_Marshal(m, &(*op)[i])
}

func EventBlock_Repeats_Marshal(m jsn.Marshaler, vals *[]EventBlock) error {
	return jsn.RepeatBlock(m, (*EventBlock_Slice)(vals))
}

func EventBlock_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventBlock) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = EventBlock_Repeats_Marshal(m, pv)
	}
	return
}

type EventBlock_Flow struct{ ptr *EventBlock }

func (n EventBlock_Flow) GetType() string      { return EventBlock_Type }
func (n EventBlock_Flow) GetLede() string      { return "listen" }
func (n EventBlock_Flow) GetFlow() interface{} { return n.ptr }
func (n EventBlock_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*EventBlock); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func EventBlock_Optional_Marshal(m jsn.Marshaler, pv **EventBlock) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = EventBlock_Marshal(m, *pv)
	} else if !enc {
		var v EventBlock
		if err = EventBlock_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func EventBlock_Marshal(m jsn.Marshaler, val *EventBlock) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(EventBlock_Flow{val}); err == nil {
		e0 := m.MarshalKey("", EventBlock_Field_Target)
		if e0 == nil {
			e0 = EventTarget_Marshal(m, &val.Target)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", EventBlock_Field_Target))
		}
		e1 := m.MarshalKey("handlers", EventBlock_Field_Handlers)
		if e1 == nil {
			e1 = EventHandler_Repeats_Marshal(m, &val.Handlers)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", EventBlock_Field_Handlers))
		}
		m.EndBlock()
	}
	return
}

// EventHandler
type EventHandler struct {
	EventPhase EventPhase    `if:"label=_"`
	Event      EventName     `if:"label=event"`
	Locals     []Field       `if:"label=provides,optional"`
	Rules      []PatternRule `if:"label=rules"`
	Markup     map[string]any
}

func (*EventHandler) Compose() composer.Spec {
	return composer.Spec{
		Name: EventHandler_Type,
		Uses: composer.Type_Flow,
		Lede: "with",
	}
}

const EventHandler_Type = "event_handler"
const EventHandler_Field_EventPhase = "$EVENT_PHASE"
const EventHandler_Field_Event = "$EVENT"
const EventHandler_Field_Locals = "$LOCALS"
const EventHandler_Field_Rules = "$RULES"

func (op *EventHandler) Marshal(m jsn.Marshaler) error {
	return EventHandler_Marshal(m, op)
}

type EventHandler_Slice []EventHandler

func (op *EventHandler_Slice) GetType() string { return EventHandler_Type }

func (op *EventHandler_Slice) Marshal(m jsn.Marshaler) error {
	return EventHandler_Repeats_Marshal(m, (*[]EventHandler)(op))
}

func (op *EventHandler_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventHandler_Slice) SetSize(cnt int) {
	var els []EventHandler
	if cnt >= 0 {
		els = make(EventHandler_Slice, cnt)
	}
	(*op) = els
}

func (op *EventHandler_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventHandler_Marshal(m, &(*op)[i])
}

func EventHandler_Repeats_Marshal(m jsn.Marshaler, vals *[]EventHandler) error {
	return jsn.RepeatBlock(m, (*EventHandler_Slice)(vals))
}

func EventHandler_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventHandler) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = EventHandler_Repeats_Marshal(m, pv)
	}
	return
}

type EventHandler_Flow struct{ ptr *EventHandler }

func (n EventHandler_Flow) GetType() string      { return EventHandler_Type }
func (n EventHandler_Flow) GetLede() string      { return "with" }
func (n EventHandler_Flow) GetFlow() interface{} { return n.ptr }
func (n EventHandler_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*EventHandler); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func EventHandler_Optional_Marshal(m jsn.Marshaler, pv **EventHandler) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = EventHandler_Marshal(m, *pv)
	} else if !enc {
		var v EventHandler
		if err = EventHandler_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func EventHandler_Marshal(m jsn.Marshaler, val *EventHandler) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(EventHandler_Flow{val}); err == nil {
		e0 := m.MarshalKey("", EventHandler_Field_EventPhase)
		if e0 == nil {
			e0 = EventPhase_Marshal(m, &val.EventPhase)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", EventHandler_Field_EventPhase))
		}
		e1 := m.MarshalKey("event", EventHandler_Field_Event)
		if e1 == nil {
			e1 = EventName_Marshal(m, &val.Event)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", EventHandler_Field_Event))
		}
		e2 := m.MarshalKey("provides", EventHandler_Field_Locals)
		if e2 == nil {
			e2 = Field_Optional_Repeats_Marshal(m, &val.Locals)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", EventHandler_Field_Locals))
		}
		e3 := m.MarshalKey("rules", EventHandler_Field_Rules)
		if e3 == nil {
			e3 = PatternRule_Repeats_Marshal(m, &val.Rules)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", EventHandler_Field_Rules))
		}
		m.EndBlock()
	}
	return
}

// EventName requires a user-specified string.
type EventName struct {
	Str string
}

func (op *EventName) String() string {
	return op.Str
}

func (*EventName) Compose() composer.Spec {
	return composer.Spec{
		Name:        EventName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const EventName_Type = "event_name"

func (op *EventName) Marshal(m jsn.Marshaler) error {
	return EventName_Marshal(m, op)
}

func EventName_Optional_Marshal(m jsn.Marshaler, val *EventName) (err error) {
	var zero EventName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = EventName_Marshal(m, val)
	}
	return
}

func EventName_Marshal(m jsn.Marshaler, val *EventName) (err error) {
	return m.MarshalValue(EventName_Type, &val.Str)
}

type EventName_Slice []EventName

func (op *EventName_Slice) GetType() string { return EventName_Type }

func (op *EventName_Slice) Marshal(m jsn.Marshaler) error {
	return EventName_Repeats_Marshal(m, (*[]EventName)(op))
}

func (op *EventName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventName_Slice) SetSize(cnt int) {
	var els []EventName
	if cnt >= 0 {
		els = make(EventName_Slice, cnt)
	}
	(*op) = els
}

func (op *EventName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventName_Marshal(m, &(*op)[i])
}

func EventName_Repeats_Marshal(m jsn.Marshaler, vals *[]EventName) error {
	return jsn.RepeatBlock(m, (*EventName_Slice)(vals))
}

func EventName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventName) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = EventName_Repeats_Marshal(m, pv)
	}
	return
}

// EventPhase requires a predefined string.
type EventPhase struct {
	Str string
}

func (op *EventPhase) String() string {
	return op.Str
}

const EventPhase_Before = "$BEFORE"
const EventPhase_While = "$WHILE"
const EventPhase_After = "$AFTER"

func (*EventPhase) Compose() composer.Spec {
	return composer.Spec{
		Name: EventPhase_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			EventPhase_Before, EventPhase_While, EventPhase_After,
		},
		Strings: []string{
			"before", "while", "after",
		},
	}
}

const EventPhase_Type = "event_phase"

func (op *EventPhase) Marshal(m jsn.Marshaler) error {
	return EventPhase_Marshal(m, op)
}

func EventPhase_Optional_Marshal(m jsn.Marshaler, val *EventPhase) (err error) {
	var zero EventPhase
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = EventPhase_Marshal(m, val)
	}
	return
}

func EventPhase_Marshal(m jsn.Marshaler, val *EventPhase) (err error) {
	return m.MarshalValue(EventPhase_Type, jsn.MakeEnum(val, &val.Str))
}

type EventPhase_Slice []EventPhase

func (op *EventPhase_Slice) GetType() string { return EventPhase_Type }

func (op *EventPhase_Slice) Marshal(m jsn.Marshaler) error {
	return EventPhase_Repeats_Marshal(m, (*[]EventPhase)(op))
}

func (op *EventPhase_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventPhase_Slice) SetSize(cnt int) {
	var els []EventPhase
	if cnt >= 0 {
		els = make(EventPhase_Slice, cnt)
	}
	(*op) = els
}

func (op *EventPhase_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventPhase_Marshal(m, &(*op)[i])
}

func EventPhase_Repeats_Marshal(m jsn.Marshaler, vals *[]EventPhase) error {
	return jsn.RepeatBlock(m, (*EventPhase_Slice)(vals))
}

func EventPhase_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventPhase) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = EventPhase_Repeats_Marshal(m, pv)
	}
	return
}

// EventTarget swaps between various options
type EventTarget struct {
	Choice string
	Value  interface{}
}

var EventTarget_Optional_Marshal = EventTarget_Marshal

const EventTarget_Kinds_Opt = "$KINDS"
const EventTarget_Noun_Opt = "$NOUN"

func (*EventTarget) Compose() composer.Spec {
	return composer.Spec{
		Name: EventTarget_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			EventTarget_Kinds_Opt, EventTarget_Noun_Opt,
		},
		Swaps: []interface{}{
			(*PluralKinds)(nil),
			(*SingularNoun)(nil),
		},
	}
}

const EventTarget_Type = "event_target"

func (op *EventTarget) GetType() string { return EventTarget_Type }

func (op *EventTarget) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *EventTarget) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case EventTarget_Kinds_Opt:
		op.Choice, op.Value = c, new(PluralKinds)
		okay = true
	case EventTarget_Noun_Opt:
		op.Choice, op.Value = c, new(SingularNoun)
		okay = true
	}
	return
}

func (op *EventTarget) Marshal(m jsn.Marshaler) error {
	return EventTarget_Marshal(m, op)
}
func EventTarget_Marshal(m jsn.Marshaler, val *EventTarget) (err error) {
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type EventTarget_Slice []EventTarget

func (op *EventTarget_Slice) GetType() string { return EventTarget_Type }

func (op *EventTarget_Slice) Marshal(m jsn.Marshaler) error {
	return EventTarget_Repeats_Marshal(m, (*[]EventTarget)(op))
}

func (op *EventTarget_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *EventTarget_Slice) SetSize(cnt int) {
	var els []EventTarget
	if cnt >= 0 {
		els = make(EventTarget_Slice, cnt)
	}
	(*op) = els
}

func (op *EventTarget_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return EventTarget_Marshal(m, &(*op)[i])
}

func EventTarget_Repeats_Marshal(m jsn.Marshaler, vals *[]EventTarget) error {
	return jsn.RepeatBlock(m, (*EventTarget_Slice)(vals))
}

func EventTarget_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]EventTarget) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = EventTarget_Repeats_Marshal(m, pv)
	}
	return
}

const Field_Type = "field"

var Field_Optional_Marshal = Field_Marshal

type Field_Slot struct{ Value *Field }

func (at Field_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Field_Slot) GetType() string              { return Field_Type }
func (at Field_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Field_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Field)
	return
}

func Field_Marshal(m jsn.Marshaler, ptr *Field) (err error) {
	slot := Field_Slot{ptr}
	return slot.Marshal(m)
}

type Field_Slice []Field

func (op *Field_Slice) GetType() string { return Field_Type }

func (op *Field_Slice) Marshal(m jsn.Marshaler) error {
	return Field_Repeats_Marshal(m, (*[]Field)(op))
}

func (op *Field_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Field_Slice) SetSize(cnt int) {
	var els []Field
	if cnt >= 0 {
		els = make(Field_Slice, cnt)
	}
	(*op) = els
}

func (op *Field_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Field_Marshal(m, &(*op)[i])
}

func Field_Repeats_Marshal(m jsn.Marshaler, vals *[]Field) error {
	return jsn.RepeatBlock(m, (*Field_Slice)(vals))
}

func Field_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Field) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Field_Repeats_Marshal(m, pv)
	}
	return
}

// GrammarDecl Read what the player types and turn it into actions.
type GrammarDecl struct {
	Grammar grammar.GrammarMaker `if:"label=_"`
	Markup  map[string]any
}

// User implemented slots:
var _ StoryStatement = (*GrammarDecl)(nil)

func (*GrammarDecl) Compose() composer.Spec {
	return composer.Spec{
		Name: GrammarDecl_Type,
		Uses: composer.Type_Flow,
	}
}

const GrammarDecl_Type = "grammar_decl"
const GrammarDecl_Field_Grammar = "$GRAMMAR"

func (op *GrammarDecl) Marshal(m jsn.Marshaler) error {
	return GrammarDecl_Marshal(m, op)
}

type GrammarDecl_Slice []GrammarDecl

func (op *GrammarDecl_Slice) GetType() string { return GrammarDecl_Type }

func (op *GrammarDecl_Slice) Marshal(m jsn.Marshaler) error {
	return GrammarDecl_Repeats_Marshal(m, (*[]GrammarDecl)(op))
}

func (op *GrammarDecl_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *GrammarDecl_Slice) SetSize(cnt int) {
	var els []GrammarDecl
	if cnt >= 0 {
		els = make(GrammarDecl_Slice, cnt)
	}
	(*op) = els
}

func (op *GrammarDecl_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return GrammarDecl_Marshal(m, &(*op)[i])
}

func GrammarDecl_Repeats_Marshal(m jsn.Marshaler, vals *[]GrammarDecl) error {
	return jsn.RepeatBlock(m, (*GrammarDecl_Slice)(vals))
}

func GrammarDecl_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]GrammarDecl) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = GrammarDecl_Repeats_Marshal(m, pv)
	}
	return
}

type GrammarDecl_Flow struct{ ptr *GrammarDecl }

func (n GrammarDecl_Flow) GetType() string      { return GrammarDecl_Type }
func (n GrammarDecl_Flow) GetLede() string      { return GrammarDecl_Type }
func (n GrammarDecl_Flow) GetFlow() interface{} { return n.ptr }
func (n GrammarDecl_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*GrammarDecl); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func GrammarDecl_Optional_Marshal(m jsn.Marshaler, pv **GrammarDecl) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = GrammarDecl_Marshal(m, *pv)
	} else if !enc {
		var v GrammarDecl
		if err = GrammarDecl_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func GrammarDecl_Marshal(m jsn.Marshaler, val *GrammarDecl) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(GrammarDecl_Flow{val}); err == nil {
		e0 := m.MarshalKey("", GrammarDecl_Field_Grammar)
		if e0 == nil {
			e0 = grammar.GrammarMaker_Marshal(m, &val.Grammar)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", GrammarDecl_Field_Grammar))
		}
		m.EndBlock()
	}
	return
}

// KindOfRelation
type KindOfRelation struct {
	Relation    rel.RelationName    `if:"label=_"`
	Cardinality RelationCardinality `if:"label=cardinality"`
	Markup      map[string]any
}

// User implemented slots:
var _ StoryStatement = (*KindOfRelation)(nil)

func (*KindOfRelation) Compose() composer.Spec {
	return composer.Spec{
		Name: KindOfRelation_Type,
		Uses: composer.Type_Flow,
	}
}

const KindOfRelation_Type = "kind_of_relation"
const KindOfRelation_Field_Relation = "$RELATION"
const KindOfRelation_Field_Cardinality = "$CARDINALITY"

func (op *KindOfRelation) Marshal(m jsn.Marshaler) error {
	return KindOfRelation_Marshal(m, op)
}

type KindOfRelation_Slice []KindOfRelation

func (op *KindOfRelation_Slice) GetType() string { return KindOfRelation_Type }

func (op *KindOfRelation_Slice) Marshal(m jsn.Marshaler) error {
	return KindOfRelation_Repeats_Marshal(m, (*[]KindOfRelation)(op))
}

func (op *KindOfRelation_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *KindOfRelation_Slice) SetSize(cnt int) {
	var els []KindOfRelation
	if cnt >= 0 {
		els = make(KindOfRelation_Slice, cnt)
	}
	(*op) = els
}

func (op *KindOfRelation_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return KindOfRelation_Marshal(m, &(*op)[i])
}

func KindOfRelation_Repeats_Marshal(m jsn.Marshaler, vals *[]KindOfRelation) error {
	return jsn.RepeatBlock(m, (*KindOfRelation_Slice)(vals))
}

func KindOfRelation_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]KindOfRelation) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = KindOfRelation_Repeats_Marshal(m, pv)
	}
	return
}

type KindOfRelation_Flow struct{ ptr *KindOfRelation }

func (n KindOfRelation_Flow) GetType() string      { return KindOfRelation_Type }
func (n KindOfRelation_Flow) GetLede() string      { return KindOfRelation_Type }
func (n KindOfRelation_Flow) GetFlow() interface{} { return n.ptr }
func (n KindOfRelation_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*KindOfRelation); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func KindOfRelation_Optional_Marshal(m jsn.Marshaler, pv **KindOfRelation) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = KindOfRelation_Marshal(m, *pv)
	} else if !enc {
		var v KindOfRelation
		if err = KindOfRelation_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func KindOfRelation_Marshal(m jsn.Marshaler, val *KindOfRelation) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(KindOfRelation_Flow{val}); err == nil {
		e0 := m.MarshalKey("", KindOfRelation_Field_Relation)
		if e0 == nil {
			e0 = rel.RelationName_Marshal(m, &val.Relation)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", KindOfRelation_Field_Relation))
		}
		e1 := m.MarshalKey("cardinality", KindOfRelation_Field_Cardinality)
		if e1 == nil {
			e1 = RelationCardinality_Marshal(m, &val.Cardinality)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", KindOfRelation_Field_Cardinality))
		}
		m.EndBlock()
	}
	return
}

// MakeOpposite The opposite of east is west.
type MakeOpposite struct {
	Word     string `if:"label=_,type=text"`
	Opposite string `if:"label=opposite,type=text"`
	Markup   map[string]any
}

// User implemented slots:
var _ StoryStatement = (*MakeOpposite)(nil)

func (*MakeOpposite) Compose() composer.Spec {
	return composer.Spec{
		Name: MakeOpposite_Type,
		Uses: composer.Type_Flow,
		Lede: "make",
	}
}

const MakeOpposite_Type = "make_opposite"
const MakeOpposite_Field_Word = "$WORD"
const MakeOpposite_Field_Opposite = "$OPPOSITE"

func (op *MakeOpposite) Marshal(m jsn.Marshaler) error {
	return MakeOpposite_Marshal(m, op)
}

type MakeOpposite_Slice []MakeOpposite

func (op *MakeOpposite_Slice) GetType() string { return MakeOpposite_Type }

func (op *MakeOpposite_Slice) Marshal(m jsn.Marshaler) error {
	return MakeOpposite_Repeats_Marshal(m, (*[]MakeOpposite)(op))
}

func (op *MakeOpposite_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakeOpposite_Slice) SetSize(cnt int) {
	var els []MakeOpposite
	if cnt >= 0 {
		els = make(MakeOpposite_Slice, cnt)
	}
	(*op) = els
}

func (op *MakeOpposite_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakeOpposite_Marshal(m, &(*op)[i])
}

func MakeOpposite_Repeats_Marshal(m jsn.Marshaler, vals *[]MakeOpposite) error {
	return jsn.RepeatBlock(m, (*MakeOpposite_Slice)(vals))
}

func MakeOpposite_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakeOpposite) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakeOpposite_Repeats_Marshal(m, pv)
	}
	return
}

type MakeOpposite_Flow struct{ ptr *MakeOpposite }

func (n MakeOpposite_Flow) GetType() string      { return MakeOpposite_Type }
func (n MakeOpposite_Flow) GetLede() string      { return "make" }
func (n MakeOpposite_Flow) GetFlow() interface{} { return n.ptr }
func (n MakeOpposite_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakeOpposite); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakeOpposite_Optional_Marshal(m jsn.Marshaler, pv **MakeOpposite) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakeOpposite_Marshal(m, *pv)
	} else if !enc {
		var v MakeOpposite
		if err = MakeOpposite_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakeOpposite_Marshal(m jsn.Marshaler, val *MakeOpposite) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakeOpposite_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakeOpposite_Field_Word)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Word)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakeOpposite_Field_Word))
		}
		e1 := m.MarshalKey("opposite", MakeOpposite_Field_Opposite)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Marshal(m, &val.Opposite)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", MakeOpposite_Field_Opposite))
		}
		m.EndBlock()
	}
	return
}

// MakePlural The plural of person is people.
// The plural of person is persons.
type MakePlural struct {
	Singular string `if:"label=_,type=text"`
	Plural   string `if:"label=plural,type=text"`
	Markup   map[string]any
}

// User implemented slots:
var _ StoryStatement = (*MakePlural)(nil)

func (*MakePlural) Compose() composer.Spec {
	return composer.Spec{
		Name: MakePlural_Type,
		Uses: composer.Type_Flow,
		Lede: "make",
	}
}

const MakePlural_Type = "make_plural"
const MakePlural_Field_Singular = "$SINGULAR"
const MakePlural_Field_Plural = "$PLURAL"

func (op *MakePlural) Marshal(m jsn.Marshaler) error {
	return MakePlural_Marshal(m, op)
}

type MakePlural_Slice []MakePlural

func (op *MakePlural_Slice) GetType() string { return MakePlural_Type }

func (op *MakePlural_Slice) Marshal(m jsn.Marshaler) error {
	return MakePlural_Repeats_Marshal(m, (*[]MakePlural)(op))
}

func (op *MakePlural_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MakePlural_Slice) SetSize(cnt int) {
	var els []MakePlural
	if cnt >= 0 {
		els = make(MakePlural_Slice, cnt)
	}
	(*op) = els
}

func (op *MakePlural_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MakePlural_Marshal(m, &(*op)[i])
}

func MakePlural_Repeats_Marshal(m jsn.Marshaler, vals *[]MakePlural) error {
	return jsn.RepeatBlock(m, (*MakePlural_Slice)(vals))
}

func MakePlural_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MakePlural) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MakePlural_Repeats_Marshal(m, pv)
	}
	return
}

type MakePlural_Flow struct{ ptr *MakePlural }

func (n MakePlural_Flow) GetType() string      { return MakePlural_Type }
func (n MakePlural_Flow) GetLede() string      { return "make" }
func (n MakePlural_Flow) GetFlow() interface{} { return n.ptr }
func (n MakePlural_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MakePlural); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MakePlural_Optional_Marshal(m jsn.Marshaler, pv **MakePlural) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MakePlural_Marshal(m, *pv)
	} else if !enc {
		var v MakePlural
		if err = MakePlural_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MakePlural_Marshal(m jsn.Marshaler, val *MakePlural) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MakePlural_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MakePlural_Field_Singular)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Singular)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MakePlural_Field_Singular))
		}
		e1 := m.MarshalKey("plural", MakePlural_Field_Plural)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Marshal(m, &val.Plural)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", MakePlural_Field_Plural))
		}
		m.EndBlock()
	}
	return
}

// ManyToMany
type ManyToMany struct {
	Kinds      PluralKinds `if:"label=_"`
	OtherKinds PluralKinds `if:"label=other_kinds"`
	Markup     map[string]any
}

func (*ManyToMany) Compose() composer.Spec {
	return composer.Spec{
		Name: ManyToMany_Type,
		Uses: composer.Type_Flow,
	}
}

const ManyToMany_Type = "many_to_many"
const ManyToMany_Field_Kinds = "$KINDS"
const ManyToMany_Field_OtherKinds = "$OTHER_KINDS"

func (op *ManyToMany) Marshal(m jsn.Marshaler) error {
	return ManyToMany_Marshal(m, op)
}

type ManyToMany_Slice []ManyToMany

func (op *ManyToMany_Slice) GetType() string { return ManyToMany_Type }

func (op *ManyToMany_Slice) Marshal(m jsn.Marshaler) error {
	return ManyToMany_Repeats_Marshal(m, (*[]ManyToMany)(op))
}

func (op *ManyToMany_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ManyToMany_Slice) SetSize(cnt int) {
	var els []ManyToMany
	if cnt >= 0 {
		els = make(ManyToMany_Slice, cnt)
	}
	(*op) = els
}

func (op *ManyToMany_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ManyToMany_Marshal(m, &(*op)[i])
}

func ManyToMany_Repeats_Marshal(m jsn.Marshaler, vals *[]ManyToMany) error {
	return jsn.RepeatBlock(m, (*ManyToMany_Slice)(vals))
}

func ManyToMany_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ManyToMany) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ManyToMany_Repeats_Marshal(m, pv)
	}
	return
}

type ManyToMany_Flow struct{ ptr *ManyToMany }

func (n ManyToMany_Flow) GetType() string      { return ManyToMany_Type }
func (n ManyToMany_Flow) GetLede() string      { return ManyToMany_Type }
func (n ManyToMany_Flow) GetFlow() interface{} { return n.ptr }
func (n ManyToMany_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ManyToMany); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ManyToMany_Optional_Marshal(m jsn.Marshaler, pv **ManyToMany) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ManyToMany_Marshal(m, *pv)
	} else if !enc {
		var v ManyToMany
		if err = ManyToMany_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ManyToMany_Marshal(m jsn.Marshaler, val *ManyToMany) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ManyToMany_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ManyToMany_Field_Kinds)
		if e0 == nil {
			e0 = PluralKinds_Marshal(m, &val.Kinds)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ManyToMany_Field_Kinds))
		}
		e1 := m.MarshalKey("other_kinds", ManyToMany_Field_OtherKinds)
		if e1 == nil {
			e1 = PluralKinds_Marshal(m, &val.OtherKinds)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ManyToMany_Field_OtherKinds))
		}
		m.EndBlock()
	}
	return
}

// ManyToOne
type ManyToOne struct {
	Kinds  PluralKinds  `if:"label=_"`
	Kind   SingularKind `if:"label=kind"`
	Markup map[string]any
}

func (*ManyToOne) Compose() composer.Spec {
	return composer.Spec{
		Name: ManyToOne_Type,
		Uses: composer.Type_Flow,
	}
}

const ManyToOne_Type = "many_to_one"
const ManyToOne_Field_Kinds = "$KINDS"
const ManyToOne_Field_Kind = "$KIND"

func (op *ManyToOne) Marshal(m jsn.Marshaler) error {
	return ManyToOne_Marshal(m, op)
}

type ManyToOne_Slice []ManyToOne

func (op *ManyToOne_Slice) GetType() string { return ManyToOne_Type }

func (op *ManyToOne_Slice) Marshal(m jsn.Marshaler) error {
	return ManyToOne_Repeats_Marshal(m, (*[]ManyToOne)(op))
}

func (op *ManyToOne_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ManyToOne_Slice) SetSize(cnt int) {
	var els []ManyToOne
	if cnt >= 0 {
		els = make(ManyToOne_Slice, cnt)
	}
	(*op) = els
}

func (op *ManyToOne_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ManyToOne_Marshal(m, &(*op)[i])
}

func ManyToOne_Repeats_Marshal(m jsn.Marshaler, vals *[]ManyToOne) error {
	return jsn.RepeatBlock(m, (*ManyToOne_Slice)(vals))
}

func ManyToOne_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ManyToOne) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ManyToOne_Repeats_Marshal(m, pv)
	}
	return
}

type ManyToOne_Flow struct{ ptr *ManyToOne }

func (n ManyToOne_Flow) GetType() string      { return ManyToOne_Type }
func (n ManyToOne_Flow) GetLede() string      { return ManyToOne_Type }
func (n ManyToOne_Flow) GetFlow() interface{} { return n.ptr }
func (n ManyToOne_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ManyToOne); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ManyToOne_Optional_Marshal(m jsn.Marshaler, pv **ManyToOne) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ManyToOne_Marshal(m, *pv)
	} else if !enc {
		var v ManyToOne
		if err = ManyToOne_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ManyToOne_Marshal(m jsn.Marshaler, val *ManyToOne) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ManyToOne_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ManyToOne_Field_Kinds)
		if e0 == nil {
			e0 = PluralKinds_Marshal(m, &val.Kinds)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ManyToOne_Field_Kinds))
		}
		e1 := m.MarshalKey("kind", ManyToOne_Field_Kind)
		if e1 == nil {
			e1 = SingularKind_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ManyToOne_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// MapConnection requires a predefined string.
type MapConnection struct {
	Str string
}

func (op *MapConnection) String() string {
	return op.Str
}

const MapConnection_ArrivingAt = "$ARRIVING_AT"
const MapConnection_ConnectingTo = "$CONNECTING_TO"

func (*MapConnection) Compose() composer.Spec {
	return composer.Spec{
		Name: MapConnection_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			MapConnection_ArrivingAt, MapConnection_ConnectingTo,
		},
		Strings: []string{
			"arriving_at", "connecting_to",
		},
	}
}

const MapConnection_Type = "map_connection"

func (op *MapConnection) Marshal(m jsn.Marshaler) error {
	return MapConnection_Marshal(m, op)
}

func MapConnection_Optional_Marshal(m jsn.Marshaler, val *MapConnection) (err error) {
	var zero MapConnection
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = MapConnection_Marshal(m, val)
	}
	return
}

func MapConnection_Marshal(m jsn.Marshaler, val *MapConnection) (err error) {
	return m.MarshalValue(MapConnection_Type, jsn.MakeEnum(val, &val.Str))
}

type MapConnection_Slice []MapConnection

func (op *MapConnection_Slice) GetType() string { return MapConnection_Type }

func (op *MapConnection_Slice) Marshal(m jsn.Marshaler) error {
	return MapConnection_Repeats_Marshal(m, (*[]MapConnection)(op))
}

func (op *MapConnection_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MapConnection_Slice) SetSize(cnt int) {
	var els []MapConnection
	if cnt >= 0 {
		els = make(MapConnection_Slice, cnt)
	}
	(*op) = els
}

func (op *MapConnection_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MapConnection_Marshal(m, &(*op)[i])
}

func MapConnection_Repeats_Marshal(m jsn.Marshaler, vals *[]MapConnection) error {
	return jsn.RepeatBlock(m, (*MapConnection_Slice)(vals))
}

func MapConnection_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MapConnection) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MapConnection_Repeats_Marshal(m, pv)
	}
	return
}

// MapDeparting Leaving a room by by going through a door ( ex. departing the house via the front door... ).
type MapDeparting struct {
	Room          SingularNoun  `if:"label=from"`
	Door          SingularNoun  `if:"label=via"`
	MapConnection MapConnection `if:"label=and"`
	OtherRoom     SingularNoun  `if:"label=other_room"`
	Markup        map[string]any
}

// User implemented slots:
var _ StoryStatement = (*MapDeparting)(nil)

func (*MapDeparting) Compose() composer.Spec {
	return composer.Spec{
		Name: MapDeparting_Type,
		Uses: composer.Type_Flow,
		Lede: "departing",
	}
}

const MapDeparting_Type = "map_departing"
const MapDeparting_Field_Room = "$ROOM"
const MapDeparting_Field_Door = "$DOOR"
const MapDeparting_Field_MapConnection = "$MAP_CONNECTION"
const MapDeparting_Field_OtherRoom = "$OTHER_ROOM"

func (op *MapDeparting) Marshal(m jsn.Marshaler) error {
	return MapDeparting_Marshal(m, op)
}

type MapDeparting_Slice []MapDeparting

func (op *MapDeparting_Slice) GetType() string { return MapDeparting_Type }

func (op *MapDeparting_Slice) Marshal(m jsn.Marshaler) error {
	return MapDeparting_Repeats_Marshal(m, (*[]MapDeparting)(op))
}

func (op *MapDeparting_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MapDeparting_Slice) SetSize(cnt int) {
	var els []MapDeparting
	if cnt >= 0 {
		els = make(MapDeparting_Slice, cnt)
	}
	(*op) = els
}

func (op *MapDeparting_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MapDeparting_Marshal(m, &(*op)[i])
}

func MapDeparting_Repeats_Marshal(m jsn.Marshaler, vals *[]MapDeparting) error {
	return jsn.RepeatBlock(m, (*MapDeparting_Slice)(vals))
}

func MapDeparting_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MapDeparting) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MapDeparting_Repeats_Marshal(m, pv)
	}
	return
}

type MapDeparting_Flow struct{ ptr *MapDeparting }

func (n MapDeparting_Flow) GetType() string      { return MapDeparting_Type }
func (n MapDeparting_Flow) GetLede() string      { return "departing" }
func (n MapDeparting_Flow) GetFlow() interface{} { return n.ptr }
func (n MapDeparting_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MapDeparting); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MapDeparting_Optional_Marshal(m jsn.Marshaler, pv **MapDeparting) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MapDeparting_Marshal(m, *pv)
	} else if !enc {
		var v MapDeparting
		if err = MapDeparting_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MapDeparting_Marshal(m jsn.Marshaler, val *MapDeparting) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MapDeparting_Flow{val}); err == nil {
		e0 := m.MarshalKey("from", MapDeparting_Field_Room)
		if e0 == nil {
			e0 = SingularNoun_Marshal(m, &val.Room)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MapDeparting_Field_Room))
		}
		e1 := m.MarshalKey("via", MapDeparting_Field_Door)
		if e1 == nil {
			e1 = SingularNoun_Marshal(m, &val.Door)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", MapDeparting_Field_Door))
		}
		e2 := m.MarshalKey("and", MapDeparting_Field_MapConnection)
		if e2 == nil {
			e2 = MapConnection_Marshal(m, &val.MapConnection)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", MapDeparting_Field_MapConnection))
		}
		e3 := m.MarshalKey("other_room", MapDeparting_Field_OtherRoom)
		if e3 == nil {
			e3 = SingularNoun_Marshal(m, &val.OtherRoom)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", MapDeparting_Field_OtherRoom))
		}
		m.EndBlock()
	}
	return
}

// MapDirection requires a user-specified string.
type MapDirection struct {
	Str string
}

func (op *MapDirection) String() string {
	return op.Str
}

func (*MapDirection) Compose() composer.Spec {
	return composer.Spec{
		Name:        MapDirection_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const MapDirection_Type = "map_direction"

func (op *MapDirection) Marshal(m jsn.Marshaler) error {
	return MapDirection_Marshal(m, op)
}

func MapDirection_Optional_Marshal(m jsn.Marshaler, val *MapDirection) (err error) {
	var zero MapDirection
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = MapDirection_Marshal(m, val)
	}
	return
}

func MapDirection_Marshal(m jsn.Marshaler, val *MapDirection) (err error) {
	return m.MarshalValue(MapDirection_Type, &val.Str)
}

type MapDirection_Slice []MapDirection

func (op *MapDirection_Slice) GetType() string { return MapDirection_Type }

func (op *MapDirection_Slice) Marshal(m jsn.Marshaler) error {
	return MapDirection_Repeats_Marshal(m, (*[]MapDirection)(op))
}

func (op *MapDirection_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MapDirection_Slice) SetSize(cnt int) {
	var els []MapDirection
	if cnt >= 0 {
		els = make(MapDirection_Slice, cnt)
	}
	(*op) = els
}

func (op *MapDirection_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MapDirection_Marshal(m, &(*op)[i])
}

func MapDirection_Repeats_Marshal(m jsn.Marshaler, vals *[]MapDirection) error {
	return jsn.RepeatBlock(m, (*MapDirection_Slice)(vals))
}

func MapDirection_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MapDirection) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MapDirection_Repeats_Marshal(m, pv)
	}
	return
}

// MapHeading Leaving a room by moving in a compass direction ( ex. heading east... ).
type MapHeading struct {
	Dir           MapDirection  `if:"label=_"`
	Room          SingularNoun  `if:"label=from"`
	Door          SingularNoun  `if:"label=via,optional"`
	MapConnection MapConnection `if:"label=and"`
	OtherRoom     SingularNoun  `if:"label=other_room"`
	Markup        map[string]any
}

// User implemented slots:
var _ StoryStatement = (*MapHeading)(nil)

func (*MapHeading) Compose() composer.Spec {
	return composer.Spec{
		Name: MapHeading_Type,
		Uses: composer.Type_Flow,
		Lede: "heading",
	}
}

const MapHeading_Type = "map_heading"
const MapHeading_Field_Dir = "$DIR"
const MapHeading_Field_Room = "$ROOM"
const MapHeading_Field_Door = "$DOOR"
const MapHeading_Field_MapConnection = "$MAP_CONNECTION"
const MapHeading_Field_OtherRoom = "$OTHER_ROOM"

func (op *MapHeading) Marshal(m jsn.Marshaler) error {
	return MapHeading_Marshal(m, op)
}

type MapHeading_Slice []MapHeading

func (op *MapHeading_Slice) GetType() string { return MapHeading_Type }

func (op *MapHeading_Slice) Marshal(m jsn.Marshaler) error {
	return MapHeading_Repeats_Marshal(m, (*[]MapHeading)(op))
}

func (op *MapHeading_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *MapHeading_Slice) SetSize(cnt int) {
	var els []MapHeading
	if cnt >= 0 {
		els = make(MapHeading_Slice, cnt)
	}
	(*op) = els
}

func (op *MapHeading_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return MapHeading_Marshal(m, &(*op)[i])
}

func MapHeading_Repeats_Marshal(m jsn.Marshaler, vals *[]MapHeading) error {
	return jsn.RepeatBlock(m, (*MapHeading_Slice)(vals))
}

func MapHeading_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]MapHeading) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = MapHeading_Repeats_Marshal(m, pv)
	}
	return
}

type MapHeading_Flow struct{ ptr *MapHeading }

func (n MapHeading_Flow) GetType() string      { return MapHeading_Type }
func (n MapHeading_Flow) GetLede() string      { return "heading" }
func (n MapHeading_Flow) GetFlow() interface{} { return n.ptr }
func (n MapHeading_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*MapHeading); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func MapHeading_Optional_Marshal(m jsn.Marshaler, pv **MapHeading) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = MapHeading_Marshal(m, *pv)
	} else if !enc {
		var v MapHeading
		if err = MapHeading_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func MapHeading_Marshal(m jsn.Marshaler, val *MapHeading) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(MapHeading_Flow{val}); err == nil {
		e0 := m.MarshalKey("", MapHeading_Field_Dir)
		if e0 == nil {
			e0 = MapDirection_Marshal(m, &val.Dir)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", MapHeading_Field_Dir))
		}
		e1 := m.MarshalKey("from", MapHeading_Field_Room)
		if e1 == nil {
			e1 = SingularNoun_Marshal(m, &val.Room)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", MapHeading_Field_Room))
		}
		e2 := m.MarshalKey("via", MapHeading_Field_Door)
		if e2 == nil {
			e2 = SingularNoun_Optional_Marshal(m, &val.Door)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", MapHeading_Field_Door))
		}
		e3 := m.MarshalKey("and", MapHeading_Field_MapConnection)
		if e3 == nil {
			e3 = MapConnection_Marshal(m, &val.MapConnection)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", MapHeading_Field_MapConnection))
		}
		e4 := m.MarshalKey("other_room", MapHeading_Field_OtherRoom)
		if e4 == nil {
			e4 = SingularNoun_Marshal(m, &val.OtherRoom)
		}
		if e4 != nil && e4 != jsn.Missing {
			m.Error(errutil.New(e4, "in flow at", MapHeading_Field_OtherRoom))
		}
		m.EndBlock()
	}
	return
}

const NamedNoun_Type = "named_noun"

var NamedNoun_Optional_Marshal = NamedNoun_Marshal

type NamedNoun_Slot struct{ Value *NamedNoun }

func (at NamedNoun_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at NamedNoun_Slot) GetType() string              { return NamedNoun_Type }
func (at NamedNoun_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at NamedNoun_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(NamedNoun)
	return
}

func NamedNoun_Marshal(m jsn.Marshaler, ptr *NamedNoun) (err error) {
	slot := NamedNoun_Slot{ptr}
	return slot.Marshal(m)
}

type NamedNoun_Slice []NamedNoun

func (op *NamedNoun_Slice) GetType() string { return NamedNoun_Type }

func (op *NamedNoun_Slice) Marshal(m jsn.Marshaler) error {
	return NamedNoun_Repeats_Marshal(m, (*[]NamedNoun)(op))
}

func (op *NamedNoun_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NamedNoun_Slice) SetSize(cnt int) {
	var els []NamedNoun
	if cnt >= 0 {
		els = make(NamedNoun_Slice, cnt)
	}
	(*op) = els
}

func (op *NamedNoun_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NamedNoun_Marshal(m, &(*op)[i])
}

func NamedNoun_Repeats_Marshal(m jsn.Marshaler, vals *[]NamedNoun) error {
	return jsn.RepeatBlock(m, (*NamedNoun_Slice)(vals))
}

func NamedNoun_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NamedNoun) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NamedNoun_Repeats_Marshal(m, pv)
	}
	return
}

// NounAssignment Assign text to a noun.
// Assign text.
// Gives a noun one or more lines of text.
type NounAssignment struct {
	Property Property    `if:"label=_"`
	Nouns    []NamedNoun `if:"label=nouns"`
	Lines    prim.Lines  `if:"label=lines"`
	Markup   map[string]any
}

// User implemented slots:
var _ StoryStatement = (*NounAssignment)(nil)

func (*NounAssignment) Compose() composer.Spec {
	return composer.Spec{
		Name: NounAssignment_Type,
		Uses: composer.Type_Flow,
	}
}

const NounAssignment_Type = "noun_assignment"
const NounAssignment_Field_Property = "$PROPERTY"
const NounAssignment_Field_Nouns = "$NOUNS"
const NounAssignment_Field_Lines = "$LINES"

func (op *NounAssignment) Marshal(m jsn.Marshaler) error {
	return NounAssignment_Marshal(m, op)
}

type NounAssignment_Slice []NounAssignment

func (op *NounAssignment_Slice) GetType() string { return NounAssignment_Type }

func (op *NounAssignment_Slice) Marshal(m jsn.Marshaler) error {
	return NounAssignment_Repeats_Marshal(m, (*[]NounAssignment)(op))
}

func (op *NounAssignment_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NounAssignment_Slice) SetSize(cnt int) {
	var els []NounAssignment
	if cnt >= 0 {
		els = make(NounAssignment_Slice, cnt)
	}
	(*op) = els
}

func (op *NounAssignment_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NounAssignment_Marshal(m, &(*op)[i])
}

func NounAssignment_Repeats_Marshal(m jsn.Marshaler, vals *[]NounAssignment) error {
	return jsn.RepeatBlock(m, (*NounAssignment_Slice)(vals))
}

func NounAssignment_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NounAssignment) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NounAssignment_Repeats_Marshal(m, pv)
	}
	return
}

type NounAssignment_Flow struct{ ptr *NounAssignment }

func (n NounAssignment_Flow) GetType() string      { return NounAssignment_Type }
func (n NounAssignment_Flow) GetLede() string      { return NounAssignment_Type }
func (n NounAssignment_Flow) GetFlow() interface{} { return n.ptr }
func (n NounAssignment_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NounAssignment); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NounAssignment_Optional_Marshal(m jsn.Marshaler, pv **NounAssignment) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NounAssignment_Marshal(m, *pv)
	} else if !enc {
		var v NounAssignment
		if err = NounAssignment_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NounAssignment_Marshal(m jsn.Marshaler, val *NounAssignment) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(NounAssignment_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NounAssignment_Field_Property)
		if e0 == nil {
			e0 = Property_Marshal(m, &val.Property)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NounAssignment_Field_Property))
		}
		e1 := m.MarshalKey("nouns", NounAssignment_Field_Nouns)
		if e1 == nil {
			e1 = NamedNoun_Repeats_Marshal(m, &val.Nouns)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NounAssignment_Field_Nouns))
		}
		e2 := m.MarshalKey("lines", NounAssignment_Field_Lines)
		if e2 == nil {
			e2 = prim.Lines_Marshal(m, &val.Lines)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", NounAssignment_Field_Lines))
		}
		m.EndBlock()
	}
	return
}

// NounName requires a user-specified string.
type NounName struct {
	Str string
}

func (op *NounName) String() string {
	return op.Str
}

func (*NounName) Compose() composer.Spec {
	return composer.Spec{
		Name:        NounName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const NounName_Type = "noun_name"

func (op *NounName) Marshal(m jsn.Marshaler) error {
	return NounName_Marshal(m, op)
}

func NounName_Optional_Marshal(m jsn.Marshaler, val *NounName) (err error) {
	var zero NounName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = NounName_Marshal(m, val)
	}
	return
}

func NounName_Marshal(m jsn.Marshaler, val *NounName) (err error) {
	return m.MarshalValue(NounName_Type, &val.Str)
}

type NounName_Slice []NounName

func (op *NounName_Slice) GetType() string { return NounName_Type }

func (op *NounName_Slice) Marshal(m jsn.Marshaler) error {
	return NounName_Repeats_Marshal(m, (*[]NounName)(op))
}

func (op *NounName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NounName_Slice) SetSize(cnt int) {
	var els []NounName
	if cnt >= 0 {
		els = make(NounName_Slice, cnt)
	}
	(*op) = els
}

func (op *NounName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NounName_Marshal(m, &(*op)[i])
}

func NounName_Repeats_Marshal(m jsn.Marshaler, vals *[]NounName) error {
	return jsn.RepeatBlock(m, (*NounName_Slice)(vals))
}

func NounName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NounName) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NounName_Repeats_Marshal(m, pv)
	}
	return
}

// NounNamed A specific person, place or thing.
// When used with a determiner typically implies a common noun ( 'the cat', 'some fish', 'a snack'. )
// When used alone usually implies a proper noun ( 'Hikaru', 'Genesis', or 'Beta Regula One'. )
type NounNamed struct {
	Name   NounName `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ NamedNoun = (*NounNamed)(nil)
var _ SingularNoun = (*NounNamed)(nil)

func (*NounNamed) Compose() composer.Spec {
	return composer.Spec{
		Name: NounNamed_Type,
		Uses: composer.Type_Flow,
		Lede: "noun",
	}
}

const NounNamed_Type = "noun_named"
const NounNamed_Field_Name = "$NAME"

func (op *NounNamed) Marshal(m jsn.Marshaler) error {
	return NounNamed_Marshal(m, op)
}

type NounNamed_Slice []NounNamed

func (op *NounNamed_Slice) GetType() string { return NounNamed_Type }

func (op *NounNamed_Slice) Marshal(m jsn.Marshaler) error {
	return NounNamed_Repeats_Marshal(m, (*[]NounNamed)(op))
}

func (op *NounNamed_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NounNamed_Slice) SetSize(cnt int) {
	var els []NounNamed
	if cnt >= 0 {
		els = make(NounNamed_Slice, cnt)
	}
	(*op) = els
}

func (op *NounNamed_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NounNamed_Marshal(m, &(*op)[i])
}

func NounNamed_Repeats_Marshal(m jsn.Marshaler, vals *[]NounNamed) error {
	return jsn.RepeatBlock(m, (*NounNamed_Slice)(vals))
}

func NounNamed_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NounNamed) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NounNamed_Repeats_Marshal(m, pv)
	}
	return
}

type NounNamed_Flow struct{ ptr *NounNamed }

func (n NounNamed_Flow) GetType() string      { return NounNamed_Type }
func (n NounNamed_Flow) GetLede() string      { return "noun" }
func (n NounNamed_Flow) GetFlow() interface{} { return n.ptr }
func (n NounNamed_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NounNamed); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NounNamed_Optional_Marshal(m jsn.Marshaler, pv **NounNamed) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NounNamed_Marshal(m, *pv)
	} else if !enc {
		var v NounNamed
		if err = NounNamed_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NounNamed_Marshal(m jsn.Marshaler, val *NounNamed) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(NounNamed_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NounNamed_Field_Name)
		if e0 == nil {
			e0 = NounName_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NounNamed_Field_Name))
		}
		m.EndBlock()
	}
	return
}

// NumListField
type NumListField struct {
	Name      string         `if:"label=_,type=text"`
	Type      string         `if:"label=kind,optional,type=text"`
	Initially rt.NumListEval `if:"label=initially,optional"`
	Markup    map[string]any
}

// User implemented slots:
var _ Field = (*NumListField)(nil)

func (*NumListField) Compose() composer.Spec {
	return composer.Spec{
		Name: NumListField_Type,
		Uses: composer.Type_Flow,
		Lede: "num_list",
	}
}

const NumListField_Type = "num_list_field"
const NumListField_Field_Name = "$NAME"
const NumListField_Field_Type = "$TYPE"
const NumListField_Field_Initially = "$INITIALLY"

func (op *NumListField) Marshal(m jsn.Marshaler) error {
	return NumListField_Marshal(m, op)
}

type NumListField_Slice []NumListField

func (op *NumListField_Slice) GetType() string { return NumListField_Type }

func (op *NumListField_Slice) Marshal(m jsn.Marshaler) error {
	return NumListField_Repeats_Marshal(m, (*[]NumListField)(op))
}

func (op *NumListField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NumListField_Slice) SetSize(cnt int) {
	var els []NumListField
	if cnt >= 0 {
		els = make(NumListField_Slice, cnt)
	}
	(*op) = els
}

func (op *NumListField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NumListField_Marshal(m, &(*op)[i])
}

func NumListField_Repeats_Marshal(m jsn.Marshaler, vals *[]NumListField) error {
	return jsn.RepeatBlock(m, (*NumListField_Slice)(vals))
}

func NumListField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NumListField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NumListField_Repeats_Marshal(m, pv)
	}
	return
}

type NumListField_Flow struct{ ptr *NumListField }

func (n NumListField_Flow) GetType() string      { return NumListField_Type }
func (n NumListField_Flow) GetLede() string      { return "num_list" }
func (n NumListField_Flow) GetFlow() interface{} { return n.ptr }
func (n NumListField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NumListField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NumListField_Optional_Marshal(m jsn.Marshaler, pv **NumListField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NumListField_Marshal(m, *pv)
	} else if !enc {
		var v NumListField
		if err = NumListField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NumListField_Marshal(m jsn.Marshaler, val *NumListField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(NumListField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NumListField_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NumListField_Field_Name))
		}
		e1 := m.MarshalKey("kind", NumListField_Field_Type)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NumListField_Field_Type))
		}
		e2 := m.MarshalKey("initially", NumListField_Field_Initially)
		if e2 == nil {
			e2 = rt.NumListEval_Optional_Marshal(m, &val.Initially)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", NumListField_Field_Initially))
		}
		m.EndBlock()
	}
	return
}

// NumberField
type NumberField struct {
	Name      string        `if:"label=_,type=text"`
	Type      string        `if:"label=kind,optional,type=text"`
	Initially rt.NumberEval `if:"label=initially,optional"`
	Markup    map[string]any
}

// User implemented slots:
var _ Field = (*NumberField)(nil)

func (*NumberField) Compose() composer.Spec {
	return composer.Spec{
		Name: NumberField_Type,
		Uses: composer.Type_Flow,
		Lede: "number",
	}
}

const NumberField_Type = "number_field"
const NumberField_Field_Name = "$NAME"
const NumberField_Field_Type = "$TYPE"
const NumberField_Field_Initially = "$INITIALLY"

func (op *NumberField) Marshal(m jsn.Marshaler) error {
	return NumberField_Marshal(m, op)
}

type NumberField_Slice []NumberField

func (op *NumberField_Slice) GetType() string { return NumberField_Type }

func (op *NumberField_Slice) Marshal(m jsn.Marshaler) error {
	return NumberField_Repeats_Marshal(m, (*[]NumberField)(op))
}

func (op *NumberField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NumberField_Slice) SetSize(cnt int) {
	var els []NumberField
	if cnt >= 0 {
		els = make(NumberField_Slice, cnt)
	}
	(*op) = els
}

func (op *NumberField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NumberField_Marshal(m, &(*op)[i])
}

func NumberField_Repeats_Marshal(m jsn.Marshaler, vals *[]NumberField) error {
	return jsn.RepeatBlock(m, (*NumberField_Slice)(vals))
}

func NumberField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NumberField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NumberField_Repeats_Marshal(m, pv)
	}
	return
}

type NumberField_Flow struct{ ptr *NumberField }

func (n NumberField_Flow) GetType() string      { return NumberField_Type }
func (n NumberField_Flow) GetLede() string      { return "number" }
func (n NumberField_Flow) GetFlow() interface{} { return n.ptr }
func (n NumberField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NumberField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NumberField_Optional_Marshal(m jsn.Marshaler, pv **NumberField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NumberField_Marshal(m, *pv)
	} else if !enc {
		var v NumberField
		if err = NumberField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NumberField_Marshal(m jsn.Marshaler, val *NumberField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(NumberField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", NumberField_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NumberField_Field_Name))
		}
		e1 := m.MarshalKey("kind", NumberField_Field_Type)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NumberField_Field_Type))
		}
		e2 := m.MarshalKey("initially", NumberField_Field_Initially)
		if e2 == nil {
			e2 = rt.NumberEval_Optional_Marshal(m, &val.Initially)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", NumberField_Field_Initially))
		}
		m.EndBlock()
	}
	return
}

// OneToMany
type OneToMany struct {
	Kind   SingularKind `if:"label=_"`
	Kinds  PluralKinds  `if:"label=kinds"`
	Markup map[string]any
}

func (*OneToMany) Compose() composer.Spec {
	return composer.Spec{
		Name: OneToMany_Type,
		Uses: composer.Type_Flow,
	}
}

const OneToMany_Type = "one_to_many"
const OneToMany_Field_Kind = "$KIND"
const OneToMany_Field_Kinds = "$KINDS"

func (op *OneToMany) Marshal(m jsn.Marshaler) error {
	return OneToMany_Marshal(m, op)
}

type OneToMany_Slice []OneToMany

func (op *OneToMany_Slice) GetType() string { return OneToMany_Type }

func (op *OneToMany_Slice) Marshal(m jsn.Marshaler) error {
	return OneToMany_Repeats_Marshal(m, (*[]OneToMany)(op))
}

func (op *OneToMany_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *OneToMany_Slice) SetSize(cnt int) {
	var els []OneToMany
	if cnt >= 0 {
		els = make(OneToMany_Slice, cnt)
	}
	(*op) = els
}

func (op *OneToMany_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return OneToMany_Marshal(m, &(*op)[i])
}

func OneToMany_Repeats_Marshal(m jsn.Marshaler, vals *[]OneToMany) error {
	return jsn.RepeatBlock(m, (*OneToMany_Slice)(vals))
}

func OneToMany_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]OneToMany) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = OneToMany_Repeats_Marshal(m, pv)
	}
	return
}

type OneToMany_Flow struct{ ptr *OneToMany }

func (n OneToMany_Flow) GetType() string      { return OneToMany_Type }
func (n OneToMany_Flow) GetLede() string      { return OneToMany_Type }
func (n OneToMany_Flow) GetFlow() interface{} { return n.ptr }
func (n OneToMany_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*OneToMany); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func OneToMany_Optional_Marshal(m jsn.Marshaler, pv **OneToMany) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = OneToMany_Marshal(m, *pv)
	} else if !enc {
		var v OneToMany
		if err = OneToMany_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func OneToMany_Marshal(m jsn.Marshaler, val *OneToMany) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(OneToMany_Flow{val}); err == nil {
		e0 := m.MarshalKey("", OneToMany_Field_Kind)
		if e0 == nil {
			e0 = SingularKind_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", OneToMany_Field_Kind))
		}
		e1 := m.MarshalKey("kinds", OneToMany_Field_Kinds)
		if e1 == nil {
			e1 = PluralKinds_Marshal(m, &val.Kinds)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", OneToMany_Field_Kinds))
		}
		m.EndBlock()
	}
	return
}

// OneToOne
type OneToOne struct {
	Kind      SingularKind `if:"label=_"`
	OtherKind SingularKind `if:"label=other_kind"`
	Markup    map[string]any
}

func (*OneToOne) Compose() composer.Spec {
	return composer.Spec{
		Name: OneToOne_Type,
		Uses: composer.Type_Flow,
	}
}

const OneToOne_Type = "one_to_one"
const OneToOne_Field_Kind = "$KIND"
const OneToOne_Field_OtherKind = "$OTHER_KIND"

func (op *OneToOne) Marshal(m jsn.Marshaler) error {
	return OneToOne_Marshal(m, op)
}

type OneToOne_Slice []OneToOne

func (op *OneToOne_Slice) GetType() string { return OneToOne_Type }

func (op *OneToOne_Slice) Marshal(m jsn.Marshaler) error {
	return OneToOne_Repeats_Marshal(m, (*[]OneToOne)(op))
}

func (op *OneToOne_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *OneToOne_Slice) SetSize(cnt int) {
	var els []OneToOne
	if cnt >= 0 {
		els = make(OneToOne_Slice, cnt)
	}
	(*op) = els
}

func (op *OneToOne_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return OneToOne_Marshal(m, &(*op)[i])
}

func OneToOne_Repeats_Marshal(m jsn.Marshaler, vals *[]OneToOne) error {
	return jsn.RepeatBlock(m, (*OneToOne_Slice)(vals))
}

func OneToOne_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]OneToOne) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = OneToOne_Repeats_Marshal(m, pv)
	}
	return
}

type OneToOne_Flow struct{ ptr *OneToOne }

func (n OneToOne_Flow) GetType() string      { return OneToOne_Type }
func (n OneToOne_Flow) GetLede() string      { return OneToOne_Type }
func (n OneToOne_Flow) GetFlow() interface{} { return n.ptr }
func (n OneToOne_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*OneToOne); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func OneToOne_Optional_Marshal(m jsn.Marshaler, pv **OneToOne) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = OneToOne_Marshal(m, *pv)
	} else if !enc {
		var v OneToOne
		if err = OneToOne_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func OneToOne_Marshal(m jsn.Marshaler, val *OneToOne) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(OneToOne_Flow{val}); err == nil {
		e0 := m.MarshalKey("", OneToOne_Field_Kind)
		if e0 == nil {
			e0 = SingularKind_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", OneToOne_Field_Kind))
		}
		e1 := m.MarshalKey("other_kind", OneToOne_Field_OtherKind)
		if e1 == nil {
			e1 = SingularKind_Marshal(m, &val.OtherKind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", OneToOne_Field_OtherKind))
		}
		m.EndBlock()
	}
	return
}

// PairedAction
type PairedAction struct {
	Kinds  PluralKinds `if:"label=_"`
	Markup map[string]any
}

func (*PairedAction) Compose() composer.Spec {
	return composer.Spec{
		Name: PairedAction_Type,
		Uses: composer.Type_Flow,
	}
}

const PairedAction_Type = "paired_action"
const PairedAction_Field_Kinds = "$KINDS"

func (op *PairedAction) Marshal(m jsn.Marshaler) error {
	return PairedAction_Marshal(m, op)
}

type PairedAction_Slice []PairedAction

func (op *PairedAction_Slice) GetType() string { return PairedAction_Type }

func (op *PairedAction_Slice) Marshal(m jsn.Marshaler) error {
	return PairedAction_Repeats_Marshal(m, (*[]PairedAction)(op))
}

func (op *PairedAction_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PairedAction_Slice) SetSize(cnt int) {
	var els []PairedAction
	if cnt >= 0 {
		els = make(PairedAction_Slice, cnt)
	}
	(*op) = els
}

func (op *PairedAction_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PairedAction_Marshal(m, &(*op)[i])
}

func PairedAction_Repeats_Marshal(m jsn.Marshaler, vals *[]PairedAction) error {
	return jsn.RepeatBlock(m, (*PairedAction_Slice)(vals))
}

func PairedAction_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PairedAction) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PairedAction_Repeats_Marshal(m, pv)
	}
	return
}

type PairedAction_Flow struct{ ptr *PairedAction }

func (n PairedAction_Flow) GetType() string      { return PairedAction_Type }
func (n PairedAction_Flow) GetLede() string      { return PairedAction_Type }
func (n PairedAction_Flow) GetFlow() interface{} { return n.ptr }
func (n PairedAction_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PairedAction); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PairedAction_Optional_Marshal(m jsn.Marshaler, pv **PairedAction) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PairedAction_Marshal(m, *pv)
	} else if !enc {
		var v PairedAction
		if err = PairedAction_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PairedAction_Marshal(m jsn.Marshaler, val *PairedAction) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PairedAction_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PairedAction_Field_Kinds)
		if e0 == nil {
			e0 = PluralKinds_Marshal(m, &val.Kinds)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PairedAction_Field_Kinds))
		}
		m.EndBlock()
	}
	return
}

// Paragraph Phrases
type Paragraph struct {
	StoryStatement []StoryStatement `if:"label=_,optional"`
	Markup         map[string]any
}

func (*Paragraph) Compose() composer.Spec {
	return composer.Spec{
		Name: Paragraph_Type,
		Uses: composer.Type_Flow,
	}
}

const Paragraph_Type = "paragraph"
const Paragraph_Field_StoryStatement = "$STORY_STATEMENT"

func (op *Paragraph) Marshal(m jsn.Marshaler) error {
	return Paragraph_Marshal(m, op)
}

type Paragraph_Slice []Paragraph

func (op *Paragraph_Slice) GetType() string { return Paragraph_Type }

func (op *Paragraph_Slice) Marshal(m jsn.Marshaler) error {
	return Paragraph_Repeats_Marshal(m, (*[]Paragraph)(op))
}

func (op *Paragraph_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Paragraph_Slice) SetSize(cnt int) {
	var els []Paragraph
	if cnt >= 0 {
		els = make(Paragraph_Slice, cnt)
	}
	(*op) = els
}

func (op *Paragraph_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Paragraph_Marshal(m, &(*op)[i])
}

func Paragraph_Repeats_Marshal(m jsn.Marshaler, vals *[]Paragraph) error {
	return jsn.RepeatBlock(m, (*Paragraph_Slice)(vals))
}

func Paragraph_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Paragraph) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Paragraph_Repeats_Marshal(m, pv)
	}
	return
}

type Paragraph_Flow struct{ ptr *Paragraph }

func (n Paragraph_Flow) GetType() string      { return Paragraph_Type }
func (n Paragraph_Flow) GetLede() string      { return Paragraph_Type }
func (n Paragraph_Flow) GetFlow() interface{} { return n.ptr }
func (n Paragraph_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Paragraph); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Paragraph_Optional_Marshal(m jsn.Marshaler, pv **Paragraph) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Paragraph_Marshal(m, *pv)
	} else if !enc {
		var v Paragraph
		if err = Paragraph_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Paragraph_Marshal(m jsn.Marshaler, val *Paragraph) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Paragraph_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Paragraph_Field_StoryStatement)
		if e0 == nil {
			e0 = StoryStatement_Optional_Repeats_Marshal(m, &val.StoryStatement)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Paragraph_Field_StoryStatement))
		}
		m.EndBlock()
	}
	return
}

// PatternActions Add actions to a pattern.
// Actions to take when using a pattern.
type PatternActions struct {
	PatternName string        `if:"label=_,type=text"`
	Locals      []Field       `if:"label=provides,optional"`
	Rules       []PatternRule `if:"label=rules"`
	Markup      map[string]any
}

// User implemented slots:
var _ StoryStatement = (*PatternActions)(nil)

func (*PatternActions) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternActions_Type,
		Uses: composer.Type_Flow,
		Lede: "pattern",
	}
}

const PatternActions_Type = "pattern_actions"
const PatternActions_Field_PatternName = "$PATTERN_NAME"
const PatternActions_Field_Locals = "$LOCALS"
const PatternActions_Field_Rules = "$RULES"

func (op *PatternActions) Marshal(m jsn.Marshaler) error {
	return PatternActions_Marshal(m, op)
}

type PatternActions_Slice []PatternActions

func (op *PatternActions_Slice) GetType() string { return PatternActions_Type }

func (op *PatternActions_Slice) Marshal(m jsn.Marshaler) error {
	return PatternActions_Repeats_Marshal(m, (*[]PatternActions)(op))
}

func (op *PatternActions_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternActions_Slice) SetSize(cnt int) {
	var els []PatternActions
	if cnt >= 0 {
		els = make(PatternActions_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternActions_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternActions_Marshal(m, &(*op)[i])
}

func PatternActions_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternActions) error {
	return jsn.RepeatBlock(m, (*PatternActions_Slice)(vals))
}

func PatternActions_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternActions) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PatternActions_Repeats_Marshal(m, pv)
	}
	return
}

type PatternActions_Flow struct{ ptr *PatternActions }

func (n PatternActions_Flow) GetType() string      { return PatternActions_Type }
func (n PatternActions_Flow) GetLede() string      { return "pattern" }
func (n PatternActions_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternActions_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternActions); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternActions_Optional_Marshal(m jsn.Marshaler, pv **PatternActions) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternActions_Marshal(m, *pv)
	} else if !enc {
		var v PatternActions
		if err = PatternActions_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternActions_Marshal(m jsn.Marshaler, val *PatternActions) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PatternActions_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternActions_Field_PatternName)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.PatternName)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternActions_Field_PatternName))
		}
		e1 := m.MarshalKey("provides", PatternActions_Field_Locals)
		if e1 == nil {
			e1 = Field_Optional_Repeats_Marshal(m, &val.Locals)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", PatternActions_Field_Locals))
		}
		e2 := m.MarshalKey("rules", PatternActions_Field_Rules)
		if e2 == nil {
			e2 = PatternRule_Repeats_Marshal(m, &val.Rules)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", PatternActions_Field_Rules))
		}
		m.EndBlock()
	}
	return
}

// PatternDecl Declare a pattern: A pattern is a bundle of functions which can either change the game world or provide information about it.  Each function in a given pattern has "guards" which determine whether the function applies in a particular situation.
type PatternDecl struct {
	PatternName   string         `if:"label=_,type=text"`
	Params        []Field        `if:"label=requires,optional"`
	PatternReturn *PatternReturn `if:"label=returns,optional"`
	Markup        map[string]any
}

// User implemented slots:
var _ StoryStatement = (*PatternDecl)(nil)

func (*PatternDecl) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternDecl_Type,
		Uses: composer.Type_Flow,
		Lede: "Pattern",
	}
}

const PatternDecl_Type = "pattern_decl"
const PatternDecl_Field_PatternName = "$PATTERN_NAME"
const PatternDecl_Field_Params = "$PARAMS"
const PatternDecl_Field_PatternReturn = "$PATTERN_RETURN"

func (op *PatternDecl) Marshal(m jsn.Marshaler) error {
	return PatternDecl_Marshal(m, op)
}

type PatternDecl_Slice []PatternDecl

func (op *PatternDecl_Slice) GetType() string { return PatternDecl_Type }

func (op *PatternDecl_Slice) Marshal(m jsn.Marshaler) error {
	return PatternDecl_Repeats_Marshal(m, (*[]PatternDecl)(op))
}

func (op *PatternDecl_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternDecl_Slice) SetSize(cnt int) {
	var els []PatternDecl
	if cnt >= 0 {
		els = make(PatternDecl_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternDecl_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternDecl_Marshal(m, &(*op)[i])
}

func PatternDecl_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternDecl) error {
	return jsn.RepeatBlock(m, (*PatternDecl_Slice)(vals))
}

func PatternDecl_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternDecl) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PatternDecl_Repeats_Marshal(m, pv)
	}
	return
}

type PatternDecl_Flow struct{ ptr *PatternDecl }

func (n PatternDecl_Flow) GetType() string      { return PatternDecl_Type }
func (n PatternDecl_Flow) GetLede() string      { return "Pattern" }
func (n PatternDecl_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternDecl_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternDecl); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternDecl_Optional_Marshal(m jsn.Marshaler, pv **PatternDecl) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternDecl_Marshal(m, *pv)
	} else if !enc {
		var v PatternDecl
		if err = PatternDecl_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternDecl_Marshal(m jsn.Marshaler, val *PatternDecl) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PatternDecl_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternDecl_Field_PatternName)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.PatternName)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternDecl_Field_PatternName))
		}
		e1 := m.MarshalKey("requires", PatternDecl_Field_Params)
		if e1 == nil {
			e1 = Field_Optional_Repeats_Marshal(m, &val.Params)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", PatternDecl_Field_Params))
		}
		e2 := m.MarshalKey("returns", PatternDecl_Field_PatternReturn)
		if e2 == nil {
			e2 = PatternReturn_Optional_Marshal(m, &val.PatternReturn)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", PatternDecl_Field_PatternReturn))
		}
		m.EndBlock()
	}
	return
}

// PatternFlags requires a predefined string.
type PatternFlags struct {
	Str string
}

func (op *PatternFlags) String() string {
	return op.Str
}

const PatternFlags_Before = "$BEFORE"
const PatternFlags_After = "$AFTER"
const PatternFlags_Terminate = "$TERMINATE"

func (*PatternFlags) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternFlags_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			PatternFlags_Before, PatternFlags_After, PatternFlags_Terminate,
		},
		Strings: []string{
			"before", "after", "terminate",
		},
	}
}

const PatternFlags_Type = "pattern_flags"

func (op *PatternFlags) Marshal(m jsn.Marshaler) error {
	return PatternFlags_Marshal(m, op)
}

func PatternFlags_Optional_Marshal(m jsn.Marshaler, val *PatternFlags) (err error) {
	var zero PatternFlags
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = PatternFlags_Marshal(m, val)
	}
	return
}

func PatternFlags_Marshal(m jsn.Marshaler, val *PatternFlags) (err error) {
	return m.MarshalValue(PatternFlags_Type, jsn.MakeEnum(val, &val.Str))
}

type PatternFlags_Slice []PatternFlags

func (op *PatternFlags_Slice) GetType() string { return PatternFlags_Type }

func (op *PatternFlags_Slice) Marshal(m jsn.Marshaler) error {
	return PatternFlags_Repeats_Marshal(m, (*[]PatternFlags)(op))
}

func (op *PatternFlags_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternFlags_Slice) SetSize(cnt int) {
	var els []PatternFlags
	if cnt >= 0 {
		els = make(PatternFlags_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternFlags_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternFlags_Marshal(m, &(*op)[i])
}

func PatternFlags_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternFlags) error {
	return jsn.RepeatBlock(m, (*PatternFlags_Slice)(vals))
}

func PatternFlags_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternFlags) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PatternFlags_Repeats_Marshal(m, pv)
	}
	return
}

// PatternReturn
type PatternReturn struct {
	Result Field `if:"label=_"`
	Markup map[string]any
}

func (*PatternReturn) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternReturn_Type,
		Uses: composer.Type_Flow,
		Lede: "pattern_result",
	}
}

const PatternReturn_Type = "pattern_return"
const PatternReturn_Field_Result = "$RESULT"

func (op *PatternReturn) Marshal(m jsn.Marshaler) error {
	return PatternReturn_Marshal(m, op)
}

type PatternReturn_Slice []PatternReturn

func (op *PatternReturn_Slice) GetType() string { return PatternReturn_Type }

func (op *PatternReturn_Slice) Marshal(m jsn.Marshaler) error {
	return PatternReturn_Repeats_Marshal(m, (*[]PatternReturn)(op))
}

func (op *PatternReturn_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternReturn_Slice) SetSize(cnt int) {
	var els []PatternReturn
	if cnt >= 0 {
		els = make(PatternReturn_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternReturn_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternReturn_Marshal(m, &(*op)[i])
}

func PatternReturn_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternReturn) error {
	return jsn.RepeatBlock(m, (*PatternReturn_Slice)(vals))
}

func PatternReturn_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternReturn) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PatternReturn_Repeats_Marshal(m, pv)
	}
	return
}

type PatternReturn_Flow struct{ ptr *PatternReturn }

func (n PatternReturn_Flow) GetType() string      { return PatternReturn_Type }
func (n PatternReturn_Flow) GetLede() string      { return "pattern_result" }
func (n PatternReturn_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternReturn_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternReturn); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternReturn_Optional_Marshal(m jsn.Marshaler, pv **PatternReturn) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternReturn_Marshal(m, *pv)
	} else if !enc {
		var v PatternReturn
		if err = PatternReturn_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternReturn_Marshal(m jsn.Marshaler, val *PatternReturn) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PatternReturn_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternReturn_Field_Result)
		if e0 == nil {
			e0 = Field_Marshal(m, &val.Result)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternReturn_Field_Result))
		}
		m.EndBlock()
	}
	return
}

// PatternRule Rule
type PatternRule struct {
	Guard  rt.BoolEval  `if:"label=_"`
	Flags  PatternFlags `if:"label=flags,optional"`
	Does   []rt.Execute `if:"label=does"`
	Markup map[string]any
}

func (*PatternRule) Compose() composer.Spec {
	return composer.Spec{
		Name: PatternRule_Type,
		Uses: composer.Type_Flow,
	}
}

const PatternRule_Type = "pattern_rule"
const PatternRule_Field_Guard = "$GUARD"
const PatternRule_Field_Flags = "$FLAGS"
const PatternRule_Field_Does = "$DOES"

func (op *PatternRule) Marshal(m jsn.Marshaler) error {
	return PatternRule_Marshal(m, op)
}

type PatternRule_Slice []PatternRule

func (op *PatternRule_Slice) GetType() string { return PatternRule_Type }

func (op *PatternRule_Slice) Marshal(m jsn.Marshaler) error {
	return PatternRule_Repeats_Marshal(m, (*[]PatternRule)(op))
}

func (op *PatternRule_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternRule_Slice) SetSize(cnt int) {
	var els []PatternRule
	if cnt >= 0 {
		els = make(PatternRule_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternRule_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternRule_Marshal(m, &(*op)[i])
}

func PatternRule_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternRule) error {
	return jsn.RepeatBlock(m, (*PatternRule_Slice)(vals))
}

func PatternRule_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternRule) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PatternRule_Repeats_Marshal(m, pv)
	}
	return
}

type PatternRule_Flow struct{ ptr *PatternRule }

func (n PatternRule_Flow) GetType() string      { return PatternRule_Type }
func (n PatternRule_Flow) GetLede() string      { return PatternRule_Type }
func (n PatternRule_Flow) GetFlow() interface{} { return n.ptr }
func (n PatternRule_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*PatternRule); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func PatternRule_Optional_Marshal(m jsn.Marshaler, pv **PatternRule) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = PatternRule_Marshal(m, *pv)
	} else if !enc {
		var v PatternRule
		if err = PatternRule_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func PatternRule_Marshal(m jsn.Marshaler, val *PatternRule) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(PatternRule_Flow{val}); err == nil {
		e0 := m.MarshalKey("", PatternRule_Field_Guard)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Guard)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", PatternRule_Field_Guard))
		}
		e1 := m.MarshalKey("flags", PatternRule_Field_Flags)
		if e1 == nil {
			e1 = PatternFlags_Optional_Marshal(m, &val.Flags)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", PatternRule_Field_Flags))
		}
		e2 := m.MarshalKey("does", PatternRule_Field_Does)
		if e2 == nil {
			e2 = rt.Execute_Repeats_Marshal(m, &val.Does)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", PatternRule_Field_Does))
		}
		m.EndBlock()
	}
	return
}

// PatternType requires a predefined or user-specified string.
type PatternType struct {
	Str string
}

func (op *PatternType) String() string {
	return op.Str
}

const PatternType_Patterns = "$PATTERNS"
const PatternType_Actions = "$ACTIONS"
const PatternType_Events = "$EVENTS"

func (*PatternType) Compose() composer.Spec {
	return composer.Spec{
		Name:        PatternType_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
		Choices: []string{
			PatternType_Patterns, PatternType_Actions, PatternType_Events,
		},
		Strings: []string{
			"patterns", "actions", "events",
		},
	}
}

const PatternType_Type = "pattern_type"

func (op *PatternType) Marshal(m jsn.Marshaler) error {
	return PatternType_Marshal(m, op)
}

func PatternType_Optional_Marshal(m jsn.Marshaler, val *PatternType) (err error) {
	var zero PatternType
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = PatternType_Marshal(m, val)
	}
	return
}

func PatternType_Marshal(m jsn.Marshaler, val *PatternType) (err error) {
	return m.MarshalValue(PatternType_Type, jsn.MakeEnum(val, &val.Str))
}

type PatternType_Slice []PatternType

func (op *PatternType_Slice) GetType() string { return PatternType_Type }

func (op *PatternType_Slice) Marshal(m jsn.Marshaler) error {
	return PatternType_Repeats_Marshal(m, (*[]PatternType)(op))
}

func (op *PatternType_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PatternType_Slice) SetSize(cnt int) {
	var els []PatternType
	if cnt >= 0 {
		els = make(PatternType_Slice, cnt)
	}
	(*op) = els
}

func (op *PatternType_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PatternType_Marshal(m, &(*op)[i])
}

func PatternType_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternType) error {
	return jsn.RepeatBlock(m, (*PatternType_Slice)(vals))
}

func PatternType_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PatternType) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PatternType_Repeats_Marshal(m, pv)
	}
	return
}

// PluralKinds requires a user-specified string.
type PluralKinds struct {
	Str string
}

func (op *PluralKinds) String() string {
	return op.Str
}

func (*PluralKinds) Compose() composer.Spec {
	return composer.Spec{
		Name:        PluralKinds_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const PluralKinds_Type = "plural_kinds"

func (op *PluralKinds) Marshal(m jsn.Marshaler) error {
	return PluralKinds_Marshal(m, op)
}

func PluralKinds_Optional_Marshal(m jsn.Marshaler, val *PluralKinds) (err error) {
	var zero PluralKinds
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = PluralKinds_Marshal(m, val)
	}
	return
}

func PluralKinds_Marshal(m jsn.Marshaler, val *PluralKinds) (err error) {
	return m.MarshalValue(PluralKinds_Type, &val.Str)
}

type PluralKinds_Slice []PluralKinds

func (op *PluralKinds_Slice) GetType() string { return PluralKinds_Type }

func (op *PluralKinds_Slice) Marshal(m jsn.Marshaler) error {
	return PluralKinds_Repeats_Marshal(m, (*[]PluralKinds)(op))
}

func (op *PluralKinds_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *PluralKinds_Slice) SetSize(cnt int) {
	var els []PluralKinds
	if cnt >= 0 {
		els = make(PluralKinds_Slice, cnt)
	}
	(*op) = els
}

func (op *PluralKinds_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return PluralKinds_Marshal(m, &(*op)[i])
}

func PluralKinds_Repeats_Marshal(m jsn.Marshaler, vals *[]PluralKinds) error {
	return jsn.RepeatBlock(m, (*PluralKinds_Slice)(vals))
}

func PluralKinds_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]PluralKinds) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = PluralKinds_Repeats_Marshal(m, pv)
	}
	return
}

// Property requires a user-specified string.
type Property struct {
	Str string
}

func (op *Property) String() string {
	return op.Str
}

func (*Property) Compose() composer.Spec {
	return composer.Spec{
		Name:        Property_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const Property_Type = "property"

func (op *Property) Marshal(m jsn.Marshaler) error {
	return Property_Marshal(m, op)
}

func Property_Optional_Marshal(m jsn.Marshaler, val *Property) (err error) {
	var zero Property
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Property_Marshal(m, val)
	}
	return
}

func Property_Marshal(m jsn.Marshaler, val *Property) (err error) {
	return m.MarshalValue(Property_Type, &val.Str)
}

type Property_Slice []Property

func (op *Property_Slice) GetType() string { return Property_Type }

func (op *Property_Slice) Marshal(m jsn.Marshaler) error {
	return Property_Repeats_Marshal(m, (*[]Property)(op))
}

func (op *Property_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Property_Slice) SetSize(cnt int) {
	var els []Property
	if cnt >= 0 {
		els = make(Property_Slice, cnt)
	}
	(*op) = els
}

func (op *Property_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Property_Marshal(m, &(*op)[i])
}

func Property_Repeats_Marshal(m jsn.Marshaler, vals *[]Property) error {
	return jsn.RepeatBlock(m, (*Property_Slice)(vals))
}

func Property_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Property) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Property_Repeats_Marshal(m, pv)
	}
	return
}

// RecordField
type RecordField struct {
	Name      string        `if:"label=_,type=text"`
	Type      string        `if:"label=kind,optional,type=text"`
	Initially rt.RecordEval `if:"label=initially,optional"`
	Markup    map[string]any
}

// User implemented slots:
var _ Field = (*RecordField)(nil)

func (*RecordField) Compose() composer.Spec {
	return composer.Spec{
		Name: RecordField_Type,
		Uses: composer.Type_Flow,
		Lede: "record",
	}
}

const RecordField_Type = "record_field"
const RecordField_Field_Name = "$NAME"
const RecordField_Field_Type = "$TYPE"
const RecordField_Field_Initially = "$INITIALLY"

func (op *RecordField) Marshal(m jsn.Marshaler) error {
	return RecordField_Marshal(m, op)
}

type RecordField_Slice []RecordField

func (op *RecordField_Slice) GetType() string { return RecordField_Type }

func (op *RecordField_Slice) Marshal(m jsn.Marshaler) error {
	return RecordField_Repeats_Marshal(m, (*[]RecordField)(op))
}

func (op *RecordField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RecordField_Slice) SetSize(cnt int) {
	var els []RecordField
	if cnt >= 0 {
		els = make(RecordField_Slice, cnt)
	}
	(*op) = els
}

func (op *RecordField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RecordField_Marshal(m, &(*op)[i])
}

func RecordField_Repeats_Marshal(m jsn.Marshaler, vals *[]RecordField) error {
	return jsn.RepeatBlock(m, (*RecordField_Slice)(vals))
}

func RecordField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RecordField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = RecordField_Repeats_Marshal(m, pv)
	}
	return
}

type RecordField_Flow struct{ ptr *RecordField }

func (n RecordField_Flow) GetType() string      { return RecordField_Type }
func (n RecordField_Flow) GetLede() string      { return "record" }
func (n RecordField_Flow) GetFlow() interface{} { return n.ptr }
func (n RecordField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*RecordField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func RecordField_Optional_Marshal(m jsn.Marshaler, pv **RecordField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RecordField_Marshal(m, *pv)
	} else if !enc {
		var v RecordField
		if err = RecordField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RecordField_Marshal(m jsn.Marshaler, val *RecordField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(RecordField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", RecordField_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", RecordField_Field_Name))
		}
		e1 := m.MarshalKey("kind", RecordField_Field_Type)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", RecordField_Field_Type))
		}
		e2 := m.MarshalKey("initially", RecordField_Field_Initially)
		if e2 == nil {
			e2 = rt.RecordEval_Optional_Marshal(m, &val.Initially)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", RecordField_Field_Initially))
		}
		m.EndBlock()
	}
	return
}

// RecordListField
type RecordListField struct {
	Name      string            `if:"label=_,type=text"`
	Type      string            `if:"label=kind,optional,type=text"`
	Initially rt.RecordListEval `if:"label=initially,optional"`
	Markup    map[string]any
}

// User implemented slots:
var _ Field = (*RecordListField)(nil)

func (*RecordListField) Compose() composer.Spec {
	return composer.Spec{
		Name: RecordListField_Type,
		Uses: composer.Type_Flow,
		Lede: "record_list",
	}
}

const RecordListField_Type = "record_list_field"
const RecordListField_Field_Name = "$NAME"
const RecordListField_Field_Type = "$TYPE"
const RecordListField_Field_Initially = "$INITIALLY"

func (op *RecordListField) Marshal(m jsn.Marshaler) error {
	return RecordListField_Marshal(m, op)
}

type RecordListField_Slice []RecordListField

func (op *RecordListField_Slice) GetType() string { return RecordListField_Type }

func (op *RecordListField_Slice) Marshal(m jsn.Marshaler) error {
	return RecordListField_Repeats_Marshal(m, (*[]RecordListField)(op))
}

func (op *RecordListField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RecordListField_Slice) SetSize(cnt int) {
	var els []RecordListField
	if cnt >= 0 {
		els = make(RecordListField_Slice, cnt)
	}
	(*op) = els
}

func (op *RecordListField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RecordListField_Marshal(m, &(*op)[i])
}

func RecordListField_Repeats_Marshal(m jsn.Marshaler, vals *[]RecordListField) error {
	return jsn.RepeatBlock(m, (*RecordListField_Slice)(vals))
}

func RecordListField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RecordListField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = RecordListField_Repeats_Marshal(m, pv)
	}
	return
}

type RecordListField_Flow struct{ ptr *RecordListField }

func (n RecordListField_Flow) GetType() string      { return RecordListField_Type }
func (n RecordListField_Flow) GetLede() string      { return "record_list" }
func (n RecordListField_Flow) GetFlow() interface{} { return n.ptr }
func (n RecordListField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*RecordListField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func RecordListField_Optional_Marshal(m jsn.Marshaler, pv **RecordListField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RecordListField_Marshal(m, *pv)
	} else if !enc {
		var v RecordListField
		if err = RecordListField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RecordListField_Marshal(m jsn.Marshaler, val *RecordListField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(RecordListField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", RecordListField_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", RecordListField_Field_Name))
		}
		e1 := m.MarshalKey("kind", RecordListField_Field_Type)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", RecordListField_Field_Type))
		}
		e2 := m.MarshalKey("initially", RecordListField_Field_Initially)
		if e2 == nil {
			e2 = rt.RecordListEval_Optional_Marshal(m, &val.Initially)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", RecordListField_Field_Initially))
		}
		m.EndBlock()
	}
	return
}

// RelationCardinality swaps between various options
type RelationCardinality struct {
	Choice string
	Value  interface{}
}

var RelationCardinality_Optional_Marshal = RelationCardinality_Marshal

const RelationCardinality_OneToOne_Opt = "$ONE_TO_ONE"
const RelationCardinality_OneToMany_Opt = "$ONE_TO_MANY"
const RelationCardinality_ManyToOne_Opt = "$MANY_TO_ONE"
const RelationCardinality_ManyToMany_Opt = "$MANY_TO_MANY"

func (*RelationCardinality) Compose() composer.Spec {
	return composer.Spec{
		Name: RelationCardinality_Type,
		Uses: composer.Type_Swap,
		Choices: []string{
			RelationCardinality_OneToOne_Opt, RelationCardinality_OneToMany_Opt, RelationCardinality_ManyToOne_Opt, RelationCardinality_ManyToMany_Opt,
		},
		Swaps: []interface{}{
			(*OneToOne)(nil),
			(*OneToMany)(nil),
			(*ManyToOne)(nil),
			(*ManyToMany)(nil),
		},
	}
}

const RelationCardinality_Type = "relation_cardinality"

func (op *RelationCardinality) GetType() string { return RelationCardinality_Type }

func (op *RelationCardinality) GetSwap() (string, interface{}) {
	return op.Choice, op.Value
}

func (op *RelationCardinality) SetSwap(c string) (okay bool) {
	switch c {
	case "":
		op.Choice, op.Value = c, nil
		okay = true
	case RelationCardinality_OneToOne_Opt:
		op.Choice, op.Value = c, new(OneToOne)
		okay = true
	case RelationCardinality_OneToMany_Opt:
		op.Choice, op.Value = c, new(OneToMany)
		okay = true
	case RelationCardinality_ManyToOne_Opt:
		op.Choice, op.Value = c, new(ManyToOne)
		okay = true
	case RelationCardinality_ManyToMany_Opt:
		op.Choice, op.Value = c, new(ManyToMany)
		okay = true
	}
	return
}

func (op *RelationCardinality) Marshal(m jsn.Marshaler) error {
	return RelationCardinality_Marshal(m, op)
}
func RelationCardinality_Marshal(m jsn.Marshaler, val *RelationCardinality) (err error) {
	if err = m.MarshalBlock(val); err == nil {
		if _, ptr := val.GetSwap(); ptr != nil {
			if e := ptr.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}

type RelationCardinality_Slice []RelationCardinality

func (op *RelationCardinality_Slice) GetType() string { return RelationCardinality_Type }

func (op *RelationCardinality_Slice) Marshal(m jsn.Marshaler) error {
	return RelationCardinality_Repeats_Marshal(m, (*[]RelationCardinality)(op))
}

func (op *RelationCardinality_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RelationCardinality_Slice) SetSize(cnt int) {
	var els []RelationCardinality
	if cnt >= 0 {
		els = make(RelationCardinality_Slice, cnt)
	}
	(*op) = els
}

func (op *RelationCardinality_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RelationCardinality_Marshal(m, &(*op)[i])
}

func RelationCardinality_Repeats_Marshal(m jsn.Marshaler, vals *[]RelationCardinality) error {
	return jsn.RepeatBlock(m, (*RelationCardinality_Slice)(vals))
}

func RelationCardinality_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RelationCardinality) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = RelationCardinality_Repeats_Marshal(m, pv)
	}
	return
}

// SayResponse Generate text in a replaceable manner.
// ( note: this is transformed for the runtime into a named 'RenderResponse'. )
type SayResponse struct {
	Name   string      `if:"label=response,type=text"`
	Text   rt.TextEval `if:"label=with"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*SayResponse)(nil)
var _ rt.TextEval = (*SayResponse)(nil)

func (*SayResponse) Compose() composer.Spec {
	return composer.Spec{
		Name: SayResponse_Type,
		Uses: composer.Type_Flow,
		Lede: "print",
	}
}

const SayResponse_Type = "say_response"
const SayResponse_Field_Name = "$NAME"
const SayResponse_Field_Text = "$TEXT"

func (op *SayResponse) Marshal(m jsn.Marshaler) error {
	return SayResponse_Marshal(m, op)
}

type SayResponse_Slice []SayResponse

func (op *SayResponse_Slice) GetType() string { return SayResponse_Type }

func (op *SayResponse_Slice) Marshal(m jsn.Marshaler) error {
	return SayResponse_Repeats_Marshal(m, (*[]SayResponse)(op))
}

func (op *SayResponse_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SayResponse_Slice) SetSize(cnt int) {
	var els []SayResponse
	if cnt >= 0 {
		els = make(SayResponse_Slice, cnt)
	}
	(*op) = els
}

func (op *SayResponse_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SayResponse_Marshal(m, &(*op)[i])
}

func SayResponse_Repeats_Marshal(m jsn.Marshaler, vals *[]SayResponse) error {
	return jsn.RepeatBlock(m, (*SayResponse_Slice)(vals))
}

func SayResponse_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SayResponse) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SayResponse_Repeats_Marshal(m, pv)
	}
	return
}

type SayResponse_Flow struct{ ptr *SayResponse }

func (n SayResponse_Flow) GetType() string      { return SayResponse_Type }
func (n SayResponse_Flow) GetLede() string      { return "print" }
func (n SayResponse_Flow) GetFlow() interface{} { return n.ptr }
func (n SayResponse_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SayResponse); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SayResponse_Optional_Marshal(m jsn.Marshaler, pv **SayResponse) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SayResponse_Marshal(m, *pv)
	} else if !enc {
		var v SayResponse
		if err = SayResponse_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SayResponse_Marshal(m jsn.Marshaler, val *SayResponse) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SayResponse_Flow{val}); err == nil {
		e0 := m.MarshalKey("response", SayResponse_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SayResponse_Field_Name))
		}
		e1 := m.MarshalKey("with", SayResponse_Field_Text)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", SayResponse_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// SayTemplate Used for displaying text to the player.
// The text can contain 'inline-templates';
// mini-commands that help to simplify printing text.
// See also: https://github.com/ionous/iffy/wiki/Templates.
// ( note: this is transformed for the runtime into an unnamed 'RenderResponse'. )
type SayTemplate struct {
	Template prim.Lines `if:"label=_"`
	Markup   map[string]any
}

// User implemented slots:
var _ rt.Execute = (*SayTemplate)(nil)
var _ rt.TextEval = (*SayTemplate)(nil)

func (*SayTemplate) Compose() composer.Spec {
	return composer.Spec{
		Name: SayTemplate_Type,
		Uses: composer.Type_Flow,
		Lede: "say",
	}
}

const SayTemplate_Type = "say_template"
const SayTemplate_Field_Template = "$TEMPLATE"

func (op *SayTemplate) Marshal(m jsn.Marshaler) error {
	return SayTemplate_Marshal(m, op)
}

type SayTemplate_Slice []SayTemplate

func (op *SayTemplate_Slice) GetType() string { return SayTemplate_Type }

func (op *SayTemplate_Slice) Marshal(m jsn.Marshaler) error {
	return SayTemplate_Repeats_Marshal(m, (*[]SayTemplate)(op))
}

func (op *SayTemplate_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SayTemplate_Slice) SetSize(cnt int) {
	var els []SayTemplate
	if cnt >= 0 {
		els = make(SayTemplate_Slice, cnt)
	}
	(*op) = els
}

func (op *SayTemplate_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SayTemplate_Marshal(m, &(*op)[i])
}

func SayTemplate_Repeats_Marshal(m jsn.Marshaler, vals *[]SayTemplate) error {
	return jsn.RepeatBlock(m, (*SayTemplate_Slice)(vals))
}

func SayTemplate_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SayTemplate) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SayTemplate_Repeats_Marshal(m, pv)
	}
	return
}

type SayTemplate_Flow struct{ ptr *SayTemplate }

func (n SayTemplate_Flow) GetType() string      { return SayTemplate_Type }
func (n SayTemplate_Flow) GetLede() string      { return "say" }
func (n SayTemplate_Flow) GetFlow() interface{} { return n.ptr }
func (n SayTemplate_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SayTemplate); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SayTemplate_Optional_Marshal(m jsn.Marshaler, pv **SayTemplate) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SayTemplate_Marshal(m, *pv)
	} else if !enc {
		var v SayTemplate
		if err = SayTemplate_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SayTemplate_Marshal(m jsn.Marshaler, val *SayTemplate) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SayTemplate_Flow{val}); err == nil {
		e0 := m.MarshalKey("", SayTemplate_Field_Template)
		if e0 == nil {
			e0 = prim.Lines_Marshal(m, &val.Template)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SayTemplate_Field_Template))
		}
		m.EndBlock()
	}
	return
}

// ShuffleText When called multiple times returns its inputs at random.
type ShuffleText struct {
	Parts  []rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*ShuffleText)(nil)

func (*ShuffleText) Compose() composer.Spec {
	return composer.Spec{
		Name: ShuffleText_Type,
		Uses: composer.Type_Flow,
	}
}

const ShuffleText_Type = "shuffle_text"
const ShuffleText_Field_Parts = "$PARTS"

func (op *ShuffleText) Marshal(m jsn.Marshaler) error {
	return ShuffleText_Marshal(m, op)
}

type ShuffleText_Slice []ShuffleText

func (op *ShuffleText_Slice) GetType() string { return ShuffleText_Type }

func (op *ShuffleText_Slice) Marshal(m jsn.Marshaler) error {
	return ShuffleText_Repeats_Marshal(m, (*[]ShuffleText)(op))
}

func (op *ShuffleText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ShuffleText_Slice) SetSize(cnt int) {
	var els []ShuffleText
	if cnt >= 0 {
		els = make(ShuffleText_Slice, cnt)
	}
	(*op) = els
}

func (op *ShuffleText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ShuffleText_Marshal(m, &(*op)[i])
}

func ShuffleText_Repeats_Marshal(m jsn.Marshaler, vals *[]ShuffleText) error {
	return jsn.RepeatBlock(m, (*ShuffleText_Slice)(vals))
}

func ShuffleText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ShuffleText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ShuffleText_Repeats_Marshal(m, pv)
	}
	return
}

type ShuffleText_Flow struct{ ptr *ShuffleText }

func (n ShuffleText_Flow) GetType() string      { return ShuffleText_Type }
func (n ShuffleText_Flow) GetLede() string      { return ShuffleText_Type }
func (n ShuffleText_Flow) GetFlow() interface{} { return n.ptr }
func (n ShuffleText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ShuffleText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ShuffleText_Optional_Marshal(m jsn.Marshaler, pv **ShuffleText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ShuffleText_Marshal(m, *pv)
	} else if !enc {
		var v ShuffleText
		if err = ShuffleText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ShuffleText_Marshal(m jsn.Marshaler, val *ShuffleText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ShuffleText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ShuffleText_Field_Parts)
		if e0 == nil {
			e0 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ShuffleText_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// SingularKind requires a user-specified string.
type SingularKind struct {
	Str string
}

func (op *SingularKind) String() string {
	return op.Str
}

func (*SingularKind) Compose() composer.Spec {
	return composer.Spec{
		Name:        SingularKind_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const SingularKind_Type = "singular_kind"

func (op *SingularKind) Marshal(m jsn.Marshaler) error {
	return SingularKind_Marshal(m, op)
}

func SingularKind_Optional_Marshal(m jsn.Marshaler, val *SingularKind) (err error) {
	var zero SingularKind
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = SingularKind_Marshal(m, val)
	}
	return
}

func SingularKind_Marshal(m jsn.Marshaler, val *SingularKind) (err error) {
	return m.MarshalValue(SingularKind_Type, &val.Str)
}

type SingularKind_Slice []SingularKind

func (op *SingularKind_Slice) GetType() string { return SingularKind_Type }

func (op *SingularKind_Slice) Marshal(m jsn.Marshaler) error {
	return SingularKind_Repeats_Marshal(m, (*[]SingularKind)(op))
}

func (op *SingularKind_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SingularKind_Slice) SetSize(cnt int) {
	var els []SingularKind
	if cnt >= 0 {
		els = make(SingularKind_Slice, cnt)
	}
	(*op) = els
}

func (op *SingularKind_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SingularKind_Marshal(m, &(*op)[i])
}

func SingularKind_Repeats_Marshal(m jsn.Marshaler, vals *[]SingularKind) error {
	return jsn.RepeatBlock(m, (*SingularKind_Slice)(vals))
}

func SingularKind_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SingularKind) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SingularKind_Repeats_Marshal(m, pv)
	}
	return
}

const SingularNoun_Type = "singular_noun"

var SingularNoun_Optional_Marshal = SingularNoun_Marshal

type SingularNoun_Slot struct{ Value *SingularNoun }

func (at SingularNoun_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at SingularNoun_Slot) GetType() string              { return SingularNoun_Type }
func (at SingularNoun_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at SingularNoun_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(SingularNoun)
	return
}

func SingularNoun_Marshal(m jsn.Marshaler, ptr *SingularNoun) (err error) {
	slot := SingularNoun_Slot{ptr}
	return slot.Marshal(m)
}

type SingularNoun_Slice []SingularNoun

func (op *SingularNoun_Slice) GetType() string { return SingularNoun_Type }

func (op *SingularNoun_Slice) Marshal(m jsn.Marshaler) error {
	return SingularNoun_Repeats_Marshal(m, (*[]SingularNoun)(op))
}

func (op *SingularNoun_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SingularNoun_Slice) SetSize(cnt int) {
	var els []SingularNoun
	if cnt >= 0 {
		els = make(SingularNoun_Slice, cnt)
	}
	(*op) = els
}

func (op *SingularNoun_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SingularNoun_Marshal(m, &(*op)[i])
}

func SingularNoun_Repeats_Marshal(m jsn.Marshaler, vals *[]SingularNoun) error {
	return jsn.RepeatBlock(m, (*SingularNoun_Slice)(vals))
}

func SingularNoun_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SingularNoun) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SingularNoun_Repeats_Marshal(m, pv)
	}
	return
}

// StoppingText When called multiple times returns each of its inputs in turn, sticking to the last one.
type StoppingText struct {
	Parts  []rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.TextEval = (*StoppingText)(nil)

func (*StoppingText) Compose() composer.Spec {
	return composer.Spec{
		Name: StoppingText_Type,
		Uses: composer.Type_Flow,
	}
}

const StoppingText_Type = "stopping_text"
const StoppingText_Field_Parts = "$PARTS"

func (op *StoppingText) Marshal(m jsn.Marshaler) error {
	return StoppingText_Marshal(m, op)
}

type StoppingText_Slice []StoppingText

func (op *StoppingText_Slice) GetType() string { return StoppingText_Type }

func (op *StoppingText_Slice) Marshal(m jsn.Marshaler) error {
	return StoppingText_Repeats_Marshal(m, (*[]StoppingText)(op))
}

func (op *StoppingText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *StoppingText_Slice) SetSize(cnt int) {
	var els []StoppingText
	if cnt >= 0 {
		els = make(StoppingText_Slice, cnt)
	}
	(*op) = els
}

func (op *StoppingText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return StoppingText_Marshal(m, &(*op)[i])
}

func StoppingText_Repeats_Marshal(m jsn.Marshaler, vals *[]StoppingText) error {
	return jsn.RepeatBlock(m, (*StoppingText_Slice)(vals))
}

func StoppingText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]StoppingText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = StoppingText_Repeats_Marshal(m, pv)
	}
	return
}

type StoppingText_Flow struct{ ptr *StoppingText }

func (n StoppingText_Flow) GetType() string      { return StoppingText_Type }
func (n StoppingText_Flow) GetLede() string      { return StoppingText_Type }
func (n StoppingText_Flow) GetFlow() interface{} { return n.ptr }
func (n StoppingText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*StoppingText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func StoppingText_Optional_Marshal(m jsn.Marshaler, pv **StoppingText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = StoppingText_Marshal(m, *pv)
	} else if !enc {
		var v StoppingText
		if err = StoppingText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func StoppingText_Marshal(m jsn.Marshaler, val *StoppingText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(StoppingText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", StoppingText_Field_Parts)
		if e0 == nil {
			e0 = rt.TextEval_Repeats_Marshal(m, &val.Parts)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", StoppingText_Field_Parts))
		}
		m.EndBlock()
	}
	return
}

// Story
type Story struct {
	Paragraph []Paragraph `if:"label=paragraphs"`
	Markup    map[string]any
}

func (*Story) Compose() composer.Spec {
	return composer.Spec{
		Name: Story_Type,
		Uses: composer.Type_Flow,
	}
}

const Story_Type = "story"
const Story_Field_Paragraph = "$PARAGRAPH"

func (op *Story) Marshal(m jsn.Marshaler) error {
	return Story_Marshal(m, op)
}

type Story_Slice []Story

func (op *Story_Slice) GetType() string { return Story_Type }

func (op *Story_Slice) Marshal(m jsn.Marshaler) error {
	return Story_Repeats_Marshal(m, (*[]Story)(op))
}

func (op *Story_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Story_Slice) SetSize(cnt int) {
	var els []Story
	if cnt >= 0 {
		els = make(Story_Slice, cnt)
	}
	(*op) = els
}

func (op *Story_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Story_Marshal(m, &(*op)[i])
}

func Story_Repeats_Marshal(m jsn.Marshaler, vals *[]Story) error {
	return jsn.RepeatBlock(m, (*Story_Slice)(vals))
}

func Story_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Story) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Story_Repeats_Marshal(m, pv)
	}
	return
}

type Story_Flow struct{ ptr *Story }

func (n Story_Flow) GetType() string      { return Story_Type }
func (n Story_Flow) GetLede() string      { return Story_Type }
func (n Story_Flow) GetFlow() interface{} { return n.ptr }
func (n Story_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Story); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Story_Optional_Marshal(m jsn.Marshaler, pv **Story) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Story_Marshal(m, *pv)
	} else if !enc {
		var v Story
		if err = Story_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Story_Marshal(m jsn.Marshaler, val *Story) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Story_Flow{val}); err == nil {
		e0 := m.MarshalKey("paragraphs", Story_Field_Paragraph)
		if e0 == nil {
			e0 = Paragraph_Repeats_Marshal(m, &val.Paragraph)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Story_Field_Paragraph))
		}
		m.EndBlock()
	}
	return
}

// StoryBreak this cheats a bit by making the signature the same as the comment marker  that allows nodes which look like comments but are actually story breaks.
type StoryBreak struct {
	Markup map[string]any
}

// User implemented slots:
var _ StoryStatement = (*StoryBreak)(nil)

func (*StoryBreak) Compose() composer.Spec {
	return composer.Spec{
		Name: StoryBreak_Type,
		Uses: composer.Type_Flow,
		Lede: "--",
	}
}

const StoryBreak_Type = "story_break"

func (op *StoryBreak) Marshal(m jsn.Marshaler) error {
	return StoryBreak_Marshal(m, op)
}

type StoryBreak_Slice []StoryBreak

func (op *StoryBreak_Slice) GetType() string { return StoryBreak_Type }

func (op *StoryBreak_Slice) Marshal(m jsn.Marshaler) error {
	return StoryBreak_Repeats_Marshal(m, (*[]StoryBreak)(op))
}

func (op *StoryBreak_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *StoryBreak_Slice) SetSize(cnt int) {
	var els []StoryBreak
	if cnt >= 0 {
		els = make(StoryBreak_Slice, cnt)
	}
	(*op) = els
}

func (op *StoryBreak_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return StoryBreak_Marshal(m, &(*op)[i])
}

func StoryBreak_Repeats_Marshal(m jsn.Marshaler, vals *[]StoryBreak) error {
	return jsn.RepeatBlock(m, (*StoryBreak_Slice)(vals))
}

func StoryBreak_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]StoryBreak) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = StoryBreak_Repeats_Marshal(m, pv)
	}
	return
}

type StoryBreak_Flow struct{ ptr *StoryBreak }

func (n StoryBreak_Flow) GetType() string      { return StoryBreak_Type }
func (n StoryBreak_Flow) GetLede() string      { return "--" }
func (n StoryBreak_Flow) GetFlow() interface{} { return n.ptr }
func (n StoryBreak_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*StoryBreak); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func StoryBreak_Optional_Marshal(m jsn.Marshaler, pv **StoryBreak) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = StoryBreak_Marshal(m, *pv)
	} else if !enc {
		var v StoryBreak
		if err = StoryBreak_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func StoryBreak_Marshal(m jsn.Marshaler, val *StoryBreak) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(StoryBreak_Flow{val}); err == nil {
		m.EndBlock()
	}
	return
}

// StoryFile top level node, currently just for blockly might eventually contain story metadata  ex. author, description...
type StoryFile struct {
	StoryLines []StoryStatement `if:"label=_"`
	Markup     map[string]any
}

func (*StoryFile) Compose() composer.Spec {
	return composer.Spec{
		Name: StoryFile_Type,
		Uses: composer.Type_Flow,
		Lede: "tapestry",
	}
}

const StoryFile_Type = "story_file"
const StoryFile_Field_StoryLines = "$STORY_LINES"

func (op *StoryFile) Marshal(m jsn.Marshaler) error {
	return StoryFile_Marshal(m, op)
}

type StoryFile_Slice []StoryFile

func (op *StoryFile_Slice) GetType() string { return StoryFile_Type }

func (op *StoryFile_Slice) Marshal(m jsn.Marshaler) error {
	return StoryFile_Repeats_Marshal(m, (*[]StoryFile)(op))
}

func (op *StoryFile_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *StoryFile_Slice) SetSize(cnt int) {
	var els []StoryFile
	if cnt >= 0 {
		els = make(StoryFile_Slice, cnt)
	}
	(*op) = els
}

func (op *StoryFile_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return StoryFile_Marshal(m, &(*op)[i])
}

func StoryFile_Repeats_Marshal(m jsn.Marshaler, vals *[]StoryFile) error {
	return jsn.RepeatBlock(m, (*StoryFile_Slice)(vals))
}

func StoryFile_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]StoryFile) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = StoryFile_Repeats_Marshal(m, pv)
	}
	return
}

type StoryFile_Flow struct{ ptr *StoryFile }

func (n StoryFile_Flow) GetType() string      { return StoryFile_Type }
func (n StoryFile_Flow) GetLede() string      { return "tapestry" }
func (n StoryFile_Flow) GetFlow() interface{} { return n.ptr }
func (n StoryFile_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*StoryFile); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func StoryFile_Optional_Marshal(m jsn.Marshaler, pv **StoryFile) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = StoryFile_Marshal(m, *pv)
	} else if !enc {
		var v StoryFile
		if err = StoryFile_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func StoryFile_Marshal(m jsn.Marshaler, val *StoryFile) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(StoryFile_Flow{val}); err == nil {
		e0 := m.MarshalKey("", StoryFile_Field_StoryLines)
		if e0 == nil {
			e0 = StoryStatement_Repeats_Marshal(m, &val.StoryLines)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", StoryFile_Field_StoryLines))
		}
		m.EndBlock()
	}
	return
}

const StoryStatement_Type = "story_statement"

var StoryStatement_Optional_Marshal = StoryStatement_Marshal

type StoryStatement_Slot struct{ Value *StoryStatement }

func (at StoryStatement_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at StoryStatement_Slot) GetType() string              { return StoryStatement_Type }
func (at StoryStatement_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at StoryStatement_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(StoryStatement)
	return
}

func StoryStatement_Marshal(m jsn.Marshaler, ptr *StoryStatement) (err error) {
	slot := StoryStatement_Slot{ptr}
	return slot.Marshal(m)
}

type StoryStatement_Slice []StoryStatement

func (op *StoryStatement_Slice) GetType() string { return StoryStatement_Type }

func (op *StoryStatement_Slice) Marshal(m jsn.Marshaler) error {
	return StoryStatement_Repeats_Marshal(m, (*[]StoryStatement)(op))
}

func (op *StoryStatement_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *StoryStatement_Slice) SetSize(cnt int) {
	var els []StoryStatement
	if cnt >= 0 {
		els = make(StoryStatement_Slice, cnt)
	}
	(*op) = els
}

func (op *StoryStatement_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return StoryStatement_Marshal(m, &(*op)[i])
}

func StoryStatement_Repeats_Marshal(m jsn.Marshaler, vals *[]StoryStatement) error {
	return jsn.RepeatBlock(m, (*StoryStatement_Slice)(vals))
}

func StoryStatement_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]StoryStatement) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = StoryStatement_Repeats_Marshal(m, pv)
	}
	return
}

// TextField
type TextField struct {
	Name      string      `if:"label=_,type=text"`
	Type      string      `if:"label=kind,optional,type=text"`
	Initially rt.TextEval `if:"label=initially,optional"`
	Markup    map[string]any
}

// User implemented slots:
var _ Field = (*TextField)(nil)

func (*TextField) Compose() composer.Spec {
	return composer.Spec{
		Name: TextField_Type,
		Uses: composer.Type_Flow,
		Lede: "text",
	}
}

const TextField_Type = "text_field"
const TextField_Field_Name = "$NAME"
const TextField_Field_Type = "$TYPE"
const TextField_Field_Initially = "$INITIALLY"

func (op *TextField) Marshal(m jsn.Marshaler) error {
	return TextField_Marshal(m, op)
}

type TextField_Slice []TextField

func (op *TextField_Slice) GetType() string { return TextField_Type }

func (op *TextField_Slice) Marshal(m jsn.Marshaler) error {
	return TextField_Repeats_Marshal(m, (*[]TextField)(op))
}

func (op *TextField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TextField_Slice) SetSize(cnt int) {
	var els []TextField
	if cnt >= 0 {
		els = make(TextField_Slice, cnt)
	}
	(*op) = els
}

func (op *TextField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TextField_Marshal(m, &(*op)[i])
}

func TextField_Repeats_Marshal(m jsn.Marshaler, vals *[]TextField) error {
	return jsn.RepeatBlock(m, (*TextField_Slice)(vals))
}

func TextField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TextField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TextField_Repeats_Marshal(m, pv)
	}
	return
}

type TextField_Flow struct{ ptr *TextField }

func (n TextField_Flow) GetType() string      { return TextField_Type }
func (n TextField_Flow) GetLede() string      { return "text" }
func (n TextField_Flow) GetFlow() interface{} { return n.ptr }
func (n TextField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TextField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TextField_Optional_Marshal(m jsn.Marshaler, pv **TextField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TextField_Marshal(m, *pv)
	} else if !enc {
		var v TextField
		if err = TextField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TextField_Marshal(m jsn.Marshaler, val *TextField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(TextField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", TextField_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", TextField_Field_Name))
		}
		e1 := m.MarshalKey("kind", TextField_Field_Type)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TextField_Field_Type))
		}
		e2 := m.MarshalKey("initially", TextField_Field_Initially)
		if e2 == nil {
			e2 = rt.TextEval_Optional_Marshal(m, &val.Initially)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", TextField_Field_Initially))
		}
		m.EndBlock()
	}
	return
}

// TextListField
type TextListField struct {
	Name      string          `if:"label=_,type=text"`
	Type      string          `if:"label=kind,optional,type=text"`
	Initially rt.TextListEval `if:"label=initially,optional"`
	Markup    map[string]any
}

// User implemented slots:
var _ Field = (*TextListField)(nil)

func (*TextListField) Compose() composer.Spec {
	return composer.Spec{
		Name: TextListField_Type,
		Uses: composer.Type_Flow,
		Lede: "text_list",
	}
}

const TextListField_Type = "text_list_field"
const TextListField_Field_Name = "$NAME"
const TextListField_Field_Type = "$TYPE"
const TextListField_Field_Initially = "$INITIALLY"

func (op *TextListField) Marshal(m jsn.Marshaler) error {
	return TextListField_Marshal(m, op)
}

type TextListField_Slice []TextListField

func (op *TextListField_Slice) GetType() string { return TextListField_Type }

func (op *TextListField_Slice) Marshal(m jsn.Marshaler) error {
	return TextListField_Repeats_Marshal(m, (*[]TextListField)(op))
}

func (op *TextListField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TextListField_Slice) SetSize(cnt int) {
	var els []TextListField
	if cnt >= 0 {
		els = make(TextListField_Slice, cnt)
	}
	(*op) = els
}

func (op *TextListField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TextListField_Marshal(m, &(*op)[i])
}

func TextListField_Repeats_Marshal(m jsn.Marshaler, vals *[]TextListField) error {
	return jsn.RepeatBlock(m, (*TextListField_Slice)(vals))
}

func TextListField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TextListField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TextListField_Repeats_Marshal(m, pv)
	}
	return
}

type TextListField_Flow struct{ ptr *TextListField }

func (n TextListField_Flow) GetType() string      { return TextListField_Type }
func (n TextListField_Flow) GetLede() string      { return "text_list" }
func (n TextListField_Flow) GetFlow() interface{} { return n.ptr }
func (n TextListField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TextListField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TextListField_Optional_Marshal(m jsn.Marshaler, pv **TextListField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TextListField_Marshal(m, *pv)
	} else if !enc {
		var v TextListField
		if err = TextListField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TextListField_Marshal(m jsn.Marshaler, val *TextListField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(TextListField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", TextListField_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", TextListField_Field_Name))
		}
		e1 := m.MarshalKey("kind", TextListField_Field_Type)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Type)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TextListField_Field_Type))
		}
		e2 := m.MarshalKey("initially", TextListField_Field_Initially)
		if e2 == nil {
			e2 = rt.TextListEval_Optional_Marshal(m, &val.Initially)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", TextListField_Field_Initially))
		}
		m.EndBlock()
	}
	return
}

var Slots = []interface{}{
	(*Field)(nil),
	(*NamedNoun)(nil),
	(*SingularNoun)(nil),
	(*StoryStatement)(nil),
}

var Slats = []composer.Composer{
	(*AbstractAction)(nil),
	(*ActionContext)(nil),
	(*ActionDecl)(nil),
	(*ActionName)(nil),
	(*ActionParams)(nil),
	(*AspectField)(nil),
	(*BoolField)(nil),
	(*CommonAction)(nil),
	(*CommonNoun)(nil),
	(*CountOf)(nil),
	(*CountedNouns)(nil),
	(*CycleText)(nil),
	(*DefineFields)(nil),
	(*DefineKinds)(nil),
	(*DefineNouns)(nil),
	(*DefineRelatives)(nil),
	(*DefineTraits)(nil),
	(*Determiner)(nil),
	(*EventBlock)(nil),
	(*EventHandler)(nil),
	(*EventName)(nil),
	(*EventPhase)(nil),
	(*EventTarget)(nil),
	(*GrammarDecl)(nil),
	(*KindOfRelation)(nil),
	(*MakeOpposite)(nil),
	(*MakePlural)(nil),
	(*ManyToMany)(nil),
	(*ManyToOne)(nil),
	(*MapConnection)(nil),
	(*MapDeparting)(nil),
	(*MapDirection)(nil),
	(*MapHeading)(nil),
	(*NounAssignment)(nil),
	(*NounName)(nil),
	(*NounNamed)(nil),
	(*NumListField)(nil),
	(*NumberField)(nil),
	(*OneToMany)(nil),
	(*OneToOne)(nil),
	(*PairedAction)(nil),
	(*Paragraph)(nil),
	(*PatternActions)(nil),
	(*PatternDecl)(nil),
	(*PatternFlags)(nil),
	(*PatternReturn)(nil),
	(*PatternRule)(nil),
	(*PatternType)(nil),
	(*PluralKinds)(nil),
	(*Property)(nil),
	(*RecordField)(nil),
	(*RecordListField)(nil),
	(*RelationCardinality)(nil),
	(*SayResponse)(nil),
	(*SayTemplate)(nil),
	(*ShuffleText)(nil),
	(*SingularKind)(nil),
	(*StoppingText)(nil),
	(*Story)(nil),
	(*StoryBreak)(nil),
	(*StoryFile)(nil),
	(*TextField)(nil),
	(*TextListField)(nil),
}

var Signatures = map[uint64]interface{}{
	15843873826946452289: (*AbstractAction)(nil),      /* AbstractAction: */
	7872120455849093108:  (*ActionContext)(nil),       /* ActionContext: */
	6874395953916233682:  (*ActionName)(nil),          /* ActionName: */
	14902711848163440508: (*ActionParams)(nil),        /* ActionParams common: */
	11902859627634050329: (*ActionParams)(nil),        /* ActionParams dual: */
	5868886119925925865:  (*ActionParams)(nil),        /* ActionParams none: */
	13295757043766156580: (*CommonAction)(nil),        /* CommonAction: */
	11796688776587655409: (*CommonAction)(nil),        /* CommonAction:actionContext: */
	3594459841754826354:  (*Determiner)(nil),          /* Determiner: */
	9237333280207697554:  (*EventName)(nil),           /* EventName: */
	10643959568823028160: (*EventPhase)(nil),          /* EventPhase: */
	18010503397334720257: (*EventTarget)(nil),         /* EventTarget kinds: */
	14691585264072030736: (*EventTarget)(nil),         /* EventTarget noun: */
	17563761532337350103: (*ManyToMany)(nil),          /* ManyToMany:otherKinds: */
	4129025779762507875:  (*ManyToOne)(nil),           /* ManyToOne:kind: */
	13422667607848275221: (*MapConnection)(nil),       /* MapConnection: */
	691606134106503892:   (*MapDirection)(nil),        /* MapDirection: */
	7274788867537390664:  (*NounName)(nil),            /* NounName: */
	17075866407822548206: (*OneToMany)(nil),           /* OneToMany:kinds: */
	13766274136867271026: (*OneToOne)(nil),            /* OneToOne:otherKind: */
	18143853777230560632: (*PairedAction)(nil),        /* PairedAction: */
	6457542997147343897:  (*Paragraph)(nil),           /* Paragraph */
	1044755875845214073:  (*Paragraph)(nil),           /* Paragraph: */
	355438255946453678:   (*PatternFlags)(nil),        /* PatternFlags: */
	3203894909373400694:  (*PatternReturn)(nil),       /* PatternResult: */
	10703761093736583840: (*PatternRule)(nil),         /* PatternRule:does: */
	1493717172765332753:  (*PatternRule)(nil),         /* PatternRule:flags:does: */
	8871095629143932769:  (*PatternType)(nil),         /* PatternType: */
	6559594854670367592:  (*PluralKinds)(nil),         /* PluralKinds: */
	14147411094705515606: (*Property)(nil),            /* Property: */
	14287924768394488954: (*RelationCardinality)(nil), /* RelationCardinality manyToMany: */
	10453256446593418889: (*RelationCardinality)(nil), /* RelationCardinality manyToOne: */
	18092929693239672593: (*RelationCardinality)(nil), /* RelationCardinality oneToMany: */
	5587008972147064084:  (*RelationCardinality)(nil), /* RelationCardinality oneToOne: */
	12747929101973989672: (*SingularKind)(nil),        /* SingularKind: */
	11597613116511938589: (*Story)(nil),               /* Story paragraphs: */
	5991962903091297123:  (*StoryFile)(nil),           /* Tapestry: */
	8990910809673849454:  (*EventHandler)(nil),        /* With:event:provides:rules: */
	3588173502446728488:  (*EventHandler)(nil),        /* With:event:rules: */
	4360765066804052293:  (*StoryBreak)(nil),          /* story_statement=-- */
	5917691408841273556:  (*AspectField)(nil),         /* field=Aspect: */
	929259210929400392:   (*BoolField)(nil),           /* field=Bool: */
	8800077586553476131:  (*BoolField)(nil),           /* field=Bool:initially: */
	12371124790835217408: (*BoolField)(nil),           /* field=Bool:kind: */
	3110376293195187131:  (*BoolField)(nil),           /* field=Bool:kind:initially: */
	10143132576483224253: (*CountOf)(nil),             /* bool_eval=CountOf:num: */
	231398832069830353:   (*CycleText)(nil),           /* text_eval=CycleText: */
	8980281312975545398:  (*DefineFields)(nil),        /* story_statement=Define kind:has: */
	11622379079031968031: (*DefineKinds)(nil),         /* story_statement=Define kinds:as: */
	7397461044941158073:  (*DefineNouns)(nil),         /* story_statement=Define nouns:as: */
	3312780025686222185:  (*DefineRelatives)(nil),     /* story_statement=Define nouns:as:relation:noun: */
	15286672803702417298: (*DefineNouns)(nil),         /* story_statement=Define nouns:as:traits: */
	6831984772337915121:  (*DefineRelatives)(nil),     /* story_statement=Define nouns:relation:noun: */
	15529630764532221441: (*DefineTraits)(nil),        /* story_statement=Define traits:aspect: */
	12862689211056047959: (*MapDeparting)(nil),        /* story_statement=Departing from:via:and:otherRoom: */
	12226644017914492267: (*ActionDecl)(nil),          /* story_statement=Event:action:args common: */
	11054984519068268358: (*ActionDecl)(nil),          /* story_statement=Event:action:args dual: */
	8992747511707391102:  (*ActionDecl)(nil),          /* story_statement=Event:action:args none: */
	4045441026877120438:  (*GrammarDecl)(nil),         /* story_statement=GrammarDecl: */
	2625420806444094675:  (*MapHeading)(nil),          /* story_statement=Heading:from:and:otherRoom: */
	9997819433665596617:  (*MapHeading)(nil),          /* story_statement=Heading:from:via:and:otherRoom: */
	14551249057549655331: (*KindOfRelation)(nil),      /* story_statement=KindOfRelation:cardinality manyToMany: */
	3383078616901163718:  (*KindOfRelation)(nil),      /* story_statement=KindOfRelation:cardinality manyToOne: */
	5643087631915217830:  (*KindOfRelation)(nil),      /* story_statement=KindOfRelation:cardinality oneToMany: */
	5160168163884592453:  (*KindOfRelation)(nil),      /* story_statement=KindOfRelation:cardinality oneToOne: */
	17526933228095224780: (*EventBlock)(nil),          /* story_statement=Listen kinds:handlers: */
	12304970653546840411: (*EventBlock)(nil),          /* story_statement=Listen noun:handlers: */
	12130342806058120266: (*MakeOpposite)(nil),        /* story_statement=Make:opposite: */
	8107023930195182683:  (*MakePlural)(nil),          /* story_statement=Make:plural: */
	7315903014127055020:  (*NounNamed)(nil),           /* named_noun=Noun: */
	2148674162701691978:  (*NounNamed)(nil),           /* singular_noun=Noun: */
	6508739485154276153:  (*CommonNoun)(nil),          /* named_noun=Noun:named: */
	9335207376881300111:  (*CommonNoun)(nil),          /* singular_noun=Noun:named: */
	8983976057391918886:  (*NounAssignment)(nil),      /* story_statement=NounAssignment:nouns:lines: */
	1119385123956310430:  (*CountedNouns)(nil),        /* named_noun=Nouns:named: */
	17312507452399750264: (*NumListField)(nil),        /* field=NumList: */
	13189420990506792051: (*NumListField)(nil),        /* field=NumList:initially: */
	9348125496154177200:  (*NumListField)(nil),        /* field=NumList:kind: */
	1285150463477439883:  (*NumListField)(nil),        /* field=NumList:kind:initially: */
	8487518704472251667:  (*NumberField)(nil),         /* field=Number: */
	12240858331879781776: (*NumberField)(nil),         /* field=Number:initially: */
	16068510506387834393: (*NumberField)(nil),         /* field=Number:kind: */
	931083588704034470:   (*NumberField)(nil),         /* field=Number:kind:initially: */
	11805892574345609795: (*PatternDecl)(nil),         /* story_statement=Pattern: */
	5803330913337388662:  (*PatternActions)(nil),      /* story_statement=Pattern:provides:rules: */
	17499264412780813319: (*PatternDecl)(nil),         /* story_statement=Pattern:requires: */
	10828994360773868920: (*PatternDecl)(nil),         /* story_statement=Pattern:requires:returns: */
	13721253842616561476: (*PatternDecl)(nil),         /* story_statement=Pattern:returns: */
	15334083968500114832: (*PatternActions)(nil),      /* story_statement=Pattern:rules: */
	16830519956255384977: (*SayResponse)(nil),         /* execute=Print response:with: */
	10478796600040997822: (*SayResponse)(nil),         /* text_eval=Print response:with: */
	8137307643484617139:  (*RecordField)(nil),         /* field=Record: */
	14268486262656655408: (*RecordField)(nil),         /* field=Record:initially: */
	355191898393732025:   (*RecordField)(nil),         /* field=Record:kind: */
	17210787958517369542: (*RecordField)(nil),         /* field=Record:kind:initially: */
	11959710305603894939: (*RecordListField)(nil),     /* field=RecordList: */
	11931798142536216664: (*RecordListField)(nil),     /* field=RecordList:initially: */
	1057635318610052945:  (*RecordListField)(nil),     /* field=RecordList:kind: */
	1164224146587824190:  (*RecordListField)(nil),     /* field=RecordList:kind:initially: */
	9556993961571292952:  (*SayTemplate)(nil),         /* execute=Say: */
	15989777734244204735: (*SayTemplate)(nil),         /* text_eval=Say: */
	9910951906340888308:  (*ShuffleText)(nil),         /* text_eval=ShuffleText: */
	13921723804355948971: (*StoppingText)(nil),        /* text_eval=StoppingText: */
	8130344761444222709:  (*TextField)(nil),           /* field=Text: */
	6524581251606795538:  (*TextField)(nil),           /* field=Text:initially: */
	17964742375211875755: (*TextField)(nil),           /* field=Text:kind: */
	9452278286570155464:  (*TextField)(nil),           /* field=Text:kind:initially: */
	10624393162610648969: (*TextListField)(nil),       /* field=TextList: */
	16555060041426966326: (*TextListField)(nil),       /* field=TextList:initially: */
	5819932921227536375:  (*TextListField)(nil),       /* field=TextList:kind: */
	3965346382920662612:  (*TextListField)(nil),       /* field=TextList:kind:initially: */
}
