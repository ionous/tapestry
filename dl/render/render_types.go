// Code generated by Tapestry; edit at your own risk.
package render

import (
	"git.sr.ht/~ionous/tapestry/dl/assign"
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/dl/rti"
	"git.sr.ht/~ionous/tapestry/lang/typeinfo"
)

// render_eval, a type of slot.
const Z_RenderEval_Type = "render_eval"

var Z_RenderEval_Info = typeinfo.Slot{
	Name: Z_RenderEval_Type,
	Markup: map[string]any{
		"comment": "Used with render pattern for arguments of unknown type.",
	},
}

// holds a single slot
// FIX: currently provided by the spec
type FIX_RenderEval_Slot struct{ Value RenderEval }

// implements typeinfo.Inspector for a single slot.
func (*RenderEval_Slot) Inspect() typeinfo.T {
	return &Z_RenderEval_Info
}

// holds a slice of slots
type RenderEval_Slots []RenderEval

// implements typeinfo.Inspector for a series of slots.
func (*RenderEval_Slots) Inspect() typeinfo.T {
	return &Z_RenderEval_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_RenderName struct {
	Name   string
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*RenderName) Inspect() typeinfo.T {
	return &Z_RenderName_Info
}

// return a valid markup map, creating it if necessary.
func (op *RenderName) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// render_name, a type of flow.
const Z_RenderName_Type = "render_name"

// ensure the command implements its specified slots:
var _ rti.TextEval = (*RenderName)(nil)

var Z_RenderName_Info = typeinfo.Flow{
	Name: Z_RenderName_Type,
	Lede: "render_name",
	Terms: []typeinfo.Term{{
		Name:  "name",
		Label: "_",
		Type:  &prim.Z_Text_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_TextEval_Info,
	},
	Markup: map[string]any{
		"comment": []interface{}{"Handles changing a template like {.boombip} into text.", "If the name is a variable containing an object name: return the printed object name ( via \"print name\" );", "if the name is a variable with some other text: return that text;", "if the name isn't a variable but refers to some object: return that object's printed object name;", "otherwise, its an error."},
	},
}

// holds a slice of type render_name
// FIX: duplicates the spec decl.
type FIX_RenderName_Slice []RenderName

// implements typeinfo.Inspector
func (*RenderName_Slice) Inspect() typeinfo.T {
	return &Z_RenderName_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_RenderRef struct {
	Name   rti.TextEval
	Dot    assign.Dot
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*RenderRef) Inspect() typeinfo.T {
	return &Z_RenderRef_Info
}

// return a valid markup map, creating it if necessary.
func (op *RenderRef) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// render_ref, a type of flow.
const Z_RenderRef_Type = "render_ref"

// ensure the command implements its specified slots:
var _ rti.BoolEval = (*RenderRef)(nil)
var _ rti.NumberEval = (*RenderRef)(nil)
var _ rti.TextEval = (*RenderRef)(nil)
var _ rti.RecordEval = (*RenderRef)(nil)
var _ rti.NumListEval = (*RenderRef)(nil)
var _ rti.TextListEval = (*RenderRef)(nil)
var _ rti.RecordListEval = (*RenderRef)(nil)
var _ RenderEval = (*RenderRef)(nil)

var Z_RenderRef_Info = typeinfo.Flow{
	Name: Z_RenderRef_Type,
	Lede: "render_ref",
	Terms: []typeinfo.Term{{
		Name:  "name",
		Label: "_",
		Type:  &rti.Z_TextEval_Info,
	}, {
		Name:     "dot",
		Label:    "dot",
		Optional: true,
		Repeats:  true,
		Type:     &assign.Z_Dot_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_BoolEval_Info,
		&rti.Z_NumberEval_Info,
		&rti.Z_TextEval_Info,
		&rti.Z_RecordEval_Info,
		&rti.Z_NumListEval_Info,
		&rti.Z_TextListEval_Info,
		&rti.Z_RecordListEval_Info,
		&Z_RenderEval_Info,
	},
	Markup: map[string]any{
		"comment": []interface{}{"Pull a value from name that might refer either to a variable, or to an object.", "If the name is an object, returns the object id."},
	},
}

// holds a slice of type render_ref
// FIX: duplicates the spec decl.
type FIX_RenderRef_Slice []RenderRef

// implements typeinfo.Inspector
func (*RenderRef_Slice) Inspect() typeinfo.T {
	return &Z_RenderRef_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_RenderValue struct {
	Value  rti.Assignment
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*RenderValue) Inspect() typeinfo.T {
	return &Z_RenderValue_Info
}

// return a valid markup map, creating it if necessary.
func (op *RenderValue) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// render_value, a type of flow.
const Z_RenderValue_Type = "render_value"

// ensure the command implements its specified slots:
var _ RenderEval = (*RenderValue)(nil)

var Z_RenderValue_Info = typeinfo.Flow{
	Name: Z_RenderValue_Type,
	Lede: "render_value",
	Terms: []typeinfo.Term{{
		Name:  "value",
		Label: "_",
		Type:  &rti.Z_Assignment_Info,
	}},
	Slots: []*typeinfo.Slot{
		&Z_RenderEval_Info,
	},
	Markup: map[string]any{
		"comment": "Pull a value from an assignment of unknown affinity.",
	},
}

// holds a slice of type render_value
// FIX: duplicates the spec decl.
type FIX_RenderValue_Slice []RenderValue

// implements typeinfo.Inspector
func (*RenderValue_Slice) Inspect() typeinfo.T {
	return &Z_RenderValue_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_RenderPattern struct {
	PatternName string
	Render      RenderEval
	Markup      map[string]any
}

// implements typeinfo.Inspector
func (*RenderPattern) Inspect() typeinfo.T {
	return &Z_RenderPattern_Info
}

// return a valid markup map, creating it if necessary.
func (op *RenderPattern) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// render_pattern, a type of flow.
const Z_RenderPattern_Type = "render_pattern"

// ensure the command implements its specified slots:
var _ rti.BoolEval = (*RenderPattern)(nil)
var _ rti.TextEval = (*RenderPattern)(nil)
var _ RenderEval = (*RenderPattern)(nil)

var Z_RenderPattern_Info = typeinfo.Flow{
	Name: Z_RenderPattern_Type,
	Lede: "render",
	Terms: []typeinfo.Term{{
		Name:  "pattern_name",
		Label: "_",
		Type:  &prim.Z_Text_Info,
	}, {
		Name:    "render",
		Label:   "render",
		Repeats: true,
		Type:    &Z_RenderEval_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_BoolEval_Info,
		&rti.Z_TextEval_Info,
		&Z_RenderEval_Info,
	},
	Markup: map[string]any{
		"comment": []interface{}{"A version of core's call pattern", "that figures out how to evaluate its arguments at runtime."},
	},
}

// holds a slice of type render_pattern
// FIX: duplicates the spec decl.
type FIX_RenderPattern_Slice []RenderPattern

// implements typeinfo.Inspector
func (*RenderPattern_Slice) Inspect() typeinfo.T {
	return &Z_RenderPattern_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_RenderResponse struct {
	Name   string
	Text   rti.TextEval
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*RenderResponse) Inspect() typeinfo.T {
	return &Z_RenderResponse_Info
}

// return a valid markup map, creating it if necessary.
func (op *RenderResponse) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// render_response, a type of flow.
const Z_RenderResponse_Type = "render_response"

// ensure the command implements its specified slots:
var _ rti.Execute = (*RenderResponse)(nil)
var _ rti.TextEval = (*RenderResponse)(nil)

var Z_RenderResponse_Info = typeinfo.Flow{
	Name: Z_RenderResponse_Type,
	Lede: "render_response",
	Terms: []typeinfo.Term{{
		Name:  "name",
		Label: "_",
		Type:  &prim.Z_Text_Info,
	}, {
		Name:     "text",
		Label:    "text",
		Optional: true,
		Type:     &rti.Z_TextEval_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_Execute_Info,
		&rti.Z_TextEval_Info,
	},
	Markup: map[string]any{
		"comment": "Generate text in a replaceable manner.",
	},
}

// holds a slice of type render_response
// FIX: duplicates the spec decl.
type FIX_RenderResponse_Slice []RenderResponse

// implements typeinfo.Inspector
func (*RenderResponse_Slice) Inspect() typeinfo.T {
	return &Z_RenderResponse_Info
}

// a list of all slots in this this package
// ( ex. for generating blockly shapes )
var Y_slot_List = []*typeinfo.Slot{
	&Z_RenderEval_Info,
}

// a list of all flows in this this package
// ( ex. for reading blockly blocks )
var Y_flow_List = []*typeinfo.Flow{
	&Z_RenderName_Info,
	&Z_RenderRef_Info,
	&Z_RenderValue_Info,
	&Z_RenderPattern_Info,
	&Z_RenderResponse_Info,
}

// a list of all command signatures
// ( for processing and verifying story files )
var Z_Signatures = map[uint64]interface{}{}
