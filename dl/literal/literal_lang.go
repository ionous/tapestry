// Code generated by "makeops"; edit at your own risk.
package literal

import (
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/jsn"
	"git.sr.ht/~ionous/tapestry/rt"
	"github.com/ionous/errutil"
)

// BoolValue Specify an explicit true or false.
type BoolValue struct {
	Value       bool   `if:"label=value,type=bool"`
	Kind        string `if:"label=kind,optional,type=text"`
	UserComment string
}

// User implemented slots:
var _ rt.BoolEval = (*BoolValue)(nil)
var _ LiteralValue = (*BoolValue)(nil)

func (*BoolValue) Compose() composer.Spec {
	return composer.Spec{
		Name: BoolValue_Type,
		Uses: composer.Type_Flow,
		Lede: "bool",
	}
}

const BoolValue_Type = "bool_value"
const BoolValue_Field_Value = "$VALUE"
const BoolValue_Field_Kind = "$KIND"

func (op *BoolValue) Marshal(m jsn.Marshaler) error {
	return BoolValue_Marshal(m, op)
}

type BoolValue_Slice []BoolValue

func (op *BoolValue_Slice) GetType() string { return BoolValue_Type }

func (op *BoolValue_Slice) Marshal(m jsn.Marshaler) error {
	return BoolValue_Repeats_Marshal(m, (*[]BoolValue)(op))
}

func (op *BoolValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *BoolValue_Slice) SetSize(cnt int) {
	var els []BoolValue
	if cnt >= 0 {
		els = make(BoolValue_Slice, cnt)
	}
	(*op) = els
}

func (op *BoolValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return BoolValue_Marshal(m, &(*op)[i])
}

func BoolValue_Repeats_Marshal(m jsn.Marshaler, vals *[]BoolValue) error {
	return jsn.RepeatBlock(m, (*BoolValue_Slice)(vals))
}

func BoolValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]BoolValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = BoolValue_Repeats_Marshal(m, pv)
	}
	return
}

type BoolValue_Flow struct{ ptr *BoolValue }

func (n BoolValue_Flow) GetType() string      { return BoolValue_Type }
func (n BoolValue_Flow) GetLede() string      { return "bool" }
func (n BoolValue_Flow) GetFlow() interface{} { return n.ptr }
func (n BoolValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*BoolValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func BoolValue_Optional_Marshal(m jsn.Marshaler, pv **BoolValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = BoolValue_Marshal(m, *pv)
	} else if !enc {
		var v BoolValue
		if err = BoolValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func BoolValue_Marshal(m jsn.Marshaler, val *BoolValue) (err error) {
	m.SetComment(&val.UserComment)
	if err = m.MarshalBlock(BoolValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("value", BoolValue_Field_Value)
		if e0 == nil {
			e0 = prim.Bool_Unboxed_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", BoolValue_Field_Value))
		}
		e1 := m.MarshalKey("kind", BoolValue_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", BoolValue_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// FieldList A series of values all for the same record.
// While it can be specified wherever a literal value can, it only has meaning when the record type is known.
type FieldList struct {
	Fields      []FieldValue `if:"label=_"`
	UserComment string
}

// User implemented slots:
var _ LiteralValue = (*FieldList)(nil)

func (*FieldList) Compose() composer.Spec {
	return composer.Spec{
		Name: FieldList_Type,
		Uses: composer.Type_Flow,
		Lede: "field_list",
	}
}

const FieldList_Type = "field_list"
const FieldList_Field_Fields = "$FIELDS"

func (op *FieldList) Marshal(m jsn.Marshaler) error {
	return FieldList_Marshal(m, op)
}

type FieldList_Slice []FieldList

func (op *FieldList_Slice) GetType() string { return FieldList_Type }

func (op *FieldList_Slice) Marshal(m jsn.Marshaler) error {
	return FieldList_Repeats_Marshal(m, (*[]FieldList)(op))
}

func (op *FieldList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FieldList_Slice) SetSize(cnt int) {
	var els []FieldList
	if cnt >= 0 {
		els = make(FieldList_Slice, cnt)
	}
	(*op) = els
}

func (op *FieldList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FieldList_Marshal(m, &(*op)[i])
}

func FieldList_Repeats_Marshal(m jsn.Marshaler, vals *[]FieldList) error {
	return jsn.RepeatBlock(m, (*FieldList_Slice)(vals))
}

func FieldList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FieldList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FieldList_Repeats_Marshal(m, pv)
	}
	return
}

type FieldList_Flow struct{ ptr *FieldList }

func (n FieldList_Flow) GetType() string      { return FieldList_Type }
func (n FieldList_Flow) GetLede() string      { return "field_list" }
func (n FieldList_Flow) GetFlow() interface{} { return n.ptr }
func (n FieldList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FieldList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FieldList_Optional_Marshal(m jsn.Marshaler, pv **FieldList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FieldList_Marshal(m, *pv)
	} else if !enc {
		var v FieldList
		if err = FieldList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FieldList_Marshal(m jsn.Marshaler, val *FieldList) (err error) {
	m.SetComment(&val.UserComment)
	if err = m.MarshalBlock(FieldList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FieldList_Field_Fields)
		if e0 == nil {
			e0 = FieldValue_Repeats_Marshal(m, &val.Fields)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FieldList_Field_Fields))
		}
		m.EndBlock()
	}
	return
}

// FieldValue A fixed value of a record.
type FieldValue struct {
	Field       string       `if:"label=_,type=text"`
	Value       LiteralValue `if:"label=value"`
	UserComment string
}

func (*FieldValue) Compose() composer.Spec {
	return composer.Spec{
		Name: FieldValue_Type,
		Uses: composer.Type_Flow,
		Lede: "field",
	}
}

const FieldValue_Type = "field_value"
const FieldValue_Field_Field = "$FIELD"
const FieldValue_Field_Value = "$VALUE"

func (op *FieldValue) Marshal(m jsn.Marshaler) error {
	return FieldValue_Marshal(m, op)
}

type FieldValue_Slice []FieldValue

func (op *FieldValue_Slice) GetType() string { return FieldValue_Type }

func (op *FieldValue_Slice) Marshal(m jsn.Marshaler) error {
	return FieldValue_Repeats_Marshal(m, (*[]FieldValue)(op))
}

func (op *FieldValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FieldValue_Slice) SetSize(cnt int) {
	var els []FieldValue
	if cnt >= 0 {
		els = make(FieldValue_Slice, cnt)
	}
	(*op) = els
}

func (op *FieldValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FieldValue_Marshal(m, &(*op)[i])
}

func FieldValue_Repeats_Marshal(m jsn.Marshaler, vals *[]FieldValue) error {
	return jsn.RepeatBlock(m, (*FieldValue_Slice)(vals))
}

func FieldValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FieldValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FieldValue_Repeats_Marshal(m, pv)
	}
	return
}

type FieldValue_Flow struct{ ptr *FieldValue }

func (n FieldValue_Flow) GetType() string      { return FieldValue_Type }
func (n FieldValue_Flow) GetLede() string      { return "field" }
func (n FieldValue_Flow) GetFlow() interface{} { return n.ptr }
func (n FieldValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FieldValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FieldValue_Optional_Marshal(m jsn.Marshaler, pv **FieldValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FieldValue_Marshal(m, *pv)
	} else if !enc {
		var v FieldValue
		if err = FieldValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FieldValue_Marshal(m jsn.Marshaler, val *FieldValue) (err error) {
	m.SetComment(&val.UserComment)
	if err = m.MarshalBlock(FieldValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FieldValue_Field_Field)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Field)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FieldValue_Field_Field))
		}
		e1 := m.MarshalKey("value", FieldValue_Field_Value)
		if e1 == nil {
			e1 = LiteralValue_Marshal(m, &val.Value)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", FieldValue_Field_Value))
		}
		m.EndBlock()
	}
	return
}

const LiteralValue_Type = "literal_value"

var LiteralValue_Optional_Marshal = LiteralValue_Marshal

type LiteralValue_Slot struct{ Value *LiteralValue }

func (at LiteralValue_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at LiteralValue_Slot) GetType() string              { return LiteralValue_Type }
func (at LiteralValue_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at LiteralValue_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(LiteralValue)
	return
}

func LiteralValue_Marshal(m jsn.Marshaler, ptr *LiteralValue) (err error) {
	slot := LiteralValue_Slot{ptr}
	return slot.Marshal(m)
}

type LiteralValue_Slice []LiteralValue

func (op *LiteralValue_Slice) GetType() string { return LiteralValue_Type }

func (op *LiteralValue_Slice) Marshal(m jsn.Marshaler) error {
	return LiteralValue_Repeats_Marshal(m, (*[]LiteralValue)(op))
}

func (op *LiteralValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *LiteralValue_Slice) SetSize(cnt int) {
	var els []LiteralValue
	if cnt >= 0 {
		els = make(LiteralValue_Slice, cnt)
	}
	(*op) = els
}

func (op *LiteralValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return LiteralValue_Marshal(m, &(*op)[i])
}

func LiteralValue_Repeats_Marshal(m jsn.Marshaler, vals *[]LiteralValue) error {
	return jsn.RepeatBlock(m, (*LiteralValue_Slice)(vals))
}

func LiteralValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]LiteralValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = LiteralValue_Repeats_Marshal(m, pv)
	}
	return
}

// NumValue Specify a particular number.
type NumValue struct {
	Value       float64 `if:"label=value,type=number"`
	Kind        string  `if:"label=kind,optional,type=text"`
	UserComment string
}

// User implemented slots:
var _ rt.NumberEval = (*NumValue)(nil)
var _ LiteralValue = (*NumValue)(nil)

func (*NumValue) Compose() composer.Spec {
	return composer.Spec{
		Name: NumValue_Type,
		Uses: composer.Type_Flow,
		Lede: "num",
	}
}

const NumValue_Type = "num_value"
const NumValue_Field_Value = "$VALUE"
const NumValue_Field_Kind = "$KIND"

func (op *NumValue) Marshal(m jsn.Marshaler) error {
	return NumValue_Marshal(m, op)
}

type NumValue_Slice []NumValue

func (op *NumValue_Slice) GetType() string { return NumValue_Type }

func (op *NumValue_Slice) Marshal(m jsn.Marshaler) error {
	return NumValue_Repeats_Marshal(m, (*[]NumValue)(op))
}

func (op *NumValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NumValue_Slice) SetSize(cnt int) {
	var els []NumValue
	if cnt >= 0 {
		els = make(NumValue_Slice, cnt)
	}
	(*op) = els
}

func (op *NumValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NumValue_Marshal(m, &(*op)[i])
}

func NumValue_Repeats_Marshal(m jsn.Marshaler, vals *[]NumValue) error {
	return jsn.RepeatBlock(m, (*NumValue_Slice)(vals))
}

func NumValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NumValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NumValue_Repeats_Marshal(m, pv)
	}
	return
}

type NumValue_Flow struct{ ptr *NumValue }

func (n NumValue_Flow) GetType() string      { return NumValue_Type }
func (n NumValue_Flow) GetLede() string      { return "num" }
func (n NumValue_Flow) GetFlow() interface{} { return n.ptr }
func (n NumValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NumValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NumValue_Optional_Marshal(m jsn.Marshaler, pv **NumValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NumValue_Marshal(m, *pv)
	} else if !enc {
		var v NumValue
		if err = NumValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NumValue_Marshal(m jsn.Marshaler, val *NumValue) (err error) {
	m.SetComment(&val.UserComment)
	if err = m.MarshalBlock(NumValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("value", NumValue_Field_Value)
		if e0 == nil {
			e0 = prim.Number_Unboxed_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NumValue_Field_Value))
		}
		e1 := m.MarshalKey("kind", NumValue_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NumValue_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// NumValues Number List: Specify a list of numbers.
type NumValues struct {
	Values      []float64 `if:"label=values,type=number"`
	Kind        string    `if:"label=kind,optional,type=text"`
	UserComment string
}

// User implemented slots:
var _ rt.NumListEval = (*NumValues)(nil)
var _ LiteralValue = (*NumValues)(nil)

func (*NumValues) Compose() composer.Spec {
	return composer.Spec{
		Name: NumValues_Type,
		Uses: composer.Type_Flow,
		Lede: "num",
	}
}

const NumValues_Type = "num_values"
const NumValues_Field_Values = "$VALUES"
const NumValues_Field_Kind = "$KIND"

func (op *NumValues) Marshal(m jsn.Marshaler) error {
	return NumValues_Marshal(m, op)
}

type NumValues_Slice []NumValues

func (op *NumValues_Slice) GetType() string { return NumValues_Type }

func (op *NumValues_Slice) Marshal(m jsn.Marshaler) error {
	return NumValues_Repeats_Marshal(m, (*[]NumValues)(op))
}

func (op *NumValues_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *NumValues_Slice) SetSize(cnt int) {
	var els []NumValues
	if cnt >= 0 {
		els = make(NumValues_Slice, cnt)
	}
	(*op) = els
}

func (op *NumValues_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return NumValues_Marshal(m, &(*op)[i])
}

func NumValues_Repeats_Marshal(m jsn.Marshaler, vals *[]NumValues) error {
	return jsn.RepeatBlock(m, (*NumValues_Slice)(vals))
}

func NumValues_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]NumValues) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = NumValues_Repeats_Marshal(m, pv)
	}
	return
}

type NumValues_Flow struct{ ptr *NumValues }

func (n NumValues_Flow) GetType() string      { return NumValues_Type }
func (n NumValues_Flow) GetLede() string      { return "num" }
func (n NumValues_Flow) GetFlow() interface{} { return n.ptr }
func (n NumValues_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*NumValues); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func NumValues_Optional_Marshal(m jsn.Marshaler, pv **NumValues) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = NumValues_Marshal(m, *pv)
	} else if !enc {
		var v NumValues
		if err = NumValues_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func NumValues_Marshal(m jsn.Marshaler, val *NumValues) (err error) {
	m.SetComment(&val.UserComment)
	if err = m.MarshalBlock(NumValues_Flow{val}); err == nil {
		e0 := m.MarshalKey("values", NumValues_Field_Values)
		if e0 == nil {
			e0 = prim.Number_Unboxed_Repeats_Marshal(m, &val.Values)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", NumValues_Field_Values))
		}
		e1 := m.MarshalKey("kind", NumValues_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", NumValues_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// RecordList Specify a series of records, all of the same kind.
type RecordList struct {
	Kind        string       `if:"label=_,type=text"`
	Records     []FieldList  `if:"label=values"`
	Cache       RecordsCache `if:"internal"`
	UserComment string
}

// User implemented slots:
var _ rt.RecordListEval = (*RecordList)(nil)
var _ LiteralValue = (*RecordList)(nil)

func (*RecordList) Compose() composer.Spec {
	return composer.Spec{
		Name: RecordList_Type,
		Uses: composer.Type_Flow,
		Lede: "record",
	}
}

const RecordList_Type = "record_list"
const RecordList_Field_Kind = "$KIND"
const RecordList_Field_Records = "$RECORDS"

func (op *RecordList) Marshal(m jsn.Marshaler) error {
	return RecordList_Marshal(m, op)
}

type RecordList_Slice []RecordList

func (op *RecordList_Slice) GetType() string { return RecordList_Type }

func (op *RecordList_Slice) Marshal(m jsn.Marshaler) error {
	return RecordList_Repeats_Marshal(m, (*[]RecordList)(op))
}

func (op *RecordList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RecordList_Slice) SetSize(cnt int) {
	var els []RecordList
	if cnt >= 0 {
		els = make(RecordList_Slice, cnt)
	}
	(*op) = els
}

func (op *RecordList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RecordList_Marshal(m, &(*op)[i])
}

func RecordList_Repeats_Marshal(m jsn.Marshaler, vals *[]RecordList) error {
	return jsn.RepeatBlock(m, (*RecordList_Slice)(vals))
}

func RecordList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RecordList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = RecordList_Repeats_Marshal(m, pv)
	}
	return
}

type RecordList_Flow struct{ ptr *RecordList }

func (n RecordList_Flow) GetType() string      { return RecordList_Type }
func (n RecordList_Flow) GetLede() string      { return "record" }
func (n RecordList_Flow) GetFlow() interface{} { return n.ptr }
func (n RecordList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*RecordList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func RecordList_Optional_Marshal(m jsn.Marshaler, pv **RecordList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RecordList_Marshal(m, *pv)
	} else if !enc {
		var v RecordList
		if err = RecordList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RecordList_Marshal(m jsn.Marshaler, val *RecordList) (err error) {
	m.SetComment(&val.UserComment)
	if err = m.MarshalBlock(RecordList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", RecordList_Field_Kind)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", RecordList_Field_Kind))
		}
		e1 := m.MarshalKey("values", RecordList_Field_Records)
		if e1 == nil {
			e1 = FieldList_Repeats_Marshal(m, &val.Records)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", RecordList_Field_Records))
		}
		m.EndBlock()
	}
	return
}

// RecordValue Specify a record composed of literal values.
type RecordValue struct {
	Kind        string       `if:"label=_,type=text"`
	Fields      []FieldValue `if:"label=fields"`
	Cache       RecordCache  `if:"internal"`
	UserComment string
}

// User implemented slots:
var _ rt.RecordEval = (*RecordValue)(nil)
var _ LiteralValue = (*RecordValue)(nil)

func (*RecordValue) Compose() composer.Spec {
	return composer.Spec{
		Name: RecordValue_Type,
		Uses: composer.Type_Flow,
		Lede: "record",
	}
}

const RecordValue_Type = "record_value"
const RecordValue_Field_Kind = "$KIND"
const RecordValue_Field_Fields = "$FIELDS"

func (op *RecordValue) Marshal(m jsn.Marshaler) error {
	return RecordValue_Marshal(m, op)
}

type RecordValue_Slice []RecordValue

func (op *RecordValue_Slice) GetType() string { return RecordValue_Type }

func (op *RecordValue_Slice) Marshal(m jsn.Marshaler) error {
	return RecordValue_Repeats_Marshal(m, (*[]RecordValue)(op))
}

func (op *RecordValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *RecordValue_Slice) SetSize(cnt int) {
	var els []RecordValue
	if cnt >= 0 {
		els = make(RecordValue_Slice, cnt)
	}
	(*op) = els
}

func (op *RecordValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return RecordValue_Marshal(m, &(*op)[i])
}

func RecordValue_Repeats_Marshal(m jsn.Marshaler, vals *[]RecordValue) error {
	return jsn.RepeatBlock(m, (*RecordValue_Slice)(vals))
}

func RecordValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]RecordValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = RecordValue_Repeats_Marshal(m, pv)
	}
	return
}

type RecordValue_Flow struct{ ptr *RecordValue }

func (n RecordValue_Flow) GetType() string      { return RecordValue_Type }
func (n RecordValue_Flow) GetLede() string      { return "record" }
func (n RecordValue_Flow) GetFlow() interface{} { return n.ptr }
func (n RecordValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*RecordValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func RecordValue_Optional_Marshal(m jsn.Marshaler, pv **RecordValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = RecordValue_Marshal(m, *pv)
	} else if !enc {
		var v RecordValue
		if err = RecordValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func RecordValue_Marshal(m jsn.Marshaler, val *RecordValue) (err error) {
	m.SetComment(&val.UserComment)
	if err = m.MarshalBlock(RecordValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", RecordValue_Field_Kind)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Kind)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", RecordValue_Field_Kind))
		}
		e1 := m.MarshalKey("fields", RecordValue_Field_Fields)
		if e1 == nil {
			e1 = FieldValue_Repeats_Marshal(m, &val.Fields)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", RecordValue_Field_Fields))
		}
		m.EndBlock()
	}
	return
}

// TextValue Specify a small bit of text.
type TextValue struct {
	Value       string `if:"label=value,type=text"`
	Kind        string `if:"label=kind,optional,type=text"`
	UserComment string
}

// User implemented slots:
var _ rt.TextEval = (*TextValue)(nil)
var _ LiteralValue = (*TextValue)(nil)

func (*TextValue) Compose() composer.Spec {
	return composer.Spec{
		Name: TextValue_Type,
		Uses: composer.Type_Flow,
		Lede: "text",
	}
}

const TextValue_Type = "text_value"
const TextValue_Field_Value = "$VALUE"
const TextValue_Field_Kind = "$KIND"

func (op *TextValue) Marshal(m jsn.Marshaler) error {
	return TextValue_Marshal(m, op)
}

type TextValue_Slice []TextValue

func (op *TextValue_Slice) GetType() string { return TextValue_Type }

func (op *TextValue_Slice) Marshal(m jsn.Marshaler) error {
	return TextValue_Repeats_Marshal(m, (*[]TextValue)(op))
}

func (op *TextValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TextValue_Slice) SetSize(cnt int) {
	var els []TextValue
	if cnt >= 0 {
		els = make(TextValue_Slice, cnt)
	}
	(*op) = els
}

func (op *TextValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TextValue_Marshal(m, &(*op)[i])
}

func TextValue_Repeats_Marshal(m jsn.Marshaler, vals *[]TextValue) error {
	return jsn.RepeatBlock(m, (*TextValue_Slice)(vals))
}

func TextValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TextValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TextValue_Repeats_Marshal(m, pv)
	}
	return
}

type TextValue_Flow struct{ ptr *TextValue }

func (n TextValue_Flow) GetType() string      { return TextValue_Type }
func (n TextValue_Flow) GetLede() string      { return "text" }
func (n TextValue_Flow) GetFlow() interface{} { return n.ptr }
func (n TextValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TextValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TextValue_Optional_Marshal(m jsn.Marshaler, pv **TextValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TextValue_Marshal(m, *pv)
	} else if !enc {
		var v TextValue
		if err = TextValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TextValue_Marshal(m jsn.Marshaler, val *TextValue) (err error) {
	m.SetComment(&val.UserComment)
	if err = m.MarshalBlock(TextValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("value", TextValue_Field_Value)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", TextValue_Field_Value))
		}
		e1 := m.MarshalKey("kind", TextValue_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TextValue_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

// TextValues Text List: Specifies a set of text values.
type TextValues struct {
	Values      []string `if:"label=values,type=text"`
	Kind        string   `if:"label=kind,optional,type=text"`
	UserComment string
}

// User implemented slots:
var _ rt.TextListEval = (*TextValues)(nil)
var _ LiteralValue = (*TextValues)(nil)

func (*TextValues) Compose() composer.Spec {
	return composer.Spec{
		Name: TextValues_Type,
		Uses: composer.Type_Flow,
		Lede: "text",
	}
}

const TextValues_Type = "text_values"
const TextValues_Field_Values = "$VALUES"
const TextValues_Field_Kind = "$KIND"

func (op *TextValues) Marshal(m jsn.Marshaler) error {
	return TextValues_Marshal(m, op)
}

type TextValues_Slice []TextValues

func (op *TextValues_Slice) GetType() string { return TextValues_Type }

func (op *TextValues_Slice) Marshal(m jsn.Marshaler) error {
	return TextValues_Repeats_Marshal(m, (*[]TextValues)(op))
}

func (op *TextValues_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TextValues_Slice) SetSize(cnt int) {
	var els []TextValues
	if cnt >= 0 {
		els = make(TextValues_Slice, cnt)
	}
	(*op) = els
}

func (op *TextValues_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TextValues_Marshal(m, &(*op)[i])
}

func TextValues_Repeats_Marshal(m jsn.Marshaler, vals *[]TextValues) error {
	return jsn.RepeatBlock(m, (*TextValues_Slice)(vals))
}

func TextValues_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TextValues) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TextValues_Repeats_Marshal(m, pv)
	}
	return
}

type TextValues_Flow struct{ ptr *TextValues }

func (n TextValues_Flow) GetType() string      { return TextValues_Type }
func (n TextValues_Flow) GetLede() string      { return "text" }
func (n TextValues_Flow) GetFlow() interface{} { return n.ptr }
func (n TextValues_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*TextValues); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func TextValues_Optional_Marshal(m jsn.Marshaler, pv **TextValues) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = TextValues_Marshal(m, *pv)
	} else if !enc {
		var v TextValues
		if err = TextValues_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func TextValues_Marshal(m jsn.Marshaler, val *TextValues) (err error) {
	m.SetComment(&val.UserComment)
	if err = m.MarshalBlock(TextValues_Flow{val}); err == nil {
		e0 := m.MarshalKey("values", TextValues_Field_Values)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Repeats_Marshal(m, &val.Values)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", TextValues_Field_Values))
		}
		e1 := m.MarshalKey("kind", TextValues_Field_Kind)
		if e1 == nil {
			e1 = prim.Text_Unboxed_Optional_Marshal(m, &val.Kind)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", TextValues_Field_Kind))
		}
		m.EndBlock()
	}
	return
}

var Slots = []interface{}{
	(*LiteralValue)(nil),
}

var Slats = []composer.Composer{
	(*BoolValue)(nil),
	(*FieldList)(nil),
	(*FieldValue)(nil),
	(*NumValue)(nil),
	(*NumValues)(nil),
	(*RecordList)(nil),
	(*RecordValue)(nil),
	(*TextValue)(nil),
	(*TextValues)(nil),
}

var Signatures = map[uint64]interface{}{
	2028829358589965004:  (*BoolValue)(nil),   /* bool_eval=Bool value: */
	11511029631426206694: (*BoolValue)(nil),   /* literal_value=Bool value: */
	10808478223495627740: (*BoolValue)(nil),   /* bool_eval=Bool value:kind: */
	3205100557739257174:  (*BoolValue)(nil),   /* literal_value=Bool value:kind: */
	3071550758741756995:  (*FieldList)(nil),   /* literal_value=FieldList: */
	15362209855253663632: (*NumValue)(nil),    /* literal_value=Num value: */
	1356784465987892467:  (*NumValue)(nil),    /* number_eval=Num value: */
	607468628506983640:   (*NumValue)(nil),    /* literal_value=Num value:kind: */
	9731162713682842745:  (*NumValue)(nil),    /* number_eval=Num value:kind: */
	12282038377752822419: (*NumValues)(nil),   /* literal_value=Num values: */
	8089072108541894314:  (*NumValues)(nil),   /* num_list_eval=Num values: */
	16844579494806292121: (*NumValues)(nil),   /* literal_value=Num values:kind: */
	18166562587031464546: (*NumValues)(nil),   /* num_list_eval=Num values:kind: */
	5942123174065535899:  (*RecordValue)(nil), /* literal_value=Record:fields: */
	5794725022419893180:  (*RecordValue)(nil), /* record_eval=Record:fields: */
	8711768526197034738:  (*RecordList)(nil),  /* literal_value=Record:values: */
	14652198550804167624: (*RecordList)(nil),  /* record_list_eval=Record:values: */
	13114183353368545439: (*TextValue)(nil),   /* literal_value=Text value: */
	4705033170011872932:  (*TextValue)(nil),   /* text_eval=Text value: */
	6339203747835692413:  (*TextValue)(nil),   /* literal_value=Text value:kind: */
	18213962910681037476: (*TextValue)(nil),   /* text_eval=Text value:kind: */
	2231933745037898906:  (*TextValues)(nil),  /* literal_value=Text values: */
	5151885117815687006:  (*TextValues)(nil),  /* text_list_eval=Text values: */
	4866602258857929938:  (*TextValues)(nil),  /* literal_value=Text values:kind: */
	10847058762172166526: (*TextValues)(nil),  /* text_list_eval=Text values:kind: */
}
