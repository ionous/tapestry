// Code generated by Tapestry; edit at your own risk.
package literal

import (
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/dl/rtti"
	"git.sr.ht/~ionous/tapestry/lang/typeinfo"
)

// literal_value, a type of slot.
var Zt_LiteralValue = typeinfo.Slot{
	Name: "literal_value",
	Markup: map[string]any{
		"blockly-color": "MATH_HUE",
		"comment":       "Slot for constant values.",
	},
}

// holds a single slot
// FIX: currently provided by the spec
type FIX_LiteralValue_Slot struct{ Value LiteralValue }

// implements typeinfo.Inspector for a single slot.
func (*FIX_LiteralValue_Slot) Inspect() (typeinfo.T, bool) {
	return &Zt_LiteralValue, false
}

// holds a slice of slots
type LiteralValue_Slots []LiteralValue

// implements typeinfo.Inspector for a series of slots.
func (*LiteralValue_Slots) Inspect() (typeinfo.T, bool) {
	return &Zt_LiteralValue, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_BoolValue struct {
	Value  bool
	Kind   string
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*BoolValue) Inspect() (typeinfo.T, bool) {
	return &Zt_BoolValue, false
}

// return a valid markup map, creating it if necessary.
func (op *BoolValue) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ rtti.BoolEval = (*BoolValue)(nil)
var _ LiteralValue = (*BoolValue)(nil)

// bool_value, a type of flow.
var Zt_BoolValue = typeinfo.Flow{
	Name: "bool_value",
	Lede: "bool",
	Terms: []typeinfo.Term{{
		Name:  "value",
		Label: "value",
		Type:  &prim.Zt_Bool,
	}, {
		Name:     "kind",
		Label:    "kind",
		Optional: true,
		Type:     &prim.Zt_Text,
	}},
	Slots: []*typeinfo.Slot{
		&rtti.Zt_BoolEval,
		&Zt_LiteralValue,
	},
	Markup: map[string]any{
		"comment": "Specify an explicit true or false.",
	},
}

// holds a slice of type bool_value
// FIX: duplicates the spec decl.
type FIX_BoolValue_Slice []BoolValue

// implements typeinfo.Inspector
func (*BoolValue_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_BoolValue, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_FieldValue struct {
	Field  string
	Value  LiteralValue
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*FieldValue) Inspect() (typeinfo.T, bool) {
	return &Zt_FieldValue, false
}

// return a valid markup map, creating it if necessary.
func (op *FieldValue) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// field_value, a type of flow.
var Zt_FieldValue = typeinfo.Flow{
	Name: "field_value",
	Lede: "field",
	Terms: []typeinfo.Term{{
		Name:  "field",
		Label: "_",
		Type:  &prim.Zt_Text,
	}, {
		Name:  "value",
		Label: "value",
		Type:  &Zt_LiteralValue,
	}},
	Markup: map[string]any{
		"comment": "A fixed value of a record.",
	},
}

// holds a slice of type field_value
// FIX: duplicates the spec decl.
type FIX_FieldValue_Slice []FieldValue

// implements typeinfo.Inspector
func (*FieldValue_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_FieldValue, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_FieldList struct {
	Fields FieldValue
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*FieldList) Inspect() (typeinfo.T, bool) {
	return &Zt_FieldList, false
}

// return a valid markup map, creating it if necessary.
func (op *FieldList) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ LiteralValue = (*FieldList)(nil)

// field_list, a type of flow.
var Zt_FieldList = typeinfo.Flow{
	Name: "field_list",
	Lede: "field_list",
	Terms: []typeinfo.Term{{
		Name:    "fields",
		Label:   "_",
		Repeats: true,
		Type:    &Zt_FieldValue,
	}},
	Slots: []*typeinfo.Slot{
		&Zt_LiteralValue,
	},
	Markup: map[string]any{
		"comment": []interface{}{"A series of values all for the same record.", "While it can be specified wherever a literal value can, it only has meaning when the record type is known."},
	},
}

// holds a slice of type field_list
// FIX: duplicates the spec decl.
type FIX_FieldList_Slice []FieldList

// implements typeinfo.Inspector
func (*FieldList_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_FieldList, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_NumValue struct {
	Value  float64
	Kind   string
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*NumValue) Inspect() (typeinfo.T, bool) {
	return &Zt_NumValue, false
}

// return a valid markup map, creating it if necessary.
func (op *NumValue) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ rtti.NumberEval = (*NumValue)(nil)
var _ LiteralValue = (*NumValue)(nil)

// num_value, a type of flow.
var Zt_NumValue = typeinfo.Flow{
	Name: "num_value",
	Lede: "num",
	Terms: []typeinfo.Term{{
		Name:  "value",
		Label: "value",
		Type:  &prim.Zt_Number,
	}, {
		Name:     "kind",
		Label:    "kind",
		Optional: true,
		Type:     &prim.Zt_Text,
	}},
	Slots: []*typeinfo.Slot{
		&rtti.Zt_NumberEval,
		&Zt_LiteralValue,
	},
	Markup: map[string]any{
		"comment": "Specify a particular number.",
	},
}

// holds a slice of type num_value
// FIX: duplicates the spec decl.
type FIX_NumValue_Slice []NumValue

// implements typeinfo.Inspector
func (*NumValue_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_NumValue, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_NumValues struct {
	Values float64
	Kind   string
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*NumValues) Inspect() (typeinfo.T, bool) {
	return &Zt_NumValues, false
}

// return a valid markup map, creating it if necessary.
func (op *NumValues) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ rtti.NumListEval = (*NumValues)(nil)
var _ LiteralValue = (*NumValues)(nil)

// num_values, a type of flow.
var Zt_NumValues = typeinfo.Flow{
	Name: "num_values",
	Lede: "num",
	Terms: []typeinfo.Term{{
		Name:    "values",
		Label:   "values",
		Repeats: true,
		Type:    &prim.Zt_Number,
	}, {
		Name:     "kind",
		Label:    "kind",
		Optional: true,
		Type:     &prim.Zt_Text,
	}},
	Slots: []*typeinfo.Slot{
		&rtti.Zt_NumListEval,
		&Zt_LiteralValue,
	},
	Markup: map[string]any{
		"comment": "Number List: Specify a list of numbers.",
	},
}

// holds a slice of type num_values
// FIX: duplicates the spec decl.
type FIX_NumValues_Slice []NumValues

// implements typeinfo.Inspector
func (*NumValues_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_NumValues, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_RecordValue struct {
	Kind   string
	Fields FieldValue
	Cache  RecordCache
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*RecordValue) Inspect() (typeinfo.T, bool) {
	return &Zt_RecordValue, false
}

// return a valid markup map, creating it if necessary.
func (op *RecordValue) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ rtti.RecordEval = (*RecordValue)(nil)
var _ LiteralValue = (*RecordValue)(nil)

// record_value, a type of flow.
var Zt_RecordValue = typeinfo.Flow{
	Name: "record_value",
	Lede: "record",
	Terms: []typeinfo.Term{{
		Name:  "kind",
		Label: "_",
		Type:  &prim.Zt_Text,
	}, {
		Name:    "fields",
		Label:   "fields",
		Repeats: true,
		Type:    &Zt_FieldValue,
	}, {
		Name:    "cache",
		Label:   "cache",
		Private: true,
	}},
	Slots: []*typeinfo.Slot{
		&rtti.Zt_RecordEval,
		&Zt_LiteralValue,
	},
	Markup: map[string]any{
		"comment": "Specify a record composed of literal values.",
	},
}

// holds a slice of type record_value
// FIX: duplicates the spec decl.
type FIX_RecordValue_Slice []RecordValue

// implements typeinfo.Inspector
func (*RecordValue_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_RecordValue, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_RecordList struct {
	Kind    string
	Records FieldList
	Cache   RecordsCache
	Markup  map[string]any
}

// implements typeinfo.Inspector
func (*RecordList) Inspect() (typeinfo.T, bool) {
	return &Zt_RecordList, false
}

// return a valid markup map, creating it if necessary.
func (op *RecordList) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ rtti.RecordListEval = (*RecordList)(nil)
var _ LiteralValue = (*RecordList)(nil)

// record_list, a type of flow.
var Zt_RecordList = typeinfo.Flow{
	Name: "record_list",
	Lede: "record",
	Terms: []typeinfo.Term{{
		Name:  "kind",
		Label: "_",
		Type:  &prim.Zt_Text,
	}, {
		Name:    "records",
		Label:   "values",
		Repeats: true,
		Type:    &Zt_FieldList,
	}, {
		Name:    "cache",
		Label:   "cache",
		Private: true,
	}},
	Slots: []*typeinfo.Slot{
		&rtti.Zt_RecordListEval,
		&Zt_LiteralValue,
	},
	Markup: map[string]any{
		"comment": "Specify a series of records, all of the same kind.",
	},
}

// holds a slice of type record_list
// FIX: duplicates the spec decl.
type FIX_RecordList_Slice []RecordList

// implements typeinfo.Inspector
func (*RecordList_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_RecordList, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_TextValue struct {
	Value  string
	Kind   string
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*TextValue) Inspect() (typeinfo.T, bool) {
	return &Zt_TextValue, false
}

// return a valid markup map, creating it if necessary.
func (op *TextValue) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ rtti.TextEval = (*TextValue)(nil)
var _ LiteralValue = (*TextValue)(nil)

// text_value, a type of flow.
var Zt_TextValue = typeinfo.Flow{
	Name: "text_value",
	Lede: "text",
	Terms: []typeinfo.Term{{
		Name:  "value",
		Label: "value",
		Type:  &prim.Zt_Text,
	}, {
		Name:     "kind",
		Label:    "kind",
		Optional: true,
		Type:     &prim.Zt_Text,
	}},
	Slots: []*typeinfo.Slot{
		&rtti.Zt_TextEval,
		&Zt_LiteralValue,
	},
	Markup: map[string]any{
		"comment": "Specify a small bit of text.",
	},
}

// holds a slice of type text_value
// FIX: duplicates the spec decl.
type FIX_TextValue_Slice []TextValue

// implements typeinfo.Inspector
func (*TextValue_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_TextValue, true
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_TextValues struct {
	Values string
	Kind   string
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*TextValues) Inspect() (typeinfo.T, bool) {
	return &Zt_TextValues, false
}

// return a valid markup map, creating it if necessary.
func (op *TextValues) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// ensure the command implements its specified slots:
var _ rtti.TextListEval = (*TextValues)(nil)
var _ LiteralValue = (*TextValues)(nil)

// text_values, a type of flow.
var Zt_TextValues = typeinfo.Flow{
	Name: "text_values",
	Lede: "text",
	Terms: []typeinfo.Term{{
		Name:    "values",
		Label:   "values",
		Repeats: true,
		Type:    &prim.Zt_Text,
	}, {
		Name:     "kind",
		Label:    "kind",
		Optional: true,
		Type:     &prim.Zt_Text,
	}},
	Slots: []*typeinfo.Slot{
		&rtti.Zt_TextListEval,
		&Zt_LiteralValue,
	},
	Markup: map[string]any{
		"comment": "Text List: Specifies a set of text values.",
	},
}

// holds a slice of type text_values
// FIX: duplicates the spec decl.
type FIX_TextValues_Slice []TextValues

// implements typeinfo.Inspector
func (*TextValues_Slice) Inspect() (typeinfo.T, bool) {
	return &Zt_TextValues, true
}

// package listing of type data
var Z_Types = typeinfo.TypeSet{
	Name:       "literal",
	Slot:       z_slot_list,
	Flow:       z_flow_list,
	Signatures: z_signatures,
}

// a list of all slots in this this package
// ( ex. for generating blockly shapes )
var z_slot_list = []*typeinfo.Slot{
	&Zt_LiteralValue,
}

// a list of all flows in this this package
// ( ex. for reading blockly blocks )
var z_flow_list = []*typeinfo.Flow{
	&Zt_BoolValue,
	&Zt_FieldValue,
	&Zt_FieldList,
	&Zt_NumValue,
	&Zt_NumValues,
	&Zt_RecordValue,
	&Zt_RecordList,
	&Zt_TextValue,
	&Zt_TextValues,
}

// a list of all command signatures
// ( for processing and verifying story files )
var z_signatures = map[uint64]any{
	17656638186047966738: (*FieldValue)(nil),  /* Field:value: */
	2028829358589965004:  (*BoolValue)(nil),   /* bool_eval=Bool value: */
	11511029631426206694: (*BoolValue)(nil),   /* literal_value=Bool value: */
	10808478223495627740: (*BoolValue)(nil),   /* bool_eval=Bool value:kind: */
	3205100557739257174:  (*BoolValue)(nil),   /* literal_value=Bool value:kind: */
	3071550758741756995:  (*FieldList)(nil),   /* literal_value=FieldList: */
	15362209855253663632: (*NumValue)(nil),    /* literal_value=Num value: */
	1356784465987892467:  (*NumValue)(nil),    /* number_eval=Num value: */
	607468628506983640:   (*NumValue)(nil),    /* literal_value=Num value:kind: */
	9731162713682842745:  (*NumValue)(nil),    /* number_eval=Num value:kind: */
	12282038377752822419: (*NumValues)(nil),   /* literal_value=Num values: */
	8089072108541894314:  (*NumValues)(nil),   /* num_list_eval=Num values: */
	16844579494806292121: (*NumValues)(nil),   /* literal_value=Num values:kind: */
	18166562587031464546: (*NumValues)(nil),   /* num_list_eval=Num values:kind: */
	5942123174065535899:  (*RecordValue)(nil), /* literal_value=Record:fields: */
	5794725022419893180:  (*RecordValue)(nil), /* record_eval=Record:fields: */
	8711768526197034738:  (*RecordList)(nil),  /* literal_value=Record:values: */
	14652198550804167624: (*RecordList)(nil),  /* record_list_eval=Record:values: */
	13114183353368545439: (*TextValue)(nil),   /* literal_value=Text value: */
	4705033170011872932:  (*TextValue)(nil),   /* text_eval=Text value: */
	6339203747835692413:  (*TextValue)(nil),   /* literal_value=Text value:kind: */
	18213962910681037476: (*TextValue)(nil),   /* text_eval=Text value:kind: */
	2231933745037898906:  (*TextValues)(nil),  /* literal_value=Text values: */
	5151885117815687006:  (*TextValues)(nil),  /* text_list_eval=Text values: */
	4866602258857929938:  (*TextValues)(nil),  /* literal_value=Text values:kind: */
	10847058762172166526: (*TextValues)(nil),  /* text_list_eval=Text values:kind: */
}
