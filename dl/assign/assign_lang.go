// Code generated by "makeops"; edit at your own risk.
package assign

import (
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/jsn"
	"git.sr.ht/~ionous/tapestry/rt"
	"github.com/ionous/errutil"
)

const Assignment_Type = "assignment"

var Assignment_Optional_Marshal = Assignment_Marshal

type Assignment_Slot struct{ Value *Assignment }

func (at Assignment_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Assignment_Slot) GetType() string              { return Assignment_Type }
func (at Assignment_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Assignment_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Assignment)
	return
}

func Assignment_Marshal(m jsn.Marshaler, ptr *Assignment) (err error) {
	slot := Assignment_Slot{ptr}
	return slot.Marshal(m)
}

type Assignment_Slice []Assignment

func (op *Assignment_Slice) GetType() string { return Assignment_Type }

func (op *Assignment_Slice) Marshal(m jsn.Marshaler) error {
	return Assignment_Repeats_Marshal(m, (*[]Assignment)(op))
}

func (op *Assignment_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Assignment_Slice) SetSize(cnt int) {
	var els []Assignment
	if cnt >= 0 {
		els = make(Assignment_Slice, cnt)
	}
	(*op) = els
}

func (op *Assignment_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Assignment_Marshal(m, &(*op)[i])
}

func Assignment_Repeats_Marshal(m jsn.Marshaler, vals *[]Assignment) error {
	return jsn.RepeatBlock(m, (*Assignment_Slice)(vals))
}

func Assignment_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Assignment) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Assignment_Repeats_Marshal(m, pv)
	}
	return
}

// FromBool Assigns the calculated boolean value.
type FromBool struct {
	Value  rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromBool)(nil)

func (*FromBool) Compose() composer.Spec {
	return composer.Spec{
		Name: FromBool_Type,
		Uses: composer.Type_Flow,
	}
}

const FromBool_Type = "from_bool"
const FromBool_Field_Val = "$VAL"

func (op *FromBool) Marshal(m jsn.Marshaler) error {
	return FromBool_Marshal(m, op)
}

type FromBool_Slice []FromBool

func (op *FromBool_Slice) GetType() string { return FromBool_Type }

func (op *FromBool_Slice) Marshal(m jsn.Marshaler) error {
	return FromBool_Repeats_Marshal(m, (*[]FromBool)(op))
}

func (op *FromBool_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromBool_Slice) SetSize(cnt int) {
	var els []FromBool
	if cnt >= 0 {
		els = make(FromBool_Slice, cnt)
	}
	(*op) = els
}

func (op *FromBool_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromBool_Marshal(m, &(*op)[i])
}

func FromBool_Repeats_Marshal(m jsn.Marshaler, vals *[]FromBool) error {
	return jsn.RepeatBlock(m, (*FromBool_Slice)(vals))
}

func FromBool_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromBool) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromBool_Repeats_Marshal(m, pv)
	}
	return
}

type FromBool_Flow struct{ ptr *FromBool }

func (n FromBool_Flow) GetType() string      { return FromBool_Type }
func (n FromBool_Flow) GetLede() string      { return FromBool_Type }
func (n FromBool_Flow) GetFlow() interface{} { return n.ptr }
func (n FromBool_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromBool); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromBool_Optional_Marshal(m jsn.Marshaler, pv **FromBool) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromBool_Marshal(m, *pv)
	} else if !enc {
		var v FromBool
		if err = FromBool_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromBool_Marshal(m jsn.Marshaler, val *FromBool) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromBool_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromBool_Field_Val)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromBool_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromNumList Assigns the calculated numbers.
type FromNumList struct {
	Value  rt.NumListEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromNumList)(nil)

func (*FromNumList) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNumList_Type,
		Uses: composer.Type_Flow,
	}
}

const FromNumList_Type = "from_num_list"
const FromNumList_Field_Val = "$VAL"

func (op *FromNumList) Marshal(m jsn.Marshaler) error {
	return FromNumList_Marshal(m, op)
}

type FromNumList_Slice []FromNumList

func (op *FromNumList_Slice) GetType() string { return FromNumList_Type }

func (op *FromNumList_Slice) Marshal(m jsn.Marshaler) error {
	return FromNumList_Repeats_Marshal(m, (*[]FromNumList)(op))
}

func (op *FromNumList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromNumList_Slice) SetSize(cnt int) {
	var els []FromNumList
	if cnt >= 0 {
		els = make(FromNumList_Slice, cnt)
	}
	(*op) = els
}

func (op *FromNumList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromNumList_Marshal(m, &(*op)[i])
}

func FromNumList_Repeats_Marshal(m jsn.Marshaler, vals *[]FromNumList) error {
	return jsn.RepeatBlock(m, (*FromNumList_Slice)(vals))
}

func FromNumList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromNumList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromNumList_Repeats_Marshal(m, pv)
	}
	return
}

type FromNumList_Flow struct{ ptr *FromNumList }

func (n FromNumList_Flow) GetType() string      { return FromNumList_Type }
func (n FromNumList_Flow) GetLede() string      { return FromNumList_Type }
func (n FromNumList_Flow) GetFlow() interface{} { return n.ptr }
func (n FromNumList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromNumList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromNumList_Optional_Marshal(m jsn.Marshaler, pv **FromNumList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromNumList_Marshal(m, *pv)
	} else if !enc {
		var v FromNumList
		if err = FromNumList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromNumList_Marshal(m jsn.Marshaler, val *FromNumList) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromNumList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromNumList_Field_Val)
		if e0 == nil {
			e0 = rt.NumListEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromNumList_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromNumber Assigns the calculated number.
type FromNumber struct {
	Value  rt.NumberEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromNumber)(nil)

func (*FromNumber) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNumber_Type,
		Uses: composer.Type_Flow,
	}
}

const FromNumber_Type = "from_number"
const FromNumber_Field_Val = "$VAL"

func (op *FromNumber) Marshal(m jsn.Marshaler) error {
	return FromNumber_Marshal(m, op)
}

type FromNumber_Slice []FromNumber

func (op *FromNumber_Slice) GetType() string { return FromNumber_Type }

func (op *FromNumber_Slice) Marshal(m jsn.Marshaler) error {
	return FromNumber_Repeats_Marshal(m, (*[]FromNumber)(op))
}

func (op *FromNumber_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromNumber_Slice) SetSize(cnt int) {
	var els []FromNumber
	if cnt >= 0 {
		els = make(FromNumber_Slice, cnt)
	}
	(*op) = els
}

func (op *FromNumber_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromNumber_Marshal(m, &(*op)[i])
}

func FromNumber_Repeats_Marshal(m jsn.Marshaler, vals *[]FromNumber) error {
	return jsn.RepeatBlock(m, (*FromNumber_Slice)(vals))
}

func FromNumber_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromNumber) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromNumber_Repeats_Marshal(m, pv)
	}
	return
}

type FromNumber_Flow struct{ ptr *FromNumber }

func (n FromNumber_Flow) GetType() string      { return FromNumber_Type }
func (n FromNumber_Flow) GetLede() string      { return FromNumber_Type }
func (n FromNumber_Flow) GetFlow() interface{} { return n.ptr }
func (n FromNumber_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromNumber); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromNumber_Optional_Marshal(m jsn.Marshaler, pv **FromNumber) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromNumber_Marshal(m, *pv)
	} else if !enc {
		var v FromNumber
		if err = FromNumber_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromNumber_Marshal(m jsn.Marshaler, val *FromNumber) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromNumber_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromNumber_Field_Val)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromNumber_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromRecord Assigns the calculated record.
type FromRecord struct {
	Value  rt.RecordEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromRecord)(nil)

func (*FromRecord) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecord_Type,
		Uses: composer.Type_Flow,
	}
}

const FromRecord_Type = "from_record"
const FromRecord_Field_Val = "$VAL"

func (op *FromRecord) Marshal(m jsn.Marshaler) error {
	return FromRecord_Marshal(m, op)
}

type FromRecord_Slice []FromRecord

func (op *FromRecord_Slice) GetType() string { return FromRecord_Type }

func (op *FromRecord_Slice) Marshal(m jsn.Marshaler) error {
	return FromRecord_Repeats_Marshal(m, (*[]FromRecord)(op))
}

func (op *FromRecord_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromRecord_Slice) SetSize(cnt int) {
	var els []FromRecord
	if cnt >= 0 {
		els = make(FromRecord_Slice, cnt)
	}
	(*op) = els
}

func (op *FromRecord_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromRecord_Marshal(m, &(*op)[i])
}

func FromRecord_Repeats_Marshal(m jsn.Marshaler, vals *[]FromRecord) error {
	return jsn.RepeatBlock(m, (*FromRecord_Slice)(vals))
}

func FromRecord_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromRecord) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromRecord_Repeats_Marshal(m, pv)
	}
	return
}

type FromRecord_Flow struct{ ptr *FromRecord }

func (n FromRecord_Flow) GetType() string      { return FromRecord_Type }
func (n FromRecord_Flow) GetLede() string      { return FromRecord_Type }
func (n FromRecord_Flow) GetFlow() interface{} { return n.ptr }
func (n FromRecord_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromRecord); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromRecord_Optional_Marshal(m jsn.Marshaler, pv **FromRecord) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromRecord_Marshal(m, *pv)
	} else if !enc {
		var v FromRecord
		if err = FromRecord_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromRecord_Marshal(m jsn.Marshaler, val *FromRecord) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromRecord_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromRecord_Field_Val)
		if e0 == nil {
			e0 = rt.RecordEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromRecord_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromRecordList Assigns the calculated records.
type FromRecordList struct {
	Value  rt.RecordListEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromRecordList)(nil)

func (*FromRecordList) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecordList_Type,
		Uses: composer.Type_Flow,
	}
}

const FromRecordList_Type = "from_record_list"
const FromRecordList_Field_Val = "$VAL"

func (op *FromRecordList) Marshal(m jsn.Marshaler) error {
	return FromRecordList_Marshal(m, op)
}

type FromRecordList_Slice []FromRecordList

func (op *FromRecordList_Slice) GetType() string { return FromRecordList_Type }

func (op *FromRecordList_Slice) Marshal(m jsn.Marshaler) error {
	return FromRecordList_Repeats_Marshal(m, (*[]FromRecordList)(op))
}

func (op *FromRecordList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromRecordList_Slice) SetSize(cnt int) {
	var els []FromRecordList
	if cnt >= 0 {
		els = make(FromRecordList_Slice, cnt)
	}
	(*op) = els
}

func (op *FromRecordList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromRecordList_Marshal(m, &(*op)[i])
}

func FromRecordList_Repeats_Marshal(m jsn.Marshaler, vals *[]FromRecordList) error {
	return jsn.RepeatBlock(m, (*FromRecordList_Slice)(vals))
}

func FromRecordList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromRecordList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromRecordList_Repeats_Marshal(m, pv)
	}
	return
}

type FromRecordList_Flow struct{ ptr *FromRecordList }

func (n FromRecordList_Flow) GetType() string      { return FromRecordList_Type }
func (n FromRecordList_Flow) GetLede() string      { return FromRecordList_Type }
func (n FromRecordList_Flow) GetFlow() interface{} { return n.ptr }
func (n FromRecordList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromRecordList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromRecordList_Optional_Marshal(m jsn.Marshaler, pv **FromRecordList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromRecordList_Marshal(m, *pv)
	} else if !enc {
		var v FromRecordList
		if err = FromRecordList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromRecordList_Marshal(m jsn.Marshaler, val *FromRecordList) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromRecordList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromRecordList_Field_Val)
		if e0 == nil {
			e0 = rt.RecordListEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromRecordList_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromText Assigns the calculated piece of text.
type FromText struct {
	Value  rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromText)(nil)

func (*FromText) Compose() composer.Spec {
	return composer.Spec{
		Name: FromText_Type,
		Uses: composer.Type_Flow,
	}
}

const FromText_Type = "from_text"
const FromText_Field_Val = "$VAL"

func (op *FromText) Marshal(m jsn.Marshaler) error {
	return FromText_Marshal(m, op)
}

type FromText_Slice []FromText

func (op *FromText_Slice) GetType() string { return FromText_Type }

func (op *FromText_Slice) Marshal(m jsn.Marshaler) error {
	return FromText_Repeats_Marshal(m, (*[]FromText)(op))
}

func (op *FromText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromText_Slice) SetSize(cnt int) {
	var els []FromText
	if cnt >= 0 {
		els = make(FromText_Slice, cnt)
	}
	(*op) = els
}

func (op *FromText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromText_Marshal(m, &(*op)[i])
}

func FromText_Repeats_Marshal(m jsn.Marshaler, vals *[]FromText) error {
	return jsn.RepeatBlock(m, (*FromText_Slice)(vals))
}

func FromText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromText_Repeats_Marshal(m, pv)
	}
	return
}

type FromText_Flow struct{ ptr *FromText }

func (n FromText_Flow) GetType() string      { return FromText_Type }
func (n FromText_Flow) GetLede() string      { return FromText_Type }
func (n FromText_Flow) GetFlow() interface{} { return n.ptr }
func (n FromText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromText_Optional_Marshal(m jsn.Marshaler, pv **FromText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromText_Marshal(m, *pv)
	} else if !enc {
		var v FromText
		if err = FromText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromText_Marshal(m jsn.Marshaler, val *FromText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromText_Field_Val)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromText_Field_Val))
		}
		m.EndBlock()
	}
	return
}

// FromTextList Assigns the calculated pieces of text.
type FromTextList struct {
	Value  rt.TextListEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromTextList)(nil)

func (*FromTextList) Compose() composer.Spec {
	return composer.Spec{
		Name: FromTextList_Type,
		Uses: composer.Type_Flow,
	}
}

const FromTextList_Type = "from_text_list"
const FromTextList_Field_Val = "$VAL"

func (op *FromTextList) Marshal(m jsn.Marshaler) error {
	return FromTextList_Marshal(m, op)
}

type FromTextList_Slice []FromTextList

func (op *FromTextList_Slice) GetType() string { return FromTextList_Type }

func (op *FromTextList_Slice) Marshal(m jsn.Marshaler) error {
	return FromTextList_Repeats_Marshal(m, (*[]FromTextList)(op))
}

func (op *FromTextList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromTextList_Slice) SetSize(cnt int) {
	var els []FromTextList
	if cnt >= 0 {
		els = make(FromTextList_Slice, cnt)
	}
	(*op) = els
}

func (op *FromTextList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromTextList_Marshal(m, &(*op)[i])
}

func FromTextList_Repeats_Marshal(m jsn.Marshaler, vals *[]FromTextList) error {
	return jsn.RepeatBlock(m, (*FromTextList_Slice)(vals))
}

func FromTextList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromTextList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromTextList_Repeats_Marshal(m, pv)
	}
	return
}

type FromTextList_Flow struct{ ptr *FromTextList }

func (n FromTextList_Flow) GetType() string      { return FromTextList_Type }
func (n FromTextList_Flow) GetLede() string      { return FromTextList_Type }
func (n FromTextList_Flow) GetFlow() interface{} { return n.ptr }
func (n FromTextList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromTextList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromTextList_Optional_Marshal(m jsn.Marshaler, pv **FromTextList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromTextList_Marshal(m, *pv)
	} else if !enc {
		var v FromTextList
		if err = FromTextList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromTextList_Marshal(m jsn.Marshaler, val *FromTextList) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromTextList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromTextList_Field_Val)
		if e0 == nil {
			e0 = rt.TextListEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromTextList_Field_Val))
		}
		m.EndBlock()
	}
	return
}

var Slots = []interface{}{
	(*Assignment)(nil),
}

var Slats = []composer.Composer{
	(*FromBool)(nil),
	(*FromNumList)(nil),
	(*FromNumber)(nil),
	(*FromRecord)(nil),
	(*FromRecordList)(nil),
	(*FromText)(nil),
	(*FromTextList)(nil),
}

var Signatures = map[uint64]interface{}{
	16065241269206568079: (*FromBool)(nil),       /* assignment=FromBool: */
	15276643347016776669: (*FromNumList)(nil),    /* assignment=FromNumList: */
	10386192108847008240: (*FromNumber)(nil),     /* assignment=FromNumber: */
	8445595699766392240:  (*FromRecord)(nil),     /* assignment=FromRecord: */
	17510952281883199828: (*FromRecordList)(nil), /* assignment=FromRecordList: */
	9783457335751138546:  (*FromText)(nil),       /* assignment=FromText: */
	3267530751198060154:  (*FromTextList)(nil),   /* assignment=FromTextList: */
}
