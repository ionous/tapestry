// Code generated by "makeops"; edit at your own risk.
package assign

import (
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/jsn"
	"git.sr.ht/~ionous/tapestry/rt"
	"github.com/ionous/errutil"
)

const Address_Type = "address"

var Address_Optional_Marshal = Address_Marshal

type Address_Slot struct{ Value *Address }

func (at Address_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Address_Slot) GetType() string              { return Address_Type }
func (at Address_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Address_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Address)
	return
}

func Address_Marshal(m jsn.Marshaler, ptr *Address) (err error) {
	slot := Address_Slot{ptr}
	return slot.Marshal(m)
}

type Address_Slice []Address

func (op *Address_Slice) GetType() string { return Address_Type }

func (op *Address_Slice) Marshal(m jsn.Marshaler) error {
	return Address_Repeats_Marshal(m, (*[]Address)(op))
}

func (op *Address_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Address_Slice) SetSize(cnt int) {
	var els []Address
	if cnt >= 0 {
		els = make(Address_Slice, cnt)
	}
	(*op) = els
}

func (op *Address_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Address_Marshal(m, &(*op)[i])
}

func Address_Repeats_Marshal(m jsn.Marshaler, vals *[]Address) error {
	return jsn.RepeatBlock(m, (*Address_Slice)(vals))
}

func Address_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Address) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Address_Repeats_Marshal(m, pv)
	}
	return
}

// Arg Runtime version of argument.
type Arg struct {
	Name   string     `if:"label=_,type=text"`
	Value  Assignment `if:"label=from"`
	Markup map[string]any
}

func (*Arg) Compose() composer.Spec {
	return composer.Spec{
		Name: Arg_Type,
		Uses: composer.Type_Flow,
	}
}

const Arg_Type = "arg"
const Arg_Field_Name = "$NAME"
const Arg_Field_Value = "$VALUE"

func (op *Arg) Marshal(m jsn.Marshaler) error {
	return Arg_Marshal(m, op)
}

type Arg_Slice []Arg

func (op *Arg_Slice) GetType() string { return Arg_Type }

func (op *Arg_Slice) Marshal(m jsn.Marshaler) error {
	return Arg_Repeats_Marshal(m, (*[]Arg)(op))
}

func (op *Arg_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Arg_Slice) SetSize(cnt int) {
	var els []Arg
	if cnt >= 0 {
		els = make(Arg_Slice, cnt)
	}
	(*op) = els
}

func (op *Arg_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Arg_Marshal(m, &(*op)[i])
}

func Arg_Repeats_Marshal(m jsn.Marshaler, vals *[]Arg) error {
	return jsn.RepeatBlock(m, (*Arg_Slice)(vals))
}

func Arg_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Arg) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Arg_Repeats_Marshal(m, pv)
	}
	return
}

type Arg_Flow struct{ ptr *Arg }

func (n Arg_Flow) GetType() string      { return Arg_Type }
func (n Arg_Flow) GetLede() string      { return Arg_Type }
func (n Arg_Flow) GetFlow() interface{} { return n.ptr }
func (n Arg_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Arg); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Arg_Optional_Marshal(m jsn.Marshaler, pv **Arg) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Arg_Marshal(m, *pv)
	} else if !enc {
		var v Arg
		if err = Arg_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Arg_Marshal(m jsn.Marshaler, val *Arg) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Arg_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Arg_Field_Name)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Arg_Field_Name))
		}
		e1 := m.MarshalKey("from", Arg_Field_Value)
		if e1 == nil {
			e1 = Assignment_Marshal(m, &val.Value)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Arg_Field_Value))
		}
		m.EndBlock()
	}
	return
}

const Assignment_Type = "assignment"

var Assignment_Optional_Marshal = Assignment_Marshal

type Assignment_Slot struct{ Value *Assignment }

func (at Assignment_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Assignment_Slot) GetType() string              { return Assignment_Type }
func (at Assignment_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Assignment_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Assignment)
	return
}

func Assignment_Marshal(m jsn.Marshaler, ptr *Assignment) (err error) {
	slot := Assignment_Slot{ptr}
	return slot.Marshal(m)
}

type Assignment_Slice []Assignment

func (op *Assignment_Slice) GetType() string { return Assignment_Type }

func (op *Assignment_Slice) Marshal(m jsn.Marshaler) error {
	return Assignment_Repeats_Marshal(m, (*[]Assignment)(op))
}

func (op *Assignment_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Assignment_Slice) SetSize(cnt int) {
	var els []Assignment
	if cnt >= 0 {
		els = make(Assignment_Slice, cnt)
	}
	(*op) = els
}

func (op *Assignment_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Assignment_Marshal(m, &(*op)[i])
}

func Assignment_Repeats_Marshal(m jsn.Marshaler, vals *[]Assignment) error {
	return jsn.RepeatBlock(m, (*Assignment_Slice)(vals))
}

func Assignment_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Assignment) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Assignment_Repeats_Marshal(m, pv)
	}
	return
}

// AtField
type AtField struct {
	Field  rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Dot = (*AtField)(nil)

func (*AtField) Compose() composer.Spec {
	return composer.Spec{
		Name: AtField_Type,
		Uses: composer.Type_Flow,
	}
}

const AtField_Type = "at_field"
const AtField_Field_Field = "$FIELD"

func (op *AtField) Marshal(m jsn.Marshaler) error {
	return AtField_Marshal(m, op)
}

type AtField_Slice []AtField

func (op *AtField_Slice) GetType() string { return AtField_Type }

func (op *AtField_Slice) Marshal(m jsn.Marshaler) error {
	return AtField_Repeats_Marshal(m, (*[]AtField)(op))
}

func (op *AtField_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AtField_Slice) SetSize(cnt int) {
	var els []AtField
	if cnt >= 0 {
		els = make(AtField_Slice, cnt)
	}
	(*op) = els
}

func (op *AtField_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AtField_Marshal(m, &(*op)[i])
}

func AtField_Repeats_Marshal(m jsn.Marshaler, vals *[]AtField) error {
	return jsn.RepeatBlock(m, (*AtField_Slice)(vals))
}

func AtField_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AtField) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AtField_Repeats_Marshal(m, pv)
	}
	return
}

type AtField_Flow struct{ ptr *AtField }

func (n AtField_Flow) GetType() string      { return AtField_Type }
func (n AtField_Flow) GetLede() string      { return AtField_Type }
func (n AtField_Flow) GetFlow() interface{} { return n.ptr }
func (n AtField_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AtField); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AtField_Optional_Marshal(m jsn.Marshaler, pv **AtField) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AtField_Marshal(m, *pv)
	} else if !enc {
		var v AtField
		if err = AtField_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AtField_Marshal(m jsn.Marshaler, val *AtField) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AtField_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AtField_Field_Field)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Field)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AtField_Field_Field))
		}
		m.EndBlock()
	}
	return
}

// AtIndex
type AtIndex struct {
	Index  rt.NumberEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Dot = (*AtIndex)(nil)

func (*AtIndex) Compose() composer.Spec {
	return composer.Spec{
		Name: AtIndex_Type,
		Uses: composer.Type_Flow,
	}
}

const AtIndex_Type = "at_index"
const AtIndex_Field_Index = "$INDEX"

func (op *AtIndex) Marshal(m jsn.Marshaler) error {
	return AtIndex_Marshal(m, op)
}

type AtIndex_Slice []AtIndex

func (op *AtIndex_Slice) GetType() string { return AtIndex_Type }

func (op *AtIndex_Slice) Marshal(m jsn.Marshaler) error {
	return AtIndex_Repeats_Marshal(m, (*[]AtIndex)(op))
}

func (op *AtIndex_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *AtIndex_Slice) SetSize(cnt int) {
	var els []AtIndex
	if cnt >= 0 {
		els = make(AtIndex_Slice, cnt)
	}
	(*op) = els
}

func (op *AtIndex_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return AtIndex_Marshal(m, &(*op)[i])
}

func AtIndex_Repeats_Marshal(m jsn.Marshaler, vals *[]AtIndex) error {
	return jsn.RepeatBlock(m, (*AtIndex_Slice)(vals))
}

func AtIndex_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]AtIndex) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = AtIndex_Repeats_Marshal(m, pv)
	}
	return
}

type AtIndex_Flow struct{ ptr *AtIndex }

func (n AtIndex_Flow) GetType() string      { return AtIndex_Type }
func (n AtIndex_Flow) GetLede() string      { return AtIndex_Type }
func (n AtIndex_Flow) GetFlow() interface{} { return n.ptr }
func (n AtIndex_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*AtIndex); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func AtIndex_Optional_Marshal(m jsn.Marshaler, pv **AtIndex) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = AtIndex_Marshal(m, *pv)
	} else if !enc {
		var v AtIndex
		if err = AtIndex_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func AtIndex_Marshal(m jsn.Marshaler, val *AtIndex) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(AtIndex_Flow{val}); err == nil {
		e0 := m.MarshalKey("", AtIndex_Field_Index)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Index)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", AtIndex_Field_Index))
		}
		m.EndBlock()
	}
	return
}

// CallPattern Executes a pattern, and potentially returns a value.
type CallPattern struct {
	PatternName string `if:"label=_,type=text"`
	Arguments   []Arg  `if:"label=args"`
	Markup      map[string]any
}

// User implemented slots:
var _ rt.Execute = (*CallPattern)(nil)
var _ rt.BoolEval = (*CallPattern)(nil)
var _ rt.NumberEval = (*CallPattern)(nil)
var _ rt.TextEval = (*CallPattern)(nil)
var _ rt.RecordEval = (*CallPattern)(nil)
var _ rt.NumListEval = (*CallPattern)(nil)
var _ rt.TextListEval = (*CallPattern)(nil)
var _ rt.RecordListEval = (*CallPattern)(nil)

func (*CallPattern) Compose() composer.Spec {
	return composer.Spec{
		Name: CallPattern_Type,
		Uses: composer.Type_Flow,
		Lede: "determine",
	}
}

const CallPattern_Type = "call_pattern"
const CallPattern_Field_PatternName = "$PATTERN_NAME"
const CallPattern_Field_Arguments = "$ARGUMENTS"

func (op *CallPattern) Marshal(m jsn.Marshaler) error {
	return CallPattern_Marshal(m, op)
}

type CallPattern_Slice []CallPattern

func (op *CallPattern_Slice) GetType() string { return CallPattern_Type }

func (op *CallPattern_Slice) Marshal(m jsn.Marshaler) error {
	return CallPattern_Repeats_Marshal(m, (*[]CallPattern)(op))
}

func (op *CallPattern_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *CallPattern_Slice) SetSize(cnt int) {
	var els []CallPattern
	if cnt >= 0 {
		els = make(CallPattern_Slice, cnt)
	}
	(*op) = els
}

func (op *CallPattern_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return CallPattern_Marshal(m, &(*op)[i])
}

func CallPattern_Repeats_Marshal(m jsn.Marshaler, vals *[]CallPattern) error {
	return jsn.RepeatBlock(m, (*CallPattern_Slice)(vals))
}

func CallPattern_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]CallPattern) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = CallPattern_Repeats_Marshal(m, pv)
	}
	return
}

type CallPattern_Flow struct{ ptr *CallPattern }

func (n CallPattern_Flow) GetType() string      { return CallPattern_Type }
func (n CallPattern_Flow) GetLede() string      { return "determine" }
func (n CallPattern_Flow) GetFlow() interface{} { return n.ptr }
func (n CallPattern_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*CallPattern); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func CallPattern_Optional_Marshal(m jsn.Marshaler, pv **CallPattern) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = CallPattern_Marshal(m, *pv)
	} else if !enc {
		var v CallPattern
		if err = CallPattern_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func CallPattern_Marshal(m jsn.Marshaler, val *CallPattern) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(CallPattern_Flow{val}); err == nil {
		e0 := m.MarshalKey("", CallPattern_Field_PatternName)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Marshal(m, &val.PatternName)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", CallPattern_Field_PatternName))
		}
		e1 := m.MarshalKey("args", CallPattern_Field_Arguments)
		if e1 == nil {
			e1 = Arg_Repeats_Marshal(m, &val.Arguments)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", CallPattern_Field_Arguments))
		}
		m.EndBlock()
	}
	return
}

const Dot_Type = "dot"

var Dot_Optional_Marshal = Dot_Marshal

type Dot_Slot struct{ Value *Dot }

func (at Dot_Slot) Marshal(m jsn.Marshaler) (err error) {
	if err = m.MarshalBlock(at); err == nil {
		if a, ok := at.GetSlot(); ok {
			if e := a.(jsn.Marshalee).Marshal(m); e != nil && e != jsn.Missing {
				m.Error(e)
			}
		}
		m.EndBlock()
	}
	return
}
func (at Dot_Slot) GetType() string              { return Dot_Type }
func (at Dot_Slot) GetSlot() (interface{}, bool) { return *at.Value, *at.Value != nil }
func (at Dot_Slot) SetSlot(v interface{}) (okay bool) {
	(*at.Value), okay = v.(Dot)
	return
}

func Dot_Marshal(m jsn.Marshaler, ptr *Dot) (err error) {
	slot := Dot_Slot{ptr}
	return slot.Marshal(m)
}

type Dot_Slice []Dot

func (op *Dot_Slice) GetType() string { return Dot_Type }

func (op *Dot_Slice) Marshal(m jsn.Marshaler) error {
	return Dot_Repeats_Marshal(m, (*[]Dot)(op))
}

func (op *Dot_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Dot_Slice) SetSize(cnt int) {
	var els []Dot
	if cnt >= 0 {
		els = make(Dot_Slice, cnt)
	}
	(*op) = els
}

func (op *Dot_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Dot_Marshal(m, &(*op)[i])
}

func Dot_Repeats_Marshal(m jsn.Marshaler, vals *[]Dot) error {
	return jsn.RepeatBlock(m, (*Dot_Slice)(vals))
}

func Dot_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Dot) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Dot_Repeats_Marshal(m, pv)
	}
	return
}

// FromBool Assigns the calculated boolean value.
type FromBool struct {
	Value  rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromBool)(nil)

func (*FromBool) Compose() composer.Spec {
	return composer.Spec{
		Name: FromBool_Type,
		Uses: composer.Type_Flow,
	}
}

const FromBool_Type = "from_bool"
const FromBool_Field_Value = "$VALUE"

func (op *FromBool) Marshal(m jsn.Marshaler) error {
	return FromBool_Marshal(m, op)
}

type FromBool_Slice []FromBool

func (op *FromBool_Slice) GetType() string { return FromBool_Type }

func (op *FromBool_Slice) Marshal(m jsn.Marshaler) error {
	return FromBool_Repeats_Marshal(m, (*[]FromBool)(op))
}

func (op *FromBool_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromBool_Slice) SetSize(cnt int) {
	var els []FromBool
	if cnt >= 0 {
		els = make(FromBool_Slice, cnt)
	}
	(*op) = els
}

func (op *FromBool_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromBool_Marshal(m, &(*op)[i])
}

func FromBool_Repeats_Marshal(m jsn.Marshaler, vals *[]FromBool) error {
	return jsn.RepeatBlock(m, (*FromBool_Slice)(vals))
}

func FromBool_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromBool) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromBool_Repeats_Marshal(m, pv)
	}
	return
}

type FromBool_Flow struct{ ptr *FromBool }

func (n FromBool_Flow) GetType() string      { return FromBool_Type }
func (n FromBool_Flow) GetLede() string      { return FromBool_Type }
func (n FromBool_Flow) GetFlow() interface{} { return n.ptr }
func (n FromBool_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromBool); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromBool_Optional_Marshal(m jsn.Marshaler, pv **FromBool) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromBool_Marshal(m, *pv)
	} else if !enc {
		var v FromBool
		if err = FromBool_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromBool_Marshal(m jsn.Marshaler, val *FromBool) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromBool_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromBool_Field_Value)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromBool_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// FromNumList Assigns the calculated numbers.
type FromNumList struct {
	Value  rt.NumListEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromNumList)(nil)

func (*FromNumList) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNumList_Type,
		Uses: composer.Type_Flow,
	}
}

const FromNumList_Type = "from_num_list"
const FromNumList_Field_Value = "$VALUE"

func (op *FromNumList) Marshal(m jsn.Marshaler) error {
	return FromNumList_Marshal(m, op)
}

type FromNumList_Slice []FromNumList

func (op *FromNumList_Slice) GetType() string { return FromNumList_Type }

func (op *FromNumList_Slice) Marshal(m jsn.Marshaler) error {
	return FromNumList_Repeats_Marshal(m, (*[]FromNumList)(op))
}

func (op *FromNumList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromNumList_Slice) SetSize(cnt int) {
	var els []FromNumList
	if cnt >= 0 {
		els = make(FromNumList_Slice, cnt)
	}
	(*op) = els
}

func (op *FromNumList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromNumList_Marshal(m, &(*op)[i])
}

func FromNumList_Repeats_Marshal(m jsn.Marshaler, vals *[]FromNumList) error {
	return jsn.RepeatBlock(m, (*FromNumList_Slice)(vals))
}

func FromNumList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromNumList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromNumList_Repeats_Marshal(m, pv)
	}
	return
}

type FromNumList_Flow struct{ ptr *FromNumList }

func (n FromNumList_Flow) GetType() string      { return FromNumList_Type }
func (n FromNumList_Flow) GetLede() string      { return FromNumList_Type }
func (n FromNumList_Flow) GetFlow() interface{} { return n.ptr }
func (n FromNumList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromNumList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromNumList_Optional_Marshal(m jsn.Marshaler, pv **FromNumList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromNumList_Marshal(m, *pv)
	} else if !enc {
		var v FromNumList
		if err = FromNumList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromNumList_Marshal(m jsn.Marshaler, val *FromNumList) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromNumList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromNumList_Field_Value)
		if e0 == nil {
			e0 = rt.NumListEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromNumList_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// FromNumber Assigns the calculated number.
type FromNumber struct {
	Value  rt.NumberEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromNumber)(nil)

func (*FromNumber) Compose() composer.Spec {
	return composer.Spec{
		Name: FromNumber_Type,
		Uses: composer.Type_Flow,
	}
}

const FromNumber_Type = "from_number"
const FromNumber_Field_Value = "$VALUE"

func (op *FromNumber) Marshal(m jsn.Marshaler) error {
	return FromNumber_Marshal(m, op)
}

type FromNumber_Slice []FromNumber

func (op *FromNumber_Slice) GetType() string { return FromNumber_Type }

func (op *FromNumber_Slice) Marshal(m jsn.Marshaler) error {
	return FromNumber_Repeats_Marshal(m, (*[]FromNumber)(op))
}

func (op *FromNumber_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromNumber_Slice) SetSize(cnt int) {
	var els []FromNumber
	if cnt >= 0 {
		els = make(FromNumber_Slice, cnt)
	}
	(*op) = els
}

func (op *FromNumber_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromNumber_Marshal(m, &(*op)[i])
}

func FromNumber_Repeats_Marshal(m jsn.Marshaler, vals *[]FromNumber) error {
	return jsn.RepeatBlock(m, (*FromNumber_Slice)(vals))
}

func FromNumber_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromNumber) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromNumber_Repeats_Marshal(m, pv)
	}
	return
}

type FromNumber_Flow struct{ ptr *FromNumber }

func (n FromNumber_Flow) GetType() string      { return FromNumber_Type }
func (n FromNumber_Flow) GetLede() string      { return FromNumber_Type }
func (n FromNumber_Flow) GetFlow() interface{} { return n.ptr }
func (n FromNumber_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromNumber); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromNumber_Optional_Marshal(m jsn.Marshaler, pv **FromNumber) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromNumber_Marshal(m, *pv)
	} else if !enc {
		var v FromNumber
		if err = FromNumber_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromNumber_Marshal(m jsn.Marshaler, val *FromNumber) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromNumber_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromNumber_Field_Value)
		if e0 == nil {
			e0 = rt.NumberEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromNumber_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// FromRecord Assigns the calculated record.
type FromRecord struct {
	Value  rt.RecordEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromRecord)(nil)

func (*FromRecord) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecord_Type,
		Uses: composer.Type_Flow,
	}
}

const FromRecord_Type = "from_record"
const FromRecord_Field_Value = "$VALUE"

func (op *FromRecord) Marshal(m jsn.Marshaler) error {
	return FromRecord_Marshal(m, op)
}

type FromRecord_Slice []FromRecord

func (op *FromRecord_Slice) GetType() string { return FromRecord_Type }

func (op *FromRecord_Slice) Marshal(m jsn.Marshaler) error {
	return FromRecord_Repeats_Marshal(m, (*[]FromRecord)(op))
}

func (op *FromRecord_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromRecord_Slice) SetSize(cnt int) {
	var els []FromRecord
	if cnt >= 0 {
		els = make(FromRecord_Slice, cnt)
	}
	(*op) = els
}

func (op *FromRecord_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromRecord_Marshal(m, &(*op)[i])
}

func FromRecord_Repeats_Marshal(m jsn.Marshaler, vals *[]FromRecord) error {
	return jsn.RepeatBlock(m, (*FromRecord_Slice)(vals))
}

func FromRecord_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromRecord) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromRecord_Repeats_Marshal(m, pv)
	}
	return
}

type FromRecord_Flow struct{ ptr *FromRecord }

func (n FromRecord_Flow) GetType() string      { return FromRecord_Type }
func (n FromRecord_Flow) GetLede() string      { return FromRecord_Type }
func (n FromRecord_Flow) GetFlow() interface{} { return n.ptr }
func (n FromRecord_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromRecord); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromRecord_Optional_Marshal(m jsn.Marshaler, pv **FromRecord) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromRecord_Marshal(m, *pv)
	} else if !enc {
		var v FromRecord
		if err = FromRecord_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromRecord_Marshal(m jsn.Marshaler, val *FromRecord) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromRecord_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromRecord_Field_Value)
		if e0 == nil {
			e0 = rt.RecordEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromRecord_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// FromRecordList Assigns the calculated records.
type FromRecordList struct {
	Value  rt.RecordListEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromRecordList)(nil)

func (*FromRecordList) Compose() composer.Spec {
	return composer.Spec{
		Name: FromRecordList_Type,
		Uses: composer.Type_Flow,
	}
}

const FromRecordList_Type = "from_record_list"
const FromRecordList_Field_Value = "$VALUE"

func (op *FromRecordList) Marshal(m jsn.Marshaler) error {
	return FromRecordList_Marshal(m, op)
}

type FromRecordList_Slice []FromRecordList

func (op *FromRecordList_Slice) GetType() string { return FromRecordList_Type }

func (op *FromRecordList_Slice) Marshal(m jsn.Marshaler) error {
	return FromRecordList_Repeats_Marshal(m, (*[]FromRecordList)(op))
}

func (op *FromRecordList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromRecordList_Slice) SetSize(cnt int) {
	var els []FromRecordList
	if cnt >= 0 {
		els = make(FromRecordList_Slice, cnt)
	}
	(*op) = els
}

func (op *FromRecordList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromRecordList_Marshal(m, &(*op)[i])
}

func FromRecordList_Repeats_Marshal(m jsn.Marshaler, vals *[]FromRecordList) error {
	return jsn.RepeatBlock(m, (*FromRecordList_Slice)(vals))
}

func FromRecordList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromRecordList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromRecordList_Repeats_Marshal(m, pv)
	}
	return
}

type FromRecordList_Flow struct{ ptr *FromRecordList }

func (n FromRecordList_Flow) GetType() string      { return FromRecordList_Type }
func (n FromRecordList_Flow) GetLede() string      { return FromRecordList_Type }
func (n FromRecordList_Flow) GetFlow() interface{} { return n.ptr }
func (n FromRecordList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromRecordList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromRecordList_Optional_Marshal(m jsn.Marshaler, pv **FromRecordList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromRecordList_Marshal(m, *pv)
	} else if !enc {
		var v FromRecordList
		if err = FromRecordList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromRecordList_Marshal(m jsn.Marshaler, val *FromRecordList) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromRecordList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromRecordList_Field_Value)
		if e0 == nil {
			e0 = rt.RecordListEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromRecordList_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// FromText Assigns the calculated piece of text.
type FromText struct {
	Value  rt.TextEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromText)(nil)

func (*FromText) Compose() composer.Spec {
	return composer.Spec{
		Name: FromText_Type,
		Uses: composer.Type_Flow,
	}
}

const FromText_Type = "from_text"
const FromText_Field_Value = "$VALUE"

func (op *FromText) Marshal(m jsn.Marshaler) error {
	return FromText_Marshal(m, op)
}

type FromText_Slice []FromText

func (op *FromText_Slice) GetType() string { return FromText_Type }

func (op *FromText_Slice) Marshal(m jsn.Marshaler) error {
	return FromText_Repeats_Marshal(m, (*[]FromText)(op))
}

func (op *FromText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromText_Slice) SetSize(cnt int) {
	var els []FromText
	if cnt >= 0 {
		els = make(FromText_Slice, cnt)
	}
	(*op) = els
}

func (op *FromText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromText_Marshal(m, &(*op)[i])
}

func FromText_Repeats_Marshal(m jsn.Marshaler, vals *[]FromText) error {
	return jsn.RepeatBlock(m, (*FromText_Slice)(vals))
}

func FromText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromText_Repeats_Marshal(m, pv)
	}
	return
}

type FromText_Flow struct{ ptr *FromText }

func (n FromText_Flow) GetType() string      { return FromText_Type }
func (n FromText_Flow) GetLede() string      { return FromText_Type }
func (n FromText_Flow) GetFlow() interface{} { return n.ptr }
func (n FromText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromText_Optional_Marshal(m jsn.Marshaler, pv **FromText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromText_Marshal(m, *pv)
	} else if !enc {
		var v FromText
		if err = FromText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromText_Marshal(m jsn.Marshaler, val *FromText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromText_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromText_Field_Value)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromText_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// FromTextList Assigns the calculated pieces of text.
type FromTextList struct {
	Value  rt.TextListEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ Assignment = (*FromTextList)(nil)

func (*FromTextList) Compose() composer.Spec {
	return composer.Spec{
		Name: FromTextList_Type,
		Uses: composer.Type_Flow,
	}
}

const FromTextList_Type = "from_text_list"
const FromTextList_Field_Value = "$VALUE"

func (op *FromTextList) Marshal(m jsn.Marshaler) error {
	return FromTextList_Marshal(m, op)
}

type FromTextList_Slice []FromTextList

func (op *FromTextList_Slice) GetType() string { return FromTextList_Type }

func (op *FromTextList_Slice) Marshal(m jsn.Marshaler) error {
	return FromTextList_Repeats_Marshal(m, (*[]FromTextList)(op))
}

func (op *FromTextList_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *FromTextList_Slice) SetSize(cnt int) {
	var els []FromTextList
	if cnt >= 0 {
		els = make(FromTextList_Slice, cnt)
	}
	(*op) = els
}

func (op *FromTextList_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return FromTextList_Marshal(m, &(*op)[i])
}

func FromTextList_Repeats_Marshal(m jsn.Marshaler, vals *[]FromTextList) error {
	return jsn.RepeatBlock(m, (*FromTextList_Slice)(vals))
}

func FromTextList_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]FromTextList) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = FromTextList_Repeats_Marshal(m, pv)
	}
	return
}

type FromTextList_Flow struct{ ptr *FromTextList }

func (n FromTextList_Flow) GetType() string      { return FromTextList_Type }
func (n FromTextList_Flow) GetLede() string      { return FromTextList_Type }
func (n FromTextList_Flow) GetFlow() interface{} { return n.ptr }
func (n FromTextList_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*FromTextList); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func FromTextList_Optional_Marshal(m jsn.Marshaler, pv **FromTextList) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = FromTextList_Marshal(m, *pv)
	} else if !enc {
		var v FromTextList
		if err = FromTextList_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func FromTextList_Marshal(m jsn.Marshaler, val *FromTextList) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(FromTextList_Flow{val}); err == nil {
		e0 := m.MarshalKey("", FromTextList_Field_Value)
		if e0 == nil {
			e0 = rt.TextListEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", FromTextList_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// ObjectRef
type ObjectRef struct {
	Name   rt.TextEval `if:"label=_"`
	Field  rt.TextEval `if:"label=field"`
	Dot    []Dot       `if:"label=dot,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ Address = (*ObjectRef)(nil)
var _ rt.BoolEval = (*ObjectRef)(nil)
var _ rt.NumberEval = (*ObjectRef)(nil)
var _ rt.TextEval = (*ObjectRef)(nil)
var _ rt.RecordEval = (*ObjectRef)(nil)
var _ rt.NumListEval = (*ObjectRef)(nil)
var _ rt.TextListEval = (*ObjectRef)(nil)
var _ rt.RecordListEval = (*ObjectRef)(nil)

func (*ObjectRef) Compose() composer.Spec {
	return composer.Spec{
		Name: ObjectRef_Type,
		Uses: composer.Type_Flow,
		Lede: "object",
	}
}

const ObjectRef_Type = "object_ref"
const ObjectRef_Field_Name = "$NAME"
const ObjectRef_Field_Field = "$FIELD"
const ObjectRef_Field_Dot = "$DOT"

func (op *ObjectRef) Marshal(m jsn.Marshaler) error {
	return ObjectRef_Marshal(m, op)
}

type ObjectRef_Slice []ObjectRef

func (op *ObjectRef_Slice) GetType() string { return ObjectRef_Type }

func (op *ObjectRef_Slice) Marshal(m jsn.Marshaler) error {
	return ObjectRef_Repeats_Marshal(m, (*[]ObjectRef)(op))
}

func (op *ObjectRef_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ObjectRef_Slice) SetSize(cnt int) {
	var els []ObjectRef
	if cnt >= 0 {
		els = make(ObjectRef_Slice, cnt)
	}
	(*op) = els
}

func (op *ObjectRef_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ObjectRef_Marshal(m, &(*op)[i])
}

func ObjectRef_Repeats_Marshal(m jsn.Marshaler, vals *[]ObjectRef) error {
	return jsn.RepeatBlock(m, (*ObjectRef_Slice)(vals))
}

func ObjectRef_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ObjectRef) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ObjectRef_Repeats_Marshal(m, pv)
	}
	return
}

type ObjectRef_Flow struct{ ptr *ObjectRef }

func (n ObjectRef_Flow) GetType() string      { return ObjectRef_Type }
func (n ObjectRef_Flow) GetLede() string      { return "object" }
func (n ObjectRef_Flow) GetFlow() interface{} { return n.ptr }
func (n ObjectRef_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ObjectRef); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ObjectRef_Optional_Marshal(m jsn.Marshaler, pv **ObjectRef) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ObjectRef_Marshal(m, *pv)
	} else if !enc {
		var v ObjectRef
		if err = ObjectRef_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ObjectRef_Marshal(m jsn.Marshaler, val *ObjectRef) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ObjectRef_Flow{val}); err == nil {
		e0 := m.MarshalKey("", ObjectRef_Field_Name)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ObjectRef_Field_Name))
		}
		e1 := m.MarshalKey("field", ObjectRef_Field_Field)
		if e1 == nil {
			e1 = rt.TextEval_Marshal(m, &val.Field)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", ObjectRef_Field_Field))
		}
		e2 := m.MarshalKey("dot", ObjectRef_Field_Dot)
		if e2 == nil {
			e2 = Dot_Optional_Repeats_Marshal(m, &val.Dot)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", ObjectRef_Field_Dot))
		}
		m.EndBlock()
	}
	return
}

// Prog A pattern handler. Stored in the mdl_rule database table.
type Prog struct {
	Args       []Arg        `if:"label=args,optional"`
	Filter     rt.BoolEval  `if:"label=filter,optional"`
	Exe        []rt.Execute `if:"label=do"`
	Updates    bool         `if:"label=updates,optional,type=bool"`
	Interrupts bool         `if:"label=interrupts,optional,type=bool"`
	Cancels    bool         `if:"label=cancels,optional,type=bool"`
	Markup     map[string]any
}

func (*Prog) Compose() composer.Spec {
	return composer.Spec{
		Name: Prog_Type,
		Uses: composer.Type_Flow,
	}
}

const Prog_Type = "prog"
const Prog_Field_Args = "$ARGS"
const Prog_Field_Filter = "$FILTER"
const Prog_Field_Exe = "$EXE"
const Prog_Field_Updates = "$UPDATES"
const Prog_Field_Interrupts = "$INTERRUPTS"
const Prog_Field_Cancels = "$CANCELS"

func (op *Prog) Marshal(m jsn.Marshaler) error {
	return Prog_Marshal(m, op)
}

type Prog_Slice []Prog

func (op *Prog_Slice) GetType() string { return Prog_Type }

func (op *Prog_Slice) Marshal(m jsn.Marshaler) error {
	return Prog_Repeats_Marshal(m, (*[]Prog)(op))
}

func (op *Prog_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Prog_Slice) SetSize(cnt int) {
	var els []Prog
	if cnt >= 0 {
		els = make(Prog_Slice, cnt)
	}
	(*op) = els
}

func (op *Prog_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Prog_Marshal(m, &(*op)[i])
}

func Prog_Repeats_Marshal(m jsn.Marshaler, vals *[]Prog) error {
	return jsn.RepeatBlock(m, (*Prog_Slice)(vals))
}

func Prog_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Prog) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Prog_Repeats_Marshal(m, pv)
	}
	return
}

type Prog_Flow struct{ ptr *Prog }

func (n Prog_Flow) GetType() string      { return Prog_Type }
func (n Prog_Flow) GetLede() string      { return Prog_Type }
func (n Prog_Flow) GetFlow() interface{} { return n.ptr }
func (n Prog_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Prog); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Prog_Optional_Marshal(m jsn.Marshaler, pv **Prog) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Prog_Marshal(m, *pv)
	} else if !enc {
		var v Prog
		if err = Prog_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Prog_Marshal(m jsn.Marshaler, val *Prog) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Prog_Flow{val}); err == nil {
		e0 := m.MarshalKey("args", Prog_Field_Args)
		if e0 == nil {
			e0 = Arg_Optional_Repeats_Marshal(m, &val.Args)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Prog_Field_Args))
		}
		e1 := m.MarshalKey("filter", Prog_Field_Filter)
		if e1 == nil {
			e1 = rt.BoolEval_Optional_Marshal(m, &val.Filter)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Prog_Field_Filter))
		}
		e2 := m.MarshalKey("do", Prog_Field_Exe)
		if e2 == nil {
			e2 = rt.Execute_Repeats_Marshal(m, &val.Exe)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", Prog_Field_Exe))
		}
		e3 := m.MarshalKey("updates", Prog_Field_Updates)
		if e3 == nil {
			e3 = prim.Bool_Unboxed_Optional_Marshal(m, &val.Updates)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", Prog_Field_Updates))
		}
		e4 := m.MarshalKey("interrupts", Prog_Field_Interrupts)
		if e4 == nil {
			e4 = prim.Bool_Unboxed_Optional_Marshal(m, &val.Interrupts)
		}
		if e4 != nil && e4 != jsn.Missing {
			m.Error(errutil.New(e4, "in flow at", Prog_Field_Interrupts))
		}
		e5 := m.MarshalKey("cancels", Prog_Field_Cancels)
		if e5 == nil {
			e5 = prim.Bool_Unboxed_Optional_Marshal(m, &val.Cancels)
		}
		if e5 != nil && e5 != jsn.Missing {
			m.Error(errutil.New(e5, "in flow at", Prog_Field_Cancels))
		}
		m.EndBlock()
	}
	return
}

// SetValue Store a value into a local variable ( or pattern argument. )
type SetValue struct {
	Target Address    `if:"label=_"`
	Value  Assignment `if:"label=from"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*SetValue)(nil)

func (*SetValue) Compose() composer.Spec {
	return composer.Spec{
		Name: SetValue_Type,
		Uses: composer.Type_Flow,
		Lede: "set",
	}
}

const SetValue_Type = "set_value"
const SetValue_Field_Target = "$TARGET"
const SetValue_Field_Value = "$VALUE"

func (op *SetValue) Marshal(m jsn.Marshaler) error {
	return SetValue_Marshal(m, op)
}

type SetValue_Slice []SetValue

func (op *SetValue_Slice) GetType() string { return SetValue_Type }

func (op *SetValue_Slice) Marshal(m jsn.Marshaler) error {
	return SetValue_Repeats_Marshal(m, (*[]SetValue)(op))
}

func (op *SetValue_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *SetValue_Slice) SetSize(cnt int) {
	var els []SetValue
	if cnt >= 0 {
		els = make(SetValue_Slice, cnt)
	}
	(*op) = els
}

func (op *SetValue_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return SetValue_Marshal(m, &(*op)[i])
}

func SetValue_Repeats_Marshal(m jsn.Marshaler, vals *[]SetValue) error {
	return jsn.RepeatBlock(m, (*SetValue_Slice)(vals))
}

func SetValue_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]SetValue) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = SetValue_Repeats_Marshal(m, pv)
	}
	return
}

type SetValue_Flow struct{ ptr *SetValue }

func (n SetValue_Flow) GetType() string      { return SetValue_Type }
func (n SetValue_Flow) GetLede() string      { return "set" }
func (n SetValue_Flow) GetFlow() interface{} { return n.ptr }
func (n SetValue_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*SetValue); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func SetValue_Optional_Marshal(m jsn.Marshaler, pv **SetValue) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = SetValue_Marshal(m, *pv)
	} else if !enc {
		var v SetValue
		if err = SetValue_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func SetValue_Marshal(m jsn.Marshaler, val *SetValue) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(SetValue_Flow{val}); err == nil {
		e0 := m.MarshalKey("", SetValue_Field_Target)
		if e0 == nil {
			e0 = Address_Marshal(m, &val.Target)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", SetValue_Field_Target))
		}
		e1 := m.MarshalKey("from", SetValue_Field_Value)
		if e1 == nil {
			e1 = Assignment_Marshal(m, &val.Value)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", SetValue_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// VariableRef
type VariableRef struct {
	Name   rt.TextEval `if:"label=_"`
	Dot    []Dot       `if:"label=dot,optional"`
	Markup map[string]any
}

// User implemented slots:
var _ Address = (*VariableRef)(nil)
var _ rt.BoolEval = (*VariableRef)(nil)
var _ rt.NumberEval = (*VariableRef)(nil)
var _ rt.TextEval = (*VariableRef)(nil)
var _ rt.RecordEval = (*VariableRef)(nil)
var _ rt.NumListEval = (*VariableRef)(nil)
var _ rt.TextListEval = (*VariableRef)(nil)
var _ rt.RecordListEval = (*VariableRef)(nil)

func (*VariableRef) Compose() composer.Spec {
	return composer.Spec{
		Name: VariableRef_Type,
		Uses: composer.Type_Flow,
		Lede: "variable",
	}
}

const VariableRef_Type = "variable_ref"
const VariableRef_Field_Name = "$NAME"
const VariableRef_Field_Dot = "$DOT"

func (op *VariableRef) Marshal(m jsn.Marshaler) error {
	return VariableRef_Marshal(m, op)
}

type VariableRef_Slice []VariableRef

func (op *VariableRef_Slice) GetType() string { return VariableRef_Type }

func (op *VariableRef_Slice) Marshal(m jsn.Marshaler) error {
	return VariableRef_Repeats_Marshal(m, (*[]VariableRef)(op))
}

func (op *VariableRef_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *VariableRef_Slice) SetSize(cnt int) {
	var els []VariableRef
	if cnt >= 0 {
		els = make(VariableRef_Slice, cnt)
	}
	(*op) = els
}

func (op *VariableRef_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return VariableRef_Marshal(m, &(*op)[i])
}

func VariableRef_Repeats_Marshal(m jsn.Marshaler, vals *[]VariableRef) error {
	return jsn.RepeatBlock(m, (*VariableRef_Slice)(vals))
}

func VariableRef_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]VariableRef) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = VariableRef_Repeats_Marshal(m, pv)
	}
	return
}

type VariableRef_Flow struct{ ptr *VariableRef }

func (n VariableRef_Flow) GetType() string      { return VariableRef_Type }
func (n VariableRef_Flow) GetLede() string      { return "variable" }
func (n VariableRef_Flow) GetFlow() interface{} { return n.ptr }
func (n VariableRef_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*VariableRef); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func VariableRef_Optional_Marshal(m jsn.Marshaler, pv **VariableRef) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = VariableRef_Marshal(m, *pv)
	} else if !enc {
		var v VariableRef
		if err = VariableRef_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func VariableRef_Marshal(m jsn.Marshaler, val *VariableRef) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(VariableRef_Flow{val}); err == nil {
		e0 := m.MarshalKey("", VariableRef_Field_Name)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Name)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", VariableRef_Field_Name))
		}
		e1 := m.MarshalKey("dot", VariableRef_Field_Dot)
		if e1 == nil {
			e1 = Dot_Optional_Repeats_Marshal(m, &val.Dot)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", VariableRef_Field_Dot))
		}
		m.EndBlock()
	}
	return
}

var Slots = []interface{}{
	(*Address)(nil),
	(*Assignment)(nil),
	(*Dot)(nil),
}

var Slats = []composer.Composer{
	(*Arg)(nil),
	(*AtField)(nil),
	(*AtIndex)(nil),
	(*CallPattern)(nil),
	(*FromBool)(nil),
	(*FromNumList)(nil),
	(*FromNumber)(nil),
	(*FromRecord)(nil),
	(*FromRecordList)(nil),
	(*FromText)(nil),
	(*FromTextList)(nil),
	(*ObjectRef)(nil),
	(*Prog)(nil),
	(*SetValue)(nil),
	(*VariableRef)(nil),
}

var Signatures = map[uint64]interface{}{
	6291103735245333139:  (*Arg)(nil),            /* Arg:from: */
	9201024288851220289:  (*Prog)(nil),           /* Prog args:do: */
	4566663538597678170:  (*Prog)(nil),           /* Prog args:do:cancels: */
	404919893979018277:   (*Prog)(nil),           /* Prog args:do:interrupts: */
	7373497678810567558:  (*Prog)(nil),           /* Prog args:do:interrupts:cancels: */
	6733754003404409545:  (*Prog)(nil),           /* Prog args:do:updates: */
	15965240942014671890: (*Prog)(nil),           /* Prog args:do:updates:cancels: */
	12883711254754591981: (*Prog)(nil),           /* Prog args:do:updates:interrupts: */
	14538722533235079230: (*Prog)(nil),           /* Prog args:do:updates:interrupts:cancels: */
	2783150732220683881:  (*Prog)(nil),           /* Prog args:filter:do: */
	2090510423672918194:  (*Prog)(nil),           /* Prog args:filter:do:cancels: */
	10408156351642278797: (*Prog)(nil),           /* Prog args:filter:do:interrupts: */
	16437476798912131422: (*Prog)(nil),           /* Prog args:filter:do:interrupts:cancels: */
	9645338248103821345:  (*Prog)(nil),           /* Prog args:filter:do:updates: */
	13918036246970215610: (*Prog)(nil),           /* Prog args:filter:do:updates:cancels: */
	16335404921107193733: (*Prog)(nil),           /* Prog args:filter:do:updates:interrupts: */
	4280923456434367590:  (*Prog)(nil),           /* Prog args:filter:do:updates:interrupts:cancels: */
	5067340950479104120:  (*Prog)(nil),           /* Prog do: */
	12227908227799360331: (*Prog)(nil),           /* Prog do:cancels: */
	3755963473507582214:  (*Prog)(nil),           /* Prog do:interrupts: */
	10712242547281339301: (*Prog)(nil),           /* Prog do:interrupts:cancels: */
	7455578436021391916:  (*Prog)(nil),           /* Prog do:updates: */
	271948666284575239:   (*Prog)(nil),           /* Prog do:updates:cancels: */
	2299333964840602090:  (*Prog)(nil),           /* Prog do:updates:interrupts: */
	15746625426422462673: (*Prog)(nil),           /* Prog do:updates:interrupts:cancels: */
	18014764736867633486: (*Prog)(nil),           /* Prog filter:do: */
	14919503010611094653: (*Prog)(nil),           /* Prog filter:do:cancels: */
	170558645893210180:   (*Prog)(nil),           /* Prog filter:do:interrupts: */
	15439027480023174831: (*Prog)(nil),           /* Prog filter:do:interrupts:cancels: */
	4749999544988196546:  (*Prog)(nil),           /* Prog filter:do:updates: */
	14929487156242422937: (*Prog)(nil),           /* Prog filter:do:updates:cancels: */
	9053223929124211720:  (*Prog)(nil),           /* Prog filter:do:updates:interrupts: */
	11532767400305822939: (*Prog)(nil),           /* Prog filter:do:updates:interrupts:cancels: */
	1683104564853176068:  (*AtField)(nil),        /* dot=AtField: */
	17908840355303216180: (*AtIndex)(nil),        /* dot=AtIndex: */
	5430006510328108403:  (*CallPattern)(nil),    /* bool_eval=Determine:args: */
	11666175118824200195: (*CallPattern)(nil),    /* execute=Determine:args: */
	16219448703619493492: (*CallPattern)(nil),    /* num_list_eval=Determine:args: */
	15584772020364696136: (*CallPattern)(nil),    /* number_eval=Determine:args: */
	13992013847750998452: (*CallPattern)(nil),    /* record_eval=Determine:args: */
	352268441608212603:   (*CallPattern)(nil),    /* record_list_eval=Determine:args: */
	5079530186593846942:  (*CallPattern)(nil),    /* text_eval=Determine:args: */
	13938609641525654217: (*CallPattern)(nil),    /* text_list_eval=Determine:args: */
	16065241269206568079: (*FromBool)(nil),       /* assignment=FromBool: */
	15276643347016776669: (*FromNumList)(nil),    /* assignment=FromNumList: */
	10386192108847008240: (*FromNumber)(nil),     /* assignment=FromNumber: */
	8445595699766392240:  (*FromRecord)(nil),     /* assignment=FromRecord: */
	17510952281883199828: (*FromRecordList)(nil), /* assignment=FromRecordList: */
	9783457335751138546:  (*FromText)(nil),       /* assignment=FromText: */
	3267530751198060154:  (*FromTextList)(nil),   /* assignment=FromTextList: */
	683773550166455203:   (*ObjectRef)(nil),      /* address=Object:field: */
	1942271780557121620:  (*ObjectRef)(nil),      /* bool_eval=Object:field: */
	8839776639979820731:  (*ObjectRef)(nil),      /* num_list_eval=Object:field: */
	10918337914011251575: (*ObjectRef)(nil),      /* number_eval=Object:field: */
	2347663618411162107:  (*ObjectRef)(nil),      /* record_eval=Object:field: */
	11613264323388154988: (*ObjectRef)(nil),      /* record_list_eval=Object:field: */
	16935348020531425213: (*ObjectRef)(nil),      /* text_eval=Object:field: */
	7207525564346341058:  (*ObjectRef)(nil),      /* text_list_eval=Object:field: */
	2801199650842020300:  (*ObjectRef)(nil),      /* address=Object:field:dot: */
	5711121365333637715:  (*ObjectRef)(nil),      /* bool_eval=Object:field:dot: */
	1214997628858983108:  (*ObjectRef)(nil),      /* num_list_eval=Object:field:dot: */
	11071357156742037304: (*ObjectRef)(nil),      /* number_eval=Object:field:dot: */
	1517965638051539844:  (*ObjectRef)(nil),      /* record_eval=Object:field:dot: */
	13722223890291796107: (*ObjectRef)(nil),      /* record_list_eval=Object:field:dot: */
	15784348372409109382: (*ObjectRef)(nil),      /* text_eval=Object:field:dot: */
	11516059561048599401: (*ObjectRef)(nil),      /* text_list_eval=Object:field:dot: */
	7241459153126815557:  (*SetValue)(nil),       /* execute=Set:from: */
	13692207992970428220: (*VariableRef)(nil),    /* address=Variable: */
	17908519799628660539: (*VariableRef)(nil),    /* bool_eval=Variable: */
	11022385456290008164: (*VariableRef)(nil),    /* num_list_eval=Variable: */
	14722688844418158720: (*VariableRef)(nil),    /* number_eval=Variable: */
	15906653930217516836: (*VariableRef)(nil),    /* record_eval=Variable: */
	16032903663975260899: (*VariableRef)(nil),    /* record_list_eval=Variable: */
	11181798416019134386: (*VariableRef)(nil),    /* text_eval=Variable: */
	14769776891888769773: (*VariableRef)(nil),    /* text_list_eval=Variable: */
	15966558056732701531: (*VariableRef)(nil),    /* address=Variable:dot: */
	7739360284898038596:  (*VariableRef)(nil),    /* bool_eval=Variable:dot: */
	14012826006150347811: (*VariableRef)(nil),    /* num_list_eval=Variable:dot: */
	2218494529839714071:  (*VariableRef)(nil),    /* number_eval=Variable:dot: */
	3479001804857346403:  (*VariableRef)(nil),    /* record_eval=Variable:dot: */
	11938488787528882828: (*VariableRef)(nil),    /* record_list_eval=Variable:dot: */
	4798713833623285465:  (*VariableRef)(nil),    /* text_eval=Variable:dot: */
	12039638244497140214: (*VariableRef)(nil),    /* text_list_eval=Variable:dot: */
}
