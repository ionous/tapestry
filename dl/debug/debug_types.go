// Code generated by Tapestry; edit at your own risk.
package debug

import (
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/dl/rti"
	"git.sr.ht/~ionous/tapestry/lang/typeinfo"
)

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_DoNothing struct {
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*DoNothing) Inspect() typeinfo.T {
	return &Z_DoNothing_Info
}

// return a valid markup map, creating it if necessary.
func (op *DoNothing) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// do_nothing, a type of flow.
const Z_DoNothing_Type = "do_nothing"

// ensure the command implements its specified slots:
var _ rti.Execute = (*DoNothing)(nil)

var Z_DoNothing_Info = typeinfo.Flow{
	Name:  Z_DoNothing_Type,
	Lede:  "--",
	Terms: []typeinfo.Term{},
	Slots: []*typeinfo.Slot{
		&rti.Z_Execute_Info,
	},
}

// holds a slice of type do_nothing
// FIX: duplicates the spec decl.
type FIX_DoNothing_Slice []DoNothing

// implements typeinfo.Inspector
func (*DoNothing_Slice) Inspect() typeinfo.T {
	return &Z_DoNothing_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_Expect struct {
	Value  rti.BoolEval
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*Expect) Inspect() typeinfo.T {
	return &Z_Expect_Info
}

// return a valid markup map, creating it if necessary.
func (op *Expect) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// expect, a type of flow.
const Z_Expect_Type = "expect"

// ensure the command implements its specified slots:
var _ rti.Execute = (*Expect)(nil)

var Z_Expect_Info = typeinfo.Flow{
	Name: Z_Expect_Type,
	Lede: "expect",
	Terms: []typeinfo.Term{{
		Name:  "value",
		Label: "_",
		Type:  &rti.Z_BoolEval_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_Execute_Info,
	},
}

// holds a slice of type expect
// FIX: duplicates the spec decl.
type FIX_Expect_Slice []Expect

// implements typeinfo.Inspector
func (*Expect_Slice) Inspect() typeinfo.T {
	return &Z_Expect_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_ExpectOutput struct {
	Output string
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*ExpectOutput) Inspect() typeinfo.T {
	return &Z_ExpectOutput_Info
}

// return a valid markup map, creating it if necessary.
func (op *ExpectOutput) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// expect_output, a type of flow.
const Z_ExpectOutput_Type = "expect_output"

// ensure the command implements its specified slots:
var _ rti.Execute = (*ExpectOutput)(nil)

var Z_ExpectOutput_Info = typeinfo.Flow{
	Name: Z_ExpectOutput_Type,
	Lede: "expect",
	Terms: []typeinfo.Term{{
		Name:  "output",
		Label: "output",
		Type:  &prim.Z_Lines_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_Execute_Info,
	},
}

// holds a slice of type expect_output
// FIX: duplicates the spec decl.
type FIX_ExpectOutput_Slice []ExpectOutput

// implements typeinfo.Inspector
func (*ExpectOutput_Slice) Inspect() typeinfo.T {
	return &Z_ExpectOutput_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_ExpectText struct {
	Text   rti.TextEval
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*ExpectText) Inspect() typeinfo.T {
	return &Z_ExpectText_Info
}

// return a valid markup map, creating it if necessary.
func (op *ExpectText) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// expect_text, a type of flow.
const Z_ExpectText_Type = "expect_text"

// ensure the command implements its specified slots:
var _ rti.Execute = (*ExpectText)(nil)

var Z_ExpectText_Info = typeinfo.Flow{
	Name: Z_ExpectText_Type,
	Lede: "expect",
	Terms: []typeinfo.Term{{
		Name:  "text",
		Label: "text",
		Type:  &rti.Z_TextEval_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_Execute_Info,
	},
}

// holds a slice of type expect_text
// FIX: duplicates the spec decl.
type FIX_ExpectText_Slice []ExpectText

// implements typeinfo.Inspector
func (*ExpectText_Slice) Inspect() typeinfo.T {
	return &Z_ExpectText_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_Fabricate struct {
	Text   rti.TextEval
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*Fabricate) Inspect() typeinfo.T {
	return &Z_Fabricate_Info
}

// return a valid markup map, creating it if necessary.
func (op *Fabricate) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// fabricate, a type of flow.
const Z_Fabricate_Type = "fabricate"

// ensure the command implements its specified slots:
var _ rti.Execute = (*Fabricate)(nil)

var Z_Fabricate_Info = typeinfo.Flow{
	Name: Z_Fabricate_Type,
	Lede: "fabricate",
	Terms: []typeinfo.Term{{
		Name:  "text",
		Label: "input",
		Type:  &rti.Z_TextEval_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_Execute_Info,
	},
}

// holds a slice of type fabricate
// FIX: duplicates the spec decl.
type FIX_Fabricate_Slice []Fabricate

// implements typeinfo.Inspector
func (*Fabricate_Slice) Inspect() typeinfo.T {
	return &Z_Fabricate_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_DebugLog struct {
	LogLevel string
	Value    rti.Assignment
	Markup   map[string]any
}

// implements typeinfo.Inspector
func (*DebugLog) Inspect() typeinfo.T {
	return &Z_DebugLog_Info
}

// return a valid markup map, creating it if necessary.
func (op *DebugLog) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// debug_log, a type of flow.
const Z_DebugLog_Type = "debug_log"

// ensure the command implements its specified slots:
var _ rti.Execute = (*DebugLog)(nil)

var Z_DebugLog_Info = typeinfo.Flow{
	Name: Z_DebugLog_Type,
	Lede: "log",
	Terms: []typeinfo.Term{{
		Name:  "log_level",
		Label: "_",
		Type:  &Z_LoggingLevel_Info,
	}, {
		Name:  "value",
		Label: "value",
		Type:  &rti.Z_Assignment_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_Execute_Info,
	},
}

// holds a slice of type debug_log
// FIX: duplicates the spec decl.
type FIX_DebugLog_Slice []DebugLog

// implements typeinfo.Inspector
func (*DebugLog_Slice) Inspect() typeinfo.T {
	return &Z_DebugLog_Info
}

// logging_level, a type of str enum.
const Z_LoggingLevel_Type = "logging_level"

const (
	W_LoggingLevel_Note  = "note"
	W_LoggingLevel_Debug = "debug"
	W_LoggingLevel_Info  = "info"
	W_LoggingLevel_Warn  = "warn"
	W_LoggingLevel_Error = "error"
)

var Z_LoggingLevel_Info = typeinfo.Str{
	Name: Z_LoggingLevel_Type,
	Options: []string{
		W_LoggingLevel_Note,
		W_LoggingLevel_Debug,
		W_LoggingLevel_Info,
		W_LoggingLevel_Warn,
		W_LoggingLevel_Error,
	},
}

// a list of all flows in this this package
// ( ex. for reading blockly blocks )
var Y_flow_List = []*typeinfo.Flow{
	&Z_DoNothing_Info,
	&Z_Expect_Info,
	&Z_ExpectOutput_Info,
	&Z_ExpectText_Info,
	&Z_Fabricate_Info,
	&Z_DebugLog_Info,
}

// a list of all command signatures
// ( for processing and verifying story files )
var Z_Signatures = map[uint64]interface{}{}
