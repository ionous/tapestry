// Code generated by "makeops"; edit at your own risk.
package debug

import (
	"git.sr.ht/~ionous/tapestry/dl/composer"
	"git.sr.ht/~ionous/tapestry/dl/core"
	"git.sr.ht/~ionous/tapestry/dl/prim"
	"git.sr.ht/~ionous/tapestry/dl/story"
	"git.sr.ht/~ionous/tapestry/jsn"
	"git.sr.ht/~ionous/tapestry/rt"
	"github.com/ionous/errutil"
)

// Comment Add a note.
// Information about the story for you and other authors.
type Comment struct {
	Lines  prim.Lines `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ story.StoryStatement = (*Comment)(nil)
var _ rt.Execute = (*Comment)(nil)

func (*Comment) Compose() composer.Spec {
	return composer.Spec{
		Name: Comment_Type,
		Uses: composer.Type_Flow,
	}
}

const Comment_Type = "comment"
const Comment_Field_Lines = "$LINES"

func (op *Comment) Marshal(m jsn.Marshaler) error {
	return Comment_Marshal(m, op)
}

type Comment_Slice []Comment

func (op *Comment_Slice) GetType() string { return Comment_Type }

func (op *Comment_Slice) Marshal(m jsn.Marshaler) error {
	return Comment_Repeats_Marshal(m, (*[]Comment)(op))
}

func (op *Comment_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Comment_Slice) SetSize(cnt int) {
	var els []Comment
	if cnt >= 0 {
		els = make(Comment_Slice, cnt)
	}
	(*op) = els
}

func (op *Comment_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Comment_Marshal(m, &(*op)[i])
}

func Comment_Repeats_Marshal(m jsn.Marshaler, vals *[]Comment) error {
	return jsn.RepeatBlock(m, (*Comment_Slice)(vals))
}

func Comment_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Comment) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Comment_Repeats_Marshal(m, pv)
	}
	return
}

type Comment_Flow struct{ ptr *Comment }

func (n Comment_Flow) GetType() string      { return Comment_Type }
func (n Comment_Flow) GetLede() string      { return Comment_Type }
func (n Comment_Flow) GetFlow() interface{} { return n.ptr }
func (n Comment_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Comment); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Comment_Optional_Marshal(m jsn.Marshaler, pv **Comment) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Comment_Marshal(m, *pv)
	} else if !enc {
		var v Comment
		if err = Comment_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Comment_Marshal(m jsn.Marshaler, val *Comment) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Comment_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Comment_Field_Lines)
		if e0 == nil {
			e0 = prim.Lines_Marshal(m, &val.Lines)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Comment_Field_Lines))
		}
		m.EndBlock()
	}
	return
}

// DebugLog Debug log.
type DebugLog struct {
	Value    core.Assignment `if:"label=_"`
	LogLevel LoggingLevel    `if:"label=as,optional"`
	Markup   map[string]any
}

// User implemented slots:
var _ rt.Execute = (*DebugLog)(nil)

func (*DebugLog) Compose() composer.Spec {
	return composer.Spec{
		Name: DebugLog_Type,
		Uses: composer.Type_Flow,
		Lede: "log",
	}
}

const DebugLog_Type = "debug_log"
const DebugLog_Field_Value = "$VALUE"
const DebugLog_Field_LogLevel = "$LOG_LEVEL"

func (op *DebugLog) Marshal(m jsn.Marshaler) error {
	return DebugLog_Marshal(m, op)
}

type DebugLog_Slice []DebugLog

func (op *DebugLog_Slice) GetType() string { return DebugLog_Type }

func (op *DebugLog_Slice) Marshal(m jsn.Marshaler) error {
	return DebugLog_Repeats_Marshal(m, (*[]DebugLog)(op))
}

func (op *DebugLog_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DebugLog_Slice) SetSize(cnt int) {
	var els []DebugLog
	if cnt >= 0 {
		els = make(DebugLog_Slice, cnt)
	}
	(*op) = els
}

func (op *DebugLog_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DebugLog_Marshal(m, &(*op)[i])
}

func DebugLog_Repeats_Marshal(m jsn.Marshaler, vals *[]DebugLog) error {
	return jsn.RepeatBlock(m, (*DebugLog_Slice)(vals))
}

func DebugLog_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DebugLog) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DebugLog_Repeats_Marshal(m, pv)
	}
	return
}

type DebugLog_Flow struct{ ptr *DebugLog }

func (n DebugLog_Flow) GetType() string      { return DebugLog_Type }
func (n DebugLog_Flow) GetLede() string      { return "log" }
func (n DebugLog_Flow) GetFlow() interface{} { return n.ptr }
func (n DebugLog_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DebugLog); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DebugLog_Optional_Marshal(m jsn.Marshaler, pv **DebugLog) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DebugLog_Marshal(m, *pv)
	} else if !enc {
		var v DebugLog
		if err = DebugLog_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DebugLog_Marshal(m jsn.Marshaler, val *DebugLog) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DebugLog_Flow{val}); err == nil {
		e0 := m.MarshalKey("", DebugLog_Field_Value)
		if e0 == nil {
			e0 = core.Assignment_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DebugLog_Field_Value))
		}
		e1 := m.MarshalKey("as", DebugLog_Field_LogLevel)
		if e1 == nil {
			e1 = LoggingLevel_Optional_Marshal(m, &val.LogLevel)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", DebugLog_Field_LogLevel))
		}
		m.EndBlock()
	}
	return
}

// DoNothing Statement which does nothing.
type DoNothing struct {
	Reason string `if:"label=why,optional,type=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*DoNothing)(nil)

func (*DoNothing) Compose() composer.Spec {
	return composer.Spec{
		Name: DoNothing_Type,
		Uses: composer.Type_Flow,
	}
}

const DoNothing_Type = "do_nothing"
const DoNothing_Field_Reason = "$REASON"

func (op *DoNothing) Marshal(m jsn.Marshaler) error {
	return DoNothing_Marshal(m, op)
}

type DoNothing_Slice []DoNothing

func (op *DoNothing_Slice) GetType() string { return DoNothing_Type }

func (op *DoNothing_Slice) Marshal(m jsn.Marshaler) error {
	return DoNothing_Repeats_Marshal(m, (*[]DoNothing)(op))
}

func (op *DoNothing_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *DoNothing_Slice) SetSize(cnt int) {
	var els []DoNothing
	if cnt >= 0 {
		els = make(DoNothing_Slice, cnt)
	}
	(*op) = els
}

func (op *DoNothing_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return DoNothing_Marshal(m, &(*op)[i])
}

func DoNothing_Repeats_Marshal(m jsn.Marshaler, vals *[]DoNothing) error {
	return jsn.RepeatBlock(m, (*DoNothing_Slice)(vals))
}

func DoNothing_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]DoNothing) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = DoNothing_Repeats_Marshal(m, pv)
	}
	return
}

type DoNothing_Flow struct{ ptr *DoNothing }

func (n DoNothing_Flow) GetType() string      { return DoNothing_Type }
func (n DoNothing_Flow) GetLede() string      { return DoNothing_Type }
func (n DoNothing_Flow) GetFlow() interface{} { return n.ptr }
func (n DoNothing_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*DoNothing); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func DoNothing_Optional_Marshal(m jsn.Marshaler, pv **DoNothing) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = DoNothing_Marshal(m, *pv)
	} else if !enc {
		var v DoNothing
		if err = DoNothing_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func DoNothing_Marshal(m jsn.Marshaler, val *DoNothing) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(DoNothing_Flow{val}); err == nil {
		e0 := m.MarshalKey("why", DoNothing_Field_Reason)
		if e0 == nil {
			e0 = prim.Text_Unboxed_Optional_Marshal(m, &val.Reason)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", DoNothing_Field_Reason))
		}
		m.EndBlock()
	}
	return
}

// Expect
type Expect struct {
	Value  rt.BoolEval `if:"label=_"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*Expect)(nil)

func (*Expect) Compose() composer.Spec {
	return composer.Spec{
		Name: Expect_Type,
		Uses: composer.Type_Flow,
		Lede: "expect",
	}
}

const Expect_Type = "expect"
const Expect_Field_Value = "$VALUE"

func (op *Expect) Marshal(m jsn.Marshaler) error {
	return Expect_Marshal(m, op)
}

type Expect_Slice []Expect

func (op *Expect_Slice) GetType() string { return Expect_Type }

func (op *Expect_Slice) Marshal(m jsn.Marshaler) error {
	return Expect_Repeats_Marshal(m, (*[]Expect)(op))
}

func (op *Expect_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Expect_Slice) SetSize(cnt int) {
	var els []Expect
	if cnt >= 0 {
		els = make(Expect_Slice, cnt)
	}
	(*op) = els
}

func (op *Expect_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Expect_Marshal(m, &(*op)[i])
}

func Expect_Repeats_Marshal(m jsn.Marshaler, vals *[]Expect) error {
	return jsn.RepeatBlock(m, (*Expect_Slice)(vals))
}

func Expect_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Expect) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Expect_Repeats_Marshal(m, pv)
	}
	return
}

type Expect_Flow struct{ ptr *Expect }

func (n Expect_Flow) GetType() string      { return Expect_Type }
func (n Expect_Flow) GetLede() string      { return "expect" }
func (n Expect_Flow) GetFlow() interface{} { return n.ptr }
func (n Expect_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Expect); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Expect_Optional_Marshal(m jsn.Marshaler, pv **Expect) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Expect_Marshal(m, *pv)
	} else if !enc {
		var v Expect
		if err = Expect_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Expect_Marshal(m jsn.Marshaler, val *Expect) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Expect_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Expect_Field_Value)
		if e0 == nil {
			e0 = rt.BoolEval_Marshal(m, &val.Value)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Expect_Field_Value))
		}
		m.EndBlock()
	}
	return
}

// ExpectOutput
type ExpectOutput struct {
	Output prim.Lines `if:"label=output"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*ExpectOutput)(nil)

func (*ExpectOutput) Compose() composer.Spec {
	return composer.Spec{
		Name: ExpectOutput_Type,
		Uses: composer.Type_Flow,
		Lede: "expect",
	}
}

const ExpectOutput_Type = "expect_output"
const ExpectOutput_Field_Output = "$OUTPUT"

func (op *ExpectOutput) Marshal(m jsn.Marshaler) error {
	return ExpectOutput_Marshal(m, op)
}

type ExpectOutput_Slice []ExpectOutput

func (op *ExpectOutput_Slice) GetType() string { return ExpectOutput_Type }

func (op *ExpectOutput_Slice) Marshal(m jsn.Marshaler) error {
	return ExpectOutput_Repeats_Marshal(m, (*[]ExpectOutput)(op))
}

func (op *ExpectOutput_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ExpectOutput_Slice) SetSize(cnt int) {
	var els []ExpectOutput
	if cnt >= 0 {
		els = make(ExpectOutput_Slice, cnt)
	}
	(*op) = els
}

func (op *ExpectOutput_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ExpectOutput_Marshal(m, &(*op)[i])
}

func ExpectOutput_Repeats_Marshal(m jsn.Marshaler, vals *[]ExpectOutput) error {
	return jsn.RepeatBlock(m, (*ExpectOutput_Slice)(vals))
}

func ExpectOutput_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ExpectOutput) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ExpectOutput_Repeats_Marshal(m, pv)
	}
	return
}

type ExpectOutput_Flow struct{ ptr *ExpectOutput }

func (n ExpectOutput_Flow) GetType() string      { return ExpectOutput_Type }
func (n ExpectOutput_Flow) GetLede() string      { return "expect" }
func (n ExpectOutput_Flow) GetFlow() interface{} { return n.ptr }
func (n ExpectOutput_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ExpectOutput); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ExpectOutput_Optional_Marshal(m jsn.Marshaler, pv **ExpectOutput) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ExpectOutput_Marshal(m, *pv)
	} else if !enc {
		var v ExpectOutput
		if err = ExpectOutput_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ExpectOutput_Marshal(m jsn.Marshaler, val *ExpectOutput) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ExpectOutput_Flow{val}); err == nil {
		e0 := m.MarshalKey("output", ExpectOutput_Field_Output)
		if e0 == nil {
			e0 = prim.Lines_Marshal(m, &val.Output)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ExpectOutput_Field_Output))
		}
		m.EndBlock()
	}
	return
}

// ExpectText
type ExpectText struct {
	Text   rt.TextEval `if:"label=text"`
	Markup map[string]any
}

// User implemented slots:
var _ rt.Execute = (*ExpectText)(nil)

func (*ExpectText) Compose() composer.Spec {
	return composer.Spec{
		Name: ExpectText_Type,
		Uses: composer.Type_Flow,
		Lede: "expect",
	}
}

const ExpectText_Type = "expect_text"
const ExpectText_Field_Text = "$TEXT"

func (op *ExpectText) Marshal(m jsn.Marshaler) error {
	return ExpectText_Marshal(m, op)
}

type ExpectText_Slice []ExpectText

func (op *ExpectText_Slice) GetType() string { return ExpectText_Type }

func (op *ExpectText_Slice) Marshal(m jsn.Marshaler) error {
	return ExpectText_Repeats_Marshal(m, (*[]ExpectText)(op))
}

func (op *ExpectText_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *ExpectText_Slice) SetSize(cnt int) {
	var els []ExpectText
	if cnt >= 0 {
		els = make(ExpectText_Slice, cnt)
	}
	(*op) = els
}

func (op *ExpectText_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return ExpectText_Marshal(m, &(*op)[i])
}

func ExpectText_Repeats_Marshal(m jsn.Marshaler, vals *[]ExpectText) error {
	return jsn.RepeatBlock(m, (*ExpectText_Slice)(vals))
}

func ExpectText_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]ExpectText) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = ExpectText_Repeats_Marshal(m, pv)
	}
	return
}

type ExpectText_Flow struct{ ptr *ExpectText }

func (n ExpectText_Flow) GetType() string      { return ExpectText_Type }
func (n ExpectText_Flow) GetLede() string      { return "expect" }
func (n ExpectText_Flow) GetFlow() interface{} { return n.ptr }
func (n ExpectText_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*ExpectText); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func ExpectText_Optional_Marshal(m jsn.Marshaler, pv **ExpectText) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = ExpectText_Marshal(m, *pv)
	} else if !enc {
		var v ExpectText
		if err = ExpectText_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func ExpectText_Marshal(m jsn.Marshaler, val *ExpectText) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(ExpectText_Flow{val}); err == nil {
		e0 := m.MarshalKey("text", ExpectText_Field_Text)
		if e0 == nil {
			e0 = rt.TextEval_Marshal(m, &val.Text)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", ExpectText_Field_Text))
		}
		m.EndBlock()
	}
	return
}

// LoggingLevel requires a predefined string.
type LoggingLevel struct {
	Str string
}

func (op *LoggingLevel) String() string {
	return op.Str
}

const LoggingLevel_Note = "$NOTE"
const LoggingLevel_ToDo = "$TO_DO"
const LoggingLevel_Fix = "$FIX"
const LoggingLevel_Info = "$INFO"
const LoggingLevel_Warning = "$WARNING"
const LoggingLevel_Error = "$ERROR"

func (*LoggingLevel) Compose() composer.Spec {
	return composer.Spec{
		Name: LoggingLevel_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			LoggingLevel_Note, LoggingLevel_ToDo, LoggingLevel_Fix, LoggingLevel_Info, LoggingLevel_Warning, LoggingLevel_Error,
		},
		Strings: []string{
			"note", "to_do", "fix", "info", "warning", "error",
		},
	}
}

const LoggingLevel_Type = "logging_level"

func (op *LoggingLevel) Marshal(m jsn.Marshaler) error {
	return LoggingLevel_Marshal(m, op)
}

func LoggingLevel_Optional_Marshal(m jsn.Marshaler, val *LoggingLevel) (err error) {
	var zero LoggingLevel
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = LoggingLevel_Marshal(m, val)
	}
	return
}

func LoggingLevel_Marshal(m jsn.Marshaler, val *LoggingLevel) (err error) {
	return m.MarshalValue(LoggingLevel_Type, jsn.MakeEnum(val, &val.Str))
}

type LoggingLevel_Slice []LoggingLevel

func (op *LoggingLevel_Slice) GetType() string { return LoggingLevel_Type }

func (op *LoggingLevel_Slice) Marshal(m jsn.Marshaler) error {
	return LoggingLevel_Repeats_Marshal(m, (*[]LoggingLevel)(op))
}

func (op *LoggingLevel_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *LoggingLevel_Slice) SetSize(cnt int) {
	var els []LoggingLevel
	if cnt >= 0 {
		els = make(LoggingLevel_Slice, cnt)
	}
	(*op) = els
}

func (op *LoggingLevel_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return LoggingLevel_Marshal(m, &(*op)[i])
}

func LoggingLevel_Repeats_Marshal(m jsn.Marshaler, vals *[]LoggingLevel) error {
	return jsn.RepeatBlock(m, (*LoggingLevel_Slice)(vals))
}

func LoggingLevel_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]LoggingLevel) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = LoggingLevel_Repeats_Marshal(m, pv)
	}
	return
}

// Test Create a scene
type Test struct {
	TestName  TestName               `if:"label=_"`
	DependsOn TestName               `if:"label=depends_on,optional"`
	WithScene []story.StoryStatement `if:"label=with_scene,optional"`
	Do        []rt.Execute           `if:"label=do"`
	Markup    map[string]any
}

// User implemented slots:
var _ story.StoryStatement = (*Test)(nil)

func (*Test) Compose() composer.Spec {
	return composer.Spec{
		Name: Test_Type,
		Uses: composer.Type_Flow,
	}
}

const Test_Type = "test"
const Test_Field_TestName = "$TEST_NAME"
const Test_Field_DependsOn = "$DEPENDS_ON"
const Test_Field_WithScene = "$WITH_SCENE"
const Test_Field_Do = "$DO"

func (op *Test) Marshal(m jsn.Marshaler) error {
	return Test_Marshal(m, op)
}

type Test_Slice []Test

func (op *Test_Slice) GetType() string { return Test_Type }

func (op *Test_Slice) Marshal(m jsn.Marshaler) error {
	return Test_Repeats_Marshal(m, (*[]Test)(op))
}

func (op *Test_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *Test_Slice) SetSize(cnt int) {
	var els []Test
	if cnt >= 0 {
		els = make(Test_Slice, cnt)
	}
	(*op) = els
}

func (op *Test_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return Test_Marshal(m, &(*op)[i])
}

func Test_Repeats_Marshal(m jsn.Marshaler, vals *[]Test) error {
	return jsn.RepeatBlock(m, (*Test_Slice)(vals))
}

func Test_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]Test) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = Test_Repeats_Marshal(m, pv)
	}
	return
}

type Test_Flow struct{ ptr *Test }

func (n Test_Flow) GetType() string      { return Test_Type }
func (n Test_Flow) GetLede() string      { return Test_Type }
func (n Test_Flow) GetFlow() interface{} { return n.ptr }
func (n Test_Flow) SetFlow(i interface{}) (okay bool) {
	if ptr, ok := i.(*Test); ok {
		*n.ptr, okay = *ptr, true
	}
	return
}

func Test_Optional_Marshal(m jsn.Marshaler, pv **Test) (err error) {
	if enc := m.IsEncoding(); enc && *pv != nil {
		err = Test_Marshal(m, *pv)
	} else if !enc {
		var v Test
		if err = Test_Marshal(m, &v); err == nil {
			*pv = &v
		}
	}
	return
}

func Test_Marshal(m jsn.Marshaler, val *Test) (err error) {
	m.SetMarkup(&val.Markup)
	if err = m.MarshalBlock(Test_Flow{val}); err == nil {
		e0 := m.MarshalKey("", Test_Field_TestName)
		if e0 == nil {
			e0 = TestName_Marshal(m, &val.TestName)
		}
		if e0 != nil && e0 != jsn.Missing {
			m.Error(errutil.New(e0, "in flow at", Test_Field_TestName))
		}
		e1 := m.MarshalKey("depends_on", Test_Field_DependsOn)
		if e1 == nil {
			e1 = TestName_Optional_Marshal(m, &val.DependsOn)
		}
		if e1 != nil && e1 != jsn.Missing {
			m.Error(errutil.New(e1, "in flow at", Test_Field_DependsOn))
		}
		e2 := m.MarshalKey("with_scene", Test_Field_WithScene)
		if e2 == nil {
			e2 = story.StoryStatement_Optional_Repeats_Marshal(m, &val.WithScene)
		}
		if e2 != nil && e2 != jsn.Missing {
			m.Error(errutil.New(e2, "in flow at", Test_Field_WithScene))
		}
		e3 := m.MarshalKey("do", Test_Field_Do)
		if e3 == nil {
			e3 = rt.Execute_Repeats_Marshal(m, &val.Do)
		}
		if e3 != nil && e3 != jsn.Missing {
			m.Error(errutil.New(e3, "in flow at", Test_Field_Do))
		}
		m.EndBlock()
	}
	return
}

// TestName requires a predefined or user-specified string.
type TestName struct {
	Str string
}

func (op *TestName) String() string {
	return op.Str
}

const TestName_CurrentTest = "$CURRENT_TEST"

func (*TestName) Compose() composer.Spec {
	return composer.Spec{
		Name:        TestName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
		Choices: []string{
			TestName_CurrentTest,
		},
		Strings: []string{
			"current_test",
		},
	}
}

const TestName_Type = "test_name"

func (op *TestName) Marshal(m jsn.Marshaler) error {
	return TestName_Marshal(m, op)
}

func TestName_Optional_Marshal(m jsn.Marshaler, val *TestName) (err error) {
	var zero TestName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = TestName_Marshal(m, val)
	}
	return
}

func TestName_Marshal(m jsn.Marshaler, val *TestName) (err error) {
	return m.MarshalValue(TestName_Type, jsn.MakeEnum(val, &val.Str))
}

type TestName_Slice []TestName

func (op *TestName_Slice) GetType() string { return TestName_Type }

func (op *TestName_Slice) Marshal(m jsn.Marshaler) error {
	return TestName_Repeats_Marshal(m, (*[]TestName)(op))
}

func (op *TestName_Slice) GetSize() (ret int) {
	if els := *op; els != nil {
		ret = len(els)
	} else {
		ret = -1
	}
	return
}

func (op *TestName_Slice) SetSize(cnt int) {
	var els []TestName
	if cnt >= 0 {
		els = make(TestName_Slice, cnt)
	}
	(*op) = els
}

func (op *TestName_Slice) MarshalEl(m jsn.Marshaler, i int) error {
	return TestName_Marshal(m, &(*op)[i])
}

func TestName_Repeats_Marshal(m jsn.Marshaler, vals *[]TestName) error {
	return jsn.RepeatBlock(m, (*TestName_Slice)(vals))
}

func TestName_Optional_Repeats_Marshal(m jsn.Marshaler, pv *[]TestName) (err error) {
	if len(*pv) > 0 || !m.IsEncoding() {
		err = TestName_Repeats_Marshal(m, pv)
	}
	return
}

var Slats = []composer.Composer{
	(*Comment)(nil),
	(*DebugLog)(nil),
	(*DoNothing)(nil),
	(*Expect)(nil),
	(*ExpectOutput)(nil),
	(*ExpectText)(nil),
	(*LoggingLevel)(nil),
	(*Test)(nil),
	(*TestName)(nil),
}

var Signatures = map[uint64]interface{}{
	15823738440204397330: (*LoggingLevel)(nil), /* LoggingLevel: */
	11670818074991137908: (*TestName)(nil),     /* TestName: */
	3991849378064754806:  (*Comment)(nil),      /* execute=Comment: */
	16586092333187989882: (*Comment)(nil),      /* story_statement=Comment: */
	14645287343365598707: (*DoNothing)(nil),    /* execute=DoNothing */
	12243119421914882789: (*DoNothing)(nil),    /* execute=DoNothing why: */
	13157581199995609923: (*ExpectOutput)(nil), /* execute=Expect output: */
	16489874106085927697: (*ExpectText)(nil),   /* execute=Expect text: */
	11108202414968227788: (*Expect)(nil),       /* execute=Expect: */
	16795987075070426029: (*DebugLog)(nil),     /* execute=Log bool: */
	5012568709724178077:  (*DebugLog)(nil),     /* execute=Log bool:as: */
	11025036665223722299: (*DebugLog)(nil),     /* execute=Log numList: */
	4529139608964459239:  (*DebugLog)(nil),     /* execute=Log numList:as: */
	1390363919902601830:  (*DebugLog)(nil),     /* execute=Log number: */
	17998232074276565512: (*DebugLog)(nil),     /* execute=Log number:as: */
	11782064324136796938: (*DebugLog)(nil),     /* execute=Log record: */
	1657399181350410676:  (*DebugLog)(nil),     /* execute=Log record:as: */
	2149069978071789330:  (*DebugLog)(nil),     /* execute=Log recordList: */
	6331337283802285564:  (*DebugLog)(nil),     /* execute=Log recordList:as: */
	13582919122428505684: (*DebugLog)(nil),     /* execute=Log text: */
	11981136151035964234: (*DebugLog)(nil),     /* execute=Log text:as: */
	12986530220286244824: (*DebugLog)(nil),     /* execute=Log textList: */
	5207466180783630758:  (*DebugLog)(nil),     /* execute=Log textList:as: */
	9865864948070946448:  (*Test)(nil),         /* story_statement=Test:dependsOn:do: */
	12698818979331053506: (*Test)(nil),         /* story_statement=Test:dependsOn:withScene:do: */
	9283516926116088792:  (*Test)(nil),         /* story_statement=Test:do: */
	500333266696321514:   (*Test)(nil),         /* story_statement=Test:withScene:do: */
}
