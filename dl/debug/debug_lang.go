// Code generated by "makeops"; edit at your own risk.
package debug

import (
	"git.sr.ht/~ionous/iffy/dl/composer"
	"git.sr.ht/~ionous/iffy/dl/value"
	"git.sr.ht/~ionous/iffy/rt"
)

// DebugLog Debug log
type DebugLog struct {
	Value    rt.Assignment `if:"label=_"`
	LogLevel LoggingLevel  `if:"label=as,optional"`
}

var _ rt.Execute = (*DebugLog)(nil)

func (*DebugLog) Compose() composer.Spec {
	return composer.Spec{
		Name: "debug_log",
		Uses: "flow",
		Lede: "log",
	}
}

// DoNothing Statement which does nothing.
type DoNothing struct {
	Reason value.Text `if:"label=why,optional"`
}

var _ rt.Execute = (*DoNothing)(nil)

func (*DoNothing) Compose() composer.Spec {
	return composer.Spec{
		Name: "do_nothing",
		Uses: "flow",
	}
}

// LoggingLevel requires a user-specified string.
type LoggingLevel struct {
	Str string
}

func (op *LoggingLevel) String() (ret string) {
	if s := op.Str; s != "$EMPTY" {
		ret = s
	}
	return
}

const LoggingLevel_Note = "$NOTE"
const LoggingLevel_ToDo = "$TO_DO"
const LoggingLevel_Fix = "$FIX"
const LoggingLevel_Info = "$INFO"
const LoggingLevel_Warning = "$WARNING"
const LoggingLevel_Error = "$ERROR"

func (*LoggingLevel) Compose() composer.Spec {
	return composer.Spec{
		Name: "logging_level",
		Uses: "str",
		Choices: []string{
			LoggingLevel_Note, LoggingLevel_ToDo, LoggingLevel_Fix, LoggingLevel_Info, LoggingLevel_Warning, LoggingLevel_Error,
		},
		Strings: []string{
			"note", "to_do", "fix", "info", "warning", "error",
		},
	}
}

var Slats = []composer.Composer{
	(*DebugLog)(nil),
	(*DoNothing)(nil),
	(*LoggingLevel)(nil),
}
