// Code generated by "makeops"; edit at your own risk.
package debug

import (
	"encoding/json"
	"git.sr.ht/~ionous/iffy/dl/composer"
	"git.sr.ht/~ionous/iffy/dl/value"
	"git.sr.ht/~ionous/iffy/export/jsonexp"
	"git.sr.ht/~ionous/iffy/rt"
	"github.com/ionous/errutil"
)

// DebugLog Debug log
type DebugLog struct {
	Value    rt.Assignment `if:"label=_"`
	LogLevel LoggingLevel  `if:"label=as,optional"`
}

func (*DebugLog) Compose() composer.Spec {
	return composer.Spec{
		Name: Type_DebugLog,
		Uses: composer.Type_Flow,
		Lede: "log",
	}
}

const Type_DebugLog = "debug_log"
const DebugLog_Value = "$VALUE"
const DebugLog_LogLevel = "$LOG_LEVEL"

func (op *DebugLog) MarshalDetailed(n jsonexp.Context) (ret []byte, err error) {
	return DebugLog_Detailed_Marshal(n, op)
}
func (op *DebugLog) UnmarshalDetailed(n jsonexp.Context, b []byte) error {
	return DebugLog_Detailed_Unmarshal(n, b, op)
}

func DebugLog_Detailed_Marshal(n jsonexp.Context, val *DebugLog) (ret []byte, err error) {
	fields := make(jsonexp.Fields)
	if b, e := rt.Assignment_Detailed_Marshal(n, &val.Value); e != nil {
		err = errutil.Append(err, e)
	} else if len(b) > 0 {
		fields[DebugLog_Value] = b
	}
	if b, e := LoggingLevel_Detailed_Marshal(n, &val.LogLevel); e != nil {
		err = errutil.Append(err, e)
	} else if len(b) > 0 {
		fields[DebugLog_LogLevel] = b
	}
	if err == nil {
		ret, err = json.Marshal(jsonexp.Flow{
			Type:   Type_DebugLog,
			Fields: fields,
		})
	}
	return
}

func DebugLog_Detailed_Unmarshal(n jsonexp.Context, b []byte, out *DebugLog) (err error) {
	var msg jsonexp.Flow
	if e := json.Unmarshal(b, &msg); e != nil {
		err = errutil.New(Type_DebugLog, "-", e)
	} else if e := rt.Assignment_Detailed_Unmarshal(n, msg.Fields[DebugLog_Value], &out.Value); e != nil {
		err = errutil.New(Type_DebugLog+"."+DebugLog_Value, "-", e)
	} else if e := LoggingLevel_Detailed_Unmarshal(n, msg.Fields[DebugLog_LogLevel], &out.LogLevel); e != nil {
		err = errutil.New(Type_DebugLog+"."+DebugLog_LogLevel, "-", e)
	}
	return
}

// DoNothing Statement which does nothing.
type DoNothing struct {
	Reason string `if:"label=why,optional,type=text"`
}

func (*DoNothing) Compose() composer.Spec {
	return composer.Spec{
		Name: Type_DoNothing,
		Uses: composer.Type_Flow,
	}
}

const Type_DoNothing = "do_nothing"
const DoNothing_Reason = "$REASON"

func (op *DoNothing) MarshalDetailed(n jsonexp.Context) (ret []byte, err error) {
	return DoNothing_Detailed_Marshal(n, op)
}
func (op *DoNothing) UnmarshalDetailed(n jsonexp.Context, b []byte) error {
	return DoNothing_Detailed_Unmarshal(n, b, op)
}

func DoNothing_Detailed_Marshal(n jsonexp.Context, val *DoNothing) (ret []byte, err error) {
	fields := make(jsonexp.Fields)
	if b, e := value.Text_Detailed_Override_Marshal(n, &val.Reason); e != nil {
		err = errutil.Append(err, e)
	} else if len(b) > 0 {
		fields[DoNothing_Reason] = b
	}
	if err == nil {
		ret, err = json.Marshal(jsonexp.Flow{
			Type:   Type_DoNothing,
			Fields: fields,
		})
	}
	return
}

func DoNothing_Detailed_Unmarshal(n jsonexp.Context, b []byte, out *DoNothing) (err error) {
	var msg jsonexp.Flow
	if e := json.Unmarshal(b, &msg); e != nil {
		err = errutil.New(Type_DoNothing, "-", e)
	} else if e := value.Text_Detailed_Override_Unmarshal(n, msg.Fields[DoNothing_Reason], &out.Reason); e != nil {
		err = errutil.New(Type_DoNothing+"."+DoNothing_Reason, "-", e)
	}
	return
}

// LoggingLevel requires a user-specified string.
type LoggingLevel struct {
	Str string
}

func (op *LoggingLevel) String() (ret string) {
	return op.Str
}

const LoggingLevel_Note = "$NOTE"
const LoggingLevel_ToDo = "$TO_DO"
const LoggingLevel_Fix = "$FIX"
const LoggingLevel_Info = "$INFO"
const LoggingLevel_Warning = "$WARNING"
const LoggingLevel_Error = "$ERROR"

func (*LoggingLevel) Compose() composer.Spec {
	return composer.Spec{
		Name: Type_LoggingLevel,
		Uses: composer.Type_Str,
		Choices: []string{
			LoggingLevel_Note, LoggingLevel_ToDo, LoggingLevel_Fix, LoggingLevel_Info, LoggingLevel_Warning, LoggingLevel_Error,
		},
		Strings: []string{
			"note", "to_do", "fix", "info", "warning", "error",
		},
	}
}

const Type_LoggingLevel = "logging_level"

func (op *LoggingLevel) MarshalDetailed(n jsonexp.Context) (ret []byte, err error) {
	return LoggingLevel_Detailed_Marshal(n, op)
}
func (op *LoggingLevel) UnmarshalDetailed(n jsonexp.Context, b []byte) error {
	return LoggingLevel_Detailed_Unmarshal(n, b, op)
}
func LoggingLevel_Detailed_Marshal(n jsonexp.Context, val *LoggingLevel) ([]byte, error) {
	return json.Marshal(jsonexp.Str{
		Type:  Type_LoggingLevel,
		Value: val.Str,
	})
}

func LoggingLevel_Detailed_Unmarshal(n jsonexp.Context, b []byte, out *LoggingLevel) (err error) {
	var msg jsonexp.Str
	if len(b) > 0 { // generated code collapses optional and empty.
		if e := json.Unmarshal(b, &msg); e != nil {
			err = errutil.New(Type_LoggingLevel, "-", e)
		}
	}
	if err == nil {
		out.Str = msg.Value
	}
	return
}

var Slats = []composer.Composer{
	(*DebugLog)(nil),
	(*DoNothing)(nil),
	(*LoggingLevel)(nil),
}
