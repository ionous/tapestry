// Code generated by "makeops"; edit at your own risk.
package debug

import (
	"encoding/json"
	"git.sr.ht/~ionous/iffy/dl/composer"
	"git.sr.ht/~ionous/iffy/dl/value"
	"git.sr.ht/~ionous/iffy/rt"
)

// DebugLog Debug log
type DebugLog struct {
	Value    rt.Assignment `if:"label=_"`
	LogLevel LoggingLevel  `if:"label=as,optional"`
}

func (*DebugLog) Compose() composer.Spec {
	return composer.Spec{
		Name: "debug_log",
		Uses: "flow",
		Lede: "log",
	}
}

func (op *DebugLog) MarshalJSON() (ret []byte, err error) {
	if jsonValue, e := op.MarshalJSONValue(); e != nil {
		err = e
	} else if jsonLogLevel, e := op.MarshalJSONLogLevel(); e != nil {
		err = e
	} else {
		ret, err = json.Marshal(map[string]interface{}{
			"type": "debug_log",
			"value": map[string]json.RawMessage{
				"$VALUE":     jsonValue,
				"$LOG_LEVEL": jsonLogLevel,
			},
		})
	}
	return
}

func (op *DebugLog) MarshalJSONValue() ([]byte, error) {
	m := op.Value.(json.Marshaler)
	return m.MarshalJSON()
}

func (op *DebugLog) MarshalJSONLogLevel() ([]byte, error) {
	return op.LogLevel.MarshalJSON()
}

// DoNothing Statement which does nothing.
type DoNothing struct {
	Reason string `if:"label=why,optional,type=text"`
}

func (*DoNothing) Compose() composer.Spec {
	return composer.Spec{
		Name: "do_nothing",
		Uses: "flow",
	}
}

func (op *DoNothing) MarshalJSON() (ret []byte, err error) {
	if jsonReason, e := op.MarshalJSONReason(); e != nil {
		err = e
	} else {
		ret, err = json.Marshal(map[string]interface{}{
			"type": "do_nothing",
			"value": map[string]json.RawMessage{
				"$REASON": jsonReason,
			},
		})
	}
	return
}

func (op *DoNothing) MarshalJSONReason() ([]byte, error) {
	// type override
	m := value.Text{op.Reason}
	return m.MarshalJSON()
}

// LoggingLevel requires a user-specified string.
type LoggingLevel struct {
	Str string
}

func (op *LoggingLevel) String() (ret string) {
	return op.Str
}

func (op *LoggingLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(map[string]interface{}{
		"type":  "logging_level",
		"value": op.Str,
	})
}

const LoggingLevel_Note = "$NOTE"
const LoggingLevel_ToDo = "$TO_DO"
const LoggingLevel_Fix = "$FIX"
const LoggingLevel_Info = "$INFO"
const LoggingLevel_Warning = "$WARNING"
const LoggingLevel_Error = "$ERROR"

func (*LoggingLevel) Compose() composer.Spec {
	return composer.Spec{
		Name: "logging_level",
		Uses: "str",
		Choices: []string{
			LoggingLevel_Note, LoggingLevel_ToDo, LoggingLevel_Fix, LoggingLevel_Info, LoggingLevel_Warning, LoggingLevel_Error,
		},
		Strings: []string{
			"note", "to_do", "fix", "info", "warning", "error",
		},
	}
}

var Slats = []composer.Composer{
	(*DebugLog)(nil),
	(*DoNothing)(nil),
	(*LoggingLevel)(nil),
}
