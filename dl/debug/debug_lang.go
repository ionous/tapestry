// Code generated by "makeops"; edit at your own risk.
package debug

import (
	"git.sr.ht/~ionous/iffy/dl/composer"
	"git.sr.ht/~ionous/iffy/dl/reader"
	"git.sr.ht/~ionous/iffy/dl/value"
	"git.sr.ht/~ionous/iffy/rt"
)

// DoNothing Statement which does nothing.
type DoNothing struct {
	Reason value.Text `if:"label=why,optional"`
}

func (*DoNothing) Compose() composer.Spec {
	return composer.Spec{
		Name: "do_nothing",
	}
}

// Log Debug log
type Log struct {
	Value rt.Assignment `if:"label=_"`
	Level LoggingLevel  `if:"label=as,optional"`
}

func (*Log) Compose() composer.Spec {
	return composer.Spec{
		Name: "log",
	}
}

// LoggingLevel requires a user-specified string.
type LoggingLevel struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *LoggingLevel) String() (ret string) {
	if s := op.Str; s != "$EMPTY" {
		ret = s
	}
	return
}

const LoggingLevel_Note = "$NOTE"
const LoggingLevel_ToDo = "$TO_DO"
const LoggingLevel_Fix = "$FIX"
const LoggingLevel_Info = "$INFO"
const LoggingLevel_Warning = "$WARNING"
const LoggingLevel_Error = "$ERROR"

func (*LoggingLevel) Choices() (choices map[string]string) {
	return map[string]string{
		LoggingLevel_Note: "note", LoggingLevel_ToDo: "to_do", LoggingLevel_Fix: "fix", LoggingLevel_Info: "info", LoggingLevel_Warning: "warning", LoggingLevel_Error: "error",
	}
}

func (*LoggingLevel) Compose() composer.Spec {
	return composer.Spec{
		Name: "logging_level",
		Strings: []string{
			"note", "to_do", "fix", "info", "warning", "error",
		},
	}
}

var Slats = []composer.Composer{
	(*DoNothing)(nil),
	(*Log)(nil),
}
