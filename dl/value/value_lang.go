// Code generated by "makeops"; edit at your own risk.
package value

import (
	"git.sr.ht/~ionous/iffy/dl/composer"
	"git.sr.ht/~ionous/iffy/dl/reader"
	"git.sr.ht/~ionous/iffy/jsn"
	"github.com/ionous/errutil"
)

// Bool requires a user-specified string.
type Bool struct {
	Str string
}

func (op *Bool) String() string {
	return op.Str
}

const Bool_True = "$TRUE"
const Bool_False = "$FALSE"

func (*Bool) Compose() composer.Spec {
	return composer.Spec{
		Name: Bool_Type,
		Uses: composer.Type_Str,
		Choices: []string{
			Bool_True, Bool_False,
		},
		Strings: []string{
			"true", "false",
		},
	}
}

const Bool_Type = "bool"

func (op *Bool) Marshal(m jsn.Marshaler) error {
	return Bool_Marshal(m, op)
}

type Bool_Unboxed_Slice []bool

func (op *Bool_Unboxed_Slice) GetType() string { return Bool_Type }
func (op *Bool_Unboxed_Slice) GetSize() int    { return len(*op) }
func (op *Bool_Unboxed_Slice) SetSize(cnt int) { (*op) = make(Bool_Unboxed_Slice, cnt) }

func Bool_Unboxed_Repeats_Marshal(m jsn.Marshaler, vals *[]bool) (err error) {
	if err = m.MarshalBlock((*Bool_Unboxed_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Bool_Unboxed_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Bool_Unboxed_Optional_Marshal(m jsn.Marshaler, val *bool) (err error) {
	var zero bool
	if enc := m.IsEncoding(); !enc || *val != zero {
		err = Bool_Unboxed_Marshal(m, val)
	}
	return
}

func Bool_Unboxed_Marshal(m jsn.Marshaler, val *bool) error {
	return m.MarshalValue(Bool_Type, jsn.BoxBool(val))
}

func Bool_Optional_Marshal(m jsn.Marshaler, val *Bool) (err error) {
	var zero Bool
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Bool_Marshal(m, val)
	}
	return
}

func Bool_Marshal(m jsn.Marshaler, val *Bool) (err error) {
	return m.MarshalValue(Bool_Type, jsn.MakeEnum(val, &val.Str))
}

type Bool_Slice []Bool

func (op *Bool_Slice) GetType() string { return Bool_Type }
func (op *Bool_Slice) GetSize() int    { return len(*op) }
func (op *Bool_Slice) SetSize(cnt int) { (*op) = make(Bool_Slice, cnt) }

func Bool_Repeats_Marshal(m jsn.Marshaler, vals *[]Bool) (err error) {
	if err = m.MarshalBlock((*Bool_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Bool_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// Lines requires a user-specified string.
type Lines struct {
	Str string
}

func (op *Lines) String() string {
	return op.Str
}

func (*Lines) Compose() composer.Spec {
	return composer.Spec{
		Name:        Lines_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const Lines_Type = "lines"

func (op *Lines) Marshal(m jsn.Marshaler) error {
	return Lines_Marshal(m, op)
}

func Lines_Optional_Marshal(m jsn.Marshaler, val *Lines) (err error) {
	var zero Lines
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Lines_Marshal(m, val)
	}
	return
}

func Lines_Marshal(m jsn.Marshaler, val *Lines) (err error) {
	return m.MarshalValue(Lines_Type, &val.Str)
}

type Lines_Slice []Lines

func (op *Lines_Slice) GetType() string { return Lines_Type }
func (op *Lines_Slice) GetSize() int    { return len(*op) }
func (op *Lines_Slice) SetSize(cnt int) { (*op) = make(Lines_Slice, cnt) }

func Lines_Repeats_Marshal(m jsn.Marshaler, vals *[]Lines) (err error) {
	if err = m.MarshalBlock((*Lines_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Lines_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// Number requires a user-specified string.
type Number struct {
	Num float64
}

func (*Number) Compose() composer.Spec {
	return composer.Spec{
		Name: Number_Type,
		Uses: composer.Type_Num,
	}
}

const Number_Type = "number"

func (op *Number) Marshal(m jsn.Marshaler) error {
	return Number_Marshal(m, op)
}

type Number_Unboxed_Slice []float64

func (op *Number_Unboxed_Slice) GetType() string { return Number_Type }
func (op *Number_Unboxed_Slice) GetSize() int    { return len(*op) }
func (op *Number_Unboxed_Slice) SetSize(cnt int) { (*op) = make(Number_Unboxed_Slice, cnt) }

func Number_Unboxed_Repeats_Marshal(m jsn.Marshaler, vals *[]float64) (err error) {
	if err = m.MarshalBlock((*Number_Unboxed_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Number_Unboxed_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Number_Unboxed_Optional_Marshal(m jsn.Marshaler, val *float64) (err error) {
	var zero float64
	if enc := m.IsEncoding(); !enc || *val != zero {
		err = Number_Unboxed_Marshal(m, val)
	}
	return
}

func Number_Unboxed_Marshal(m jsn.Marshaler, val *float64) error {
	return m.MarshalValue(Number_Type, jsn.BoxFloat64(val))
}

func Number_Optional_Marshal(m jsn.Marshaler, val *Number) (err error) {
	var zero Number
	if enc := m.IsEncoding(); !enc || val.Num != zero.Num {
		err = Number_Marshal(m, val)
	}
	return
}

func Number_Marshal(m jsn.Marshaler, val *Number) (err error) {
	return m.MarshalValue(Number_Type, &val.Num)
}

type Number_Slice []Number

func (op *Number_Slice) GetType() string { return Number_Type }
func (op *Number_Slice) GetSize() int    { return len(*op) }
func (op *Number_Slice) SetSize(cnt int) { (*op) = make(Number_Slice, cnt) }

func Number_Repeats_Marshal(m jsn.Marshaler, vals *[]Number) (err error) {
	if err = m.MarshalBlock((*Number_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Number_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// PatternName requires a user-specified string.
type PatternName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *PatternName) String() string {
	return op.Str
}

func (*PatternName) Compose() composer.Spec {
	return composer.Spec{
		Name:        PatternName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const PatternName_Type = "pattern_name"

func (op *PatternName) Marshal(m jsn.Marshaler) error {
	return PatternName_Marshal(m, op)
}

func PatternName_Optional_Marshal(m jsn.Marshaler, val *PatternName) (err error) {
	var zero PatternName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = PatternName_Marshal(m, val)
	}
	return
}

func PatternName_Marshal(m jsn.Marshaler, val *PatternName) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(PatternName_Type, &val.Str)
}

type PatternName_Slice []PatternName

func (op *PatternName_Slice) GetType() string { return PatternName_Type }
func (op *PatternName_Slice) GetSize() int    { return len(*op) }
func (op *PatternName_Slice) SetSize(cnt int) { (*op) = make(PatternName_Slice, cnt) }

func PatternName_Repeats_Marshal(m jsn.Marshaler, vals *[]PatternName) (err error) {
	if err = m.MarshalBlock((*PatternName_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := PatternName_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// RelationName requires a user-specified string.
type RelationName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *RelationName) String() string {
	return op.Str
}

func (*RelationName) Compose() composer.Spec {
	return composer.Spec{
		Name:        RelationName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const RelationName_Type = "relation_name"

func (op *RelationName) Marshal(m jsn.Marshaler) error {
	return RelationName_Marshal(m, op)
}

func RelationName_Optional_Marshal(m jsn.Marshaler, val *RelationName) (err error) {
	var zero RelationName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = RelationName_Marshal(m, val)
	}
	return
}

func RelationName_Marshal(m jsn.Marshaler, val *RelationName) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(RelationName_Type, &val.Str)
}

type RelationName_Slice []RelationName

func (op *RelationName_Slice) GetType() string { return RelationName_Type }
func (op *RelationName_Slice) GetSize() int    { return len(*op) }
func (op *RelationName_Slice) SetSize(cnt int) { (*op) = make(RelationName_Slice, cnt) }

func RelationName_Repeats_Marshal(m jsn.Marshaler, vals *[]RelationName) (err error) {
	if err = m.MarshalBlock((*RelationName_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := RelationName_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// Text requires a user-specified string.
type Text struct {
	Str string
}

func (op *Text) String() string {
	return op.Str
}

func (*Text) Compose() composer.Spec {
	return composer.Spec{
		Name:        Text_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const Text_Type = "text"

func (op *Text) Marshal(m jsn.Marshaler) error {
	return Text_Marshal(m, op)
}

type Text_Unboxed_Slice []string

func (op *Text_Unboxed_Slice) GetType() string { return Text_Type }
func (op *Text_Unboxed_Slice) GetSize() int    { return len(*op) }
func (op *Text_Unboxed_Slice) SetSize(cnt int) { (*op) = make(Text_Unboxed_Slice, cnt) }

func Text_Unboxed_Repeats_Marshal(m jsn.Marshaler, vals *[]string) (err error) {
	if err = m.MarshalBlock((*Text_Unboxed_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Text_Unboxed_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

func Text_Unboxed_Optional_Marshal(m jsn.Marshaler, val *string) (err error) {
	var zero string
	if enc := m.IsEncoding(); !enc || *val != zero {
		err = Text_Unboxed_Marshal(m, val)
	}
	return
}

func Text_Unboxed_Marshal(m jsn.Marshaler, val *string) error {
	return m.MarshalValue(Text_Type, jsn.BoxString(val))
}

func Text_Optional_Marshal(m jsn.Marshaler, val *Text) (err error) {
	var zero Text
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = Text_Marshal(m, val)
	}
	return
}

func Text_Marshal(m jsn.Marshaler, val *Text) (err error) {
	return m.MarshalValue(Text_Type, &val.Str)
}

type Text_Slice []Text

func (op *Text_Slice) GetType() string { return Text_Type }
func (op *Text_Slice) GetSize() int    { return len(*op) }
func (op *Text_Slice) SetSize(cnt int) { (*op) = make(Text_Slice, cnt) }

func Text_Repeats_Marshal(m jsn.Marshaler, vals *[]Text) (err error) {
	if err = m.MarshalBlock((*Text_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := Text_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

// VariableName requires a user-specified string.
type VariableName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *VariableName) String() string {
	return op.Str
}

func (*VariableName) Compose() composer.Spec {
	return composer.Spec{
		Name:        VariableName_Type,
		Uses:        composer.Type_Str,
		OpenStrings: true,
	}
}

const VariableName_Type = "variable_name"

func (op *VariableName) Marshal(m jsn.Marshaler) error {
	return VariableName_Marshal(m, op)
}

func VariableName_Optional_Marshal(m jsn.Marshaler, val *VariableName) (err error) {
	var zero VariableName
	if enc := m.IsEncoding(); !enc || val.Str != zero.Str {
		err = VariableName_Marshal(m, val)
	}
	return
}

func VariableName_Marshal(m jsn.Marshaler, val *VariableName) (err error) {
	m.SetCursor(val.At.Offset)
	return m.MarshalValue(VariableName_Type, &val.Str)
}

type VariableName_Slice []VariableName

func (op *VariableName_Slice) GetType() string { return VariableName_Type }
func (op *VariableName_Slice) GetSize() int    { return len(*op) }
func (op *VariableName_Slice) SetSize(cnt int) { (*op) = make(VariableName_Slice, cnt) }

func VariableName_Repeats_Marshal(m jsn.Marshaler, vals *[]VariableName) (err error) {
	if err = m.MarshalBlock((*VariableName_Slice)(vals)); err == nil {
		for i := range *vals {
			if e := VariableName_Marshal(m, &(*vals)[i]); e != nil && e != jsn.Missing {
				m.Error(errutil.New(e, "in slice at", i))
			}
		}
		m.EndBlock()
	}
	return
}

var Slats = []composer.Composer{
	(*Bool)(nil),
	(*Lines)(nil),
	(*Number)(nil),
	(*PatternName)(nil),
	(*RelationName)(nil),
	(*Text)(nil),
	(*VariableName)(nil),
}

var Signatures = map[uint64]interface{}{}
