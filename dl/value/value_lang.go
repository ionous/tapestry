// Code generated by "makeops"; edit at your own risk.
package value

import (
	"git.sr.ht/~ionous/iffy/dl/composer"
	"git.sr.ht/~ionous/iffy/dl/reader"
)

// Bool requires a user-specified string.
type Bool struct {
	Str string
}

func (op *Bool) String() (ret string) {
	if s := op.Str; s != "$EMPTY" {
		ret = s
	}
	return
}

const Bool_True = "$TRUE"
const Bool_False = "$FALSE"

func (*Bool) Compose() composer.Spec {
	return composer.Spec{
		Name: "bool",
		Uses: "str",
		Choices: []string{
			Bool_True, Bool_False,
		},
		Strings: []string{
			"true", "false",
		},
	}
}

// Lines requires a user-specified string.
type Lines struct {
	Str string
}

func (op *Lines) String() (ret string) {
	if s := op.Str; s != "$EMPTY" {
		ret = s
	}
	return
}

func (*Lines) Compose() composer.Spec {
	return composer.Spec{
		Name:        "lines",
		Uses:        "str",
		OpenStrings: true,
	}
}

// Number requires a user-specified number.
type Number float64

func (*Number) Choices() []float64 {
	return []float64{}
}

func (*Number) Compose() composer.Spec {
	return composer.Spec{
		Name: "number",
		Uses: "num",
	}
}

// PatternName requires a user-specified string.
type PatternName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *PatternName) String() (ret string) {
	if s := op.Str; s != "$EMPTY" {
		ret = s
	}
	return
}

func (*PatternName) Compose() composer.Spec {
	return composer.Spec{
		Name:        "pattern_name",
		Uses:        "str",
		OpenStrings: true,
	}
}

// RelationName requires a user-specified string.
type RelationName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *RelationName) String() (ret string) {
	if s := op.Str; s != "$EMPTY" {
		ret = s
	}
	return
}

func (*RelationName) Compose() composer.Spec {
	return composer.Spec{
		Name:        "relation_name",
		Uses:        "str",
		OpenStrings: true,
	}
}

// Text requires a user-specified string.
type Text struct {
	Str string
}

func (op *Text) String() (ret string) {
	if s := op.Str; s != "$EMPTY" {
		ret = s
	}
	return
}

const Text_Empty = "$EMPTY"

func (*Text) Compose() composer.Spec {
	return composer.Spec{
		Name:        "text",
		Uses:        "str",
		OpenStrings: true,
		Choices: []string{
			Text_Empty,
		},
		Strings: []string{
			"empty",
		},
	}
}

// VariableName requires a user-specified string.
type VariableName struct {
	At  reader.Position `if:"internal"`
	Str string
}

func (op *VariableName) String() (ret string) {
	if s := op.Str; s != "$EMPTY" {
		ret = s
	}
	return
}

func (*VariableName) Compose() composer.Spec {
	return composer.Spec{
		Name:        "variable_name",
		Uses:        "str",
		OpenStrings: true,
	}
}

var Slats = []composer.Composer{
	(*Bool)(nil),
	(*Lines)(nil),
	(*Number)(nil),
	(*PatternName)(nil),
	(*RelationName)(nil),
	(*Text)(nil),
	(*VariableName)(nil),
}
