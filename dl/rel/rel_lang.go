// Code generated by "makeops"; edit at your own risk.
package rel

import (
	"git.sr.ht/~ionous/iffy/dl/composer"
	"git.sr.ht/~ionous/iffy/rt"
)

// ReciprocalOf Returns the implied relative of a noun (ex. the source in a one-to-many relation.)
type ReciprocalOf struct {
	Via    string      `if:"label=_"`
	Object rt.TextEval `if:"label=object"`
}

func (*ReciprocalOf) Compose() composer.Spec {
	return composer.Spec{
		Name: "reciprocal_of",
		Lede: "reciprocal",
	}
}

// ReciprocalsOf Returns the implied relative of a noun (ex. the sources of a many-to-many relation.)
type ReciprocalsOf struct {
	Via    string      `if:"label=_"`
	Object rt.TextEval `if:"label=object"`
}

func (*ReciprocalsOf) Compose() composer.Spec {
	return composer.Spec{
		Name: "reciprocals_of",
		Lede: "reciprocals",
	}
}

// Relate Relate two nouns.
type Relate struct {
	Object   rt.TextEval `if:"label=_"`
	ToObject rt.TextEval `if:"label=to"`
	Via      string      `if:"label=via"`
}

func (*Relate) Compose() composer.Spec {
	return composer.Spec{
		Name: "relate",
	}
}

// RelativeOf Returns the relative of a noun (ex. the target of a one-to-one relation.)
type RelativeOf struct {
	Via    string      `if:"label=_"`
	Object rt.TextEval `if:"label=object"`
}

func (*RelativeOf) Compose() composer.Spec {
	return composer.Spec{
		Name: "relative_of",
		Lede: "relative",
	}
}

// RelativesOf Returns the relatives of a noun as a list of names (ex. the targets of one-to-many relation).
type RelativesOf struct {
	Via    string      `if:"label=_"`
	Object rt.TextEval `if:"label=object"`
}

func (*RelativesOf) Compose() composer.Spec {
	return composer.Spec{
		Name: "relatives_of",
		Lede: "relatives",
	}
}

var Slats = []interface{}{
	(*ReciprocalOf)(nil),
	(*ReciprocalsOf)(nil),
	(*Relate)(nil),
	(*RelativeOf)(nil),
	(*RelativesOf)(nil),
}
