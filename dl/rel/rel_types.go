// Code generated by Tapestry; edit at your own risk.
package rel

import (
	"git.sr.ht/~ionous/tapestry/dl/rti"
	"git.sr.ht/~ionous/tapestry/lang/typeinfo"
)

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_ReciprocalOf struct {
	Via    string
	Object rti.TextEval
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*ReciprocalOf) Inspect() typeinfo.T {
	return &Z_ReciprocalOf_Info
}

// return a valid markup map, creating it if necessary.
func (op *ReciprocalOf) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// reciprocal_of, a type of flow.
const Z_ReciprocalOf_Type = "reciprocal_of"

// ensure the command implements its specified slots:
var _ rti.TextEval = (*ReciprocalOf)(nil)

var Z_ReciprocalOf_Info = typeinfo.Flow{
	Name: Z_ReciprocalOf_Type,
	Lede: "reciprocal",
	Terms: []typeinfo.Term{{
		Name:  "via",
		Label: "_",
		Type:  &Z_RelationName_Info,
	}, {
		Name:  "object",
		Label: "object",
		Type:  &rti.Z_TextEval_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_TextEval_Info,
	},
}

// holds a slice of type reciprocal_of
// FIX: duplicates the spec decl.
type FIX_ReciprocalOf_Slice []ReciprocalOf

// implements typeinfo.Inspector
func (*ReciprocalOf_Slice) Inspect() typeinfo.T {
	return &Z_ReciprocalOf_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_ReciprocalsOf struct {
	Via    string
	Object rti.TextEval
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*ReciprocalsOf) Inspect() typeinfo.T {
	return &Z_ReciprocalsOf_Info
}

// return a valid markup map, creating it if necessary.
func (op *ReciprocalsOf) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// reciprocals_of, a type of flow.
const Z_ReciprocalsOf_Type = "reciprocals_of"

// ensure the command implements its specified slots:
var _ rti.TextListEval = (*ReciprocalsOf)(nil)

var Z_ReciprocalsOf_Info = typeinfo.Flow{
	Name: Z_ReciprocalsOf_Type,
	Lede: "reciprocals",
	Terms: []typeinfo.Term{{
		Name:  "via",
		Label: "_",
		Type:  &Z_RelationName_Info,
	}, {
		Name:  "object",
		Label: "object",
		Type:  &rti.Z_TextEval_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_TextListEval_Info,
	},
}

// holds a slice of type reciprocals_of
// FIX: duplicates the spec decl.
type FIX_ReciprocalsOf_Slice []ReciprocalsOf

// implements typeinfo.Inspector
func (*ReciprocalsOf_Slice) Inspect() typeinfo.T {
	return &Z_ReciprocalsOf_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_Relate struct {
	Object   rti.TextEval
	ToObject rti.TextEval
	Via      string
	Markup   map[string]any
}

// implements typeinfo.Inspector
func (*Relate) Inspect() typeinfo.T {
	return &Z_Relate_Info
}

// return a valid markup map, creating it if necessary.
func (op *Relate) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// relate, a type of flow.
const Z_Relate_Type = "relate"

// ensure the command implements its specified slots:
var _ rti.Execute = (*Relate)(nil)

var Z_Relate_Info = typeinfo.Flow{
	Name: Z_Relate_Type,
	Lede: "relate",
	Terms: []typeinfo.Term{{
		Name:  "object",
		Label: "_",
		Type:  &rti.Z_TextEval_Info,
	}, {
		Name:  "to_object",
		Label: "to",
		Type:  &rti.Z_TextEval_Info,
	}, {
		Name:  "via",
		Label: "via",
		Type:  &Z_RelationName_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_Execute_Info,
	},
}

// holds a slice of type relate
// FIX: duplicates the spec decl.
type FIX_Relate_Slice []Relate

// implements typeinfo.Inspector
func (*Relate_Slice) Inspect() typeinfo.T {
	return &Z_Relate_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_RelativeOf struct {
	Via    string
	Object rti.TextEval
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*RelativeOf) Inspect() typeinfo.T {
	return &Z_RelativeOf_Info
}

// return a valid markup map, creating it if necessary.
func (op *RelativeOf) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// relative_of, a type of flow.
const Z_RelativeOf_Type = "relative_of"

// ensure the command implements its specified slots:
var _ rti.TextEval = (*RelativeOf)(nil)

var Z_RelativeOf_Info = typeinfo.Flow{
	Name: Z_RelativeOf_Type,
	Lede: "relative",
	Terms: []typeinfo.Term{{
		Name:  "via",
		Label: "_",
		Type:  &Z_RelationName_Info,
	}, {
		Name:  "object",
		Label: "object",
		Type:  &rti.Z_TextEval_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_TextEval_Info,
	},
}

// holds a slice of type relative_of
// FIX: duplicates the spec decl.
type FIX_RelativeOf_Slice []RelativeOf

// implements typeinfo.Inspector
func (*RelativeOf_Slice) Inspect() typeinfo.T {
	return &Z_RelativeOf_Info
}

// FIX: for now we are generating side by side with the old definitions
// also should have user comment here
type FIX_RelativesOf struct {
	Via    string
	Object rti.TextEval
	Markup map[string]any
}

// implements typeinfo.Inspector
func (*RelativesOf) Inspect() typeinfo.T {
	return &Z_RelativesOf_Info
}

// return a valid markup map, creating it if necessary.
func (op *RelativesOf) GetMarkup(ensure bool) map[string]any {
	if ensure && op.Markup == nil {
		op.Markup = make(map[string]any)
	}
	return op.Markup
}

// relatives_of, a type of flow.
const Z_RelativesOf_Type = "relatives_of"

// ensure the command implements its specified slots:
var _ rti.TextListEval = (*RelativesOf)(nil)

var Z_RelativesOf_Info = typeinfo.Flow{
	Name: Z_RelativesOf_Type,
	Lede: "relatives",
	Terms: []typeinfo.Term{{
		Name:  "via",
		Label: "_",
		Type:  &Z_RelationName_Info,
	}, {
		Name:  "object",
		Label: "object",
		Type:  &rti.Z_TextEval_Info,
	}},
	Slots: []*typeinfo.Slot{
		&rti.Z_TextListEval_Info,
	},
}

// holds a slice of type relatives_of
// FIX: duplicates the spec decl.
type FIX_RelativesOf_Slice []RelativesOf

// implements typeinfo.Inspector
func (*RelativesOf_Slice) Inspect() typeinfo.T {
	return &Z_RelativesOf_Info
}

// relation_name, a type of str.
const Z_RelationName_Type = "relation_name"

var Z_RelationName_Info = typeinfo.Str{
	Name: Z_RelationName_Type,
}

// a list of all flows in this this package
// ( ex. for reading blockly blocks )
var Y_flow_List = []*typeinfo.Flow{
	&Z_ReciprocalOf_Info,
	&Z_ReciprocalsOf_Info,
	&Z_Relate_Info,
	&Z_RelativeOf_Info,
	&Z_RelativesOf_Info,
}

// a list of all command signatures
// ( for processing and verifying story files )
var Z_Signatures = map[uint64]interface{}{}
