package match

import (
	"fmt"
)

// position of a token
type Pos struct{ X, Y int }

func (p Pos) String() string {
	return fmt.Sprintf("pos: %d,%d", p.Y, p.X)
}

//go:generate stringer -type=Token
type Token int

// types of tokens
const (
	Invalid       Token = iota // placeholder, not generated by the tokenizer
	Comma                      // a comma
	Comment                    // ex. `# something`, minus the hash
	Parenthetical              // ex. `( something )`, minus parens
	Quoted                     // ex. `"something"`, minus the quotes
	Stop                       // full stop or other terminal
	String                     // delimited by spaces and other special runes
	Tell                       // tell subdoc

	// Number? but need to handle trailing decimals: "the age is 45."
)

type TokenValue struct {
	Token Token
	Pos   Pos
	Value any  // a string, expect for Tell subdocuments
	First bool // helper to know if this is the first token of a sentence
}

func (w TokenValue) Equals(other uint64) bool {
	return w.Hash() == other
}

func (tv TokenValue) Hash() (ret uint64) {
	switch tv.Token {
	case Comma:
		ret = Hash(`,`)
	case Comment:
		ret = Hash(`#`)
	case Parenthetical:
		ret = Hash(`()`)
	case Quoted:
		ret = Hash(`"`)
	case Stop:
		ret = Hash(`.`)
	case String:
		// fix: this is obviously silly.
		ret = Hash(tv.Value.(string))
	case Tell:
		ret = 0
	default:
	}
	return
}
