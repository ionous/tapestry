package match

import (
	"fmt"
)

// position of a token
type Pos struct{ X, Y int }

func (p Pos) String() string {
	return fmt.Sprintf("pos: %d,%d", p.Y, p.X)
}

//go:generate stringer -type=Token
type Token int

// types of tokens
const (
	Invalid       Token = iota // placeholder, not generated by the tokenizer
	Comma                      // a comma
	Comment                    // ex. `# something`, minus the hash
	Parenthetical              // ex. `( something )`, minus parens
	Quoted                     // ex. `"something"`, minus the quotes
	Stop                       // full stop or other terminal
	String                     // delimited by spaces and other special runes
	Tell                       // tell subdoc

	// Number? needs to recognize trailing decimals, embedded and trailing commas: "the age is 45."
)

type TokenValue struct {
	Token Token
	Pos   Pos
	Value any  // a string, expect for Tell subdocuments
	First bool // helper to know if this is the first token of a sentence
}

func (w TokenValue) Equals(other uint64) bool {
	return w.Hash() == other
}

// a string *representation* of the value
func (tv TokenValue) String() (ret string) {
	switch v := tv.Value.(type) {
	case rune:
		ret = string(v)
	case string:
		ret = v
	default:
		ret = fmt.Sprintf("<%s>", tv.Token)
	}
	return
}

func (tv TokenValue) Hash() (ret uint64) {
	switch v := tv.Value.(type) {
	case rune:
		// fix: this is silly obviously.
		ret = Hash(string(v))
	case string:
		// fix: this is obviously silly.
		ret = Hash(v)
	default:
		// Tell values return 0
		ret = 0
	}
	return
}
