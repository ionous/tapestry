// Code generated by capnpc-go. DO NOT EDIT.

package render

import (
	core "git.sr.ht/~ionous/iffy/idl/core"
	rtx "git.sr.ht/~ionous/iffy/idl/rtx"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RenderField struct{ capnp.Struct }

// RenderField_TypeID is the unique identifier for the type RenderField.
const RenderField_TypeID = 0x9ad332af103db854

func NewRenderField(s *capnp.Segment) (RenderField, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RenderField{st}, err
}

func NewRootRenderField(s *capnp.Segment) (RenderField, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RenderField{st}, err
}

func ReadRootRenderField(msg *capnp.Message) (RenderField, error) {
	root, err := msg.RootPtr()
	return RenderField{root.Struct()}, err
}

func (s RenderField) String() string {
	str, _ := text.Marshal(0x9ad332af103db854, s.Struct)
	return str
}

func (s RenderField) Name() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s RenderField) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RenderField) SetName(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewName sets the name field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s RenderField) NewName() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RenderField_List is a list of RenderField.
type RenderField_List struct{ capnp.List }

// NewRenderField creates a new list of RenderField.
func NewRenderField_List(s *capnp.Segment, sz int32) (RenderField_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RenderField_List{l}, err
}

func (s RenderField_List) At(i int) RenderField { return RenderField{s.List.Struct(i)} }

func (s RenderField_List) Set(i int, v RenderField) error { return s.List.SetStruct(i, v.Struct) }

func (s RenderField_List) String() string {
	str, _ := text.MarshalList(0x9ad332af103db854, s.List)
	return str
}

// RenderField_Promise is a wrapper for a RenderField promised by a client call.
type RenderField_Promise struct{ *capnp.Pipeline }

func (p RenderField_Promise) Struct() (RenderField, error) {
	s, err := p.Pipeline.Struct()
	return RenderField{s}, err
}

func (p RenderField_Promise) Name() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type RenderName struct{ capnp.Struct }

// RenderName_TypeID is the unique identifier for the type RenderName.
const RenderName_TypeID = 0xfb2b06c4a9e4537a

func NewRenderName(s *capnp.Segment) (RenderName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RenderName{st}, err
}

func NewRootRenderName(s *capnp.Segment) (RenderName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RenderName{st}, err
}

func ReadRootRenderName(msg *capnp.Message) (RenderName, error) {
	root, err := msg.RootPtr()
	return RenderName{root.Struct()}, err
}

func (s RenderName) String() string {
	str, _ := text.Marshal(0xfb2b06c4a9e4537a, s.Struct)
	return str
}

func (s RenderName) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RenderName) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RenderName) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RenderName) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// RenderName_List is a list of RenderName.
type RenderName_List struct{ capnp.List }

// NewRenderName creates a new list of RenderName.
func NewRenderName_List(s *capnp.Segment, sz int32) (RenderName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RenderName_List{l}, err
}

func (s RenderName_List) At(i int) RenderName { return RenderName{s.List.Struct(i)} }

func (s RenderName_List) Set(i int, v RenderName) error { return s.List.SetStruct(i, v.Struct) }

func (s RenderName_List) String() string {
	str, _ := text.MarshalList(0xfb2b06c4a9e4537a, s.List)
	return str
}

// RenderName_Promise is a wrapper for a RenderName promised by a client call.
type RenderName_Promise struct{ *capnp.Pipeline }

func (p RenderName_Promise) Struct() (RenderName, error) {
	s, err := p.Pipeline.Struct()
	return RenderName{s}, err
}

type RenderPattern struct{ capnp.Struct }

// RenderPattern_TypeID is the unique identifier for the type RenderPattern.
const RenderPattern_TypeID = 0xb569915a28438bb8

func NewRenderPattern(s *capnp.Segment) (RenderPattern, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RenderPattern{st}, err
}

func NewRootRenderPattern(s *capnp.Segment) (RenderPattern, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RenderPattern{st}, err
}

func ReadRootRenderPattern(msg *capnp.Message) (RenderPattern, error) {
	root, err := msg.RootPtr()
	return RenderPattern{root.Struct()}, err
}

func (s RenderPattern) String() string {
	str, _ := text.Marshal(0xb569915a28438bb8, s.Struct)
	return str
}

func (s RenderPattern) Pattern() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RenderPattern) HasPattern() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RenderPattern) PatternBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RenderPattern) SetPattern(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RenderPattern) Args() (core.Argument_List, error) {
	p, err := s.Struct.Ptr(1)
	return core.Argument_List{List: p.List()}, err
}

func (s RenderPattern) HasArgs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RenderPattern) SetArgs(v core.Argument_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated core.Argument_List, preferring placement in s's segment.
func (s RenderPattern) NewArgs(n int32) (core.Argument_List, error) {
	l, err := core.NewArgument_List(s.Struct.Segment(), n)
	if err != nil {
		return core.Argument_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// RenderPattern_List is a list of RenderPattern.
type RenderPattern_List struct{ capnp.List }

// NewRenderPattern creates a new list of RenderPattern.
func NewRenderPattern_List(s *capnp.Segment, sz int32) (RenderPattern_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RenderPattern_List{l}, err
}

func (s RenderPattern_List) At(i int) RenderPattern { return RenderPattern{s.List.Struct(i)} }

func (s RenderPattern_List) Set(i int, v RenderPattern) error { return s.List.SetStruct(i, v.Struct) }

func (s RenderPattern_List) String() string {
	str, _ := text.MarshalList(0xb569915a28438bb8, s.List)
	return str
}

// RenderPattern_Promise is a wrapper for a RenderPattern promised by a client call.
type RenderPattern_Promise struct{ *capnp.Pipeline }

func (p RenderPattern_Promise) Struct() (RenderPattern, error) {
	s, err := p.Pipeline.Struct()
	return RenderPattern{s}, err
}

type RenderRef struct{ capnp.Struct }

// RenderRef_TypeID is the unique identifier for the type RenderRef.
const RenderRef_TypeID = 0xc19fdae5899086e6

func NewRenderRef(s *capnp.Segment) (RenderRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RenderRef{st}, err
}

func NewRootRenderRef(s *capnp.Segment) (RenderRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RenderRef{st}, err
}

func ReadRootRenderRef(msg *capnp.Message) (RenderRef, error) {
	root, err := msg.RootPtr()
	return RenderRef{root.Struct()}, err
}

func (s RenderRef) String() string {
	str, _ := text.Marshal(0xc19fdae5899086e6, s.Struct)
	return str
}

func (s RenderRef) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RenderRef) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RenderRef) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RenderRef) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RenderRef) Flags() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s RenderRef) SetFlags(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// RenderRef_List is a list of RenderRef.
type RenderRef_List struct{ capnp.List }

// NewRenderRef creates a new list of RenderRef.
func NewRenderRef_List(s *capnp.Segment, sz int32) (RenderRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return RenderRef_List{l}, err
}

func (s RenderRef_List) At(i int) RenderRef { return RenderRef{s.List.Struct(i)} }

func (s RenderRef_List) Set(i int, v RenderRef) error { return s.List.SetStruct(i, v.Struct) }

func (s RenderRef_List) String() string {
	str, _ := text.MarshalList(0xc19fdae5899086e6, s.List)
	return str
}

// RenderRef_Promise is a wrapper for a RenderRef promised by a client call.
type RenderRef_Promise struct{ *capnp.Pipeline }

func (p RenderRef_Promise) Struct() (RenderRef, error) {
	s, err := p.Pipeline.Struct()
	return RenderRef{s}, err
}

type RenderTemplate struct{ capnp.Struct }

// RenderTemplate_TypeID is the unique identifier for the type RenderTemplate.
const RenderTemplate_TypeID = 0xb501ee8e4e582bf8

func NewRenderTemplate(s *capnp.Segment) (RenderTemplate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RenderTemplate{st}, err
}

func NewRootRenderTemplate(s *capnp.Segment) (RenderTemplate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RenderTemplate{st}, err
}

func ReadRootRenderTemplate(msg *capnp.Message) (RenderTemplate, error) {
	root, err := msg.RootPtr()
	return RenderTemplate{root.Struct()}, err
}

func (s RenderTemplate) String() string {
	str, _ := text.Marshal(0xb501ee8e4e582bf8, s.Struct)
	return str
}

func (s RenderTemplate) Expression() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s RenderTemplate) HasExpression() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RenderTemplate) SetExpression(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExpression sets the expression field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s RenderTemplate) NewExpression() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RenderTemplate_List is a list of RenderTemplate.
type RenderTemplate_List struct{ capnp.List }

// NewRenderTemplate creates a new list of RenderTemplate.
func NewRenderTemplate_List(s *capnp.Segment, sz int32) (RenderTemplate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RenderTemplate_List{l}, err
}

func (s RenderTemplate_List) At(i int) RenderTemplate { return RenderTemplate{s.List.Struct(i)} }

func (s RenderTemplate_List) Set(i int, v RenderTemplate) error { return s.List.SetStruct(i, v.Struct) }

func (s RenderTemplate_List) String() string {
	str, _ := text.MarshalList(0xb501ee8e4e582bf8, s.List)
	return str
}

// RenderTemplate_Promise is a wrapper for a RenderTemplate promised by a client call.
type RenderTemplate_Promise struct{ *capnp.Pipeline }

func (p RenderTemplate_Promise) Struct() (RenderTemplate, error) {
	s, err := p.Pipeline.Struct()
	return RenderTemplate{s}, err
}

func (p RenderTemplate_Promise) Expression() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_fa6b4c0b2d8a4348 = "x\xda\x94\x93Oh;E\x14\xc7\xdf\x9b\xd9\xfe\xb6b" +
	"\xfak\x96M\xc1@!\x89\xa76\xadM\x1b\x84h@" +
	"b\x1aZ\x8a\xd4\x9aI[,\xbdM\x9bI\xba4\xbb" +
	"Yw7\xa6\xf6\xa2'\xa1V\x8b\xa2\x07\xf1R\xa8\xa0" +
	"\x08\x8a\x17\x85\xe2\xc5?(UO\x16\xbd\xd8\x83\x82\xb4" +
	"\x05\x11\x04/\"\xf50\xb2\xd9\xacFM\xf5\xd7\xe3\x0c" +
	"\xdf7\xf3y\x9fy3\xcd\xf1a23\xf0!\x02\xb0" +
	"\xd8\xc0-\xb9r\xfcP\xf4\xdd\xec\xd7\xaf\x816\x84r" +
	"\xa1\xf4\xdc}w/n_\xc1\x00\xaa\x00\xdag_j" +
	"\xa7\xaav\x9a\xd3\xe3X\x00\x94\xbfM\xac-\x1d\xfc\x8c" +
	"\xef\xf7\x89\xea\x0f\xe2\x0f\xfa\x1c\xaa\xfa\x1c>\xa6\x9fv" +
	"\xd2\xc7\xfb\xa5\xb1\xf5\x97\x8c\x7f\xa6\x89\x9f\x1e!gz" +
	"\x8a\xa8z\x8a\xe4tA\xda\x80\xf2\xf2\xd9\x17\xf7.\xce" +
	"\x0e?\x066\x84\xff:<N?\xd0ST\xd5S4" +
	"\xa7\x1b\xd4\x8f\xef.\x9f\xbf\xf5\xe9\xad\x89\xdf\xfb\xa1h" +
	"\xca'z\\Q\xf5\xb8\x92\xd3\xb9\xe2\xa38\xc2\xaa\x0a" +
	"gj\x93p\xdb\xb2\xf3\x95\xcej\xde\x10\x8d*@\x19" +
	"\x91\x0d\"\x91'\x8f~\xf3\xce\xdb\xcd\xd8\x0b\xc0\xa2\x04" +
	"\x8bI\x94o\\\xfdz\xa9\xbe\xd2\xfe\x0e\xd8(\xc1\xe2" +
	"$b\x04@\xc3\x0d\x19V\x83\xda\xa9\x0f\xb6\x1f\x91\x86" +
	"\xe5\x09\xc7\xe2\x0d\x00d\x0aU\x00\x14\x04\xd0\x86\xd2\x00" +
	"l\x90\"\x8b\x11\x1c\xb6\xb8)0*\xb3\xa5\xe3\x0b\xed" +
	"\xf2\xf3#\x00\xc4\xe85p+\xc2\xb4\x1b*\xf7\x84\x8f" +
	"\x17\xf9\x1b^@\xd3\x837F\xb0x?\xca\x9f\xbe\x1a" +
	"7\xf7\xdf\xbc\xf7e`\xd3\x04\x8b\xd5.\xef\xae\x0c\x0f" +
	"\x84\x82i7\xb8'B\xe4|\xa1\xd6tL\xee\x05\xeb" +
	"\x19<\"\xb2\xcc\x1dW$=q\xd7\x8e\x97l\xb9\x86" +
	"UO\x1a\xb5\xdaSIO\x04\x95\xeeTrY\x88|" +
	"r\xcb\xf3l7\x9f\xc9\xd4\x0do\xab\xb51\xb5\xd94" +
	"3F\xd3j\xb6\xdc\x8c\x1f\xcf\xb4\x8dm#\xd3i\x80" +
	"\xab\x9ep\x01z}\xackZ\x82MRd\x0f\x10\x94" +
	"b\xc7v\x84\xeb\x1a@\x9b\x16S\x90\xc8\xefO\xde\xfb" +
	"\xf1\xd5\x91\xdc/\xc0\x14\x82\xc5\x08\x02\xbdC_e\xee" +
	"y\x82:V\xff\xd7\x1c\xed\xd5u\x0f\xc1\xe2\x18\x86\x0e" +
	"\x82\xf2\xfe\xcf8\xf8'\xf6\xf8\xac6\x9e`\x0b\x14\xd9" +
	"\x0aA\x0d1\x86\xfe.Kk,\xc1l\x8a\xecy\x82" +
	"O\xdb>\x82\x13\xf4\xc1K\xdf\x1e>\xfe\xfa\x17\x07A" +
	"\x1f\xd1\xeem\xb3a\xa6s\x1d\xc1\x08\xe00w\xean" +
	"\xa7\xe4/\xe2\xde\x92t'\x00\x80\xb7\x01\xcb\x141*" +
	"\xe7\xdbO\x9c\xd7\xf7Z\x1f\xf96n\xf7\xd8\xc0\xd0F" +
	"\xa1*\x9c\x8a\xa8\xddp\xae+\xdd9\xa9\x08\xc0\xda\xff" +
	"\xeaH\xfb:\x16)\xb25\x82\xa1\x8d\xd5\xac\xb6\x9a`" +
	"\x1eE\xf6Lw\xd6\xfb\xa8\x88ax\xf2\x93\xdc1\xf8" +
	"F\xc3\x1f\xc7PF\xa2\xd6\xe0\xffi#\x1b$\x00P" +
	"\x01\x82\xca5\xb3\xb0\xc4Mq\xd3o\xbd.\xc3Z\xa0" +
	"\xa6\xb8\xf9\xaf\xeev\xf0G\x00\x00\x00\xff\xff\xc7\x90s" +
	"\xb7"

func init() {
	schemas.Register(schema_fa6b4c0b2d8a4348,
		0x9ad332af103db854,
		0xb501ee8e4e582bf8,
		0xb569915a28438bb8,
		0xc19fdae5899086e6,
		0xfb2b06c4a9e4537a)
}
