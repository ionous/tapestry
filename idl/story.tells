# Story contains modeling commands used to define a game world. These commands include the description of scenes, kinds of objects, specific nouns and their properties, the placement and relation between nouns, and so on.
# Most authors will probably prefer the jess plain english style of modeling over these, more explicit, commands. However, there are some commands -- like defining scenes -- which don't currently have a corollary within jess.
Spec:with group:
  - "story"
  - Group contains:
      - # Phrase
        Spec:with slot:
          - "story_statement"
          - Slot: true
        blockly-stack: true
        blockly-color: "VARIABLES_HUE"

      - # top level node for story files.
        Spec:slots:groups:with flow:
          - "story_file"
          - # implements story_statement so flex can parse this element successfully.
            "story_statement"
          - "internal"
          - Flow:phrase:uses:
              - "tapestry"
              - "{_$story_lines}"
              - - Term:name:type:repeats:
                    - "_"
                    - "statements"
                    - "story_statement"
                    - true
        blockly-color: "TAP_HUE_ROOT"
        mosaic-root: true

      - # a command with a signature of the comment marker metadata.
        # a cheat to allows nodes that have only a comment marker and no actual command.
        # see also: debug.do_nothing
        Spec:slots:with flow:
          - "story_break"
          - "story_statement"
          - Flow:uses:
              - "--"
              - []

      - # Adds documentation about the story for you and other authors.
        # Notes can used as a modeling commands, or as part of an execute block.
        # And, they are created automatically from hash-style comments (#) encountered within the plain text sections of tell files.
        # When used in an execute block, notes become {"Log:value:"} commands.
        Spec:slots:groups:with flow:
          - "note"
          - - "story_statement"
            - "execute"
          - "language"
          - Flow uses:
              - Term:name:repeats:
                - "_"
                - "lines"
                - true

      - # Defines a scene used for testing a story.
        # Tests can be executed using the `tap check` command.
        # TODO: see https://todo.sr.ht/~ionous/tapestry/42
        Spec:slots:with flow:
          - "define_test"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - # A unique name for the test.
                  Term:name:type:
                    - "test"
                    - "test_name"
                    - "text"
                - # One or more scenes that this test depends on.
                  # Tests implicitly depend upon the scene within which they are defined.
                  # In order to reference the nouns, kinds, etc. of any other scenes in a test, that scene must be listed here.
                  Term:name:type:optional:
                    - "requires"
                    - "require_scenes"
                    - "text_list_eval"
                    - true
                - # Modeling commands for defining nouns, kinds, game rules, etc. used by this test. Those definitions will not be visible outside of the test ( unless this test is "required" by another. )
                  Term:name:type:optional:repeats:
                    - "scene"
                    - "statements"
                    - "story_statement"
                    - true
                    - true
                - # One or more commands to run when checking the test.
                  # The {"Expect:"} command will trigger a test failure when an author specified condition is not met.
                  Term:name:type:repeats:
                    - "do"
                    - "exe"
                    - "execute"
                    - true
      - # Defines a collection of nouns, kinds, game rules, etc. used the game.
        # Every .tell story has its own unique scene.
        Spec:slots:with flow:
          - "define_scene"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - # A unique name for the scene.
                  Term:type:
                    - "scene"
                    - "text_eval"
                - # One or more scenes that this scene depends on.
                  # This is a one-way dependency. This scene can reference anything defined within the required scenes; the required scenes cannot reference anything declared within this scene. Circular dependencies are prevented by weave.
                  Term:name:type:optional:
                    - "requires"
                    - "require_scenes"
                    - "text_list_eval"
                    - true
                - # Modeling commands for the defining nouns, kinds, game rules, etc. used by this scene.
                  Term:name:type:optional:repeats:
                    - "with"
                    - "statements"
                    - "story_statement"
                    - true
                    - true
      - # Defines an in-game behavior that can be triggered by an actor.
        # Actions are a special kind of pattern, and like patterns use "rules" to define and customize their behavior. The shared library includes many common actions including things like moving from room to room, examining something, taking or dropping items, and so on.
        # See the Tapestry guide for more information.
        Spec:slots:groups:with flow:
          - "define_action"
          - "story_statement"
          - "events"
          - Flow:uses:
              - "define"
              - - # A unique name for the action.
                  Term:type:
                    - "action"
                    - "text_eval"
                - # Parameters to customize the behavior of an action.
                  # Most actions require an actor, and possibly one or two other objects.
                  # For instance: the standard "storing" action -- used for inserting something into a container -- requires an actor to perform the action, an object to store, and a container to receive that object.
                  Term:type:repeats:
                    - "requires"
                    - "field_definition"
                    - true
                - # A list of any local variables needed by the action carry out its behavior.
                   Term:type:optional:repeats:
                    - "provides"
                    - "field_definition"
                    - true
                    - true
      - # Defines a set of mutually exclusive states that can be assigned to any kind of noun. By default, every noun with this set of states starts the game with the first state listed by this command. At runtime, a script can change to other states, ask whether a noun is in a particular state, or ask for the name of the current state from the set.
        # Internally, these are also known as "aspects" and "traits."
        # Many programming languages refer to these as "enumerations."
        # See also: {"Set:state:"} and {"Object:field:"}
        Spec:slots:with flow:
          - "define_state"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - Term:name:type:
                  - "state"
                  - "aspect"
                  - "text_eval"
                - Term:name:type:
                  - "names"
                  - "traits"
                  - "text_list_eval"

      - # allows the player to refer to a noun by one or more other terms.
        Spec:slots:with flow:
          - "define_alias"
          - "story_statement"
          - Flow:uses:
              - "interpret"
              - - Term:name:type:
                    - "alias"
                    - "names"
                    - "text_list_eval"
                - Term:name:type:
                    - "as"
                    - "noun_name"
                    - "text_eval"
      - # starts a parser scanner.
        Spec:slots:with flow:
          - "define_leading_grammar"
          - "story_statement"
          - Flow:uses:
              - "interpret"
              - - Term:name:type:repeats:
                    - "_"
                    - "lede"
                    - "text"
                    - true
                - Term:name:type:repeats:
                    - "with"
                    - "scans"
                    - "scanner_maker"
                    - true
      - # starts a parser scanner.
        Spec:slots:with flow:
          - "define_named_grammar"
          - "story_statement"
          - Flow:uses:
              - "interpret"
              - - Term:type:
                    - "name"
                    - "text"
                - Term:name:type:repeats:
                    - "with"
                    - "scans"
                    - "scanner_maker"
                    - true

      - # Simple english like definitions of nouns, kinds, and their relatives.
        Spec:slots:with flow:
          - "declare_statement"
          - "story_statement"
          - Flow:uses:
              - "declare"
              - - Term:name:type:
                    - "_"
                    - "text"
                    - "text_eval"
                - Term:type:optional:
                    - "assign"
                    - "assignment"
                    - true
                - Term:type:private:
                    - "matches"
                    - "jess_matches"
                    - true
      - Spec:slots:groups:with flow:
          - "define_relation"
          - "story_statement"
          - "relations"
          - Flow:uses:
              - "define"
              - - Term:type:
                    - "relation"
                    - "text_eval"
                - Term:type:
                    - "kind"
                    - "text_eval"
                - Term:type:
                    - "other_kind"
                    - "text_eval"
                - Term:type:
                    - "cardinality"
                    - "relation_cardinality"
      - # Add properties to a kind
        Spec:slots:with flow:
          - "define_fields"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - Term:type:
                    - "kind"
                    - "text_eval"
                - Term:type:repeats:
                    - "fields"
                    - "field_definition"
                    - true
      - Spec:slots:with flow:
          - "define_kinds"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - Term:type:
                    - "kinds"
                    - "text_list_eval"
                - Term:name:type:
                    - "as"
                    - "ancestor"
                    - "text_eval"
      - # Plurals are used at runtime and during weave to
        # guide the interpretation of nouns and kinds.
        # For example:
        # "The plural of person is people."
        # "The plural of person is persons."
        Spec:slots:groups:with flow:
          - "define_plural"
          - "story_statement"
          - "language"
          - Flow:phrase:uses:
              - "define"
              - "The plural of {$singular} is {$plural}."
              - - Term:type:
                    - "singular"
                    - "text_eval"
                - Term:type:
                    - "plural"
                    - "text_eval"
      - # Assign a starting value to the field of one or nouns.
        Spec:slots:with flow:
          - "define_value"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - Term:name:type:
                    - "value"
                    - "field_name"
                    - "text_eval"
                - Term:name:type:
                    - "of"
                    - "nouns"
                    - "text_list_eval"
                - Term:name:type:
                    - "as"
                    - "value"
                    - "assignment"
      - Spec:slots:with flow:
          - "define_nouns"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - Term:type:
                    - "nouns"
                    - "text_list_eval"
                - Term:name:type:
                    - "as"
                    - "kind"
                    - "text_eval"
      - Spec:slots:with flow:
          - "define_noun_traits"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - Term:type:
                    - "nouns"
                    - "text_list_eval"
                - Term:type:
                    - "traits"
                    - "text_list_eval"

      - Spec:slots:groups:with flow:
          - "rule_provides"
          - "story_statement"
          - "patterns"
          - Flow:uses:
              - "define"
              - - Term:name:type:
                    - "rule"
                    - "pattern_name"
                    - "text_eval"
                - Term:type:repeats:
                    - "provides"
                    - "field_definition"
                    - true
      - # Change the behavior of an existing pattern.
        # For events, this adds a listener that responds to the targeted object only when triggered by the player.
        # By default, rules with filters continue on to the next rule automatically.
        # Because event listeners have filters they continue to the next listener unless specifically stopped.
        Spec:slots:groups:with flow:
          - "rule_for_pattern"
          - "story_statement"
          - "patterns"
          - Flow:uses:
              - "define"
              - - Term:name:type:
                    - "rule"
                    - "pattern_name"
                    - "text_eval"
                - Term:name:type:optional:
                    - "named"
                    - "rule_name"
                    - "text_eval"
                    - true
                - Term:name:type:repeats:
                    - "do"
                    - "exe"
                    - "execute"
                    - true
      - # Change the behavior of an existing pattern.
        # The default behavior for events is to fall through to the next handler unless canceled or stopped.
        Spec:slots:groups:with flow:
          - "rule_for_noun"
          - "story_statement"
          - "patterns"
          - Flow:uses:
              - "define"
              - - Term:name:type:
                    - "rule"
                    - "pattern_name"
                    - "text_eval"
                - Term:name:type:
                    - "noun"
                    - "noun_name"
                    - "text_eval"
                - Term:name:type:optional:
                    - "named"
                    - "rule_name"
                    - "text_eval"
                    - true
                - Term:name:type:repeats:
                    - "do"
                    - "exe"
                    - "execute"
                    - true
      - # Change the behavior of an existing pattern.
        # The default behavior for events is to fall through to the next handler unless canceled or stopped.
        Spec:slots:groups:with flow:
          - "rule_for_kind"
          - "story_statement"
          - "patterns"
          - Flow:uses:
              - "define"
              - - Term:name:type:
                    - "rule"
                    - "pattern_name"
                    - "text_eval"
                - Term:name:type:
                    - "kind"
                    - "kind_name"
                    - "text_eval"
                - Term:type:optional:
                    - "exactly"
                    - "bool_eval"
                    - true
                - Term:name:type:optional:
                    - "named"
                    - "rule_name"
                    - "text_eval"
                    - true
                - Term:name:type:repeats:
                    - "do"
                    - "exe"
                    - "execute"
                    - true
      - # Declare a new pattern.
        # A pattern is a bundle of functions which can either change the game world or provide information about it.
        # Each function in a given pattern has "guards" which determine whether the function applies in a particular situation.
        Spec:slots:groups:with flow:
          - "define_pattern"
          - "story_statement"
          - "patterns"
          - Flow:uses:
              - "define"
              - - Term:name:type:
                    - "pattern"
                    - "pattern_name"
                    - "text_eval"
                - Term:type:repeats:
                    - "requires"
                    - "field_definition"
                    - true
                - Term:type:repeats:
                    - "provides"
                    - "field_definition"
                    - true
                - Term:name:type:optional:repeats:
                    - "do"
                    - "exe"
                    - "execute"
                    - true
                    - true


      - Spec:groups:with str:
          - "relation_cardinality"
          - "relations"
          - Str exclusively:uses:
              - true
              - - Option: "one_to_one"
                - Option: "one_to_many"
                - Option: "many_to_one"
                - Option: "many_to_many"
      - # Relate nouns to each other
        Spec:slots:with flow:
          - "define_relatives"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - Term:type:
                    - "nouns"
                    - "text_list_eval"
                - Term:name:type:
                    - "relative_to"
                    - "relation"
                    - "text_eval"
                - Term:type:
                    - "other_nouns"
                    - "text_list_eval"
      - # Relate nouns to each other
        Spec:slots:with flow:
          - "define_other_relatives"
          - "story_statement"
          - Flow:uses:
              - "define"
              - - Term:name:type:
                    - "relative_to"
                    - "relation"
                    - "text_eval"
                - Term:type:
                    - "nouns"
                    - "text_list_eval"
                - Term:type:
                    - "other_nouns"
                    - "text_list_eval"
      - # Used for displaying text to the player.
        # The text can contain 'inline-templates';
        # mini-commands that help to simplify printing text.
        # See also: https://github.com/ionous/iffy/wiki/Templates.
        # ( note: this is transformed for the runtime into an unnamed 'RenderResponse'. )
        Spec:slots:groups:with flow:
          - "say_template"
          - - "execute"
            - "text_eval"
          - "printing"
          - Flow:uses:
              - "say"
              - - Term:name:type:
                    - "_"
                    - "template"
                    - "lines"
      - # Generate text in a replaceable manner.
        # ( note: this is transformed for the runtime into a named 'RenderResponse'. )
        Spec:slots:groups:with flow:
          - "say_response"
          - - "execute"
            - "text_eval"
          - "printing"
          - Flow:uses:
              - "say"
              - - Term:name:type:
                    - "response"
                    - "name"
                    - "text"
                - Term:name:type:
                    - "with"
                    - "text"
                    - "text_eval"

      - # A guard which returns true based on a counter.
        # Counters start at zero and are incremented every time the guard gets checked.
        Spec:slots:groups:with flow:
          - "count_of"
          - "bool_eval"
          - "logic"
          - Flow phrase:uses:
              - "trigger {_$trigger} {$num}"
              - - Term:name:
                    - "_"
                    - "trigger"
                - Term:type:
                    - "num"
                    - "number_eval"
      - # A text string that, when called multiple times, returns each of its inputs in turn.
        Spec:slots:groups:with flow:
          - "cycle_text"
          - "text_eval"
          - "output"
          - Flow phrase:uses:
              - "cycle {_$parts}"
              - - Term:name:type:repeats:
                    - "_"
                    - "parts"
                    - "text_eval"
                    - true
      - # A text string that, when called multiple times, returns each of its parts in a randomized order.
        Spec:slots:groups:with flow:
          - "shuffle_text"
          - "text_eval"
          - "output"
          - Flow phrase:uses:
              - "shuffle {_$parts}"
              - - Term:name:type:repeats:
                    - "_"
                    - "parts"
                    - "text_eval"
                    - true
      - # When called multiple times returns each of its inputs in turn, sticking to the last one.
        Spec:slots:groups:with flow:
          - "stopping_text"
          - "text_eval"
          - "output"
          - Flow phrase:uses:
              - "stopping {_$parts}"
              - - Term:name:type:repeats:
                    - "_"
                    - "parts"
                    - "text_eval"
                    - true
      - # Fields are used to define the members of kinds, records, patterns, and so on.
        Spec:with slot:
          - "field_definition"
          - Slot:

      - # A field containing an aspect ( aka. a set of states. )
        # Aspects are defined using the {"Define state:names:"} command.
        Spec:slots:with flow:
          - "aspect_field"
          - "field_definition"
          - Flow:uses:
              - "aspect"
              - - # The name of an aspect.
                  # The field will have this same name.
                  Term:name:type:
                    - "_"
                    - "aspect"
                    - "text_eval"
      - # A field containing a boolean ( true/false ) value.
        Spec:slots:with flow:
          - "bool_field"
          - "field_definition"
          - Flow:phrase:uses:
              - "bool"
              - "a true/false value named {name$name} ( {$type} ) {$initially}"
              - - # The name of the field.
                  Term:name:type:
                  - "_"
                  - "name"
                  - "text_eval"
                - # An initial value for the field, true if not otherwise specified.
                  Term:type:optional:
                  - "initially"
                  - "bool_eval"
                  - true

      - Spec:slots:with flow:
          - "num_list_field"
          - "field_definition"
          - Flow:phrase:uses:
              - "num_list"
              - "a list of nums named {name$name} ( {$type} ) {$initially}"
              - - Term:name:type:
                    - "_"
                    - "name"
                    - "text_eval"
                - Term:name:type:optional:
                    - "kind"
                    - "type"
                    - "text_eval"
                    - true
                - Term:type:optional:
                    - "initially"
                    - "num_list_eval"
                    - true
      - Spec:slots:with flow:
          - "number_field"
          - "field_definition"
          - Flow:phrase:uses:
              - "number"
              - "a number named {name$name} ( {$type} ) {$initially}"
              - - Term:name:type:
                    - "_"
                    - "name"
                    - "text_eval"
                - Term:name:type:optional:
                    - "kind"
                    - "type"
                    - "text_eval"
                    - true
                - Term:type:optional:
                    - "initially"
                    - "number_eval"
                    - true
      - Spec:slots:with flow:
          - "record_list_field"
          - "field_definition"
          - Flow:phrase:uses:
              - "record_list"
              - "a list of records named {name$name} ( {$type} ) {$initially}"
              - - Term:name:type:
                    - "_"
                    - "name"
                    - "text_eval"
                - Term:name:type:optional:
                    - "kind"
                    - "type"
                    - "text_eval"
                    - true
                - Term:type:optional:
                    - "initially"
                    - "record_list_eval"
                    - true
      - Spec:slots:with flow:
          - "record_field"
          - "field_definition"
          - Flow:phrase:uses:
              - "record"
              - "a record named {name$name} ( {$type} ) {$initially}"
              - - Term:name:type:
                    - "_"
                    - "name"
                    - "text_eval"
                - Term:name:type:optional:
                    - "kind"
                    - "type"
                    - "text_eval"
                    - true
                - Term:type:optional:
                    - "initially"
                    - "record_eval"
                    - true

      - Spec:slots:with flow:
          - "text_list_field"
          - "field_definition"
          - Flow:phrase:uses:
              - "text_list"
              - "a list of text named {name$name} ( {$type} ) {$initially}"
              - - Term:name:type:
                    - "_"
                    - "name"
                    - "text_eval"
                - Term:name:type:optional:
                    - "kind"
                    - "type"
                    - "text_eval"
                    - true
                - Term:type:optional:
                    - "initially"
                    - "text_list_eval"
                    - true
      - Spec:slots:with flow:
          - "text_field"
          - "field_definition"
          - Flow:phrase:uses:
              - "text"
              - "some text named {name$name} ( {$type} ) {$initially}"
              - - Term:name:type:
                    - "_"
                    - "name"
                    - "text_eval"
                - Term:name:type:optional:
                    - "kind"
                    - "type"
                    - "text_eval"
                    - true
                - Term:type:optional:
                    - "initially"
                    - "text_eval"
                    - true
      - # A valueless field.
        # Intended mainly for patterns which don't need to return a value.
        Spec:slots:with flow:
          - "nothing_field"
          - "field_definition"
          - Flow:uses:
              - "nothing"
              - []
