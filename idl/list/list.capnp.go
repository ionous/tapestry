// Code generated by capnpc-go. DO NOT EDIT.

package list

import (
	core "git.sr.ht/~ionous/iffy/idl/core"
	rtx "git.sr.ht/~ionous/iffy/idl/rtx"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ListIterator struct{ capnp.Struct }

// ListIterator_TypeID is the unique identifier for the type ListIterator.
const ListIterator_TypeID = 0x94a33ae1ed170e72

func NewListIterator(s *capnp.Segment) (ListIterator, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListIterator{st}, err
}

func NewRootListIterator(s *capnp.Segment) (ListIterator, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListIterator{st}, err
}

func ReadRootListIterator(msg *capnp.Message) (ListIterator, error) {
	root, err := msg.RootPtr()
	return ListIterator{root.Struct()}, err
}

func (s ListIterator) String() string {
	str, _ := text.Marshal(0x94a33ae1ed170e72, s.Struct)
	return str
}

func (s ListIterator) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s ListIterator) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ListIterator) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ListIterator) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s ListIterator) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ListIterator_List is a list of ListIterator.
type ListIterator_List struct{ capnp.List }

// NewListIterator creates a new list of ListIterator.
func NewListIterator_List(s *capnp.Segment, sz int32) (ListIterator_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ListIterator_List{l}, err
}

func (s ListIterator_List) At(i int) ListIterator { return ListIterator{s.List.Struct(i)} }

func (s ListIterator_List) Set(i int, v ListIterator) error { return s.List.SetStruct(i, v.Struct) }

func (s ListIterator_List) String() string {
	str, _ := text.MarshalList(0x94a33ae1ed170e72, s.List)
	return str
}

// ListIterator_Promise is a wrapper for a ListIterator promised by a client call.
type ListIterator_Promise struct{ *capnp.Pipeline }

func (p ListIterator_Promise) Struct() (ListIterator, error) {
	s, err := p.Pipeline.Struct()
	return ListIterator{s}, err
}

func (p ListIterator_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type ListSource struct{ capnp.Struct }

// ListSource_TypeID is the unique identifier for the type ListSource.
const ListSource_TypeID = 0x920b6fb0d3d6ba59

func NewListSource(s *capnp.Segment) (ListSource, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListSource{st}, err
}

func NewRootListSource(s *capnp.Segment) (ListSource, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListSource{st}, err
}

func ReadRootListSource(msg *capnp.Message) (ListSource, error) {
	root, err := msg.RootPtr()
	return ListSource{root.Struct()}, err
}

func (s ListSource) String() string {
	str, _ := text.Marshal(0x920b6fb0d3d6ba59, s.Struct)
	return str
}

func (s ListSource) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s ListSource) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ListSource) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ListSource) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s ListSource) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ListSource_List is a list of ListSource.
type ListSource_List struct{ capnp.List }

// NewListSource creates a new list of ListSource.
func NewListSource_List(s *capnp.Segment, sz int32) (ListSource_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ListSource_List{l}, err
}

func (s ListSource_List) At(i int) ListSource { return ListSource{s.List.Struct(i)} }

func (s ListSource_List) Set(i int, v ListSource) error { return s.List.SetStruct(i, v.Struct) }

func (s ListSource_List) String() string {
	str, _ := text.MarshalList(0x920b6fb0d3d6ba59, s.List)
	return str
}

// ListSource_Promise is a wrapper for a ListSource promised by a client call.
type ListSource_Promise struct{ *capnp.Pipeline }

func (p ListSource_Promise) Struct() (ListSource, error) {
	s, err := p.Pipeline.Struct()
	return ListSource{s}, err
}

func (p ListSource_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type ListTarget struct{ capnp.Struct }

// ListTarget_TypeID is the unique identifier for the type ListTarget.
const ListTarget_TypeID = 0xea316244798b3323

func NewListTarget(s *capnp.Segment) (ListTarget, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListTarget{st}, err
}

func NewRootListTarget(s *capnp.Segment) (ListTarget, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListTarget{st}, err
}

func ReadRootListTarget(msg *capnp.Message) (ListTarget, error) {
	root, err := msg.RootPtr()
	return ListTarget{root.Struct()}, err
}

func (s ListTarget) String() string {
	str, _ := text.Marshal(0xea316244798b3323, s.Struct)
	return str
}

func (s ListTarget) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s ListTarget) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ListTarget) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ListTarget) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s ListTarget) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ListTarget_List is a list of ListTarget.
type ListTarget_List struct{ capnp.List }

// NewListTarget creates a new list of ListTarget.
func NewListTarget_List(s *capnp.Segment, sz int32) (ListTarget_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ListTarget_List{l}, err
}

func (s ListTarget_List) At(i int) ListTarget { return ListTarget{s.List.Struct(i)} }

func (s ListTarget_List) Set(i int, v ListTarget) error { return s.List.SetStruct(i, v.Struct) }

func (s ListTarget_List) String() string {
	str, _ := text.MarshalList(0xea316244798b3323, s.List)
	return str
}

// ListTarget_Promise is a wrapper for a ListTarget promised by a client call.
type ListTarget_Promise struct{ *capnp.Pipeline }

func (p ListTarget_Promise) Struct() (ListTarget, error) {
	s, err := p.Pipeline.Struct()
	return ListTarget{s}, err
}

func (p ListTarget_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type AsNum struct{ capnp.Struct }

// AsNum_TypeID is the unique identifier for the type AsNum.
const AsNum_TypeID = 0xa9c075e58ab7dee9

func NewAsNum(s *capnp.Segment) (AsNum, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AsNum{st}, err
}

func NewRootAsNum(s *capnp.Segment) (AsNum, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AsNum{st}, err
}

func ReadRootAsNum(msg *capnp.Message) (AsNum, error) {
	root, err := msg.RootPtr()
	return AsNum{root.Struct()}, err
}

func (s AsNum) String() string {
	str, _ := text.Marshal(0xa9c075e58ab7dee9, s.Struct)
	return str
}

func (s AsNum) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AsNum) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AsNum) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AsNum) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// AsNum_List is a list of AsNum.
type AsNum_List struct{ capnp.List }

// NewAsNum creates a new list of AsNum.
func NewAsNum_List(s *capnp.Segment, sz int32) (AsNum_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AsNum_List{l}, err
}

func (s AsNum_List) At(i int) AsNum { return AsNum{s.List.Struct(i)} }

func (s AsNum_List) Set(i int, v AsNum) error { return s.List.SetStruct(i, v.Struct) }

func (s AsNum_List) String() string {
	str, _ := text.MarshalList(0xa9c075e58ab7dee9, s.List)
	return str
}

// AsNum_Promise is a wrapper for a AsNum promised by a client call.
type AsNum_Promise struct{ *capnp.Pipeline }

func (p AsNum_Promise) Struct() (AsNum, error) {
	s, err := p.Pipeline.Struct()
	return AsNum{s}, err
}

type AsRec struct{ capnp.Struct }

// AsRec_TypeID is the unique identifier for the type AsRec.
const AsRec_TypeID = 0xc2e323d129a70545

func NewAsRec(s *capnp.Segment) (AsRec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AsRec{st}, err
}

func NewRootAsRec(s *capnp.Segment) (AsRec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AsRec{st}, err
}

func ReadRootAsRec(msg *capnp.Message) (AsRec, error) {
	root, err := msg.RootPtr()
	return AsRec{root.Struct()}, err
}

func (s AsRec) String() string {
	str, _ := text.Marshal(0xc2e323d129a70545, s.Struct)
	return str
}

func (s AsRec) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AsRec) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AsRec) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AsRec) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// AsRec_List is a list of AsRec.
type AsRec_List struct{ capnp.List }

// NewAsRec creates a new list of AsRec.
func NewAsRec_List(s *capnp.Segment, sz int32) (AsRec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AsRec_List{l}, err
}

func (s AsRec_List) At(i int) AsRec { return AsRec{s.List.Struct(i)} }

func (s AsRec_List) Set(i int, v AsRec) error { return s.List.SetStruct(i, v.Struct) }

func (s AsRec_List) String() string {
	str, _ := text.MarshalList(0xc2e323d129a70545, s.List)
	return str
}

// AsRec_Promise is a wrapper for a AsRec promised by a client call.
type AsRec_Promise struct{ *capnp.Pipeline }

func (p AsRec_Promise) Struct() (AsRec, error) {
	s, err := p.Pipeline.Struct()
	return AsRec{s}, err
}

type AsTxt struct{ capnp.Struct }

// AsTxt_TypeID is the unique identifier for the type AsTxt.
const AsTxt_TypeID = 0x9be19f82df424325

func NewAsTxt(s *capnp.Segment) (AsTxt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AsTxt{st}, err
}

func NewRootAsTxt(s *capnp.Segment) (AsTxt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AsTxt{st}, err
}

func ReadRootAsTxt(msg *capnp.Message) (AsTxt, error) {
	root, err := msg.RootPtr()
	return AsTxt{root.Struct()}, err
}

func (s AsTxt) String() string {
	str, _ := text.Marshal(0x9be19f82df424325, s.Struct)
	return str
}

func (s AsTxt) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AsTxt) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AsTxt) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AsTxt) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// AsTxt_List is a list of AsTxt.
type AsTxt_List struct{ capnp.List }

// NewAsTxt creates a new list of AsTxt.
func NewAsTxt_List(s *capnp.Segment, sz int32) (AsTxt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AsTxt_List{l}, err
}

func (s AsTxt_List) At(i int) AsTxt { return AsTxt{s.List.Struct(i)} }

func (s AsTxt_List) Set(i int, v AsTxt) error { return s.List.SetStruct(i, v.Struct) }

func (s AsTxt_List) String() string {
	str, _ := text.MarshalList(0x9be19f82df424325, s.List)
	return str
}

// AsTxt_Promise is a wrapper for a AsTxt promised by a client call.
type AsTxt_Promise struct{ *capnp.Pipeline }

func (p AsTxt_Promise) Struct() (AsTxt, error) {
	s, err := p.Pipeline.Struct()
	return AsTxt{s}, err
}

type At struct{ capnp.Struct }

// At_TypeID is the unique identifier for the type At.
const At_TypeID = 0xd8b71876434837d4

func NewAt(s *capnp.Segment) (At, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return At{st}, err
}

func NewRootAt(s *capnp.Segment) (At, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return At{st}, err
}

func ReadRootAt(msg *capnp.Message) (At, error) {
	root, err := msg.RootPtr()
	return At{root.Struct()}, err
}

func (s At) String() string {
	str, _ := text.Marshal(0xd8b71876434837d4, s.Struct)
	return str
}

func (s At) List() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s At) HasList() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s At) SetList(v rtx.Assignment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s At) NewList() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s At) Index() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s At) HasIndex() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s At) SetIndex(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewIndex sets the index field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s At) NewIndex() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// At_List is a list of At.
type At_List struct{ capnp.List }

// NewAt creates a new list of At.
func NewAt_List(s *capnp.Segment, sz int32) (At_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return At_List{l}, err
}

func (s At_List) At(i int) At { return At{s.List.Struct(i)} }

func (s At_List) Set(i int, v At) error { return s.List.SetStruct(i, v.Struct) }

func (s At_List) String() string {
	str, _ := text.MarshalList(0xd8b71876434837d4, s.List)
	return str
}

// At_Promise is a wrapper for a At promised by a client call.
type At_Promise struct{ *capnp.Pipeline }

func (p At_Promise) Struct() (At, error) {
	s, err := p.Pipeline.Struct()
	return At{s}, err
}

func (p At_Promise) List() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p At_Promise) Index() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Each struct{ capnp.Struct }

// Each_TypeID is the unique identifier for the type Each.
const Each_TypeID = 0xafa8f39cbdfaddd7

func NewEach(s *capnp.Segment) (Each, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Each{st}, err
}

func NewRootEach(s *capnp.Segment) (Each, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Each{st}, err
}

func ReadRootEach(msg *capnp.Message) (Each, error) {
	root, err := msg.RootPtr()
	return Each{root.Struct()}, err
}

func (s Each) String() string {
	str, _ := text.Marshal(0xafa8f39cbdfaddd7, s.Struct)
	return str
}

func (s Each) List() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Each) HasList() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Each) SetList(v rtx.Assignment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Each) NewList() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Each) As() (ListIterator, error) {
	p, err := s.Struct.Ptr(1)
	return ListIterator{Struct: p.Struct()}, err
}

func (s Each) HasAs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Each) SetAs(v ListIterator) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAs sets the as field to a newly
// allocated ListIterator struct, preferring placement in s's segment.
func (s Each) NewAs() (ListIterator, error) {
	ss, err := NewListIterator(s.Struct.Segment())
	if err != nil {
		return ListIterator{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Each) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Each) HasExe() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Each) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Each) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Each) Else() (core.Brancher, error) {
	p, err := s.Struct.Ptr(3)
	return core.Brancher{Struct: p.Struct()}, err
}

func (s Each) HasElse() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Each) SetElse(v core.Brancher) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewElse sets the else field to a newly
// allocated core.Brancher struct, preferring placement in s's segment.
func (s Each) NewElse() (core.Brancher, error) {
	ss, err := core.NewBrancher(s.Struct.Segment())
	if err != nil {
		return core.Brancher{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// Each_List is a list of Each.
type Each_List struct{ capnp.List }

// NewEach creates a new list of Each.
func NewEach_List(s *capnp.Segment, sz int32) (Each_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Each_List{l}, err
}

func (s Each_List) At(i int) Each { return Each{s.List.Struct(i)} }

func (s Each_List) Set(i int, v Each) error { return s.List.SetStruct(i, v.Struct) }

func (s Each_List) String() string {
	str, _ := text.MarshalList(0xafa8f39cbdfaddd7, s.List)
	return str
}

// Each_Promise is a wrapper for a Each promised by a client call.
type Each_Promise struct{ *capnp.Pipeline }

func (p Each_Promise) Struct() (Each, error) {
	s, err := p.Pipeline.Struct()
	return Each{s}, err
}

func (p Each_Promise) List() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Each_Promise) As() ListIterator_Promise {
	return ListIterator_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Each_Promise) Else() core.Brancher_Promise {
	return core.Brancher_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

type EraseEdge struct{ capnp.Struct }

// EraseEdge_TypeID is the unique identifier for the type EraseEdge.
const EraseEdge_TypeID = 0xe076dfb6d9de329c

func NewEraseEdge(s *capnp.Segment) (EraseEdge, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EraseEdge{st}, err
}

func NewRootEraseEdge(s *capnp.Segment) (EraseEdge, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EraseEdge{st}, err
}

func ReadRootEraseEdge(msg *capnp.Message) (EraseEdge, error) {
	root, err := msg.RootPtr()
	return EraseEdge{root.Struct()}, err
}

func (s EraseEdge) String() string {
	str, _ := text.Marshal(0xe076dfb6d9de329c, s.Struct)
	return str
}

func (s EraseEdge) From() (ListSource, error) {
	p, err := s.Struct.Ptr(0)
	return ListSource{Struct: p.Struct()}, err
}

func (s EraseEdge) HasFrom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s EraseEdge) SetFrom(v ListSource) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated ListSource struct, preferring placement in s's segment.
func (s EraseEdge) NewFrom() (ListSource, error) {
	ss, err := NewListSource(s.Struct.Segment())
	if err != nil {
		return ListSource{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s EraseEdge) AtEdge() bool {
	return s.Struct.Bit(0)
}

func (s EraseEdge) SetAtEdge(v bool) {
	s.Struct.SetBit(0, v)
}

// EraseEdge_List is a list of EraseEdge.
type EraseEdge_List struct{ capnp.List }

// NewEraseEdge creates a new list of EraseEdge.
func NewEraseEdge_List(s *capnp.Segment, sz int32) (EraseEdge_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return EraseEdge_List{l}, err
}

func (s EraseEdge_List) At(i int) EraseEdge { return EraseEdge{s.List.Struct(i)} }

func (s EraseEdge_List) Set(i int, v EraseEdge) error { return s.List.SetStruct(i, v.Struct) }

func (s EraseEdge_List) String() string {
	str, _ := text.MarshalList(0xe076dfb6d9de329c, s.List)
	return str
}

// EraseEdge_Promise is a wrapper for a EraseEdge promised by a client call.
type EraseEdge_Promise struct{ *capnp.Pipeline }

func (p EraseEdge_Promise) Struct() (EraseEdge, error) {
	s, err := p.Pipeline.Struct()
	return EraseEdge{s}, err
}

func (p EraseEdge_Promise) From() ListSource_Promise {
	return ListSource_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type EraseIndex struct{ capnp.Struct }

// EraseIndex_TypeID is the unique identifier for the type EraseIndex.
const EraseIndex_TypeID = 0xed289a2bfd4032a5

func NewEraseIndex(s *capnp.Segment) (EraseIndex, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return EraseIndex{st}, err
}

func NewRootEraseIndex(s *capnp.Segment) (EraseIndex, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return EraseIndex{st}, err
}

func ReadRootEraseIndex(msg *capnp.Message) (EraseIndex, error) {
	root, err := msg.RootPtr()
	return EraseIndex{root.Struct()}, err
}

func (s EraseIndex) String() string {
	str, _ := text.Marshal(0xed289a2bfd4032a5, s.Struct)
	return str
}

func (s EraseIndex) Count() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s EraseIndex) HasCount() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s EraseIndex) SetCount(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCount sets the count field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s EraseIndex) NewCount() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s EraseIndex) From() (ListSource, error) {
	p, err := s.Struct.Ptr(1)
	return ListSource{Struct: p.Struct()}, err
}

func (s EraseIndex) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s EraseIndex) SetFrom(v ListSource) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated ListSource struct, preferring placement in s's segment.
func (s EraseIndex) NewFrom() (ListSource, error) {
	ss, err := NewListSource(s.Struct.Segment())
	if err != nil {
		return ListSource{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s EraseIndex) AtIndex() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s EraseIndex) HasAtIndex() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s EraseIndex) SetAtIndex(v rtx.NumberEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewAtIndex sets the atIndex field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s EraseIndex) NewAtIndex() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// EraseIndex_List is a list of EraseIndex.
type EraseIndex_List struct{ capnp.List }

// NewEraseIndex creates a new list of EraseIndex.
func NewEraseIndex_List(s *capnp.Segment, sz int32) (EraseIndex_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return EraseIndex_List{l}, err
}

func (s EraseIndex_List) At(i int) EraseIndex { return EraseIndex{s.List.Struct(i)} }

func (s EraseIndex_List) Set(i int, v EraseIndex) error { return s.List.SetStruct(i, v.Struct) }

func (s EraseIndex_List) String() string {
	str, _ := text.MarshalList(0xed289a2bfd4032a5, s.List)
	return str
}

// EraseIndex_Promise is a wrapper for a EraseIndex promised by a client call.
type EraseIndex_Promise struct{ *capnp.Pipeline }

func (p EraseIndex_Promise) Struct() (EraseIndex, error) {
	s, err := p.Pipeline.Struct()
	return EraseIndex{s}, err
}

func (p EraseIndex_Promise) Count() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p EraseIndex_Promise) From() ListSource_Promise {
	return ListSource_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p EraseIndex_Promise) AtIndex() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Erasing struct{ capnp.Struct }

// Erasing_TypeID is the unique identifier for the type Erasing.
const Erasing_TypeID = 0xdcf77ae356cf97bd

func NewErasing(s *capnp.Segment) (Erasing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Erasing{st}, err
}

func NewRootErasing(s *capnp.Segment) (Erasing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Erasing{st}, err
}

func ReadRootErasing(msg *capnp.Message) (Erasing, error) {
	root, err := msg.RootPtr()
	return Erasing{root.Struct()}, err
}

func (s Erasing) String() string {
	str, _ := text.Marshal(0xdcf77ae356cf97bd, s.Struct)
	return str
}

func (s Erasing) Count() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Erasing) HasCount() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Erasing) SetCount(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCount sets the count field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Erasing) NewCount() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Erasing) From() (ListSource, error) {
	p, err := s.Struct.Ptr(1)
	return ListSource{Struct: p.Struct()}, err
}

func (s Erasing) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Erasing) SetFrom(v ListSource) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated ListSource struct, preferring placement in s's segment.
func (s Erasing) NewFrom() (ListSource, error) {
	ss, err := NewListSource(s.Struct.Segment())
	if err != nil {
		return ListSource{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Erasing) AtIndex() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Erasing) HasAtIndex() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Erasing) SetAtIndex(v rtx.NumberEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewAtIndex sets the atIndex field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Erasing) NewAtIndex() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Erasing) As() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Erasing) HasAs() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Erasing) AsBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Erasing) SetAs(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Erasing) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(4)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Erasing) HasExe() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Erasing) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Erasing) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// Erasing_List is a list of Erasing.
type Erasing_List struct{ capnp.List }

// NewErasing creates a new list of Erasing.
func NewErasing_List(s *capnp.Segment, sz int32) (Erasing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return Erasing_List{l}, err
}

func (s Erasing_List) At(i int) Erasing { return Erasing{s.List.Struct(i)} }

func (s Erasing_List) Set(i int, v Erasing) error { return s.List.SetStruct(i, v.Struct) }

func (s Erasing_List) String() string {
	str, _ := text.MarshalList(0xdcf77ae356cf97bd, s.List)
	return str
}

// Erasing_Promise is a wrapper for a Erasing promised by a client call.
type Erasing_Promise struct{ *capnp.Pipeline }

func (p Erasing_Promise) Struct() (Erasing, error) {
	s, err := p.Pipeline.Struct()
	return Erasing{s}, err
}

func (p Erasing_Promise) Count() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Erasing_Promise) From() ListSource_Promise {
	return ListSource_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Erasing_Promise) AtIndex() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type ErasingEdge struct{ capnp.Struct }

// ErasingEdge_TypeID is the unique identifier for the type ErasingEdge.
const ErasingEdge_TypeID = 0xc627fa3174a15108

func NewErasingEdge(s *capnp.Segment) (ErasingEdge, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return ErasingEdge{st}, err
}

func NewRootErasingEdge(s *capnp.Segment) (ErasingEdge, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return ErasingEdge{st}, err
}

func ReadRootErasingEdge(msg *capnp.Message) (ErasingEdge, error) {
	root, err := msg.RootPtr()
	return ErasingEdge{root.Struct()}, err
}

func (s ErasingEdge) String() string {
	str, _ := text.Marshal(0xc627fa3174a15108, s.Struct)
	return str
}

func (s ErasingEdge) From() (ListSource, error) {
	p, err := s.Struct.Ptr(0)
	return ListSource{Struct: p.Struct()}, err
}

func (s ErasingEdge) HasFrom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ErasingEdge) SetFrom(v ListSource) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated ListSource struct, preferring placement in s's segment.
func (s ErasingEdge) NewFrom() (ListSource, error) {
	ss, err := NewListSource(s.Struct.Segment())
	if err != nil {
		return ListSource{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ErasingEdge) AtEdge() bool {
	return s.Struct.Bit(0)
}

func (s ErasingEdge) SetAtEdge(v bool) {
	s.Struct.SetBit(0, v)
}

func (s ErasingEdge) As() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ErasingEdge) HasAs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ErasingEdge) AsBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ErasingEdge) SetAs(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ErasingEdge) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.Execute_List{List: p.List()}, err
}

func (s ErasingEdge) HasExe() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ErasingEdge) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s ErasingEdge) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s ErasingEdge) Else() (core.Brancher, error) {
	p, err := s.Struct.Ptr(3)
	return core.Brancher{Struct: p.Struct()}, err
}

func (s ErasingEdge) HasElse() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ErasingEdge) SetElse(v core.Brancher) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewElse sets the else field to a newly
// allocated core.Brancher struct, preferring placement in s's segment.
func (s ErasingEdge) NewElse() (core.Brancher, error) {
	ss, err := core.NewBrancher(s.Struct.Segment())
	if err != nil {
		return core.Brancher{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// ErasingEdge_List is a list of ErasingEdge.
type ErasingEdge_List struct{ capnp.List }

// NewErasingEdge creates a new list of ErasingEdge.
func NewErasingEdge_List(s *capnp.Segment, sz int32) (ErasingEdge_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return ErasingEdge_List{l}, err
}

func (s ErasingEdge_List) At(i int) ErasingEdge { return ErasingEdge{s.List.Struct(i)} }

func (s ErasingEdge_List) Set(i int, v ErasingEdge) error { return s.List.SetStruct(i, v.Struct) }

func (s ErasingEdge_List) String() string {
	str, _ := text.MarshalList(0xc627fa3174a15108, s.List)
	return str
}

// ErasingEdge_Promise is a wrapper for a ErasingEdge promised by a client call.
type ErasingEdge_Promise struct{ *capnp.Pipeline }

func (p ErasingEdge_Promise) Struct() (ErasingEdge, error) {
	s, err := p.Pipeline.Struct()
	return ErasingEdge{s}, err
}

func (p ErasingEdge_Promise) From() ListSource_Promise {
	return ListSource_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ErasingEdge_Promise) Else() core.Brancher_Promise {
	return core.Brancher_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

type Find struct{ capnp.Struct }

// Find_TypeID is the unique identifier for the type Find.
const Find_TypeID = 0xc4c862e39687c43a

func NewFind(s *capnp.Segment) (Find, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Find{st}, err
}

func NewRootFind(s *capnp.Segment) (Find, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Find{st}, err
}

func ReadRootFind(msg *capnp.Message) (Find, error) {
	root, err := msg.RootPtr()
	return Find{root.Struct()}, err
}

func (s Find) String() string {
	str, _ := text.Marshal(0xc4c862e39687c43a, s.Struct)
	return str
}

func (s Find) Value() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Find) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Find) SetValue(v rtx.Assignment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Find) NewValue() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Find) List() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Find) HasList() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Find) SetList(v rtx.Assignment) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Find) NewList() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Find_List is a list of Find.
type Find_List struct{ capnp.List }

// NewFind creates a new list of Find.
func NewFind_List(s *capnp.Segment, sz int32) (Find_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Find_List{l}, err
}

func (s Find_List) At(i int) Find { return Find{s.List.Struct(i)} }

func (s Find_List) Set(i int, v Find) error { return s.List.SetStruct(i, v.Struct) }

func (s Find_List) String() string {
	str, _ := text.MarshalList(0xc4c862e39687c43a, s.List)
	return str
}

// Find_Promise is a wrapper for a Find promised by a client call.
type Find_Promise struct{ *capnp.Pipeline }

func (p Find_Promise) Struct() (Find, error) {
	s, err := p.Pipeline.Struct()
	return Find{s}, err
}

func (p Find_Promise) Value() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Find_Promise) List() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type FromNumList struct{ capnp.Struct }

// FromNumList_TypeID is the unique identifier for the type FromNumList.
const FromNumList_TypeID = 0xd1112ff6296f8357

func NewFromNumList(s *capnp.Segment) (FromNumList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromNumList{st}, err
}

func NewRootFromNumList(s *capnp.Segment) (FromNumList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromNumList{st}, err
}

func ReadRootFromNumList(msg *capnp.Message) (FromNumList, error) {
	root, err := msg.RootPtr()
	return FromNumList{root.Struct()}, err
}

func (s FromNumList) String() string {
	str, _ := text.Marshal(0xd1112ff6296f8357, s.Struct)
	return str
}

func (s FromNumList) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FromNumList) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromNumList) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FromNumList) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// FromNumList_List is a list of FromNumList.
type FromNumList_List struct{ capnp.List }

// NewFromNumList creates a new list of FromNumList.
func NewFromNumList_List(s *capnp.Segment, sz int32) (FromNumList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromNumList_List{l}, err
}

func (s FromNumList_List) At(i int) FromNumList { return FromNumList{s.List.Struct(i)} }

func (s FromNumList_List) Set(i int, v FromNumList) error { return s.List.SetStruct(i, v.Struct) }

func (s FromNumList_List) String() string {
	str, _ := text.MarshalList(0xd1112ff6296f8357, s.List)
	return str
}

// FromNumList_Promise is a wrapper for a FromNumList promised by a client call.
type FromNumList_Promise struct{ *capnp.Pipeline }

func (p FromNumList_Promise) Struct() (FromNumList, error) {
	s, err := p.Pipeline.Struct()
	return FromNumList{s}, err
}

type FromRecList struct{ capnp.Struct }

// FromRecList_TypeID is the unique identifier for the type FromRecList.
const FromRecList_TypeID = 0xffcd68625c75605e

func NewFromRecList(s *capnp.Segment) (FromRecList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromRecList{st}, err
}

func NewRootFromRecList(s *capnp.Segment) (FromRecList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromRecList{st}, err
}

func ReadRootFromRecList(msg *capnp.Message) (FromRecList, error) {
	root, err := msg.RootPtr()
	return FromRecList{root.Struct()}, err
}

func (s FromRecList) String() string {
	str, _ := text.Marshal(0xffcd68625c75605e, s.Struct)
	return str
}

func (s FromRecList) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FromRecList) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromRecList) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FromRecList) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// FromRecList_List is a list of FromRecList.
type FromRecList_List struct{ capnp.List }

// NewFromRecList creates a new list of FromRecList.
func NewFromRecList_List(s *capnp.Segment, sz int32) (FromRecList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromRecList_List{l}, err
}

func (s FromRecList_List) At(i int) FromRecList { return FromRecList{s.List.Struct(i)} }

func (s FromRecList_List) Set(i int, v FromRecList) error { return s.List.SetStruct(i, v.Struct) }

func (s FromRecList_List) String() string {
	str, _ := text.MarshalList(0xffcd68625c75605e, s.List)
	return str
}

// FromRecList_Promise is a wrapper for a FromRecList promised by a client call.
type FromRecList_Promise struct{ *capnp.Pipeline }

func (p FromRecList_Promise) Struct() (FromRecList, error) {
	s, err := p.Pipeline.Struct()
	return FromRecList{s}, err
}

type FromTxtList struct{ capnp.Struct }

// FromTxtList_TypeID is the unique identifier for the type FromTxtList.
const FromTxtList_TypeID = 0x9675eecce49e8336

func NewFromTxtList(s *capnp.Segment) (FromTxtList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromTxtList{st}, err
}

func NewRootFromTxtList(s *capnp.Segment) (FromTxtList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromTxtList{st}, err
}

func ReadRootFromTxtList(msg *capnp.Message) (FromTxtList, error) {
	root, err := msg.RootPtr()
	return FromTxtList{root.Struct()}, err
}

func (s FromTxtList) String() string {
	str, _ := text.Marshal(0x9675eecce49e8336, s.Struct)
	return str
}

func (s FromTxtList) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FromTxtList) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromTxtList) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FromTxtList) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// FromTxtList_List is a list of FromTxtList.
type FromTxtList_List struct{ capnp.List }

// NewFromTxtList creates a new list of FromTxtList.
func NewFromTxtList_List(s *capnp.Segment, sz int32) (FromTxtList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromTxtList_List{l}, err
}

func (s FromTxtList_List) At(i int) FromTxtList { return FromTxtList{s.List.Struct(i)} }

func (s FromTxtList_List) Set(i int, v FromTxtList) error { return s.List.SetStruct(i, v.Struct) }

func (s FromTxtList_List) String() string {
	str, _ := text.MarshalList(0x9675eecce49e8336, s.List)
	return str
}

// FromTxtList_Promise is a wrapper for a FromTxtList promised by a client call.
type FromTxtList_Promise struct{ *capnp.Pipeline }

func (p FromTxtList_Promise) Struct() (FromTxtList, error) {
	s, err := p.Pipeline.Struct()
	return FromTxtList{s}, err
}

type Gather struct{ capnp.Struct }

// Gather_TypeID is the unique identifier for the type Gather.
const Gather_TypeID = 0xb14b973f5159f7d3

func NewGather(s *capnp.Segment) (Gather, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Gather{st}, err
}

func NewRootGather(s *capnp.Segment) (Gather, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Gather{st}, err
}

func ReadRootGather(msg *capnp.Message) (Gather, error) {
	root, err := msg.RootPtr()
	return Gather{root.Struct()}, err
}

func (s Gather) String() string {
	str, _ := text.Marshal(0xb14b973f5159f7d3, s.Struct)
	return str
}

func (s Gather) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Gather) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Gather) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Gather) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Gather) From() (ListSource, error) {
	p, err := s.Struct.Ptr(1)
	return ListSource{Struct: p.Struct()}, err
}

func (s Gather) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Gather) SetFrom(v ListSource) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated ListSource struct, preferring placement in s's segment.
func (s Gather) NewFrom() (ListSource, error) {
	ss, err := NewListSource(s.Struct.Segment())
	if err != nil {
		return ListSource{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Gather) Using() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Gather) HasUsing() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Gather) UsingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Gather) SetUsing(v string) error {
	return s.Struct.SetText(2, v)
}

// Gather_List is a list of Gather.
type Gather_List struct{ capnp.List }

// NewGather creates a new list of Gather.
func NewGather_List(s *capnp.Segment, sz int32) (Gather_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Gather_List{l}, err
}

func (s Gather_List) At(i int) Gather { return Gather{s.List.Struct(i)} }

func (s Gather_List) Set(i int, v Gather) error { return s.List.SetStruct(i, v.Struct) }

func (s Gather_List) String() string {
	str, _ := text.MarshalList(0xb14b973f5159f7d3, s.List)
	return str
}

// Gather_Promise is a wrapper for a Gather promised by a client call.
type Gather_Promise struct{ *capnp.Pipeline }

func (p Gather_Promise) Struct() (Gather, error) {
	s, err := p.Pipeline.Struct()
	return Gather{s}, err
}

func (p Gather_Promise) From() ListSource_Promise {
	return ListSource_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type IntoNumList struct{ capnp.Struct }

// IntoNumList_TypeID is the unique identifier for the type IntoNumList.
const IntoNumList_TypeID = 0xbf903cb59bc2c286

func NewIntoNumList(s *capnp.Segment) (IntoNumList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoNumList{st}, err
}

func NewRootIntoNumList(s *capnp.Segment) (IntoNumList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoNumList{st}, err
}

func ReadRootIntoNumList(msg *capnp.Message) (IntoNumList, error) {
	root, err := msg.RootPtr()
	return IntoNumList{root.Struct()}, err
}

func (s IntoNumList) String() string {
	str, _ := text.Marshal(0xbf903cb59bc2c286, s.Struct)
	return str
}

func (s IntoNumList) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IntoNumList) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IntoNumList) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IntoNumList) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// IntoNumList_List is a list of IntoNumList.
type IntoNumList_List struct{ capnp.List }

// NewIntoNumList creates a new list of IntoNumList.
func NewIntoNumList_List(s *capnp.Segment, sz int32) (IntoNumList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IntoNumList_List{l}, err
}

func (s IntoNumList_List) At(i int) IntoNumList { return IntoNumList{s.List.Struct(i)} }

func (s IntoNumList_List) Set(i int, v IntoNumList) error { return s.List.SetStruct(i, v.Struct) }

func (s IntoNumList_List) String() string {
	str, _ := text.MarshalList(0xbf903cb59bc2c286, s.List)
	return str
}

// IntoNumList_Promise is a wrapper for a IntoNumList promised by a client call.
type IntoNumList_Promise struct{ *capnp.Pipeline }

func (p IntoNumList_Promise) Struct() (IntoNumList, error) {
	s, err := p.Pipeline.Struct()
	return IntoNumList{s}, err
}

type IntoRecList struct{ capnp.Struct }

// IntoRecList_TypeID is the unique identifier for the type IntoRecList.
const IntoRecList_TypeID = 0xe42d5e00dee19ed8

func NewIntoRecList(s *capnp.Segment) (IntoRecList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoRecList{st}, err
}

func NewRootIntoRecList(s *capnp.Segment) (IntoRecList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoRecList{st}, err
}

func ReadRootIntoRecList(msg *capnp.Message) (IntoRecList, error) {
	root, err := msg.RootPtr()
	return IntoRecList{root.Struct()}, err
}

func (s IntoRecList) String() string {
	str, _ := text.Marshal(0xe42d5e00dee19ed8, s.Struct)
	return str
}

func (s IntoRecList) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IntoRecList) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IntoRecList) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IntoRecList) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// IntoRecList_List is a list of IntoRecList.
type IntoRecList_List struct{ capnp.List }

// NewIntoRecList creates a new list of IntoRecList.
func NewIntoRecList_List(s *capnp.Segment, sz int32) (IntoRecList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IntoRecList_List{l}, err
}

func (s IntoRecList_List) At(i int) IntoRecList { return IntoRecList{s.List.Struct(i)} }

func (s IntoRecList_List) Set(i int, v IntoRecList) error { return s.List.SetStruct(i, v.Struct) }

func (s IntoRecList_List) String() string {
	str, _ := text.MarshalList(0xe42d5e00dee19ed8, s.List)
	return str
}

// IntoRecList_Promise is a wrapper for a IntoRecList promised by a client call.
type IntoRecList_Promise struct{ *capnp.Pipeline }

func (p IntoRecList_Promise) Struct() (IntoRecList, error) {
	s, err := p.Pipeline.Struct()
	return IntoRecList{s}, err
}

type IntoTxtList struct{ capnp.Struct }

// IntoTxtList_TypeID is the unique identifier for the type IntoTxtList.
const IntoTxtList_TypeID = 0x8d264ff9f62e6625

func NewIntoTxtList(s *capnp.Segment) (IntoTxtList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoTxtList{st}, err
}

func NewRootIntoTxtList(s *capnp.Segment) (IntoTxtList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoTxtList{st}, err
}

func ReadRootIntoTxtList(msg *capnp.Message) (IntoTxtList, error) {
	root, err := msg.RootPtr()
	return IntoTxtList{root.Struct()}, err
}

func (s IntoTxtList) String() string {
	str, _ := text.Marshal(0x8d264ff9f62e6625, s.Struct)
	return str
}

func (s IntoTxtList) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IntoTxtList) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IntoTxtList) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IntoTxtList) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// IntoTxtList_List is a list of IntoTxtList.
type IntoTxtList_List struct{ capnp.List }

// NewIntoTxtList creates a new list of IntoTxtList.
func NewIntoTxtList_List(s *capnp.Segment, sz int32) (IntoTxtList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IntoTxtList_List{l}, err
}

func (s IntoTxtList_List) At(i int) IntoTxtList { return IntoTxtList{s.List.Struct(i)} }

func (s IntoTxtList_List) Set(i int, v IntoTxtList) error { return s.List.SetStruct(i, v.Struct) }

func (s IntoTxtList_List) String() string {
	str, _ := text.MarshalList(0x8d264ff9f62e6625, s.List)
	return str
}

// IntoTxtList_Promise is a wrapper for a IntoTxtList promised by a client call.
type IntoTxtList_Promise struct{ *capnp.Pipeline }

func (p IntoTxtList_Promise) Struct() (IntoTxtList, error) {
	s, err := p.Pipeline.Struct()
	return IntoTxtList{s}, err
}

type Len struct{ capnp.Struct }

// Len_TypeID is the unique identifier for the type Len.
const Len_TypeID = 0xfa2c87242cdc41ad

func NewLen(s *capnp.Segment) (Len, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Len{st}, err
}

func NewRootLen(s *capnp.Segment) (Len, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Len{st}, err
}

func ReadRootLen(msg *capnp.Message) (Len, error) {
	root, err := msg.RootPtr()
	return Len{root.Struct()}, err
}

func (s Len) String() string {
	str, _ := text.Marshal(0xfa2c87242cdc41ad, s.Struct)
	return str
}

func (s Len) List() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Len) HasList() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Len) SetList(v rtx.Assignment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Len) NewList() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Len_List is a list of Len.
type Len_List struct{ capnp.List }

// NewLen creates a new list of Len.
func NewLen_List(s *capnp.Segment, sz int32) (Len_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Len_List{l}, err
}

func (s Len_List) At(i int) Len { return Len{s.List.Struct(i)} }

func (s Len_List) Set(i int, v Len) error { return s.List.SetStruct(i, v.Struct) }

func (s Len_List) String() string {
	str, _ := text.MarshalList(0xfa2c87242cdc41ad, s.List)
	return str
}

// Len_Promise is a wrapper for a Len promised by a client call.
type Len_Promise struct{ *capnp.Pipeline }

func (p Len_Promise) Struct() (Len, error) {
	s, err := p.Pipeline.Struct()
	return Len{s}, err
}

func (p Len_Promise) List() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Map struct{ capnp.Struct }

// Map_TypeID is the unique identifier for the type Map.
const Map_TypeID = 0x9c7f8c8f56f92e5f

func NewMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Map{st}, err
}

func NewRootMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Map{st}, err
}

func ReadRootMap(msg *capnp.Message) (Map, error) {
	root, err := msg.RootPtr()
	return Map{root.Struct()}, err
}

func (s Map) String() string {
	str, _ := text.Marshal(0x9c7f8c8f56f92e5f, s.Struct)
	return str
}

func (s Map) ToList() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Map) HasToList() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Map) ToListBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Map) SetToList(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Map) FromList() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Map) HasFromList() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Map) SetFromList(v rtx.Assignment) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFromList sets the fromList field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Map) NewFromList() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Map) UsingPattern() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Map) HasUsingPattern() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Map) UsingPatternBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Map) SetUsingPattern(v string) error {
	return s.Struct.SetText(2, v)
}

// Map_List is a list of Map.
type Map_List struct{ capnp.List }

// NewMap creates a new list of Map.
func NewMap_List(s *capnp.Segment, sz int32) (Map_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Map_List{l}, err
}

func (s Map_List) At(i int) Map { return Map{s.List.Struct(i)} }

func (s Map_List) Set(i int, v Map) error { return s.List.SetStruct(i, v.Struct) }

func (s Map_List) String() string {
	str, _ := text.MarshalList(0x9c7f8c8f56f92e5f, s.List)
	return str
}

// Map_Promise is a wrapper for a Map promised by a client call.
type Map_Promise struct{ *capnp.Pipeline }

func (p Map_Promise) Struct() (Map, error) {
	s, err := p.Pipeline.Struct()
	return Map{s}, err
}

func (p Map_Promise) FromList() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type PutEdge struct{ capnp.Struct }

// PutEdge_TypeID is the unique identifier for the type PutEdge.
const PutEdge_TypeID = 0xc274e3f927e5e6d2

func NewPutEdge(s *capnp.Segment) (PutEdge, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutEdge{st}, err
}

func NewRootPutEdge(s *capnp.Segment) (PutEdge, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PutEdge{st}, err
}

func ReadRootPutEdge(msg *capnp.Message) (PutEdge, error) {
	root, err := msg.RootPtr()
	return PutEdge{root.Struct()}, err
}

func (s PutEdge) String() string {
	str, _ := text.Marshal(0xc274e3f927e5e6d2, s.Struct)
	return str
}

func (s PutEdge) From() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s PutEdge) HasFrom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PutEdge) SetFrom(v rtx.Assignment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s PutEdge) NewFrom() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutEdge) Into() (ListTarget, error) {
	p, err := s.Struct.Ptr(1)
	return ListTarget{Struct: p.Struct()}, err
}

func (s PutEdge) HasInto() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PutEdge) SetInto(v ListTarget) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewInto sets the into field to a newly
// allocated ListTarget struct, preferring placement in s's segment.
func (s PutEdge) NewInto() (ListTarget, error) {
	ss, err := NewListTarget(s.Struct.Segment())
	if err != nil {
		return ListTarget{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s PutEdge) AtEdge() bool {
	return s.Struct.Bit(0)
}

func (s PutEdge) SetAtEdge(v bool) {
	s.Struct.SetBit(0, v)
}

// PutEdge_List is a list of PutEdge.
type PutEdge_List struct{ capnp.List }

// NewPutEdge creates a new list of PutEdge.
func NewPutEdge_List(s *capnp.Segment, sz int32) (PutEdge_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return PutEdge_List{l}, err
}

func (s PutEdge_List) At(i int) PutEdge { return PutEdge{s.List.Struct(i)} }

func (s PutEdge_List) Set(i int, v PutEdge) error { return s.List.SetStruct(i, v.Struct) }

func (s PutEdge_List) String() string {
	str, _ := text.MarshalList(0xc274e3f927e5e6d2, s.List)
	return str
}

// PutEdge_Promise is a wrapper for a PutEdge promised by a client call.
type PutEdge_Promise struct{ *capnp.Pipeline }

func (p PutEdge_Promise) Struct() (PutEdge, error) {
	s, err := p.Pipeline.Struct()
	return PutEdge{s}, err
}

func (p PutEdge_Promise) From() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PutEdge_Promise) Into() ListTarget_Promise {
	return ListTarget_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type PutIndex struct{ capnp.Struct }

// PutIndex_TypeID is the unique identifier for the type PutIndex.
const PutIndex_TypeID = 0xab0370d79846043c

func NewPutIndex(s *capnp.Segment) (PutIndex, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PutIndex{st}, err
}

func NewRootPutIndex(s *capnp.Segment) (PutIndex, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PutIndex{st}, err
}

func ReadRootPutIndex(msg *capnp.Message) (PutIndex, error) {
	root, err := msg.RootPtr()
	return PutIndex{root.Struct()}, err
}

func (s PutIndex) String() string {
	str, _ := text.Marshal(0xab0370d79846043c, s.Struct)
	return str
}

func (s PutIndex) From() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s PutIndex) HasFrom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PutIndex) SetFrom(v rtx.Assignment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s PutIndex) NewFrom() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutIndex) Into() (ListTarget, error) {
	p, err := s.Struct.Ptr(1)
	return ListTarget{Struct: p.Struct()}, err
}

func (s PutIndex) HasInto() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PutIndex) SetInto(v ListTarget) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewInto sets the into field to a newly
// allocated ListTarget struct, preferring placement in s's segment.
func (s PutIndex) NewInto() (ListTarget, error) {
	ss, err := NewListTarget(s.Struct.Segment())
	if err != nil {
		return ListTarget{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s PutIndex) AtIndex() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s PutIndex) HasAtIndex() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PutIndex) SetAtIndex(v rtx.NumberEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewAtIndex sets the atIndex field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s PutIndex) NewAtIndex() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// PutIndex_List is a list of PutIndex.
type PutIndex_List struct{ capnp.List }

// NewPutIndex creates a new list of PutIndex.
func NewPutIndex_List(s *capnp.Segment, sz int32) (PutIndex_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return PutIndex_List{l}, err
}

func (s PutIndex_List) At(i int) PutIndex { return PutIndex{s.List.Struct(i)} }

func (s PutIndex_List) Set(i int, v PutIndex) error { return s.List.SetStruct(i, v.Struct) }

func (s PutIndex_List) String() string {
	str, _ := text.MarshalList(0xab0370d79846043c, s.List)
	return str
}

// PutIndex_Promise is a wrapper for a PutIndex promised by a client call.
type PutIndex_Promise struct{ *capnp.Pipeline }

func (p PutIndex_Promise) Struct() (PutIndex, error) {
	s, err := p.Pipeline.Struct()
	return PutIndex{s}, err
}

func (p PutIndex_Promise) From() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PutIndex_Promise) Into() ListTarget_Promise {
	return ListTarget_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p PutIndex_Promise) AtIndex() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Range struct{ capnp.Struct }

// Range_TypeID is the unique identifier for the type Range.
const Range_TypeID = 0xb6886dbaca4bbb15

func NewRange(s *capnp.Segment) (Range, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Range{st}, err
}

func NewRootRange(s *capnp.Segment) (Range, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Range{st}, err
}

func ReadRootRange(msg *capnp.Message) (Range, error) {
	root, err := msg.RootPtr()
	return Range{root.Struct()}, err
}

func (s Range) String() string {
	str, _ := text.Marshal(0xb6886dbaca4bbb15, s.Struct)
	return str
}

func (s Range) To() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Range) HasTo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Range) SetTo(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTo sets the to field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Range) NewTo() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Range) From() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Range) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Range) SetFrom(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Range) NewFrom() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Range) ByStep() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Range) HasByStep() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Range) SetByStep(v rtx.NumberEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewByStep sets the byStep field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Range) NewByStep() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Range_List is a list of Range.
type Range_List struct{ capnp.List }

// NewRange creates a new list of Range.
func NewRange_List(s *capnp.Segment, sz int32) (Range_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Range_List{l}, err
}

func (s Range_List) At(i int) Range { return Range{s.List.Struct(i)} }

func (s Range_List) Set(i int, v Range) error { return s.List.SetStruct(i, v.Struct) }

func (s Range_List) String() string {
	str, _ := text.MarshalList(0xb6886dbaca4bbb15, s.List)
	return str
}

// Range_Promise is a wrapper for a Range promised by a client call.
type Range_Promise struct{ *capnp.Pipeline }

func (p Range_Promise) Struct() (Range, error) {
	s, err := p.Pipeline.Struct()
	return Range{s}, err
}

func (p Range_Promise) To() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Range_Promise) From() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Range_Promise) ByStep() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Reduce struct{ capnp.Struct }

// Reduce_TypeID is the unique identifier for the type Reduce.
const Reduce_TypeID = 0xeba40f132bf775ec

func NewReduce(s *capnp.Segment) (Reduce, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Reduce{st}, err
}

func NewRootReduce(s *capnp.Segment) (Reduce, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Reduce{st}, err
}

func ReadRootReduce(msg *capnp.Message) (Reduce, error) {
	root, err := msg.RootPtr()
	return Reduce{root.Struct()}, err
}

func (s Reduce) String() string {
	str, _ := text.Marshal(0xeba40f132bf775ec, s.Struct)
	return str
}

func (s Reduce) IntoValue() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Reduce) HasIntoValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Reduce) IntoValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Reduce) SetIntoValue(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Reduce) FromList() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Reduce) HasFromList() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Reduce) SetFromList(v rtx.Assignment) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFromList sets the fromList field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Reduce) NewFromList() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Reduce) UsingPattern() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Reduce) HasUsingPattern() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Reduce) UsingPatternBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Reduce) SetUsingPattern(v string) error {
	return s.Struct.SetText(2, v)
}

// Reduce_List is a list of Reduce.
type Reduce_List struct{ capnp.List }

// NewReduce creates a new list of Reduce.
func NewReduce_List(s *capnp.Segment, sz int32) (Reduce_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Reduce_List{l}, err
}

func (s Reduce_List) At(i int) Reduce { return Reduce{s.List.Struct(i)} }

func (s Reduce_List) Set(i int, v Reduce) error { return s.List.SetStruct(i, v.Struct) }

func (s Reduce_List) String() string {
	str, _ := text.MarshalList(0xeba40f132bf775ec, s.List)
	return str
}

// Reduce_Promise is a wrapper for a Reduce promised by a client call.
type Reduce_Promise struct{ *capnp.Pipeline }

func (p Reduce_Promise) Struct() (Reduce, error) {
	s, err := p.Pipeline.Struct()
	return Reduce{s}, err
}

func (p Reduce_Promise) FromList() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ReverseList struct{ capnp.Struct }

// ReverseList_TypeID is the unique identifier for the type ReverseList.
const ReverseList_TypeID = 0xee059fd550bb720d

func NewReverseList(s *capnp.Segment) (ReverseList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ReverseList{st}, err
}

func NewRootReverseList(s *capnp.Segment) (ReverseList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ReverseList{st}, err
}

func ReadRootReverseList(msg *capnp.Message) (ReverseList, error) {
	root, err := msg.RootPtr()
	return ReverseList{root.Struct()}, err
}

func (s ReverseList) String() string {
	str, _ := text.Marshal(0xee059fd550bb720d, s.Struct)
	return str
}

func (s ReverseList) List() (ListSource, error) {
	p, err := s.Struct.Ptr(0)
	return ListSource{Struct: p.Struct()}, err
}

func (s ReverseList) HasList() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ReverseList) SetList(v ListSource) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated ListSource struct, preferring placement in s's segment.
func (s ReverseList) NewList() (ListSource, error) {
	ss, err := NewListSource(s.Struct.Segment())
	if err != nil {
		return ListSource{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ReverseList_List is a list of ReverseList.
type ReverseList_List struct{ capnp.List }

// NewReverseList creates a new list of ReverseList.
func NewReverseList_List(s *capnp.Segment, sz int32) (ReverseList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ReverseList_List{l}, err
}

func (s ReverseList_List) At(i int) ReverseList { return ReverseList{s.List.Struct(i)} }

func (s ReverseList_List) Set(i int, v ReverseList) error { return s.List.SetStruct(i, v.Struct) }

func (s ReverseList_List) String() string {
	str, _ := text.MarshalList(0xee059fd550bb720d, s.List)
	return str
}

// ReverseList_Promise is a wrapper for a ReverseList promised by a client call.
type ReverseList_Promise struct{ *capnp.Pipeline }

func (p ReverseList_Promise) Struct() (ReverseList, error) {
	s, err := p.Pipeline.Struct()
	return ReverseList{s}, err
}

func (p ReverseList_Promise) List() ListSource_Promise {
	return ListSource_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Set struct{ capnp.Struct }

// Set_TypeID is the unique identifier for the type Set.
const Set_TypeID = 0xd3ab44ed8b654fe7

func NewSet(s *capnp.Segment) (Set, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Set{st}, err
}

func NewRootSet(s *capnp.Segment) (Set, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Set{st}, err
}

func ReadRootSet(msg *capnp.Message) (Set, error) {
	root, err := msg.RootPtr()
	return Set{root.Struct()}, err
}

func (s Set) String() string {
	str, _ := text.Marshal(0xd3ab44ed8b654fe7, s.Struct)
	return str
}

func (s Set) List() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Set) HasList() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Set) ListBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Set) SetList(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Set) Index() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Set) HasIndex() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Set) SetIndex(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewIndex sets the index field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Set) NewIndex() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Set) From() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Set) HasFrom() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Set) SetFrom(v rtx.Assignment) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Set) NewFrom() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Set_List is a list of Set.
type Set_List struct{ capnp.List }

// NewSet creates a new list of Set.
func NewSet_List(s *capnp.Segment, sz int32) (Set_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Set_List{l}, err
}

func (s Set_List) At(i int) Set { return Set{s.List.Struct(i)} }

func (s Set_List) Set(i int, v Set) error { return s.List.SetStruct(i, v.Struct) }

func (s Set_List) String() string {
	str, _ := text.MarshalList(0xd3ab44ed8b654fe7, s.List)
	return str
}

// Set_Promise is a wrapper for a Set promised by a client call.
type Set_Promise struct{ *capnp.Pipeline }

func (p Set_Promise) Struct() (Set, error) {
	s, err := p.Pipeline.Struct()
	return Set{s}, err
}

func (p Set_Promise) Index() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Set_Promise) From() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Slice struct{ capnp.Struct }

// Slice_TypeID is the unique identifier for the type Slice.
const Slice_TypeID = 0xa726a566a5add7c2

func NewSlice(s *capnp.Segment) (Slice, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Slice{st}, err
}

func NewRootSlice(s *capnp.Segment) (Slice, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Slice{st}, err
}

func ReadRootSlice(msg *capnp.Message) (Slice, error) {
	root, err := msg.RootPtr()
	return Slice{root.Struct()}, err
}

func (s Slice) String() string {
	str, _ := text.Marshal(0xa726a566a5add7c2, s.Struct)
	return str
}

func (s Slice) List() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Slice) HasList() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Slice) SetList(v rtx.Assignment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewList sets the list field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Slice) NewList() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Slice) Start() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Slice) HasStart() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Slice) SetStart(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewStart sets the start field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Slice) NewStart() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Slice) End() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Slice) HasEnd() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Slice) SetEnd(v rtx.NumberEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewEnd sets the end field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Slice) NewEnd() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Slice_List is a list of Slice.
type Slice_List struct{ capnp.List }

// NewSlice creates a new list of Slice.
func NewSlice_List(s *capnp.Segment, sz int32) (Slice_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Slice_List{l}, err
}

func (s Slice_List) At(i int) Slice { return Slice{s.List.Struct(i)} }

func (s Slice_List) Set(i int, v Slice) error { return s.List.SetStruct(i, v.Struct) }

func (s Slice_List) String() string {
	str, _ := text.MarshalList(0xa726a566a5add7c2, s.List)
	return str
}

// Slice_Promise is a wrapper for a Slice promised by a client call.
type Slice_Promise struct{ *capnp.Pipeline }

func (p Slice_Promise) Struct() (Slice, error) {
	s, err := p.Pipeline.Struct()
	return Slice{s}, err
}

func (p Slice_Promise) List() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Slice_Promise) Start() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Slice_Promise) End() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type SortByField struct{ capnp.Struct }

// SortByField_TypeID is the unique identifier for the type SortByField.
const SortByField_TypeID = 0xca933e3b7506d9d7

func NewSortByField(s *capnp.Segment) (SortByField, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SortByField{st}, err
}

func NewRootSortByField(s *capnp.Segment) (SortByField, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SortByField{st}, err
}

func ReadRootSortByField(msg *capnp.Message) (SortByField, error) {
	root, err := msg.RootPtr()
	return SortByField{root.Struct()}, err
}

func (s SortByField) String() string {
	str, _ := text.Marshal(0xca933e3b7506d9d7, s.Struct)
	return str
}

func (s SortByField) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SortByField) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SortByField) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SortByField) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// SortByField_List is a list of SortByField.
type SortByField_List struct{ capnp.List }

// NewSortByField creates a new list of SortByField.
func NewSortByField_List(s *capnp.Segment, sz int32) (SortByField_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SortByField_List{l}, err
}

func (s SortByField_List) At(i int) SortByField { return SortByField{s.List.Struct(i)} }

func (s SortByField_List) Set(i int, v SortByField) error { return s.List.SetStruct(i, v.Struct) }

func (s SortByField_List) String() string {
	str, _ := text.MarshalList(0xca933e3b7506d9d7, s.List)
	return str
}

// SortByField_Promise is a wrapper for a SortByField promised by a client call.
type SortByField_Promise struct{ *capnp.Pipeline }

func (p SortByField_Promise) Struct() (SortByField, error) {
	s, err := p.Pipeline.Struct()
	return SortByField{s}, err
}

type SortNumbers struct{ capnp.Struct }

// SortNumbers_TypeID is the unique identifier for the type SortNumbers.
const SortNumbers_TypeID = 0xada1b79f1ea676ba

func NewSortNumbers(s *capnp.Segment) (SortNumbers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SortNumbers{st}, err
}

func NewRootSortNumbers(s *capnp.Segment) (SortNumbers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SortNumbers{st}, err
}

func ReadRootSortNumbers(msg *capnp.Message) (SortNumbers, error) {
	root, err := msg.RootPtr()
	return SortNumbers{root.Struct()}, err
}

func (s SortNumbers) String() string {
	str, _ := text.Marshal(0xada1b79f1ea676ba, s.Struct)
	return str
}

func (s SortNumbers) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SortNumbers) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SortNumbers) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SortNumbers) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SortNumbers) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SortNumbers) HasName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SortNumbers) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SortNumbers) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s SortNumbers) Order() bool {
	return s.Struct.Bit(0)
}

func (s SortNumbers) SetOrder(v bool) {
	s.Struct.SetBit(0, v)
}

// SortNumbers_List is a list of SortNumbers.
type SortNumbers_List struct{ capnp.List }

// NewSortNumbers creates a new list of SortNumbers.
func NewSortNumbers_List(s *capnp.Segment, sz int32) (SortNumbers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SortNumbers_List{l}, err
}

func (s SortNumbers_List) At(i int) SortNumbers { return SortNumbers{s.List.Struct(i)} }

func (s SortNumbers_List) Set(i int, v SortNumbers) error { return s.List.SetStruct(i, v.Struct) }

func (s SortNumbers_List) String() string {
	str, _ := text.MarshalList(0xada1b79f1ea676ba, s.List)
	return str
}

// SortNumbers_Promise is a wrapper for a SortNumbers promised by a client call.
type SortNumbers_Promise struct{ *capnp.Pipeline }

func (p SortNumbers_Promise) Struct() (SortNumbers, error) {
	s, err := p.Pipeline.Struct()
	return SortNumbers{s}, err
}

type SortRecords struct{ capnp.Struct }

// SortRecords_TypeID is the unique identifier for the type SortRecords.
const SortRecords_TypeID = 0x902a7a1a52883237

func NewSortRecords(s *capnp.Segment) (SortRecords, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SortRecords{st}, err
}

func NewRootSortRecords(s *capnp.Segment) (SortRecords, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SortRecords{st}, err
}

func ReadRootSortRecords(msg *capnp.Message) (SortRecords, error) {
	root, err := msg.RootPtr()
	return SortRecords{root.Struct()}, err
}

func (s SortRecords) String() string {
	str, _ := text.Marshal(0x902a7a1a52883237, s.Struct)
	return str
}

func (s SortRecords) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SortRecords) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SortRecords) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SortRecords) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SortRecords) Using() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SortRecords) HasUsing() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SortRecords) UsingBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SortRecords) SetUsing(v string) error {
	return s.Struct.SetText(1, v)
}

// SortRecords_List is a list of SortRecords.
type SortRecords_List struct{ capnp.List }

// NewSortRecords creates a new list of SortRecords.
func NewSortRecords_List(s *capnp.Segment, sz int32) (SortRecords_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SortRecords_List{l}, err
}

func (s SortRecords_List) At(i int) SortRecords { return SortRecords{s.List.Struct(i)} }

func (s SortRecords_List) Set(i int, v SortRecords) error { return s.List.SetStruct(i, v.Struct) }

func (s SortRecords_List) String() string {
	str, _ := text.MarshalList(0x902a7a1a52883237, s.List)
	return str
}

// SortRecords_Promise is a wrapper for a SortRecords promised by a client call.
type SortRecords_Promise struct{ *capnp.Pipeline }

func (p SortRecords_Promise) Struct() (SortRecords, error) {
	s, err := p.Pipeline.Struct()
	return SortRecords{s}, err
}

type SortText struct{ capnp.Struct }

// SortText_TypeID is the unique identifier for the type SortText.
const SortText_TypeID = 0xfe18d5de6de8b035

func NewSortText(s *capnp.Segment) (SortText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SortText{st}, err
}

func NewRootSortText(s *capnp.Segment) (SortText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SortText{st}, err
}

func ReadRootSortText(msg *capnp.Message) (SortText, error) {
	root, err := msg.RootPtr()
	return SortText{root.Struct()}, err
}

func (s SortText) String() string {
	str, _ := text.Marshal(0xfe18d5de6de8b035, s.Struct)
	return str
}

func (s SortText) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SortText) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SortText) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SortText) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SortText) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SortText) HasName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SortText) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SortText) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s SortText) Order() bool {
	return s.Struct.Bit(0)
}

func (s SortText) SetOrder(v bool) {
	s.Struct.SetBit(0, v)
}

func (s SortText) Case() bool {
	return s.Struct.Bit(1)
}

func (s SortText) SetCase(v bool) {
	s.Struct.SetBit(1, v)
}

// SortText_List is a list of SortText.
type SortText_List struct{ capnp.List }

// NewSortText creates a new list of SortText.
func NewSortText_List(s *capnp.Segment, sz int32) (SortText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SortText_List{l}, err
}

func (s SortText_List) At(i int) SortText { return SortText{s.List.Struct(i)} }

func (s SortText_List) Set(i int, v SortText) error { return s.List.SetStruct(i, v.Struct) }

func (s SortText_List) String() string {
	str, _ := text.MarshalList(0xfe18d5de6de8b035, s.List)
	return str
}

// SortText_Promise is a wrapper for a SortText promised by a client call.
type SortText_Promise struct{ *capnp.Pipeline }

func (p SortText_Promise) Struct() (SortText, error) {
	s, err := p.Pipeline.Struct()
	return SortText{s}, err
}

type Splice struct{ capnp.Struct }

// Splice_TypeID is the unique identifier for the type Splice.
const Splice_TypeID = 0xadfb041117d1486f

func NewSplice(s *capnp.Segment) (Splice, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Splice{st}, err
}

func NewRootSplice(s *capnp.Segment) (Splice, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Splice{st}, err
}

func ReadRootSplice(msg *capnp.Message) (Splice, error) {
	root, err := msg.RootPtr()
	return Splice{root.Struct()}, err
}

func (s Splice) String() string {
	str, _ := text.Marshal(0xadfb041117d1486f, s.Struct)
	return str
}

func (s Splice) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Splice) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Splice) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Splice) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Splice) Start() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Splice) HasStart() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Splice) SetStart(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewStart sets the start field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Splice) NewStart() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Splice) Remove() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s Splice) HasRemove() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Splice) SetRemove(v rtx.NumberEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewRemove sets the remove field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s Splice) NewRemove() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Splice) Insert() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(3)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Splice) HasInsert() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Splice) SetInsert(v rtx.Assignment) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewInsert sets the insert field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Splice) NewInsert() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// Splice_List is a list of Splice.
type Splice_List struct{ capnp.List }

// NewSplice creates a new list of Splice.
func NewSplice_List(s *capnp.Segment, sz int32) (Splice_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Splice_List{l}, err
}

func (s Splice_List) At(i int) Splice { return Splice{s.List.Struct(i)} }

func (s Splice_List) Set(i int, v Splice) error { return s.List.SetStruct(i, v.Struct) }

func (s Splice_List) String() string {
	str, _ := text.MarshalList(0xadfb041117d1486f, s.List)
	return str
}

// Splice_Promise is a wrapper for a Splice promised by a client call.
type Splice_Promise struct{ *capnp.Pipeline }

func (p Splice_Promise) Struct() (Splice, error) {
	s, err := p.Pipeline.Struct()
	return Splice{s}, err
}

func (p Splice_Promise) Start() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Splice_Promise) Remove() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p Splice_Promise) Insert() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

const schema_dd255566d23c0cf0 = "x\xda\xdcZ}p\x1c\xc5\x95\x9f\x9e\x91<\xf2YB" +
	"\x1eZ\xc4\x96pn\xda\xc2\x96\xac\xb5\xa4\xb3D\xee\x94" +
	"Z\xa8\xac%[\x80\x8c\xc5z$\x99\x9cSI|\xad" +
	"\xdd^ir\xbb3\xeb\x99^}\xb8B\xf9\x0c\xd4\x05" +
	"L|\x07\x0eI0\x1f\x01\x938\xc4\x17\\\x89\xa9#" +
	"\x04\xe5\xa8\xbbs\x91;L\x91J\x0c\xf8\xc0U\xb1\x89" +
	"\xcf89\x8e\x98\x83\xca\x15\x94}1s\xd5=\xb3\xb3" +
	"\xe3\xd5\xacdI\x16\xc7\xa5J\x7f\xec\xae^\xbf~\xef" +
	"\xf5\xfb\xf8\xbd\xd7\xbd\xa6\xa2j\xad\xd8V\xfe\xcc\"A" +
	"\xd0\xee*_\xe0\xacL\xb5\xbe\x7f.\xde\xb0[P\x16" +
	"\x01\xe7\xdd\xca\xeb_Nm^yB(\x07\xb2 \xc0" +
	"\x7f.\x9f\x80G\xcaex\xa4<\x0e\xdb\x16\xc4\x04\xe0" +
	"t\xb4\xdf\xd5W\xb7=ro\x11\xb5\xc8\xa8\xc7\x17L" +
	"\xc0\x9d\x0bd\xb8sA\x1c*\xf2\xa8\x00\x9c-\x13\xff" +
	"\xf6\xca\x0f\xcdE{\xc2x\x1f\x97\x9f\x82\xa7d\xf6\xe9" +
	"\x84\xcc8[W,9{*\xfa\xed\xfb\xc3h/\xc8" +
	"\x87ay\x05\xfb\x04*\x18\xed\x9f\xdd\xf1\xad7_z" +
	"'\xf7\x8d0\xda\xe5\x15\x13\xb0\xa9B\x86M\x15qx" +
	"\x1f\xa7^\xb9\xae\xeb\x8d\xdb\x1f=\xf5P\xa8\x14\x15\xbb" +
	"\xe0\xa9\x0a\x19\x9e\xaa\x88Cm!\xa3\xde\xdaz\xee\xd6" +
	"\xbf\xfd\xea\x8e\x87\x8b\xa8%F\xbdw\xe1v\xf8\xc8B" +
	"\x19>\xb20\x0e{\xff\xe8\x07\x02p\x0e\xbfvp\x7f" +
	"j\x7f\xc3\x13a\xd4[\x16\xed\x82x\x91\x0c\xf1\xa28" +
	"<\xbe\x88Q\xbfu\xf2\x99]gr\xfft L\x92" +
	"\xf7*w\xc1s\x952<W\x19\x87z\x15\x93\xe4\xfa" +
	"\xb2\x1b\x1ex-+}?\x8c\xf7\xa1\xaa\xc7\xe1\xb3U" +
	"2|\xb6*\x0e[\xae`\xbc'F\xbe\xfb\xc7\x8f>" +
	"\xb3\xef\xa0\xa0-\x02\x93\x8eF\xa9\x9e\x80\xb5\xd52\xac" +
	"\xad\xee\x80[\xaa\x19\xb9y\xd3\xd1%J\xd9\xff\x1c," +
	"b^\xc6\xa8\xf1\xe2=P_,C}q\x1c\xfeT" +
	"\xf9\x8d\x00\x9c\xd7N\x9c\x7f\xee\xe1\xdf}\xef\x07a\xd4" +
	"-\xf0v\xd8\x06e\xd8\x06\xe3\xf09\xc8\xa8_\xf9`" +
	"\x8b\x16\xfb\xe6\xcd\x87\xc2\x04\xef\xbdj\x0f\xdc|\x95\x0c" +
	"7_\x15\x87\x9f\xfc\x04\x93\xe4\xaa\x9f\xdc\xfc\xe2D\xe6" +
	"\xae\x1f\x85Qw/\xd9\x05{\x97\xc8\xb0wI\x1c>" +
	"\xbb\x84Q\xff\xf5\xe1\xc3\x0f=}\xfd\xbd\xff\x18f\xc2" +
	"\xa3K'\xe0\xf1\xa52<\xbe4\x0e\xbbk\x99\x09_" +
	"\xfe\xf5\x99\xc6s\xa7\xe9\xe1P\xa3\xec\xae}\x10~\xbd" +
	"V\x86_\xaf\x8d\xc3\x0b\xb5\x8cyw\xf9\x13MG\xaf" +
	"9}8\x8c\xf9\x89\xba]\xf0L\x9d\x0c\xcf\xd4\xc5\xe1" +
	"\xe6\xab\x19\xf3\xe8\xf3_\xf9\xc6\xe9\xc1\x17\x9e\x0f\x8b\x85" +
	"G\xae\xbe\x1d\xee\xbbZ\x86\xfb\xae\x8eCe\x19\x8b\x85" +
	"\x0am\x1fm;\xdf\xf8/\xc5\xa2p\x1b\xde\xb7l\x02" +
	"\xee]&\xc3\xbd\xcb\xe2\xd7v\x7fR\x05\xcc\xe4\xc7\x17" +
	"\xe4\xae\xfb\xcc\xd7^\x0c\x93EQ'`\xad*\xc3Z" +
	"\xb5\x03nQ\x99,\x9f\xbd\xc3lz\xffO\x94\xa3a" +
	"\xd4\x8f\xa8\x13p\xbf*\xc3\xfdj\x1cV!F\xfd\x9b" +
	"8\xb9\xe7\xec\xfa\xef\xbf\x12f\xf2\xcdh;\xdc\x82d" +
	"\xb8\x05\xc5\xe1\x11\xc4\xac\xf2j\xc7M\xebF\x96>\xf3" +
	"z\x98\x9e\x07\x96[\xf0\xe0r\x19\x1e\\\x1e\x87M\xf5" +
	"L\xcf\xe7\xbe\xf9\xf3[Oo\xff\xe0\x97E\xd4\xe5\x9c" +
	"\xba\xfeAx\xa8^\x86\x87\xea\xe3\xd7~\xe1\x1a\xae\xe6" +
	"\xc3\xed'\x8f\xff\xe8\x8d\x91_\x15\x9b\xc5\xd5s\xe5\xdf" +
	"\xc1\xda\x952\xac]\x19\x87w\xaf\x1c\x15\xc0\x7f\xbd\xfe" +
	"\xadS'\xbf\xd8\xf2f\x88\x96\x0b\x1b&\xa0\xd2 C" +
	"\xa5!\x0eok`Z^s\xed=\xe3\xeb\x07\xdb\xfe" +
	"3\xcc&?mx\x0a\xfe\xac\x81}:\xc2i\x7f\x9b" +
	"\xfb`5\xac\xfe\xce\xdba\x16y\xaba\x0f|\xafA" +
	"\x86\xef5\xc4\xe1\xa1Ff\x91\xfd\xedk/\xac~p" +
	"\xd5\xd90\xea3\xab\x9e\x82gW\xc9\xf0\xec\xaa8\xfc" +
	"B\x13\xa3\xae\xb2~\xb2\xe9\xd8\xa3\xe5\xef\x84\xc9\xd1\x19" +
	"\x99\x80=\x11\x19\xf6D\xe2\xf0P\x84Ir\xb0\xf3\x97" +
	"\xcd+\xbe\xd2|>\xd4\xc1#\xdb\xe1\xb1\x88\x0c\x8fE" +
	"\xe2\xb0g5\xa3\xfe\xd3\x1f\xfeG\xe6\xe4\xb1\xa5\x1f\x86" +
	":\xb8\xbe\xfaq\xb8m\xb5\x0c\xb7\xad\x8eC\xd0\xcc\"" +
	"\xf3\x8b\x7f\x91\xfb\xfc\xe0\xf0\xcf\x9c0\xe6z\xcb\x04\xdc" +
	"\xd6\"\xc3m-qx\xbc\x851O\xeb6mM\xe0" +
	",0\xb2\xd1\x1e\x83\x9a\x03\xb11\xbaQ\xb7\xe9&\x00" +
	"\xb4J :\xff\xda\xfb\xea\xc1'\xcd\x9a\xdd\x82\xb6L" +
	"\x04\x9d\xab\x80\xf3\xdd\xf3\xef\xffZ\xbe\x7f\xf4\xa4\xa0\xad" +
	"\x10A\xe7\x1a\xe0\xbc\xfd\x8b\xa6\xcc=O\xd4\x7fM\xd0" +
	"\x9aE\xd0\xb9\x16\x80JAP@\xa4z`\x8c\xda\x82" +
	"\x90\xff\x96\xd1\xedD\xfe\xdb\x843\x80\xad!Bm\x04" +
	"0b\x02 3\x96B\x94\x8cQA\xd0\xca\xa42A" +
	"(\x03\x82\xa0T\xd5+U\xaa\xb6F\x02\xda\xf5\"\x90" +
	"mjie@t\xf0\xba\xe3\x8f~\xf6\xdbG\xfeF" +
	"\xd0\xcaD\xd0Y\xe3m\xb7\xc1\x19\xc1\x96\x8e\x07\xd3D" +
	"\x10\xd8O\"\xa8,R\xae\xdf\xb4h_\x8c$L+" +
	"i\xcfV\xb9a_9\xc6\xad\xa0\x1c\xdb\xc7\xfd\xd6\x06" +
	"\xea%\xa7\x8f`\xcb\xc2\xc6\xd0\"\x82\xe80A$M" +
	"2\xc4\xa06\xd2\x0d\xfe\xdd\xc0\x19\x92t\xf5\x1e\x1cG" +
	"9[7\x86\xf8\xefIb\xebC\x06\xa6$\x89\xb2\x98" +
	"Rb\x19\x88\x9a\x88\x12\x9b\xa2,\xd6-\x1b\x99)\x8f" +
	"\x97L\xedVA\xd0*|S5\xd5+M\xaa\xb6Q" +
	"\x02\xda\x9f\x8b@\x01\xa0\x06\xb0_7\xb7+\x9b;\xb4" +
	"\xfb%\xa0=6;\x03\xaa\\8\xad\xe2\"S-\x16" +
	"A\xe72\x10`\xb3T\x04\x9d+<6\xed\xee\x92\xbc" +
	"i\xbavx\x9a\xf0\x1f&\x1f\x0a\xf3\xb4~\xd5\xccY" +
	"\x09\xc2\xce$p\xf6\x11\xae\x1f\xd0jDPMFp" +
	"\x1a\\)\x88\xe0\xca\xc0r\xd1[\xdeC\x89\x85\xa9i" +
	"\x093e\xc0\xf6\xbf\xc123\x1f\x85\xc7?\xeel\xb6" +
	"\x89\x8d0J\x03\xee\xee)D\xe5\xf9u\xf7N{\x80" +
	"\xf1\x9f\xadR7y\x1b\xd5\xcb\x9c\xcdd\x9d\xda@=" +
	"p\xd6\x93\x94n\x10D%\xcf\xab\x99b\x98\x072r" +
	"\xe5\x93\xd3\xa4u\x9e\x94\x14bF6\xda\x8b\xb3\xb3\xd5" +
	"\xf0._\xc3^\x9c\x0d\x0f\xe5\xf6rg\xc0\xc2\x86\x9d" +
	"2-\x98\xe1!:\x82\xd39b\xa3\x94ef\x90i" +
	"\x107\x88\xb1\x91D\xd94N\xb8\xd1n\x11;\x97v" +
	"\x83\x1d\x1b&\x1d&\x16\xa7jE\x03\xe1!\xae\xdb(" +
	"\x81\xd3i\x92D\xa3:\x1dF\x04'\x86\xddm\xdc]" +
	"\x18\xcbF\xfe\x89qil\xe6\xdb\xba\xff\xc7\x14a\xa4" +
	"R=\xc3m\\\xe9\xdb\xb8;*\x08\xdaZ\x09h\x1b" +
	"\x03\xb9\xa0g\x83\xd2\xabjY\x09h_\x16\x81\"\x8a" +
	"5@\x14\x04e\xfcK\xcam\x1d\xda?H@{A" +
	"\x041j\xb28\xf0-\xcdv\xdd\xc8\xcd!\xf0S*" +
	"X8xJ}\x9cnkZ\xb7\x05\xc0,\xb7\xd8y" +
	"be\xf3\xfa\xcf\xbf\xf3\xfb\xfb\xd8\xa9-\x16\x80\xc33" +
	"\xc2&L\x85j\xa6\xf0<f\x93\xfe\xb4\x9e \xb3\xf7" +
	"\xf9M\xfe\xae\x1e\xa30\x9f\xd8\x03\x9cu\x16\xc1\x94 " +
	"\\\x8e\x0c2\xea\xba\x00? \x8cl\x92\xa0\xbai\xf0" +
	"0\x08\x9c=(:\x9fH\xd8\xf9\xb4+=\x1d\xda\x9d" +
	"\x12\xd0\xee\x0d\x9c\xcf\xeezew\x87\xf6\x82\x04\xb4W" +
	"E\xc0\xe5\x98l_\xd5\xa6\xd8\xa2\xdc\xac\x8d/=\xf4" +
	"\xd2\xdb\x1d_\xbe\xc35\xebR\x100A\x8d\x08:\x11" +
	"\x10\xa4\xbc\x8a|\x11?.%\xb7\xf5\x8d\x937?\xbe" +
	"\xc7c'\x13#93f\xf5lI\x18\xab\xa2\x84t" +
	"K.s9\x12\x12g\x13\x96\x90\xdaK%$#\x97" +
	"\x19$\x16OI*K'\xad\xf3\x98w7\xe5h\x8f" +
	"!'\xc9\xd8l\x15\xdd\xe8+\xba)W\"\xf3n\x00" +
	"N\x1fq3NY!\x1d\xb0\x84\xe3z#O$\x9e" +
	"\x03\x0a`Z\xcf\x8b(=\xaa6,\x01\x8d\x06<o" +
	"[\x97\xb2M\xcdc\x87j\xe6\xdf\x93=\xafZ7\xa8" +
	"\x19\x92\x1a\x16\xfb\x15\x91\x11p\xcf\xf0q\xba\xbbr\x07" +
	"\xa6=F\x92\x8cM\x91W68\x98n\xd5\x19\x11_" +
	"3\xa5o14vK\x8c\x9f2\xc7v\xa1)\xa6`" +
	"\xf7`\x8a\x09\x87rA\x9b\xd5+\xdd\x05\xf3\xe4\x8d\xb6" +
	"-\xc2\xccs\xaf\x04\xb4\x87E\x00<\x9b\xedmW\xf6" +
	"\xaa\xda\x8f%\xa0=?;O\xaaf>;\x85A\xeb" +
	"\xa4\xc1\xf1B\xeeSM+I\xac)\xc8\xdb]\x0a\xb6" +
	"\x81 \x02Pl\xb4lZO\x002K?]\xf7)" +
	"\xe0\xed\x12\x8dqN%\xf2\xe5\x8b\xd5N\xaf\x99\xd4S" +
	"\xe3\x08\x7f\xc6\xc7\xbc8\x99d\xa0\x97\x15N\x8bd\xcc" +
	"\x11\xf6%\x8f\x92[\xd1-&%Q^\xf8\xe8x\x96" +
	"\x87\xf0E(z\x90\xf0\xb5\xc9$I\xa2L\xce\xa6(" +
	"\x83ibx\x12\xbdWt\x19\x16I`\x83\xa2A\xe2" +
	"\xad\xa1f>N\xcc\x94\x97\x1a\xec\xe6\xfc\x87\xa9h\x19" +
	"\xaeiE=.{\x9e?\x99 \xdcEY\x157\xc8" +
	"\x10\xa6\xfa\x08iF:\x0b\xc1t\x1a\x0d\x92!\x0e\xf9" +
	"1\x93\xd1\x18/\xa8\xe0Wvb$\xf3\xf2\xb2\x96a" +
	"\x9c\xb3\xe7\x85\xdeFib\x0c\xd1a\xb4\xba\xb0\x1d\xdb" +
	"%Ml\x9b\xb14\xd0\x9a\xe2\x8d8WW\x9c5\xbe" +
	"\x9c\xdc\xbe\x04%\xcc\x9c\xc1\xd7gt\x9b\x95T\xbe\xd6" +
	"\xfd\x9f\x8dp:\x1d\"\x9b\xbb%\xeb@\\A\xafC" +
	"z\x8a\xad\xd2m\xb4\x06\x99V@_\xc3,,\xc7V" +
	"~\xcfd\xab\x00\xb4\xc5~\x1c\xe1z\x05\xab~\x81\xcb" +
	"\xc7\xd1\xeeve\xb7\xaa=)\x01\xed\xc7\x81\xe4\xf3t" +
	"TyZ\xd5^\x95\x80\xf6+\x11(\x92T\x03$A" +
	"PND\x95\x13\xaa\xf6{\x09\xf4W\x80Y\xf63n" +
	"\xa9\x9c*bJ\xd6\xc5\x98\xab\xd5\x14\x8b\xa3\x1eI\xe8" +
	"j\xdd\xb0\xc9\x94[G=\x92P\x08\x15\x8c\xdbn\x9c" +
	"\x18.QF\x9b\x83Q\xbbJ\x04\x9d\x9f\x0aF\xed\x1a" +
	"\x11t&}\xd4\xd6G\xb2\x04S\xdd\x10\xc0P\x09\xa4" +
	"#:\x1bM3k#sd!\xb1B;\xd9,\xb6" +
	"m\xaf\x95mf.a\xe5\x0c\xdbE\xac$m\x93F" +
	"\x84\x13T\x1f\xd1\xe98\xf3\x1c\x92\xc9\xd2q\x8e\x84\x02" +
	">\x11a>\xf1W\x12\xd0\xbe\x1a\xf0\x89\xbb\xeb\x94\xbb" +
	"U\xed{\x12\xd0\xfe>\xe0\x13\x87\xea\x95C\xaa\xf6\x0b" +
	"\x09h\xbf\x0d\xf8\xc4[\x11\xe5\xad\x8e\xfe\x15@\x02\xfd" +
	"k\x80\x07\x91\xa642NX\xa6m\x87\x19Y\xc2\xf6" +
	"\x94\xa9\x17\xbb\xab\xfc\x19v\x1e.\x8dM\x9d\xb1\x93\xac" +
	"\x00^!\x80M\x12\xabb\xc9\xdf\xa5\x87\xd5\xd6\x0f\xdf" +
	"c\xab\xaf\x10@5\xb3\xd3\xcc\xd0V\x84\xaf\xe1\xa2\xdc" +
	"|\xfa\x01\xfb\xd6\xe5w\xfc<\xccKn\xc4t\x98\x00" +
	"k\xb6(\xe41\xdf`\x9c\x91\x15\xee\"\xbb\x16\xf8\x0d" +
	"R\xed\xe4\x06\x09\x07\x1a\x1fw\xe6\x91\xefy\xf8\xec\xc7" +
	"\xebzL#AP\xca\xb4\x82\x9d\x8f\xe7^\xee\xf2\x1e" +
	"\xca\xe8/j\x92\xe8\xa8\x89\xb2\xd8\xc2\x19B\x89eG" +
	"Q\xa3n4\"l\x876O\xaes\xb2R\xd3h\xe6" +
	"('s\x05\xb5\xf2\xee\xeb\xa5\xb8!\xaeh\xeb\xc5\x80" +
	"i\xfa\xe2\xef;(\xab\xfe\x1d\xda\xeb\x12\xd0\xde\x9ce" +
	"\xf5g2O\x09\xa7\x18\x01?y\xff\xd2\xc5k\x01\xe6" +
	"{N\xd3\x87\x8d\xa19tV\xeb\xfd]=F\xbeB" +
	"is4\xff\xed\xbcs#1\x88\x85)\x11m\xdeK" +
	"Y:\xb1\xdd\x1a\x1d\xe3\xb5\xb9\xa8\x8b\xaa+\x81eC" +
	"\xba\xa8h\xa0\x8b\x92\xa899=\xbb\xa6\x9fa\x1c\xfa" +
	"\xa7Q\x9c\xeb\x07\xc7\xfb)\xc9\xce\x8c]\xd7\x8e\xc1\xf1" +
	"\xad6%\xd9i\x1b\xa9\x1e\x83\x9a\x0c\xec\xceef\xb5" +
	"\xdew\xa9[r\x99\x123\xab\x97\xfd)\xadX\x8c\x97" +
	"\x80=\xbf\x1dTwR\x1a\"s\x9d\xc7\x95l\xa0\x14" +
	"\xf0\x94\xd3\x99L\"\x8cF0`\xb9\x82\xa1<\x15M" +
	"F\xfe\xd3vKy\xe0\xbf-\x1aH\x08\x97\xbdY\x8a" +
	"a\xda\x9d\x1c\x9a\xaa\xcat\xed\xc0t+I\xf2\xc8\x0a" +
	"\x83\xfa\x9dv\x1fI\\\x8e\xde\x9b\xb3\x99Q\xefm\xf1" +
	"\x89\xfbG\xd3{\xdf\xa0\x1b\xc99+\x19\xa9\xe6l\xc2" +
	"g\xfb\xc0\xe9'\xd8J\x0c#,y\x83\x1f\xd3b\xb9" +
	"*K\x12zJO\xb0\xda#\xe7H\xd1l\xbe]\x10" +
	"\xb4\x15\x12`\xf8\xcbw\xa3\x96\x88\xd2\xe2\x0f\xecU^" +
	"\xb2B\\f\x1a4\xe3\x0b7\x0d`\xb4\xb0\xad\xc7\x8c" +
	"!\xe6D\xb3\xb5\xce\x9d\xbe\xa7qnF\x09\xcc\xf8\xef" +
	"e\x0e\xfb?A\xa6q\xa5\x0f\x17\x0b\xb58e\x99\x06" +
	"e@q\x10'\xfe\xd2\xf5\x0f\xb7\xc6\xf71\xe0\x88\x8d" +
	"\x02`tG\x18\xae\x8d\x13\xa6A\xb1n\xe4\xafI\x08" +
	"\xdb \xe9!\x8d\xeb\xfc\x1a\xcf:7\xd6\xb8q\x9c\xc9" +
	"\x00\xa7a\xd2a\xb6f\x94\x01\x03\x0b\xdb2\xebH\x04" +
	"\xad\xc6?\x98\xdbX|\x8fI@\xbbS\x04\xf9s\xd9" +
	"\x19Uv\xaa\xdac\x12\xd0\x9ed\x05\x04\xb8\xf1}\xa0" +
	"N9\xa0\xe6\x0b\x88\"\x89.\xf6<Z\xaf\x1cU\xb5" +
	"w%\xd0_\x09D\xa0\x94I5\xa0L\x10\xe0B\x10" +
	"\x81\x0bAG\xffz\x06J7\x81BB(*\xda\xb3" +
	"\x0a\xebK\x02\xa9^l|\\\xa1i\xbfi\xd1\xae\xd8" +
	"\xf8\x0d:I'g8\xad\xe9\xda\xd1\xe5\xae\x9b4\xb0" +
	"\x09\xde\xfc\xb0\x9c\xd2,\x01\xed\xd3\xe2\x0c'*\x93\xee" +
	"\x86\xe6Zg\xd7^B\x9d\x9d\x98t7dx\xa3\xac" +
	"\xf9\xbc9\xe9't\xae\x99\xb2k\x07\xbf\xbe#%." +
	"B\xa3\xc0\x89\x8f\x10k\xd4\xd2\xa9DXp\x931\xdd" +
	"\xe6#\x93\xc2\xbc2\xe6\xc6\xff\xa5\x8d\xc7C\x86\x94A" +
	" \xee\x8e\xc7\xf3\x9d\xbe^b\xbcX\xe8\xf4\xf3\xb3\xc5" +
	"\x12`\xf0\x92px\xa9\xb4+\xa8\xac\xea\xce\xda\xc2\x03" +
	"~\xc1\xbd\xb1\x94u_\x06\xce\x8d\x84r\x0c\xb3\xc0\xef" +
	"w\x82\x1dWJ\xb7l\xea\xa7`\xdd\xe6\x7f|8\xd4" +
	"\x06\x8a\x0aT$\xac@\xb5\x07\x0aT\xa9\x9b\x879\x18" +
	"yr\x85\x92\x8c\xa1y\xaeN/\xe6\xab\x13I_Y" +
	"<\xed\xfa?-M\xee\xac,P\x99\xda\x0b\x95\xc9?" +
	"\x91\x9d\x91\x8bJ\x93\x17\x02\x07\xbaXizI\x02\xda" +
	"\xeb\x81\xb1\xc8\xb1:\xe5\x98\xaa\xfd\xb7\x04\xfaxe*" +
	"\xe3\x95I\xb9P\xaf\\P\xfb\x97\xb1\xba\xf4i \x02" +
	"\x95\x0f\x05\xe7\xe4\xffE%m\xeec\xfd\x8f\xae\xbeM" +
	"r@R=\x17\x80t\x93\xef\xf2\x9cWI\x94\xdc\xe7" +
	"\xcecM\xc9 \xcc\xdb2\xa6U44\xf1\x1b\x91\xf0" +
	"\x00\xf5\xe33\x1a\x8c\xcf\xcb\x880&\xf5\x9a}1\x92" +
	"\xb8<\xbdf\x1fI\xcc\xa4\xd7t[\x87y\xed5\x99" +
	"^\x03*\xdfz6\xcfG\xfaH2W\xf2\x0ae\xfa" +
	"a\xec\x03\x9e\x9c\x9fs\x98\x1c\x8c\x99 \x95\xbcG)" +
	"\xbcE\xf8\xc4\x14o\x11\x06\xc7Q\xc2\xcc\x0c\xfa))" +
	"\x83XW\xc9Z\x14\xdd\x18J{\x8b\xc2FrE\xcf" +
	"\x10B'l\xab\xdc\x01[\xbe\xa6\x04.ZPS`" +
	"\xc2\xb6\x0a\x91\xb1\xd6B\xeb\xd7T4R\xeb\x0bVr" +
	"\x7f\xa4\xb6A\xc9\xa9\xda\x03\x12\xd0\xbe\x13Hn\xfb\xbe" +
	"\xa4\xec\xef\xd0\xde\x94\x80\xf6\xae\x08\x1c\xa6\xc9\xad8\x9d" +
	"\x13\x00\xb9\x94>\xfa\xff\xed3\x06\x9e@T\x9eH?" +
	">\xd9(p\x80\xed\xb3\xbbD\xfe8\x96\x9b\xa2h\x1e" +
	"!V\xcc&\xa5\x93\xdd\xf4!\x9d\x07\xfc\x83^H\x8f" +
	"\x10A\xb6\xec\xd0\x98V\xc0\xed\x0e\xdf\xd2&\xf9w\x90" +
	"\xadBQ'\x13HB\x1e\x04+2\xc1\xc5\xa0~#" +
	"1\xe6\xfe\xec`#1\xc2S\xd0\xe7\x80\xb3\x9e\xa5\x83" +
	"\x8cn\x94\x11w\x8a\xee\xbd\xac0Sy\xaf\xc9?B" +
	"\x90h\xeb\xb4\xaaL5\xb3`=\xe2\x80L\xc6\xe8\x1f" +
	"\xc8S\xcdi\xefA#\x81{\xd0\xfcX\xf1\xe9\xf6\x8b" +
	"\xaeA\x81w\x0d\x1a\x99\xeb5\xe8|?3\xa8N`" +
	"{\xea\x14\x9dp\x93R\x18\xe4`m\xf7\\!\xc7\xda" +
	"K\x80\x1c\x93\xdbn\xcb{\x1d|y\xf1\xc6\xff\x06\x00" +
	"\x00\xff\xff\xb9\x8c$\xb9"

func init() {
	schemas.Register(schema_dd255566d23c0cf0,
		0x8d264ff9f62e6625,
		0x902a7a1a52883237,
		0x920b6fb0d3d6ba59,
		0x94a33ae1ed170e72,
		0x9675eecce49e8336,
		0x9be19f82df424325,
		0x9c7f8c8f56f92e5f,
		0xa726a566a5add7c2,
		0xa9c075e58ab7dee9,
		0xab0370d79846043c,
		0xada1b79f1ea676ba,
		0xadfb041117d1486f,
		0xafa8f39cbdfaddd7,
		0xb14b973f5159f7d3,
		0xb6886dbaca4bbb15,
		0xbf903cb59bc2c286,
		0xc274e3f927e5e6d2,
		0xc2e323d129a70545,
		0xc4c862e39687c43a,
		0xc627fa3174a15108,
		0xca933e3b7506d9d7,
		0xd1112ff6296f8357,
		0xd3ab44ed8b654fe7,
		0xd8b71876434837d4,
		0xdcf77ae356cf97bd,
		0xe076dfb6d9de329c,
		0xe42d5e00dee19ed8,
		0xea316244798b3323,
		0xeba40f132bf775ec,
		0xed289a2bfd4032a5,
		0xee059fd550bb720d,
		0xfa2c87242cdc41ad,
		0xfe18d5de6de8b035,
		0xffcd68625c75605e)
}
