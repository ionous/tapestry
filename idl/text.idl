# Text manipulation and transformation.
Spec:requires:contains:
  - "text"
  - - "idl/prim"
    - "idl/rtti"
  - - # Determine whether some piece of text can be found in another.
      Flow:slots:lede:terms:
        - "find_text"
        - ["bool_eval", "num_eval"]
        - "find"
        - - # The text to search within.
            Term:name:type:
              - "in"
              - "text"
              - "text_eval"
          - # The text to find.
            Term:name:type:
              - "text"
              - "subtext"
              - "text_eval"

    - # Determine whether some piece of text starts with another.
      Flow:slots:lede:terms:
        - "text_starts_with"
        - "bool_eval"
        - "is"
        - - # The text to search within.
            Term:name:type:
              - "text"
              - "text"
              - "text_eval"
          - # The text to find.
            Term:name:type:
              - "prefix"
              - "subtext"
              - "text_eval"

    - # Determine whether some piece of text ends with another.
      Flow:slots:lede:terms:
        - "text_ends_with"
        - "bool_eval"
        - "is"
        - - # The text to search within.
            Term:name:type:
              - "text"
              - "text"
              - "text_eval"
          - # The text to find.
            Term:name:type:
              - "suffix"
              - "subtext"
              - "text_eval"

    - # Determine whether some text is completely without content.
      # Even spaces are considered content. The text "" is considered empty,
      # the text " " is considered *not* empty.
      Flow:slots:lede:terms:
        - "is_empty"
        - "bool_eval"
        - "is"
        - - # The text to check for content.
            Term:name:type:
              - "empty"
              - "text"
              - "text_eval"

    - # Determine whether the some text matches a regular expression.
      Flow:slots:lede:terms:
        - "matches"
        - "bool_eval"
        - "is"
        - - # The text to match the expression against.
            Term:name:type:
              - "text"
              - "text"
              - "text_eval"
          - # The expression to match against the text.
            Term:name:type:
              - "expression"
              - "match"
              - "text"
          - Term:type:private:
              - "cache"
              - "match_cache"
              - true

    - # Return a copy of some text with its first letter changed to uppercase.
      Flow:slots:terms:
        - "capitalize"
        - "text_eval"
        - - # The text to capitalize.
            Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Return multiple pieces of text as a single new piece of text.
      Flow:slots:terms:
        - "join"
        - "text_eval"
        - - # Optionally, a separator to put between each piece of text.
            Term:name:type:optional:
              - "_"
              - "sep"
              - "text_eval"
              - true
          - # The text values to concatenate.
            Term:type:repeats:
              - "parts"
              - "text_eval"
              - true

    - # Return some new text with every letter of the specified text turned into lowercase.
      # For example, turns "QUIET" into "quiet.
      Flow:slots:lede:terms:
        - "make_lowercase"
        - "text_eval"
        - "lower"
        - - Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Return some new text with the contents of the specified text flipped back to front.
      # For example, turns "Tapestry" into 'yrtsepaT'.
      Flow:slots:lede:terms:
        - "make_reversed"
        - "text_eval"
        - "reverse"
        - - Term:type:
              - "text"
              - "text_eval"

    - # Return some new text with each sentence of the specified text transformed so that it starts with a capital letter.
      # For example, "see the doctor run. run doctor. run." into "See the doctor run. Run doctor. Run."
      Flow:slots:lede:terms:
        - "make_sentence_case"
        - "text_eval"
        - "sentence"
        - - Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Return some new text starting each word of the specified text with a capital letter.
      # For example, turns "empire apple" into "Empire Apple".
      Flow:slots:lede:terms:
        - "make_title_case"
        - "text_eval"
        - "title"
        - - Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Return some new text with every letter of the specified turned into uppercase. For example, transforms "loud" into "LOUD".
      Flow:slots:lede:terms:
        - "make_uppercase"
        - "text_eval"
        - "upper"
        - - Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Return the plural form of a singular word.
      # For example, given the word "apple", return "apples".
      Flow:slots:lede:terms:
        - "pluralize"
        - "text_eval"
        - "plural"
        - - Term:name:type:
              - "of"
              - "text"
              - "text_eval"

    - # Return the singular form of a plural word.
      # For example, given the word "apples", return "apple".
      Flow:slots:lede:terms:
        - "singularize"
        - "text_eval"
        - "singular"
        - - Term:name:type:
              - "of"
              - "text"
              - "text_eval"

    - # Writes a number using numerals.
      # For example, '1'.
      Flow:slots:lede:terms:
        - "print_num"
        - "text_eval"
        - "numeral"
        - - Term:name:type:
              - "_"
              - "num"
              - "num_eval"

    - # Writes a number in plain english.
      # For example, 'one'.
      Flow:slots:lede:terms:
        - "print_num_word"
        - "text_eval"
        - "numeral"
        - - Term:name:type:
              - "words"
              - "num"
              - "num_eval"
