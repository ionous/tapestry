# Text manipulation and transformation.
Spec:requires:contains:
  - "text"
  - - "idl/prim"
    - "idl/rtti"
  - - # Determine whether one piece of text contains a second piece of text.
      Flow:slots:lede:terms:
        - "find_text"
        - ["bool_eval", "num_eval"]
        - "find"
        - - # The text to search within.
            Term:name:type:
              - "in"
              - "text"
              - "text_eval"
          - # The text to find.
            Term:name:type:
              - "text"
              - "subtext"
              - "text_eval"

    - # Determine whether text starts in a particular way.
      Flow:slots:lede:terms:
        - "text_starts_with"
        - "bool_eval"
        - "is"
        - - # The text to search within.
            Term:name:type:
              - "text"
              - "text"
              - "text_eval"
          - # The text to find.
            Term:name:type:
              - "prefix"
              - "subtext"
              - "text_eval"

    - # Determine whether text ends in a particular way.
      Flow:slots:lede:terms:
        - "text_ends_with"
        - "bool_eval"
        - "is"
        - - # The text to search within.
            Term:name:type:
              - "text"
              - "text"
              - "text_eval"
          - # The text to find.
            Term:name:type:
              - "suffix"
              - "subtext"
              - "text_eval"

    - # Determine whether text is completely without content.
      # Even spaces are considered content. The text "" is considered empty,
      # the text " " is considered *not* empty.
      Flow:slots:lede:terms:
        - "is_empty"
        - "bool_eval"
        - "is"
        - - # The text to check for content.
            Term:name:type:
              - "empty"
              - "text"
              - "text_eval"

    - # Determine whether text matches a regular expression.
      # The expressions used are defined by go.
      # https://pkg.go.dev/regexp/syntax
      # https://github.com/google/re2/wiki/Syntax
      Flow:slots:lede:terms:
        - "matches"
        - "bool_eval"
        - "is"
        - - # The text to match the expression against.
            Term:name:type:
              - "text"
              - "text"
              - "text_eval"
          - # The expression to match against the text.
            Term:name:type:
              - "expression"
              - "match"
              - "text"
          - Term:type:private:
              - "cache"
              - "match_cache"
              - true

    - # Copy some text, changing its first letter to uppercase.
      Flow:slots:terms:
        - "capitalize"
        - "text_eval"
        - - # The text to capitalize.
            Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Combine text to produce new text.
      Flow:slots:terms:
        - "join"
        - "text_eval"
        - - # Optionally, a separator to put between each piece of text.
            Term:name:type:optional:
              - "_"
              - "sep"
              - "text_eval"
              - true
          - # The text values to concatenate.
            Term:type:repeats:
              - "parts"
              - "text_eval"
              - true

    - # Copy some text, changing every letter into lowercase.
      # For example, turns "QUIET" into "quiet.
      Flow:slots:lede:terms:
        - "make_lowercase"
        - "text_eval"
        - "lower"
        - - Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Copy some text with its contents flipped back to front.
      # For example, turns "Tapestry" into 'yrtsepaT'.
      Flow:slots:lede:terms:
        - "make_reversed"
        - "text_eval"
        - "reverse"
        - - Term:type:
              - "text"
              - "text_eval"

    - # Copy text, changing the start of each sentence so that it starts with a capital letter. ( Currently, "sentences" are considered to be a series of characters ending with a full-stop followed by a space. )
      # For example, "see the doctor run. run doctor. run." into "See the doctor run. Run doctor. Run."
      Flow:slots:lede:terms:
        - "make_sentence_case"
        - "text_eval"
        - "sentence"
        - - Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Copy some text, making every word start with a capital letter.
      # For example, turns "empire apple" into "Empire Apple".
      Flow:slots:lede:terms:
        - "make_title_case"
        - "text_eval"
        - "title"
        - - Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Copy some text, changing every letter into uppercase.
      # For example, transforms "loud" into "LOUD".
      Flow:slots:lede:terms:
        - "make_uppercase"
        - "text_eval"
        - "upper"
        - - Term:name:type:
              - "_"
              - "text"
              - "text_eval"

    - # Pluralize a word.
      # The singular form of a word can have more than one plural form.
      # For example: "person" can be "people" or "persons".
      # If more than one exists, this chooses arbitrarily.
      #
      # Note, The transformation uses predefined rules and some explicit mappings.
      # The story command [DefinePlural] can add new mappings.
      Flow:slots:lede:terms:
        - "pluralize"
        - "text_eval"
        - "plural"
        - - Term:name:type:
              - "of"
              - "text"
              - "text_eval"

    - # Change a plural word into its singular form.
      # A plural word only has one singular form.
      # For example, given the word "people", return "person".
      # See [pluralize] for more information.
      Flow:slots:lede:terms:
        - "singularize"
        - "text_eval"
        - "singular"
        - - Term:name:type:
              - "of"
              - "text"
              - "text_eval"

    - # Express a number using numerals.
      # For example, given the number `1` return the text "1".
      #
      # The [story.Execute] version prints the text for the player.
      Flow:slots:lede:terms:
        - "print_num_digits"
        - ["text_eval", "execute"]
        - "numeral"
        - - Term:name:type:
              - "digits"
              - "num"
              - "num_eval"

    - # Express an integer in plain english.
      # For example, given the number `1` return the text "one".
      # It converts floating point numbers to integer by truncating:
      # given `1.6`, it returns "one".
      #
      # The [story.Execute] version prints the text for the player.
      Flow:slots:lede:terms:
        - "print_num_words"
        - ["text_eval", "execute"]
        - "numeral"
        - - Term:name:type:
              - "words"
              - "num"
              - "num_eval"
