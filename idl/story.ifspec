{
    "story":
    {
        "uses": "group",
        "specs":
        {
            "debug":
            {
                "uses": "group",
                "specs":
                {
                    "statements":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "story_file":
                            {
                                "spec": "{_%story_lines+story_statement}",
                                "sign": "tapestry:",
                                "desc": [
                                    "top level node, currently just for blockly",
                                    "might eventually contain story metadata",
                                    "ex. author, description..."
                                ]
                            },
                            "story_break":
                            {
                                "spec": "story_break",
                                "lede": "--",
                                "group": "internal",
                                "slot": "story_statement",
                                "desc": [
                                    "this cheats a bit by making the signature the same as the comment marker",
                                    "that allows nodes which look like comments but are actually story breaks."
                                ]
                            },
                            "story":
                            {
                                "uses": "flow",
                                "spec": "{+paragraph}",
                                "sign": "story paragraphs:"
                            },
                            "paragraph":
                            {
                                "uses": "flow",
                                "spec": "{*story_statement}",
                                "desc": "Phrases"
                            },
                            "story_statement":
                            {
                                "uses": "slot",
                                "desc": "Phrase"
                            }
                        }
                    },
                    "tests":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "testing":
                            {
                                "uses": "slot",
                                "desc": "Run a series of tests."
                            },
                            "test_statement":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "Expect {test_name} to {expectation%test:testing}",
                                "desc": "Describe test results",
                                "group": "positioned"
                            },
                            "test_scene":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "While testing {test_name} {with%requires?test_name}: {story+story_statement}",
                                "desc": "Create a scene for testing"
                            },
                            "test_rule":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "To test {test_name}: {does+execute}",
                                "desc": "Add actions to a test"
                            },
                            "test_output":
                            {
                                "uses": "flow",
                                "slot": "testing",
                                "spec": "output {lines|quote}.",
                                "desc": "Test Output: Expect that a test uses 'Say' to print some specific text."
                            },
                            "test_name":
                            {
                                "uses": "str",
                                "spec": "{the test%current_test}, or {test name%test_name}",
                                "group": "positioned"
                            }
                        }
                    },
                    "nouns":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "noun_continuation": {
                                "uses": "slot"
                            },
                            "noun_kind_statement": {
                                "spec": "{nouns+named_noun|comma-and} {is a kind%kind_of_noun} {and%more*noun_continuation}.",
                                "slot": "story_statement",
                                "sign": "Nouns:depict:and:"
                            },
                            "noun_trait_statement": {
                                "spec": "{nouns+named_noun|comma-and} {noun_traits} {and%more*noun_continuation}.",
                                "slot": "story_statement",
                                "sign": "Nouns:start_as:and:"
                            },
                            "noun_relation_statement": {
                                "spec": "{nouns+named_noun|comma-and} {noun_relation} {and%more*noun_continuation}.",
                                "slot": "story_statement",
                                "sign": "Nouns:relate_to:and:"
                            },
                            "relative_to_noun": {
                                "slot": "story_statement",
                                "spec": "The {relation:relation_name} of {nouns+named_noun|comma-and} {are_being} {other_nouns+named_noun|comma-and}.",
                                "desc": "Relate nouns to each other"
                            },
                            "kind_of_noun":
                            {
                                "spec": "{are_an} {kind:singular_kind}",
                                "slot": "noun_continuation",
                                "sign": "Kind:named:"
                            },
                            "noun_traits":
                            {
                                "spec": "{are_being} {+trait|comma-and}",
                                "slot": "noun_continuation"
                            },
                            "noun_relation":
                            {
                                "spec": "{are_being?are_being} {relation:relation_name} {other_nouns+named_noun|comma-and}",
                                "slot": "noun_continuation",
                                "sign": "noun_relation are_being:relation:other_nouns:"
                            },
                            "named_noun":
                            {
                               "spec": "{determiner} {name:noun_name}",
                               "sign": "Noun:named:"
                            },
                            "determiner":
                            {
                                "uses": "str",
                                "spec": "{a}, {an}, {the}, {our}, or {other determiner%determiner}",
                                "desc":
                                [
                                    "Determiners: modify a word they are associated to designate specificity or, sometimes, a count.",
                                    "For instance: \"some\" fish hooks, \"a\" pineapple, \"75\" triangles, \"our\" Trevor."
                                ]
                            },
                            "noun_name":
                            {
                                "uses": "str",
                                "desc":
                                [
                                    "Noun name: Some specific person, place, or thing; or, more rarely, a kind.",
                                    "Proper names are usually capitalized:  For example, maybe: 'Haruki', 'Jane', or 'Toronto'.",
                                    "Common names are usually not capitalized. For example, maybe: 'table', 'chair', or 'dog park'.",
                                    "A set of duplicate object uses their kind. For instance: twelve 'cats'.`"
                                ],
                                "group": "positioned"
                            }
                        }
                    },
                    "events":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "action_decl":
                            {
                                "slot": "story_statement",
                                "spec": "Agents can {act%event:event_name} and {acting%action:action_name} requires {action_params}.",
                                "sign": "Event:action:args:",
                                "desc": [
                                    "Declare an activity: Activities help actors perform tasks: for instance, picking up or dropping items.",
                                    "Activities involve either the player or an npc and possibly one or two other objects."
                                ]
                            },
                            "action_params":
                            {
                                "uses": "swap",
                                "spec": "{one or more objects%common:common_action}, or {two similar objects%dual:paired_action}, or {nothing%none:abstract_action}"
                            },
                            "common_action":
                            {
                                "uses": "flow",
                                "spec": "one {kind:singular_kind} ( the noun ) {?action_context}",
                                "group": "positioned"
                            },
                            "action_context":
                            {
                                "uses": "flow",
                                "spec": "and one {kind:singular_kind} ( the other noun )",
                                "group": "positioned"
                            },
                            "paired_action":
                            {
                                "uses": "flow",
                                "spec": "two {kinds:plural_kinds} ( the noun and other noun )",
                                "group": "positioned"
                            },
                            "action_name":
                            {
                                "uses": "str",
                                "group": "positioned"
                            },
                            "abstract_action":
                            {
                                "uses": "str",
                                "spec": "{nothing}"
                            },
                            "event_block":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "For {the target%target:event_target} {handlers+event_handler}",
                                "desc": "Declare event listeners: Listeners let objects in the game world react to changes before, during, or after they happen.",
                                "group": "positioned",
                                "lede": "listen"
                            },
                            "event_handler":
                            {
                                "uses": "flow",
                                "spec": "{event_phase} {the event%event:event_name} {provides%locals*property_slot} do:{rules+pattern_rule}",
                                "sign": "with:event:provides:rules:"
                            },
                            "event_phase":
                            {
                                "uses": "str",
                                "spec": "{before}, {during%while}, or {after}"
                            },
                            "event_name":
                            {
                                "uses": "str",
                                "group": "positioned"
                            },
                            "event_target":
                            {
                                "uses": "swap",
                                "spec": "the {kinds:plural_kinds} or {noun:named_noun}"
                            }
                        }
                    },
                    "language":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "make_plural":
                            {
                                "slot": "story_statement",
                                "spec": "The plural of {singular:text} is {plural:text}.",
                                "lede": "make",
                                "desc": "The plural of person is people. The plural of person is persons."
                            },
                            "make_opposite":
                            {
                                "slot": "story_statement",
                                "spec": "The opposite of {word:text} is the {opposite:text}.",
                                "lede": "make",
                                "desc": "The opposite of east is west."
                            },
                            "comment":
                            {
                                "uses": "flow",
                                "slot":
                                [
                                    "story_statement",
                                    "execute"
                                ],
                                "spec": "Note: {comment%lines}",
                                "desc": "Add a note: Information about the story for you and other authors."
                            }
                        }
                    },
                    "patterns":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "pattern_decl":
                            {
                                "slot": "story_statement",
                                "spec": "To determine {name:pattern_name|quote} {params*property_slot} {?pattern_return}.",
                                "sign": "Pattern:requires:returns:",
                                "desc": [
                                    "Declare a pattern: A pattern is a bundle of functions which can either change the game world or provide information about it.",
                                    "Each function in a given pattern has \"guards\" which determine whether the function applies in a particular situation."
                                ]
                            },
                            "pattern_type":
                            {
                                "uses": "str",
                                "spec": "{patterns}, {actions}, {events}, or {another pattern type%pattern_type}",
                                "group": "positioned"
                            },
                            "pattern_actions":
                            {
                                "slot": "story_statement",
                                "spec": "To determine {pattern name%name:pattern_name} {locals*property_slot} do: {rules+pattern_rule}",
                                "desc": "Add actions to a pattern: Actions to take when using a pattern.",
                                "sign": "pattern:provides:rules:"
                            },
                            "pattern_rule":
                            {
                                "uses": "flow",
                                "spec": "When {conditions are met%guard:bool_eval}{continue%flags?pattern_flags}, then: {does+execute}",
                                "desc": "Rule"
                            },
                            "pattern_flags":
                            {
                                "uses": "str",
                                "spec": "{continue before%before}, {continue after%after}, {terminate}"
                            },
                            "pattern_return":
                            {
                                "uses": "flow",
                                "spec": "returning {result:property_slot}",
                                "sign": "pattern_result:"
                            }
                        }
                    },
                    "relations":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "kind_of_relation":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{relation:relation_name} relates {cardinality:relation_cardinality}"
                            },
                            "relation_cardinality":
                            {
                                "uses": "swap",
                                "spec": "{one_to_one}, {one_to_many}, {many_to_one}, or {many_to_many}",
                                "group": "positioned"
                            },
                            "one_to_one":
                            {
                                "uses": "flow",
                                "spec": "one {kind:singular_kind} to one {other_kind:singular_kind}"
                            },
                            "one_to_many":
                            {
                                "uses": "flow",
                                "spec": "one {kind:singular_kind} to many {kinds:plural_kinds}"
                            },
                            "many_to_one":
                            {
                                "uses": "flow",
                                "spec": "many {kinds:plural_kinds} to one {kind:singular_kind}"
                            },
                            "many_to_many":
                            {
                                "uses": "flow",
                                "spec": "many {kinds:plural_kinds} to many {other_kinds:plural_kinds}"
                            }
                        }
                    },
                    "kinds":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "kinds_of_kind":
                            {
                                "spec": "{plural_kinds} are a kind of {singular_kind}.",
                                "sign": "Make kinds:of:",
                                "slot": "story_statement",
                                "desc": "Declare a kind"
                            },
                            "kinds_have_properties":
                            {
                                "spec": "{plural_kinds} have {props+property_slot|comma-and}.",
                                "sign": "Kinds:have:",
                                "slot": "story_statement",
                                "desc": "Add properties to a kind"
                            },
                            "singular_kind":
                            {
                                "uses": "str",
                                "desc":
                                [
                                    "Describes a type of similar nouns.",
                                    "For example: an animal, a container, etc."
                                ],
                                "group": "positioned"
                            },
                            "plural_kinds":
                            {
                                "uses": "str",
                                "desc":
                                [
                                    "The plural name of a type of similar nouns.",
                                    "For example: animals, containers, etc."
                                ],
                                "group": "positioned"
                            }
                        }
                    },
                    "traits":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "kinds_of_aspect":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{aspect} is a kind of value.",
                                "dsec": "Declare an aspect"
                            },
                            "aspect_traits":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{aspect} {trait_phrase}",
                                "desc": "Add traits to an aspect"
                            },
                            "trait_phrase":
                            {
                                "uses": "flow",
                                "spec": "{are_either} {+trait|comma-or}."
                            },
                            "aspect":
                            {
                                "uses": "str",
                                "group": "positioned"
                            },
                            "trait":
                            {
                                "uses": "str",
                                "group": "positioned"
                            }
                        }
                    },
                    "properties":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "noun_assignment":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "The {property} of {nouns+named_noun} is {the text%lines|quote}",
                                "desc": "Assign text to a noun: Assign text. Gives a noun one or more lines of text."
                            },
                            "property_slot": {
                                "uses": "slot",
                                "desc": ["future: each slot should support an appropriate 'starting as' initial value"]
                            },
                            "aspect_property": {
                                "slot": "property_slot",
                                "spec": "an aspect {aspect:text}",
                                "sign": "aspect of:"
                            },
                            "bool_property": {
                                "slot": "property_slot",
                                "spec": "a true/false value {named_property} {initially?bool_eval}",
                                "sign": "bool named:of:initially:"
                            },
                            "number_property": {
                                "slot": "property_slot",
                                "spec": "a number {named_property} {initially?number_eval}",
                                "sign": "number named:of:initially:"
                            },
                            "text_property": {
                                "slot": "property_slot",
                                "spec": "some text {named_property} {initially?text_eval}",
                                "sign": "text named:of:initially:"
                            },
                            "num_list_property": {
                                "slot": "property_slot",
                                "spec": "a list of nums {named_property} {initially?num_list_eval}",
                                "sign": "num_list named:of:initially:"
                            },
                            "text_list_property": {
                                "slot": "property_slot",
                                "spec": "a list of text {named_property} {initially?text_list_eval}",
                                "sign": "text_list named:of:initially:"
                            },
                            "record_property": {
                                "slot": "property_slot",
                                "spec": "a record {named_property} {initially?record_eval}",
                                "sign": "record named:of:initially:"
                            },
                            "record_list_property": {
                                "slot": "property_slot",
                                "spec": "a list of records {named_property} {initially?record_list_eval}",
                                "sign": "record_list named:of:initially:"
                            },
                            "certainties":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{plural_kinds} {are_being} {certainty} {trait}.",
                                "desc": "Give a kind a trait"
                            },
                            "are_either":
                            {
                                "uses": "str",
                                "spec": "{can be%canbe} {are either%either}"
                            },
                            "certainty":
                            {
                                "uses": "str",
                                "spec": "{usually}, {always}, {seldom}, or {never}",
                                "desc": "Certainty: Whether an trait applies to a kind of noun.",
                                "group": "positioned"
                            },
                            "property":
                            {
                                "uses": "str",
                                "group": "positioned"
                            }
                        }
                    },
                    "misc":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "ana":
                            {
                                "uses": "str",
                                "spec": "{a} or {an}"
                            },
                            "are_being":
                            {
                                "uses": "str",
                                "spec": "{are} or {is}"
                            },
                            "are_an":
                            {
                                "uses": "str",
                                "spec": "{are}, {are a%area}, {are an%arean}, {is}, {is a%isa}, {is an%isan}"
                            }
                        }
                    },
                    "map_making": {
                        "uses": "group",
                        "specs": {
                            "map_heading": {
                                "spec": "heading {_%dir:map_direction} {from%room:named_noun} {via%door?named_noun} {and%map_connection} {other_room:named_noun}",
                                "slot": "story_statement",
                                "group": "modeling",
                                "desc": "Leaving a room by moving in a compass direction ( ex. heading east... )"
                            },
                            "map_departing": {
                                "spec": "departing {from%room:named_noun} {via%door:named_noun} {and%map_connection} {other_room:named_noun}",
                                "slot": "story_statement",
                                "group": "modeling",
                                "desc": "Leaving a room by by going through a door ( ex. departing the house via the front door... )"
                            },
                            "map_direction": {
                                "uses": "str",
                                "group": "modeling",
                                "desc": [
                                    "A heading for movement within the game, often connecting one room within the game to another.",
                                    "The most commonly used are standard compass directions like 'north', 'east', 'south', and 'west'."
                                ]
                            },
                            "map_connection": {
                                "uses": "str",
                                "spec": "{arriving_at} or {connecting_to}",
                                "desc": [
                                    "Chooses between a one-way and a two-way connection between rooms.",
                                    "Generally, this only makes sense for map headings, but it at least causes 'departing' to check that a reverse connection exists.",
                                    "Note: moving from one room leads you into another somewhat generically.",
                                    "Sometimes its useful to position the player on entry to a new room based on where they came from.",
                                    "Using, a previous room or last used door can do the trick."
                                ]      
                            }
                        }
                    },
                    "stubs":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "render_template":
                            {
                                "uses": "flow",
                                "spec": "render_template {_%template:lines}",
                                "slot": "text_eval",
                                "desc": "Parse text using templates. See: https://github.com/ionous/iffy/wiki/Templates",
                                "group": "format"
                            },
                            "count_of":
                            {
                                "uses": "flow",
                                "spec": "trigger {_%trigger} {num:number_eval}",
                                "slot": "bool_eval",
                                "desc": "A guard which returns true based on a counter. Counters start at zero and are incremented every time the guard gets checked.",
                                "group":
                                [
                                    "logic",
                                    "positioned"
                                ]
                            },
                            "cycle_text":
                            {
                                "uses": "flow",
                                "spec": "cycle {_%parts+text_eval}",
                                "slot": "text_eval",
                                "desc": "When called multiple times, returns each of its inputs in turn.",
                                "group":
                                [
                                    "output",
                                    "positioned"
                                ]
                            },
                            "shuffle_text":
                            {
                                "uses": "flow",
                                "spec": "shuffle {_%parts+text_eval}",
                                "slot": "text_eval",
                                "desc": "When called multiple times returns its inputs at random.",
                                "group":
                                [
                                    "output",
                                    "positioned"
                                ]
                            },
                            "stopping_text":
                            {
                                "uses": "flow",
                                "spec": "stopping {_%parts+text_eval}",
                                "slot": "text_eval",
                                "desc": "When called multiple times returns each of its inputs in turn, sticking to the last one.",
                                "group":
                                [
                                    "output",
                                    "positioned"
                                ]
                            },
                            "grammar_decl":
                            {
                                "uses": "flow",
                                "spec": "understand {_%grammar:grammar_maker}",
                                "slot": "story_statement",
                                "desc": "Read what the player types and turn it into actions.",
                                "group": "grammar"
                            }
                        }
                    }
                }
            }
        }
    }
}