{
    "story":
    {
        "uses": "group",
        "specs":
        {
            "debug":
            {
                "uses": "group",
                "specs":
                {
                    "statements":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "story":
                            {
                                "uses": "flow",
                                "spec": "{+paragraph}"
                            },
                            "paragraph":
                            {
                                "uses": "flow",
                                "spec": "{*story_statement}",
                                "desc": "Phrases"
                            },
                            "story_statement":
                            {
                                "uses": "slot",
                                "desc": "Phrase"
                            },
                            "noun_statement":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{:lede} {*tail} {?summary}",
                                "desc": "Declare a noun: Describes people, places, or things."
                            }
                        }
                    },
                    "tests":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "testing":
                            {
                                "uses": "slot",
                                "desc": "Run a series of tests."
                            },
                            "test_statement":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "Expect {test_name} to {expectation%test:testing}",
                                "desc": "Describe test results",
                                "group": "positioned"
                            },
                            "test_scene":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "While testing {test_name}: {story}",
                                "desc": "Create a scene for testing"
                            },
                            "test_rule":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "To test {test_name}: {do%hook:program_hook}",
                                "desc": "Add actions to a test"
                            },
                            "test_output":
                            {
                                "uses": "flow",
                                "slot": "testing",
                                "spec": "output {lines|quote}.",
                                "desc": "Test Output: Expect that a test uses 'Say' to print some specific text."
                            },
                            "test_name":
                            {
                                "uses": "str",
                                "spec": "{the test%current_test}, or {test name%test_name}",
                                "group": "positioned"
                            }
                        }
                    },
                    "nouns":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "lede":
                            {
                                "uses": "flow",
                                "spec": "{nouns+named_noun|comma-and} {noun_phrase}.",
                                "desc": "Leading statement: Describes one or more nouns."
                            },
                            "tail":
                            {
                                "uses": "flow",
                                "spec": "{pronoun} {noun_phrase}.",
                                "desc": "Trailing statement: Adds details about the preceding noun or nouns."
                            },
                            "summary":
                            {
                                "uses": "flow",
                                "spec": "The summary is: {summary%lines|quote}",
                                "group": "positioned"
                            },
                            "noun_phrase":
                            {
                                "uses": "swap",
                                "spec": "{is a kind%kind_of_noun}, {noun_traits}, or {noun_relation}",
                                "group": "positioned"
                            },
                            "kind_of_noun":
                            {
                                "uses": "flow",
                                "spec": "{are_an} {*trait|comma-and} {kind:singular_kind} {?noun_relation}"
                            },
                            "named_noun":
                            {
                                "uses": "flow",
                                "spec": "{determiner} {name:noun_name}"
                            },
                            "determiner":
                            {
                                "uses": "str",
                                "spec": "{a}, {an}, {the}, {our}, or {other determiner%determiner}",
                                "desc":
                                [
                                    "Determiners: modify a word they are associated to designate specificity or, sometimes, a count.",
                                    "For instance: \"some\" fish hooks, \"a\" pineapple, \"75\" triangles, \"our\" Trevor."
                                ]
                            },
                            "noun_name":
                            {
                                "uses": "str",
                                "desc":
                                [
                                    "Noun name: Some specific person, place, or thing; or, more rarely, a kind.",
                                    "Proper names are usually capitalized:  For example, maybe: 'Haruki', 'Jane', or 'Toronto'.",
                                    "Common names are usually not capitalized. For example, maybe: 'table', 'chair', or 'dog park'.",
                                    "A set of duplicate object uses their kind. For instance: twelve 'cats'.`"
                                ],
                                "group": "positioned"
                            },
                            "pronoun":
                            {
                                "uses": "str",
                                "spec": "{it}, {they}, or {pronoun}"
                            }
                        }
                    },
                    "events":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "action_decl":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "Agents can {act%event:event_name} and {acting%action:action_name} requires {action_params}.",
                                "desc":
                                [
                                    "Declare an activity: Activities help actors perform tasks: for instance, picking up or dropping items.",
                                    "Activities involve either the player or an npc and possibly one or two other objects."
                                ],
                                "group": "positioned"
                            },
                            "action_params":
                            {
                                "uses": "swap",
                                "spec": "{one or more objects%common:common_action}, or {two similar objects%dual:paired_action}, or {nothing%none:abstract_action}"
                            },
                            "common_action":
                            {
                                "uses": "flow",
                                "spec": "one {kind:singular_kind} ( the noun ) {?action_context}",
                                "group": "positioned"
                            },
                            "action_context":
                            {
                                "uses": "flow",
                                "spec": "and one {kind:singular_kind} ( the other noun )",
                                "group": "positioned"
                            },
                            "paired_action":
                            {
                                "uses": "flow",
                                "spec": "two {kinds:plural_kinds} ( the noun and other noun )",
                                "group": "positioned"
                            },
                            "action_name":
                            {
                                "uses": "str",
                                "group": "positioned"
                            },
                            "abstract_action":
                            {
                                "uses": "str",
                                "spec": "{nothing}"
                            },
                            "event_block":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "For {the target%target:event_target} {handlers+event_handler}",
                                "desc": "Declare event listeners: Listeners let objects in the game world react to changes before, during, or after they happen.",
                                "group": "positioned"
                            },
                            "event_handler":
                            {
                                "uses": "flow",
                                "spec": "{event_phase} {the event%event:event_name} {with locals%locals?pattern_locals} do:{pattern_rules}"
                            },
                            "event_phase":
                            {
                                "uses": "str",
                                "spec": "{before}, {during%while}, or {after}"
                            },
                            "event_name":
                            {
                                "uses": "str",
                                "group": "positioned"
                            },
                            "event_target":
                            {
                                "uses": "swap",
                                "spec": "the {kinds:plural_kinds} or {named_noun}"
                            }
                        }
                    },
                    "language":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "make_plural":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "The plural of {singular:text} is {plural:text}.",
                                "lede": "make",
                                "desc": "The plural of person is people. The plural of person is persons."
                            },
                            "comment":
                            {
                                "uses": "flow",
                                "slot":
                                [
                                    "story_statement",
                                    "execute"
                                ],
                                "spec": "Note: {comment%lines}",
                                "desc": "Add a note: Information about the story for you and other authors."
                            },
                            "lines":
                            {
                                "uses": "str",
                                "desc":
                                [
                                    "A sequence of characters of any length spanning multiple lines.",
                                    "Paragraphs are a prime example. Generally lines are some piece of the story that will be displayed to the player.",
                                    "See also: text."
                                ]
                            }
                        }
                    },
                    "patterns":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "pattern_decl":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{type:pattern_type} determine {name:pattern_name|quote} {parameters%optvars?pattern_variables_tail} {?pattern_return} {about?comment}.",
                                "desc":
                                [
                                    "Declare a pattern: A pattern is a bundle of functions which can either change the game world or provide information about it.",
                                    "Each function in a given pattern has \"guards\" which determine whether the function applies in a particular situation."
                                ]
                            },
                            "pattern_variables_decl":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "The pattern {pattern_name|quote} requires {+variable_decl|comma-and}.",
                                "desc": "Add parameters to a pattern: Values provided when calling a pattern."
                            },
                            "pattern_variables_tail":
                            {
                                "uses": "flow",
                                "spec": "It requires {+variable_decl|comma-and}",
                                "desc": "Pattern variables: Storage for values used during the execution of a pattern."
                            },
                            "pattern_type":
                            {
                                "uses": "str",
                                "spec": "{patterns}, {actions}, {events}, or {another pattern type%pattern_type}",
                                "group": "positioned"
                            },
                            "pattern_actions":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "To determine {pattern name%name:pattern_name} {?pattern_locals} {?pattern_return} do:{pattern_rules}",
                                "desc": "Add actions to a pattern: Actions to take when using a pattern."
                            },
                            "pattern_rules":
                            {
                                "uses": "flow",
                                "spec": "{*pattern_rule}"
                            },
                            "pattern_rule":
                            {
                                "uses": "flow",
                                "spec": "When {conditions are met%guard:bool_eval}{continue%flags?pattern_flags}, then: {do%hook:program_hook}",
                                "desc": "Rule"
                            },
                            "pattern_flags":
                            {
                                "uses": "str",
                                "spec": "{continue before%before}, {continue after%after}, {terminate}"
                            },
                            "pattern_locals":
                            {
                                "uses": "flow",
                                "spec": "{+local_decl|comma-and}"
                            },
                            "local_decl":
                            {
                                "uses": "flow",
                                "spec": "using {variable_decl} {starting as%value?local_init}",
                                "desc": "Local variables can use the parameters of a pattern to compute temporary values."
                            },
                            "local_init":
                            {
                                "uses": "flow",
                                "spec": "starting as {value:assignment}",
                                "desc": "Local variables can use the parameters of a pattern to compute temporary values."
                            },
                            "program_hook":
                            {
                                "uses": "swap",
                                "spec": "do {actions%activity}",
                                "group":
                                [
                                    "positioned",
                                    "modeling"
                                ]
                            },
                            "pattern_return":
                            {
                                "uses": "flow",
                                "spec": "returning {result:variable_decl}"
                            }
                        }
                    },
                    "relations":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "kind_of_relation":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{relation:relation_name} relates {cardinality:relation_cardinality}"
                            },
                            "relation_cardinality":
                            {
                                "uses": "swap",
                                "spec": "{one_to_one}, {one_to_many}, {many_to_one}, or {many_to_many}",
                                "group": "positioned"
                            },
                            "one_to_one":
                            {
                                "uses": "flow",
                                "spec": "one {kind:singular_kind} to one {other_kind:singular_kind}"
                            },
                            "one_to_many":
                            {
                                "uses": "flow",
                                "spec": "one {kind:singular_kind} to many {kinds:plural_kinds}"
                            },
                            "many_to_one":
                            {
                                "uses": "flow",
                                "spec": "many {kinds:plural_kinds} to one {kind:singular_kind}"
                            },
                            "many_to_many":
                            {
                                "uses": "flow",
                                "spec": "many {kinds:plural_kinds} to many {other_kinds:plural_kinds}"
                            },
                            "noun_relation":
                            {
                                "uses": "flow",
                                "spec": "{?are_being} {relation:relation_name} {nouns+named_noun|comma-and}"
                            },
                            "relative_to_noun":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "The {relation:relation_name} of {nouns+named_noun|comma-and} {are_being} {nouns+named_noun|comma-and}.",
                                "desc": "Relate nouns to each other"
                            }
                        }
                    },
                    "kinds":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "kinds_of_kind":
                            {
                                "spec": "{plural_kinds} are a kind of {singular_kind}.",
                                "sign": ["Make", "kinds", "of"],
                                "slot": "story_statement",
                                "desc": "Declare a kind"
                            },
                            "kinds_possess_properties":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{plural_kinds} have {+property_decl|comma-and}.",
                                "desc": "Add properties to a kind"
                            },
                            "singular_kind":
                            {
                                "uses": "str",
                                "desc":
                                [
                                    "Describes a type of similar nouns.",
                                    "For example: an animal, a container, etc."
                                ],
                                "group": "positioned"
                            },
                            "plural_kinds":
                            {
                                "uses": "str",
                                "desc":
                                [
                                    "The plural name of a type of similar nouns.",
                                    "For example: animals, containers, etc."
                                ],
                                "group": "positioned"
                            }
                        }
                    },
                    "records":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "kinds_of_record":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{records%record_plural} are a kind of record.",
                                "desc": "Declare a record"
                            },
                            "records_possess_properties":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{records%record_plural} have {+property_decl|comma-and}.",
                                "desc": "Add properties to a record"
                            },
                            "record_singular":
                            {
                                "uses": "str",
                                "desc": "Record: Describes a common set of properties.",
                                "group": "positioned"
                            },
                            "record_plural":
                            {
                                "uses": "str",
                                "desc": "Records: The plural name for a record.",
                                "group": "positioned"
                            }
                        }
                    },
                    "traits":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "kinds_of_aspect":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{aspect} is a kind of value.",
                                "dsec": "Declare an aspect"
                            },
                            "aspect_traits":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{aspect} {trait_phrase}",
                                "desc": "Add traits to an aspect"
                            },
                            "trait_phrase":
                            {
                                "uses": "flow",
                                "spec": "{are_either} {+trait|comma-or}."
                            },
                            "noun_traits":
                            {
                                "uses": "flow",
                                "spec": "{are_being} {+trait|comma-and}"
                            },
                            "aspect":
                            {
                                "uses": "str",
                                "group": "positioned"
                            },
                            "trait":
                            {
                                "uses": "str",
                                "group": "positioned"
                            }
                        }
                    },
                    "properties":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "noun_assignment":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "The {property} of {nouns+named_noun} is {the text%lines|quote}",
                                "desc": "Assign text to a noun: Assign text. Gives a noun one or more lines of text."
                            },
                            "property_decl":
                            {
                                "uses": "flow",
                                "spec": "{an:determiner} {property} ( {property_type} {comment?lines} )"
                            },
                            "property_type":
                            {
                                "uses": "swap",
                                "spec": "an {aspect%property_aspect}, {simple value%primitive:primitive_type}, or {other value%ext:ext_type}",
                                "group": "positioned"
                            },
                            "property_aspect":
                            {
                                "uses": "str",
                                "spec": "{an aspect%aspect}",
                                "group": "positioned"
                            },
                            "certainties":
                            {
                                "uses": "flow",
                                "slot": "story_statement",
                                "spec": "{plural_kinds} {are_being} {certainty} {trait}.",
                                "desc": "Give a kind a trait"
                            },
                            "are_either":
                            {
                                "uses": "str",
                                "spec": "{can be%canbe} {are either%either}"
                            },
                            "certainty":
                            {
                                "uses": "str",
                                "spec": "{usually}, {always}, {seldom}, or {never}",
                                "desc": "Certainty: Whether an trait applies to a kind of noun.",
                                "group": "positioned"
                            },
                            "property":
                            {
                                "uses": "str",
                                "group": "positioned"
                            }
                        }
                    },
                    "misc":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "record_type":
                            {
                                "uses": "flow",
                                "spec": "a record of {kind%kind:record_singular}"
                            },
                            "record_list":
                            {
                                "uses": "flow",
                                "spec": "a list of {kind%kind:record_singular} records"
                            },
                            "boxed_text":
                            {
                                "uses": "flow",
                                "spec": "{text}"
                            },
                            "boxed_number":
                            {
                                "uses": "flow",
                                "spec": "{number}"
                            },
                            "ana":
                            {
                                "uses": "str",
                                "spec": "{a} or {an}"
                            },
                            "are_being":
                            {
                                "uses": "str",
                                "spec": "{are} or {is}"
                            },
                            "are_an":
                            {
                                "uses": "str",
                                "spec": "{are}, {are a%area}, {are an%arean}, {is}, {is a%isa}, {is an%isan}"
                            },
                            "variable_decl":
                            {
                                "uses": "flow",
                                "spec": "{an:determiner} {name:variable_name} ( {type:variable_type}  {comment?lines} )"
                            },
                            "variable_type":
                            {
                                "uses": "swap",
                                "spec": "a {simple value%primitive:primitive_type}, an {object:object_type}, or {other value%ext:ext_type}",
                                "group": "positioned"
                            },
                            "object_type":
                            {
                                "uses": "flow",
                                "spec": "{an:ana} {kind of%kind:singular_kind}"
                            },
                            "primitive_type":
                            {
                                "uses": "str",
                                "spec": "{a number%number}, {some text%text}, or {a true/false value%bool}",
                                "group": "positioned"
                            },
                            "primitive_value":
                            {
                                "uses": "swap",
                                "spec": "{text%boxed_text} or {number%boxed_number}"
                            },
                            "text_list":
                            {
                                "uses": "str",
                                "spec": "{a list of text%list}",
                                "desc": "List of Text: Specifies the existence of a list of text values."
                            },
                            "number_list":
                            {
                                "uses": "str",
                                "spec": "{a list of numbers%list}",
                                "desc": "List of Numbers: Specifies the existence of a list of numbers."
                            },
                            "ext_type":
                            {
                                "uses": "swap",
                                "spec": "a list of {numbers:number_list}, a list of {text%text_list}, a {record:record_type} or a list of {records:record_list}.",
                                "group": "positioned"
                            }
                        }
                    },
                    "map_making":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "map_direction":
                            {
                                "uses": "str",
                                "group": "modeling",
                                "desc":
                                [
                                    "A heading for movement within the game, often connecting one room within the game to another.",
                                    "The most commonly used are standard compass directions like 'north', 'east', 'south', and 'west'."
                                ]
                            },
                            "map_heading":
                            {
                                "uses": "flow",
                                "spec": "heading {_%map_direction} {via%door?named_noun} {and%map_connection}",
                                "slot": "story_statement",
                                "group": "modeling"
                            },
                            "map_departing":
                            {
                                "uses": "flow",
                                "spec": "departing {via%door:named_noun} {and%map_connection}",
                                "slot": "story_statement",
                                "group": "modeling"
                            },
                            "map_connection":
                            {
                                "uses": "swap",
                                "spec": "{arriving_at:map_destination} {connecting_to:map_destination}"
                            },
                            "map_destination":
                            {
                                "uses": "flow",
                                "spec": "{_%room:named_noun} {door?named_noun}"
                            }
                        }
                    },
                    "stubs":
                    {
                        "uses": "group",
                        "specs":
                        {
                            "determine":
                            {
                                "uses": "flow",
                                "spec": "determine {_%name:pattern_name} {args%arguments?arguments}",
                                "slot":
                                [
                                    "execute",
                                    "bool_eval",
                                    "number_eval",
                                    "text_eval",
                                    "record_eval",
                                    "num_list_eval",
                                    "text_list_eval",
                                    "record_list_eval"
                                ],
                                "desc": "Runs a pattern, and potentially returns a value."
                            },
                            "make":
                            {
                                "uses": "flow",
                                "spec": "make {_%name:text} {args%arguments?arguments}",
                                "slot": "record_eval",
                                "group": "misc"
                            },
                            "send":
                            {
                                "uses": "flow",
                                "spec": "send {_%event:text} {to%path:text_list_eval} {args%arguments?arguments}",
                                "slot":
                                [
                                    "execute",
                                    "bool_eval"
                                ],
                                "desc": "Triggers a event, returns a true/false success value.",
                                "group": "internal"
                            },
                            "argument":
                            {
                                "uses": "flow",
                                "spec": "arg {_%name:text} {from:assignment}",
                                "group":
                                [
                                    "positioned",
                                    "modeling"
                                ]
                            },
                            "arguments":
                            {
                                "uses": "flow",
                                "spec": "args {_%args+argument}",
                                "group":
                                [
                                    "positioned",
                                    "modeling"
                                ]
                            },
                            "render_template":
                            {
                                "uses": "flow",
                                "spec": "render_template {_%template:lines}",
                                "slot": "text_eval",
                                "desc": "Parse text using templates. See: https://github.com/ionous/iffy/wiki/Templates",
                                "group": "format"
                            },
                            "count_of":
                            {
                                "uses": "flow",
                                "spec": "trigger {_%trigger} {num:number_eval}",
                                "slot": "bool_eval",
                                "desc": "A guard which returns true based on a counter. Counters start at zero and are incremented every time the guard gets checked.",
                                "group":
                                [
                                    "logic",
                                    "positioned"
                                ]
                            },
                            "cycle_text":
                            {
                                "uses": "flow",
                                "spec": "cycle {_%parts+text_eval}",
                                "slot": "text_eval",
                                "desc": "When called multiple times, returns each of its inputs in turn.",
                                "group":
                                [
                                    "output",
                                    "positioned"
                                ]
                            },
                            "shuffle_text":
                            {
                                "uses": "flow",
                                "spec": "shuffle {_%parts+text_eval}",
                                "slot": "text_eval",
                                "desc": "When called multiple times returns its inputs at random.",
                                "group":
                                [
                                    "output",
                                    "positioned"
                                ]
                            },
                            "stopping_text":
                            {
                                "uses": "flow",
                                "spec": "stopping {_%parts+text_eval}",
                                "slot": "text_eval",
                                "desc": "When called multiple times returns each of its inputs in turn, sticking to the last one.",
                                "group":
                                [
                                    "output",
                                    "positioned"
                                ]
                            },
                            "grammar_decl":
                            {
                                "uses": "flow",
                                "spec": "understand {_%grammar:grammar_maker}",
                                "desc": "Read what the player types and turn it into actions.",
                                "group": "grammar"
                            }
                        }
                    }
                }
            }
        }
    }
}