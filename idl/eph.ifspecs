{
  "--": [
    "Ephemera generated by importing a story file.",
    "Ephemera are pre-factual statements which may include contradictory information.",
    "Assembly analyzes them to create a self-consistent data model of facts."
  ],
  "Spec:with group:": [
    "eph",
    {
      "Group contains:": [
        {
          "--": "Indicates storage for fields and other properties.",
          "Spec:with str:": [
            "affinity",
            {
              "Str exclusively:uses:": [
                true,
                [
                  {
                    "Option:": "bool"
                  },
                  {
                    "Option:": "number"
                  },
                  {
                    "Option:": "num_list"
                  },
                  {
                    "Option:": "text"
                  },
                  {
                    "Option:": "text_list"
                  },
                  {
                    "Option:": "record"
                  },
                  {
                    "Option:": "record_list"
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "eph_aliases",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:name:type:": [
                      "understand",
                      "short_name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:repeats:": [
                      "as",
                      "aliases",
                      "text",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with str:": [
            "eph_always",
            [
              "eph_pattern_helpers"
            ],
            {
              "Str exclusively:uses:": [
                true,
                [
                  {
                    "Option:": "always"
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "A set of related object states such that exactly one member of the set is true for a given object at a single time.",
            "Generates an implicit kind of 'aspect' where every field of the kind is a boolean property."
          ],
          "Spec:slots:with flow:": [
            "eph_aspects",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:type:": [
                      "aspects",
                      "text"
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "traits",
                      "text",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:with flow:": [
            "eph_at",
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:type:": [
                      "at",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "eph",
                      "ephemera"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "eph_begin_domain",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:name:type:": [
                      "domain",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "requires",
                      "text",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with swap:": [
            "eph_cardinality",
            [
              "eph_relation_helpers"
            ],
            {
              "Swap between:": [
                {
                  "Pick:": "one_one"
                },
                {
                  "Pick:": "one_many"
                },
                {
                  "Pick:": "many_one"
                },
                {
                  "Pick:": "many_many"
                }
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "eph_checks",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:name:type:": [
                      "check",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "expect",
                      "literal_value",
                      true
                    ]
                  },
                  {
                    "Term:name:type:repeats:": [
                      "does",
                      "exe",
                      "execute",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "eph_directives",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:name:type:": [
                      "go",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:": [
                      "parse",
                      "directive"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "eph_end_domain",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:name:type:": [
                      "domain",
                      "name",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "A new type deriving from another existing type.",
            "The new kind has all of the properties of all of its ancestor kinds",
            "and it can be used wherever one of its ancestor kinds is needed.",
            "( The reverse isn't true because the new kind can have its own unique properties not available to its ancestors. )"
          ],
          "Spec:slots:with flow:": [
            "eph_kinds",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:type:": [
                      "kinds",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "text"
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "contain",
                      "eph_params",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:with flow:": [
            "eph_list",
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:name:type:repeats:": [
                      "list",
                      "all",
                      "eph_at",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "eph_nouns",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:type:": [
                      "noun",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "kind",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Rules for transforming plural text to singular text and back again.",
            "Used by the assembler to help interpret author definitions,",
            "and at runtime to help the parser interpret user input."
          ],
          "Spec:slots:with flow:": [
            "eph_opposites",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:type:": [
                      "opposite",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "word",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "'Affinity' designates the storage type of a given parameter",
            "while 'class' is used to indicate an interpretation of that parameter, for example a reference to a kind.",
            "Pattern locals can have an initial value, other uses of parameter cannot."
          ],
          "Spec:with flow:": [
            "eph_params",
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:name:": [
                      "have",
                      "affinity"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "called",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "of",
                      "class",
                      "text",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "initially",
                      "assignment",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Patterns provide author reusable code.",
            "The parameters define values provided by the caller.",
            "Locals provide scratch values for use during pattern processing.",
            "The result allows the pattern to return a value to the caller of pattern.",
            "While multiple pattern commands can be used to define a pattern,",
            "the set of arguments and the return can only be specified once."
          ],
          "Spec:slots:with flow:": [
            "eph_patterns",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:name:type:": [
                      "pattern",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:repeats:": [
                      "with",
                      "params",
                      "eph_params",
                      true,
                      true
                    ]
                  },
                  {
                    "Term:type:optional:repeats:": [
                      "locals",
                      "eph_params",
                      true,
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "result",
                      "eph_params",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Rules for transforming plural text to singular text and back again.",
            "Used by the assembler to help interpret author definitions,",
            "and at runtime to help the parser interpret user input."
          ],
          "Spec:slots:with flow:": [
            "eph_plurals",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:type:": [
                      "plural",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "singular",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Implies some fact about the world that will be defined elsewhere.",
            "Reuses the set of ephemera to limit redefinition. Not all are valid."
          ],
          "Spec:slots:with flow:": [
            "eph_refs",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:type:repeats:": [
                      "refs",
                      "ephemera",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "eph_relations",
            [
              "ephemera"
            ],
            {
              "flow:trim:uses:": [
                "eph",
                true,
                [
                  {
                    "Term:type:": [
                      "rel",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "relate",
                      "cardinality",
                      "eph_cardinality"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "eph_relatives",
            [
              "ephemera"
            ],
            {
              "flow:trim:uses:": [
                "eph",
                true,
                [
                  {
                    "Term:type:": [
                      "rel",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "relates",
                      "noun",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "to",
                      "other_noun",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "eph_rules",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:name:type:": [
                      "pattern",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "target",
                      "text",
                      true
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "if",
                      "filter",
                      "bool_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "when",
                      "eph_timing"
                    ]
                  },
                  {
                    "Term:name:type:repeats:": [
                      "does",
                      "exe",
                      "execute",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "touch",
                      "eph_always",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with str:": [
            "eph_timing",
            [
              "eph_pattern_helpers"
            ],
            {
              "Str exclusively:uses:": [
                true,
                [
                  {
                    "Option:": "before"
                  },
                  {
                    "Option:": "during"
                  },
                  {
                    "Option:": "after"
                  },
                  {
                    "Option:": "later"
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Give a noun a specific value at startup.",
            "Initialization is somewhat simplistic:",
            "1. Initial values are not scoped to domains, triggers must be used to change values when domains begin and end.",
            "2. The values inside of records can be set using a 'path' to find them, however individual values within lists cannot be set.",
            "Note: when using a path, the path addresses the noun first, the named field - referring to the inner most record - last."
          ],
          "Spec:slots:with flow:": [
            "eph_values",
            [
              "ephemera"
            ],
            {
              "flow:uses:": [
                "eph",
                [
                  {
                    "Term:type:": [
                      "noun",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "has",
                      "field",
                      "text"
                    ]
                  },
                  {
                    "Term:type:optional:repeats:": [
                      "path",
                      "text",
                      true,
                      true
                    ]
                  },
                  {
                    "Term:type:": [
                      "value",
                      "literal_value"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:with slot:": [
            "ephemera",
            {
              "Slot": true
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "many_many",
            [
              "eph_relation_helpers"
            ],
            {
              "flow:trim:uses:": [
                "kinds",
                true,
                [
                  {
                    "Term:type:": [
                      "kinds",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "to_kinds",
                      "other_kinds",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "many_one",
            [
              "eph_relation_helpers"
            ],
            {
              "flow:trim:uses:": [
                "kinds",
                true,
                [
                  {
                    "Term:type:": [
                      "kinds",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "to_kind",
                      "other_kind",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "one_many",
            [
              "eph_relation_helpers"
            ],
            {
              "flow:trim:uses:": [
                "kind",
                true,
                [
                  {
                    "Term:type:": [
                      "kind",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "to_kinds",
                      "other_kinds",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "one_one",
            [
              "eph_relation_helpers"
            ],
            {
              "flow:trim:uses:": [
                "kind",
                true,
                [
                  {
                    "Term:type:": [
                      "kind",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "to_kind",
                      "other_kind",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        }
      ]
    }
  ]
}
