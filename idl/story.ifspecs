{
  "--": "story",
  "Spec:with group:": [
    "story",
    {
      "Group contains:": [
        {
          "Spec:groups:with str:": [
            "abstract_action",
            "events",
            {
              "Str exclusively:uses:": [
                true,
                [
                  {
                    "Option:": "nothing"
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "action_context",
            "events",
            {
              "Flow phrase:uses:": [
                "and one {$kind} ( the other noun )",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "kind",
                      "singular_kind"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Declare an activity: Activities help actors perform tasks: for instance, picking up or dropping items.  Activities involve either the player or an npc and possibly one or two other objects.",
          "Spec:slots:groups:with flow:": [
            "action_decl",
            "story_statement",
            "events",
            {
              "Flow:phrase:uses:": [
                "Event",
                "Agents can {act$event} and {acting$action} requires {action params$action_params}.",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "event",
                      "event_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "action",
                      "action_name"
                    ]
                  },
                  {
                    "Term:name:": [
                      "args",
                      "action_params"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with str:": [
            "action_name",
            "events",
            {
              "Str uses:": []
            }
          ]
        },
        {
          "Spec:groups:with swap:": [
            "action_params",
            "events",
            {
              "Swap between:": [
                {
                  "Pick:label:type:": [
                    "common",
                    "one or more objects",
                    "common_action"
                  ]
                },
                {
                  "Pick:label:type:": [
                    "dual",
                    "two similar objects",
                    "paired_action"
                  ]
                },
                {
                  "Pick:label:type:": [
                    "none",
                    "nothing",
                    "abstract_action"
                  ]
                }
              ]
            }
          ]
        },
        {
          "--": "Add traits to an aspect",
          "Spec:slots:with flow:": [
            "define_traits",
            "story_statement",
            {
              "Flow:uses:": [
                "define",
                [
                  {
                    "Term:type:": [
                      "traits",
                      "text_list_eval"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "as",
                      "aspect",
                      "text_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "aspect_field",
            "field",
            {
              "Flow:uses:": [
                "aspect",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "aspect",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:groups:with flow:": [
            "bool_field",
            "field",
            "properties",
            {
              "Flow:phrase:uses:": [
                "bool",
                "a true/false value named {name$name} ( {$type} ) {$initially}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "kind",
                      "type",
                      "text",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "initially",
                      "bool_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },

        {
          "Spec:groups:with flow:": [
            "common_action",
            "events",
            {
              "Flow phrase:uses:": [
                "one {$kind} ( the noun ) {$action_context}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "kind",
                      "singular_kind"
                    ]
                  },
                  {
                    "Term:optional:": [
                      "action_context",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "A guard which returns true based on a counter.",
            "Counters start at zero and are incremented every time the guard gets checked."
          ],
          "Spec:slots:groups:with flow:": [
            "count_of",
            "bool_eval",
            "logic",
            {
              "Flow phrase:uses:": [
                "trigger {_$trigger} {$num}",
                [
                  {
                    "Term:name:": [
                      "_",
                      "trigger"
                    ]
                  },
                  {
                    "Term:type:": [
                      "num",
                      "number_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "When called multiple times, returns each of its inputs in turn.",
          "Spec:slots:groups:with flow:": [
            "cycle_text",
            "text_eval",
            "output",
            {
              "Flow phrase:uses:": [
                "cycle {_$parts}",
                [
                  {
                    "Term:name:type:repeats:": [
                      "_",
                      "parts",
                      "text_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:with slot:": [
            "named_noun",
            {
              "Slot": true
            }
          ]
        },
        {
          "Spec:with slot:": [
            "singular_noun",
            {
              "Slot": true
            }
          ]
        },
        {
          "--": [
            "A specific person, place or thing.",
            "When used with a determiner typically implies a common noun ( 'the cat', 'some fish', 'a snack'. )",
            "When used alone usually implies a proper noun ( 'Hikaru', 'Genesis', or 'Beta Regula One'. )"
          ],
          "Spec:slots:groups:with flow:": [
            "noun_named",
            [
              "named_noun",
              "singular_noun"
            ],
            "mosaic:inline_block",
            {
              "Flow:uses:": [
                "noun",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "name",
                      "noun_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Some person, place, or thing which lacks a specific name.",
            "For example, maybe: 'a helicopter', 'some hooded figures', or 'the dog park'."
          ],
          "Spec:slots:groups:with flow:": [
            "common_noun",
            [
              "named_noun",
              "singular_noun"
            ],
            "mosaic:inline_block",
            {
              "Flow:uses:": [
                "noun",
                [
                  {
                    "Term:name:": [
                      "_",
                      "determiner"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "named",
                      "noun",
                      "noun_named"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:with str:": [
            "determiner",
            {
              "Str uses:": [
                {
                  "Option:": "a"
                },
                {
                  "Option:": "an"
                },
                {
                  "Option:": "the"
                },
                {
                  "Option:": "our"
                }
              ]
            }
          ]
        },
        {
          "Spec:with str:": [
            "noun_name",
            {
              "Str uses:": []
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "counted_nouns",
            "named_noun",
            {
              "Flow:uses:": [
                "nouns",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "count",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "named",
                      "kinds",
                      "plural_kinds"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Declare event listeners.",
            "Listeners let objects in the game world react to changes before, during, or after they happen."
          ],
          "Spec:slots:groups:with flow:": [
            "event_block",
            "story_statement",
            "events",
            {
              "Flow:phrase:uses:": [
                "listen",
                "For {the target$target} {$handlers}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "target",
                      "event_target"
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "handlers",
                      "event_handler",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "event_handler",
            "events",
            {
              "Flow:phrase:uses:": [
                "with",
                "{$event_phase} {the event$event} {$locals} do:{$rules}",
                [
                  {
                    "Term:name:": [
                      "_",
                      "event_phase"
                    ]
                  },
                  {
                    "Term:type:": [
                      "event",
                      "event_name"
                    ]
                  },
                  {
                    "Term:name:type:optional:repeats:": [
                      "provides",
                      "locals",
                      "field",
                      true,
                      true
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "rules",
                      "pattern_rule",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with str:": [
            "event_name",
            "events",
            {
              "Str uses:": []
            }
          ]
        },
        {
          "Spec:groups:with str:": [
            "event_phase",
            "events",
            {
              "Str exclusively:uses:": [
                true,
                [
                  {
                    "Option:": "before"
                  },
                  {
                    "Option:label:": [
                      "while",
                      "during"
                    ]
                  },
                  {
                    "Option:": "after"
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with swap:": [
            "event_target",
            "events",
            {
              "Swap between:": [
                {
                  "Pick:type:": [
                    "kinds",
                    "plural_kinds"
                  ]
                },
                {
                  "Pick:type:": [
                    "noun",
                    "singular_noun"
                  ]
                }
              ]
            }
          ]
        },
        {
          "--": "Read what the player types and turn it into actions.",
          "Spec:slots:groups:with flow:": [
            "grammar_decl",
            "story_statement",
            "grammar",
            {
              "Flow phrase:uses:": [
                "understand {_$grammar}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "grammar",
                      "grammar_maker"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:groups:with flow:": [
            "kind_of_relation",
            "story_statement",
            "relations",
            {
              "Flow phrase:uses:": [
                "{$relation} relates {$cardinality}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "relation",
                      "relation_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "cardinality",
                      "relation_cardinality"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Add properties to a kind",
          "Spec:slots:with flow:": [
            "define_fields",
            "story_statement",
            {
              "Flow:uses:": [
                "define",
                [
                  {
                    "Term:type:": [
                      "kind",
                      "text_eval"
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "fields",
                      "field",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "define_kinds",
            "story_statement",
            {
              "Flow:uses:": [
                "define",
                [
                  {
                    "Term:type:": [
                      "kinds",
                      "text_list_eval"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "as",
                      "ancestor",
                      "text_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "The opposite of east is west.",
          "Spec:slots:groups:with flow:": [
            "make_opposite",
            "story_statement",
            "language",
            {
              "Flow:phrase:uses:": [
                "make",
                "The opposite of {$word} is the {$opposite}.",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "word",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "opposite",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "The plural of person is people.",
            "The plural of person is persons."
          ],
          "Spec:slots:groups:with flow:": [
            "make_plural",
            "story_statement",
            "language",
            {
              "Flow:phrase:uses:": [
                "make",
                "The plural of {$singular} is {$plural}.",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "singular",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "plural",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "many_to_many",
            "relations",
            {
              "Flow phrase:uses:": [
                "many {$kinds} to many {$other_kinds}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "kinds",
                      "plural_kinds"
                    ]
                  },
                  {
                    "Term:type:": [
                      "other_kinds",
                      "plural_kinds"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "many_to_one",
            "relations",
            {
              "Flow phrase:uses:": [
                "many {$kinds} to one {$kind}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "kinds",
                      "plural_kinds"
                    ]
                  },
                  {
                    "Term:type:": [
                      "kind",
                      "singular_kind"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Chooses between a one-way and a two-way connection between rooms.  Generally, this only makes sense for map headings, but it at least causes 'departing' to check that a reverse connection exists.  Note: moving from one room leads you into another somewhat generically.  Sometimes its useful to position the player on entry to a new room based on where they came from.  Using, a previous room or last used door can do the trick.",
          "Spec:groups:with str:": [
            "map_connection",
            "map_making",
            {
              "Str exclusively:uses:": [
                true,
                [
                  {
                    "Option:": "arriving_at"
                  },
                  {
                    "Option:": "connecting_to"
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Leaving a room by by going through a door ( ex. departing the house via the front door... ).",
          "Spec:slots:groups:with flow:": [
            "map_departing",
            "story_statement",
            [
              "map_making",
              "modeling"
            ],
            {
              "Flow:uses:": [
                "departing",
                [
                  {
                    "Term:name:type:": [
                      "from",
                      "room",
                      "singular_noun"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "via",
                      "door",
                      "singular_noun"
                    ]
                  },
                  {
                    "Term:name:": [
                      "and",
                      "map_connection"
                    ]
                  },
                  {
                    "Term:type:": [
                      "other_room",
                      "singular_noun"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "A heading for movement within the game, often connecting one room within the game to another.  The most commonly used are standard compass directions like 'north', 'east', 'south', and 'west'.",
          "Spec:groups:with str:": [
            "map_direction",
            [
              "map_making",
              "modeling"
            ],
            {
              "Str uses:": []
            }
          ]
        },
        {
          "--": "Leaving a room by moving in a compass direction ( ex. heading east... ).",
          "Spec:slots:groups:with flow:": [
            "map_heading",
            "story_statement",
            [
              "map_making",
              "modeling"
            ],
            {
              "Flow:uses:": [
                "heading",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "dir",
                      "map_direction"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "from",
                      "room",
                      "singular_noun"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "via",
                      "door",
                      "singular_noun",
                      true
                    ]
                  },
                  {
                    "Term:name:": [
                      "and",
                      "map_connection"
                    ]
                  },
                  {
                    "Term:type:": [
                      "other_room",
                      "singular_noun"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Assign text to a noun.",
            "Assign text.",
            "Gives a noun one or more lines of text."
          ],
          "Spec:slots:groups:with flow:": [
            "noun_assignment",
            "story_statement",
            "properties",
            {
              "Flow phrase:uses:": [
                "The {$property} of {$nouns} is {the text$lines}",
                [
                  {
                    "Term:name:": [
                      "_",
                      "property"
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "nouns",
                      "named_noun",
                      true
                    ]
                  },
                  {
                    "Term:": "lines"
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "define_nouns",
            "story_statement",
            {
              "Flow:uses:": [
                "define",
                [
                  {
                    "Term:type:": [
                      "nouns",
                      "text_list_eval"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "as",
                      "kind",
                      "text_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "define_noun_traits",
            "story_statement",
            {
              "Flow:uses:": [
                "define",
                [
                  {
                    "Term:type:": [
                      "nouns",
                      "text_list_eval"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "as",
                      "kind",
                      "text_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:": [
                      "traits",
                      "text_list_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:groups:with flow:": [
            "num_list_field",
            "field",
            "properties",
            {
              "Flow:phrase:uses:": [
                "num_list",
                "a list of nums named {name$name} ( {$type} ) {$initially}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "kind",
                      "type",
                      "text",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "initially",
                      "num_list_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:groups:with flow:": [
            "number_field",
            "field",
            "properties",
            {
              "Flow:phrase:uses:": [
                "number",
                "a number named {name$name} ( {$type} ) {$initially}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "kind",
                      "type",
                      "text",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "initially",
                      "number_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "one_to_many",
            "relations",
            {
              "Flow phrase:uses:": [
                "one {$kind} to many {$kinds}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "kind",
                      "singular_kind"
                    ]
                  },
                  {
                    "Term:type:": [
                      "kinds",
                      "plural_kinds"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "one_to_one",
            "relations",
            {
              "Flow phrase:uses:": [
                "one {$kind} to one {$other_kind}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "kind",
                      "singular_kind"
                    ]
                  },
                  {
                    "Term:type:": [
                      "other_kind",
                      "singular_kind"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "paired_action",
            "events",
            {
              "Flow phrase:uses:": [
                "two {$kinds} ( the noun and other noun )",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "kinds",
                      "plural_kinds"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Phrases",
          "Spec:groups:with flow:": [
            "paragraph",
            "statements",
            {
              "Flow phrase:uses:": [
                "{$story_statement}",
                [
                  {
                    "Term:name:optional:repeats:": [
                      "_",
                      "story_statement",
                      true,
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Add actions to a pattern.",
            "Actions to take when using a pattern."
          ],
          "Spec:slots:groups:with flow:": [
            "pattern_actions",
            "story_statement",
            "patterns",
            {
              "Flow:phrase:uses:": [
                "pattern",
                "To determine {pattern name$name} {locals$locals} do: {$rules}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "pattern_name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:repeats:": [
                      "provides",
                      "locals",
                      "field",
                      true,
                      true
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "rules",
                      "pattern_rule",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Declare a pattern: A pattern is a bundle of functions which can either change the game world or provide information about it.  Each function in a given pattern has \"guards\" which determine whether the function applies in a particular situation.",
          "Spec:slots:groups:with flow:": [
            "pattern_decl",
            "story_statement",
            "patterns",
            {
              "Flow:phrase:uses:": [
                "Pattern",
                "To determine {$name} {params$params} {pattern return$pattern_return}.",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "pattern_name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:repeats:": [
                      "requires",
                      "params",
                      "field",
                      true,
                      true
                    ]
                  },
                  {
                    "Term:name:optional:": [
                      "returns",
                      "pattern_return",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with str:": [
            "pattern_flags",
            "patterns",
            {
              "Str exclusively:uses:": [
                true,
                [
                  {
                    "Option:label:": [
                      "before",
                      "continue before"
                    ]
                  },
                  {
                    "Option:label:": [
                      "after",
                      "continue after"
                    ]
                  },
                  {
                    "Option:": "terminate"
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "pattern_return",
            "patterns",
            {
              "Flow:phrase:uses:": [
                "pattern_result",
                "returning {$result}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "result",
                      "field"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Rule",
          "Spec:groups:with flow:": [
            "pattern_rule",
            "patterns",
            {
              "Flow phrase:uses:": [
                "When {conditions are met$guard}{continue$flags}, then: {$does}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "guard",
                      "bool_eval"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "flags",
                      "pattern_flags",
                      true
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "does",
                      "execute",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with str:": [
            "pattern_type",
            "patterns",
            {
              "Str uses:": [
                {
                  "Option:": "patterns"
                },
                {
                  "Option:": "actions"
                },
                {
                  "Option:": "events"
                }
              ]
            }
          ]
        },
        {
          "--": "The plural name of a type of similar nouns. For example: animals, containers, etc.",
          "Spec:groups:with str:": [
            "plural_kinds",
            "kinds",
            {
              "Str uses:": []
            }
          ]
        },
        {
          "Spec:groups:with str:": [
            "property",
            "properties",
            {
              "Str uses:": []
            }
          ]
        },
        {
          "--": "future: each slot should support an appropriate 'starting as' initial value",
          "Spec:groups:with slot:": [
            "field",
            "properties",
            {
              "Slot": true
            }
          ]
        },
        {
          "Spec:slots:groups:with flow:": [
            "record_list_field",
            "field",
            "properties",
            {
              "Flow:phrase:uses:": [
                "record_list",
                "a list of records named {name$name} ( {$type} ) {$initially}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "kind",
                      "type",
                      "text",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "initially",
                      "record_list_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:groups:with flow:": [
            "record_field",
            "field",
            "properties",
            {
              "Flow:phrase:uses:": [
                "record",
                "a record named {name$name} ( {$type} ) {$initially}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "kind",
                      "type",
                      "text",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "initially",
                      "record_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with swap:": [
            "relation_cardinality",
            "relations",
            {
              "Swap between:": [
                {
                  "Pick:": "one_to_one"
                },
                {
                  "Pick:": "one_to_many"
                },
                {
                  "Pick:": "many_to_one"
                },
                {
                  "Pick:": "many_to_many"
                }
              ]
            }
          ]
        },
        {
          "--": "Relate nouns to each other",
          "Spec:slots:with flow:": [
            "define_relatives",
            "story_statement",
            {
              "Flow:uses:": [
                "define",
                [
                  {
                    "Term:type:": [
                      "nouns",
                      "text_list_eval"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "as",
                      "kind",
                      "text_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:": [
                      "relation",
                      "text_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "other_nouns",
                      "text_list_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Relate nouns to each other",
          "Spec:slots:with flow:": [
            "define_other_relatives",
            "story_statement",
            {
              "Flow:uses:": [
                "define",
                [
                  {
                    "Term:type:": [
                      "relation",
                      "text_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "nouns",
                      "text_list_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "other_nouns",
                      "text_list_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Used for displaying text to the player.",
            "The text can contain 'inline-templates';",
            "mini-commands that help to simplify printing text.",
            "See also: https://github.com/ionous/iffy/wiki/Templates.",
            "( note: this is transformed for the runtime into an unnamed 'RenderResponse'. )"
          ],
          "Spec:slots:groups:with flow:": [
            "say_template",
            [
              "execute",
              "text_eval"
            ],
            "printing",
            {
              "Flow:uses:": [
                "say",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "template",
                      "lines"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Generate text in a replaceable manner.",
            "( note: this is transformed for the runtime into a named 'RenderResponse'. )"
          ],
          "Spec:slots:groups:with flow:": [
            "say_response",
            [
              "execute",
              "text_eval"
            ],
            "printing",
            {
              "Flow:uses:": [
                "print",
                [
                  {
                    "Term:name:type:": [
                      "response",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "with",
                      "text",
                      "text_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "When called multiple times returns its inputs at random.",
          "Spec:slots:groups:with flow:": [
            "shuffle_text",
            "text_eval",
            "output",
            {
              "Flow phrase:uses:": [
                "shuffle {_$parts}",
                [
                  {
                    "Term:name:type:repeats:": [
                      "_",
                      "parts",
                      "text_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Describes a type of similar nouns.  For example: an animal, a container, etc.",
          "Spec:groups:with str:": [
            "singular_kind",
            "kinds",
            {
              "Str uses:": []
            }
          ]
        },
        {
          "--": "When called multiple times returns each of its inputs in turn, sticking to the last one.",
          "Spec:slots:groups:with flow:": [
            "stopping_text",
            "text_eval",
            "output",
            {
              "Flow phrase:uses:": [
                "stopping {_$parts}",
                [
                  {
                    "Term:name:type:repeats:": [
                      "_",
                      "parts",
                      "text_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:groups:with flow:": [
            "story",
            "statements",
            {
              "Flow phrase:uses:": [
                "{paragraph$paragraph}",
                [
                  {
                    "Term:name:repeats:": [
                      "paragraphs",
                      "paragraph",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "this cheats a bit by making the signature the same as the comment marker  that allows nodes which look like comments but are actually story breaks.",
          "Spec:slots:groups:with flow:": [
            "story_break",
            "story_statement",
            [
              "statements",
              "internal"
            ],
            {
              "Flow:phrase:uses:": [
                "--",
                "story_break",
                []
              ]
            }
          ]
        },
        {
          "--": "top level node, currently just for blockly might eventually contain story metadata  ex. author, description...",
          "--blockly-color": "TAP_HUE_ROOT",
          "Spec:groups:with flow:": [
            "story_file",
            [
              "statements",
              "mosaic:root_block"
            ],
            {
              "Flow:phrase:uses:": [
                "tapestry",
                "{_$story_lines}",
                [
                  {
                    "Term:name:type:repeats:": [
                      "_",
                      "story_lines",
                      "story_statement",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Phrase",
          "--blockly-color": "VARIABLES_HUE",
          "--blockly-stack": true,
          "Spec:groups:with slot:": [
            "story_statement",
            "statements",
            {
              "Slot": true
            }
          ]
        },
        {
          "Spec:slots:groups:with flow:": [
            "text_list_field",
            "field",
            "properties",
            {
              "Flow:phrase:uses:": [
                "text_list",
                "a list of text named {name$name} ( {$type} ) {$initially}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "kind",
                      "type",
                      "text",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "initially",
                      "text_list_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:groups:with flow:": [
            "text_field",
            "field",
            "properties",
            {
              "Flow:phrase:uses:": [
                "text",
                "some text named {name$name} ( {$type} ) {$initially}",
                [
                  {
                    "Term:name:type:": [
                      "_",
                      "name",
                      "text"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "kind",
                      "type",
                      "text",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "initially",
                      "text_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        }
      ]
    }
  ]
}
