# Game world modeling using English-like sentences.
# For example:
#
#  The kitchen is a room. The closed container called the cabinet is in the kitchen.
#  The cabinet contains a mug. The mug is transparent.
#
# These commands aren't specified by authors. Instead, they are created as a byproduct of reading a sentence.  Each successfully matched English sentence results in a single [MatchingPhrases] instance with exactly one valid member.
#
# The types of sentences jess can process are based on the sentences described in Inform7's documentation. However, Inform can handle a much wider range of sentences than jess.
Spec:requires:contains:
  - "jess"
  - - "idl/prim"
    - "idl/rtti"

  - - # Used to store matching text.
      Slot: "matched"

    - # One of a predefined set of determiners: the, a/n, some, our.
      # This only matches if the first letter is lowercase, or uppercase at the start of a sentence;
      # otherwise, the article gets treated as part of the name.
      #
      # Also note:
      #   - The lack of a recognized article makes something proper-named.
      #   - See 'counted_kind' for names with leading numbers: (ex. five or 27).
      #   - Using "some"  (ex. "some coins") will set nouns as "plural named".
      Flow:terms:
        - "article"
        - - Term: "text"
          - Term:type:private:
              - "flags"
              - "article_flags"
              - true

    - # This matches commas, "and", or ", and".
      # It relies on the fact package match treats commas and the word "and" each as their own words.
      Flow:terms:
        - "comma_and"
        - - Term: "matched"

    - # Matches commas, "and", or "or".
      # relies on the fact package match treats commas and ands each as their own words.
      Flow:terms:
        - "comma_and_or"
        - - Term: "matched"

    - # Matches the words "is" or "are".
      Flow:terms:
        - "are"
        - - Term: "matched"

    - # Matches the word "called".
      Flow:terms:
        - "called"
        - - Term: "matched"

    - # Indicates a matcher which can define a noun.
      Slot: "noun_builder"

    - # Specifies a name who's meaning depends on context.
      # For example, when matching: "Gold Roger's treasure chest is a container. The chest is open."
      # the "chest" implies the noun "treasure chest."
      # In other cases, the name might be a kind, or trait, or pretty much anything else.
      #
      # To optimizing matching the words "is/are/comma/and" are never part of name names.
      #
      # Future: allow quoted "titles" ( which are then allowed to break those assumptions )
      Flow:slots:terms:
        - "name"
        - "noun_builder"
        - - Term:optional:
              - "article"
              - true
          - Term: "matched"

    - # Matches an existing noun
      # ( by checking multiple words for the best match ).
      Flow:slots:terms:
        - "noun"
        - "noun_builder"
        - - Term:optional:
              - "article"
              - true
          - # the string that matched ( a noun name or alias )
            Term: "matched"
          - # the database info that matched
            Term:private:
              - "actual_noun"
              - true

    - # Matches an existing noun, or if not: then something new.
      Flow:slots:terms:
        - "named_noun"
        - "noun_builder"
        - - Term:optional:
              - "noun"
              - true
          - Term:optional:
              - "name"
              - true

    - # Defines a name and its kind in a single phrase.
      # Matches: (traits) kind "called" {the name}.
      # For example:
      #    The closed container called the trunk is in the lobby.
      # As per inform, the name includes all text after the word "called"
      # until "is", "are", or the end of the sentence;
      # and specifying "called the/our ..." gives the noun an indefinite article.
      Flow:terms:
        - "kind_called"
        - - # note: doesn't use 'adjectives' because this doesn't allow
            # repetitions of the traits and kind.
            Term:optional:
              - "traits"
              - true
          - Term: "kind"
          - Term: "called"
          - Term: "named_noun"

    - # Specifies one or more nouns, in full or in part.
      # Only one of the options, plus possibly 'additional_names', will match.
      # Not all options are valid in all contexts.
      Flow:slots:terms:
        - "names"
        - "noun_builder"
        - - Term:optional:
              - "counted_kind"
              - true
          - # note that because this phrase is greedy
            # once used, no additional names will match.
            Term:optional:
              - "kind_called"
              - true
          - # matches existing nouns
            Term:optional:
              - "noun"
              - true
          - # used primarily for anonymous nouns: ex. "the container"
            # note that anonymous nouns are prohibited from starting a sentence.
            Term:optional:
              - "kind"
              - true
          - Term:optional:
              - "name"
              - true
          - Term:optional:
              - "additional_names"
              - true

    - # Matches a name following another name.
      Flow:terms:
        - "additional_names"
        - - # a separator is required between names
            Term: "comma_and"
          - Term: "names"

    - # Provides English specification of a number of objects.
      # ( yes, `the five the containers` is permitted. )
      Flow:slots:terms:
        - "counted_kind"
        - "noun_builder"
        - - Term:optional:
              - "article"
              - true
          - Term: "matching_num"
          - Term: "kind"
          - Term: "matched"

    - # Matches the name of an existing kind.
      # Can generate a single anonymous noun.
      Flow:slots:terms:
        - "kind"
        - "noun_builder"
        - - # while an article can precede every kind
            # it doesn't influence which kind gets matched.
            Term:optional:
              - "article"
              - true
          - # the string that matched
            Term: "matched"
          - # the database info that matched
            Term:private:
              - "actual_kind"
              - true

    - # Matches a set of possible kinds as part of kinds_are_traits.
      # jess looks for but prohibits leading traits.
      Flow:terms:
        - "kinds"
        - - # inform uses traits specified here to select
            # matching nouns; jess is not that clever.
            Term:optional:
              - "traits"
              - true
          - Term:optional:
              - "article"
              - true
          - # matches a span ending with "is/are/comma/and"
            Term: "matched"
          - Term:optional:
              - "additional_kinds"
              - true

    - # Matches a kind following another kind.
      Flow:terms:
        - "additional_kinds"
        - - # a separator is required between the names of kinds
            Term: "comma_and"
          - Term: "kinds"

    - # Matches the name of a field in a kind.
      Flow:terms:
        - "property"
        - - Term:optional:
              - "article"
              - true
          - Term:type:
              - "matched"
              - "text"

    - # Matches the name of an (existing) trait.
      Flow:terms:
        - "trait"
        - - # while an article can precede every trait
            # it doesn't influence which trait gets matched.
            Term:optional:
              - "article"
              - true
          - Term:type:
              - "matched"
              - "text"

    - # Matches at least one trait.
      Flow:terms:
        - "traits"
        - - Term: "trait"
          - Term:optional:
              - "additional_traits"
              - true

    - # Matches a trait following another trait.
      Flow:terms:
        - "additional_traits"
        - - Term:optional:
              - "comma_and"
              - true
          - Term: "traits"

    - # Matches one or more predefined words.
      Flow:terms:
        - "words"
        - - Term: "matched"

    - # Matches one or more predefined verbs.
      # ( verbs are nouns of the verb kind )
      Flow:terms:
        - "verb"
        - - Term: "text"

    - # This is the union of all possible matching phrases.
      # For any given plain text sentence,
      # jess tries each of these looking for the first to succeed.
      # Different phrases belong to different scheduled phases;
      # scheduling is handled manually.
      # ( tbd: an alternative might be slots and some scheduling metadata;
      # this is fine for now )
      Flow:terms:
        - "matching_phrases"
        - - Term: "understand"
          - Term: "timed_rule"
          - Term: "kinds_are_kind"
          - Term: "aspects_are_traits"
          - Term: "kinds_are_traits"
          - Term: "kinds_have_properties"
          - Term: "kinds_are_either"
          - Term: "map_connections"
          - Term: "map_directions"
          - Term: "map_locations"
          - Term: "property_noun_value"
          - Term: "noun_property_value"
          - Term: "verb_names_are_names"
          - Term: "names_verb_names"
          - Term: "names_are_like_verbs"

    - # Names are "a kind of"/"kinds of" traits kind:any.
      # Interesting to note that inform allows "some kind/s of", but
      # this is more strict.
      # Like inform `The animals called kittens are a kind of things.` is legal.
      Flow:terms:
        - "kinds_are_kind"
        - - # can match plain names and existing kinds;
            # only allows a leading kind called, and errors on all counted kinds.
            Term: "names"
          - Term: "are"
          - # the phrases "a kind of" or "kinds of"
            Term:type:
              - "kinds_are_kind"
              - "words"
          - # inform doesnt allow commas or ands here,
            # jess reuses the traits list here, so it does allow comma/and.
            Term:optional:
              - "traits"
              - true
          - # inform (weirdly) allows multiple kinds on the rhs:
            # `A box is a kind of container and things.`
            # but not if traits are specified, suggesting a switch there;
            # possibly to detect and reject `A box is a kind of closed and openable container.`
            # which it wants written as `A box is a kind of closed openable container.`
            # this doesnt switch to special traits, and doesnt allow multiple kinds.
            Term: "name"

    - # Assigns default traits to a kind.
      # kinds:objects are "usually" traits.
      # Inform doesn't require the "usually", but i like it as a way to differentiate phrases about kinds vs. phrases about nouns.
      #
      # Future: allow limiting traits to kinds with other traits.
      # For example, in Inform:
      #  The closed containers are fixed in place.
      # makes any containers that are *initially* closed also immovable.
      Flow:terms:
        - "kinds_are_traits"
        - - Term: "kinds"
          - Term: "are"
          - Term:type:
              - "usually"
              - "words"
          - Term: "traits"

    - # Defines traits for aspects that can be (re)used by various other kinds.
      # ex.
      #   The colors are a kind of aspect. The colors are red, blue, and greasy green.
      # The commands aspects_are_traits, kinds_are_traits, and names_are_like_verbs all handle similar phrasing.
      Flow:terms:
        - "aspects_are_traits"
        - - Term:type:
              - "aspect"
              - "kind"
          - Term: "are"
          - Term:type:
              - "plain_names"
              - "names"

    - # Verb names are (other) names.
      # ex.
      #   In the coffin are some coins, a notebook, and the gripping hand.
      # This intentionally doesn't recognize adjectives attached to named names.
      # "In the closed coffin" generates a name with the name "closed coffin"
      # not a coffin in an initially closed state.
      Flow:terms:
        - "verb_names_are_names"
        - - Term: "verb"
          - Term: "names"
          - Term: "are"
          - Term:type:
              - "other_names"
              - "names"

    - # Names are verb (other) names.
      # ex.
      #  The thing called the stake is on the supporter called the altar.
      Flow:terms:
        - "names_verb_names"
        - - Term: "names"
          - Term: "are"
          - Term: "verb"
          - Term:type:
              - "other_names"
              - "names"

    - # Names are adjectives [verb names].
      # ex.
      #    The bottle is a transparent, open, container.
      #    The coffin is a closed container [in the antechamber].
      # This is the *only* way of assigning names initial states directly.
      # All other phrases require a kind to be involved, here the kind is optional.
      Flow:terms:
        - "names_are_like_verbs"
        - - Term: "names"
          - Term: "are"
          - # adjectives are *not* optional.
            # if there are no adjectives present,
            # then 'names_verb_names' (might) match instead.
            Term: "adjectives"
          - Term:optional:
              - "verb_phrase"
              - true

    - # A phrase, starting with a verb, that ends a sentence.
      # ex.
      #   ... in the kitchen.
      #   ... carries the football and sousaphone.
      Flow:terms:
        - "verb_phrase"
        - - Term: "verb"
          - Term:type:
              - "plain_names"
              - "names"

    - # One or more phrases consisting of traits and a kind.
      # while all parts are marked as optional, matching expects
      # there will be at least one trait or one kind
      # and that there can only be additional adjective phrases
      # if the previous one ended with a kind.
      # ex.
      #   a container
      #   closed and fixed in place
      #   a closed container and a fixed in place thing
      Flow:terms:
        - "adjectives"
        - - Term:optional:
              - "traits"
              - true
          - # exists to support phrases like:
            # `the box is transparent and a container.`
            Term:optional:
              - "comma_and"
              - true
          - Term:optional:
              - "kind"
              - true
          - Term:optional:
              - "additional_adjectives"
              - true

    - # An additional set of traits and a kind.
      Flow:terms:
        - "additional_adjectives"
        - - Term: "comma_and"
          - Term: "adjectives"

    - # Assigns a default value to a noun.
      # ex.
      #   The description of the pen is "mightier than the sword.
      # As a special case this also allows a list of quoted text
      # indicated with "are" ( versus "is" )
      Flow:terms:
        - "property_noun_value"
        - - Term:optional:
              - "article"
              - true
          - Term: "property"
          - # the word "of"
            Term:type:
              - "of"
              - "words"
          - Term: "named_noun"
          - Term: "are"
          - Term:optional:
              - "single_value"
              - true
          - Term:optional:
              - "quoted_texts"
              - true

    - # Assigns a default value to a noun.
      # ex.
      #   The pen has (the) description (of) "mightier than the sword."
      # like inform, adjectives ( in phrases with "is" ) cannot be combined with property phrases ( "has/of" )
      Flow:terms:
        - "noun_property_value"
        - - Term: "named_noun"
          - Term:type:
              - "has"
              - "words"
          - Term:optional:
              - "article"
              - true
          - Term: "property"
          - # the word "of", sometimes reads better this way
            Term:type:optional:
              - "of"
              - "words"
              - true
          - Term: "single_value"

    - # This matches only one of its options.
      # ( The options could be represented as a slot; this feels easier for now ).
      Flow:terms:
        - "single_value"
        - - Term:optional:
              - "quoted_text"
              - true
          - Term:optional:
              - "matching_num"
              - true
          - Term:optional:
              - "noun"
              - true
          - Term:optional:
              - "kind"
              - true

    - # Text that begins and ends with double quotes.
      # The quotes themselves are not part of the matched text.
      Flow:terms:
        - "quoted_text"
        - - Term:type:
              - "matched"
              - "text"

    - # Reads a number specified in words or as digits.
      # Stores the result as the parsed number.
      Flow:terms:
        - "matching_num"
        - - Term:type:
              - "value"
              - "num"

    - # Kinds "have" a ("list of") type ("called" name).
      # ex.
      #   Things have some text called a description.
      Flow:terms:
        - "kinds_have_properties"
        - - Term: "kind"
          - Term:type:
              - "have" # or has
              - "words"
          - Term:optional:
              - "article"
              - true
          - Term:type:optional:
              - "list_of"
              - "text"
              - true
          - Term: "property_type"
          - Term:optional:
              - "called_name"
              - true

    - # Used for kinds_have_properties.
      # like kind_called, specifying "called the/our ..." gives the noun an indefinite article.
      Flow:terms:
        - "called_name"
        - - Term: "called"
          - Term: "name"

    - # Matches text, number, kind ( kind|aspect|record )
      # as part of 'kinds_have_properties'.
      # Exactly one member can match.
      Flow:terms:
        - "property_type"
        - - Term:type:optional:
              - "primitive"
              - "text"
              - true
          - # kinds|aspects|records
            Term:optional:
              - "kind"
              - true

    - # Kinds ("can be"|"are either") new_trait [or new_trait...].
      # ex.
      #  A thing can be open or closed.
      Flow:terms:
        - "kinds_are_either"
        - - Term: "kind"
          - Term:type:
              - "can_be" # ("can be"|"are either")
              - "words"
          - Term:type:
              - "traits"
              - "new_trait"

    - # One or more new trait names,
      # separated by the word "or".
      Flow:terms:
        - "new_trait"
        - - Term: "matched"
          - Term:optional:
              - "new_trait"
              - true

    - # One or more strings of quoted text
      # separated by the words "and", "comma", or "or".
      Flow:terms:
        - "quoted_texts"
        - - Term: "quoted_text"
          - Term:optional:
              - "additional_text"
              - true

    - # Matches a text following another some previous text.
      Flow:terms:
        - "additional_text"
        - - Term: "comma_and_or"
          - Term: "quoted_texts"

    - # Matches rule prefixes:
      # before, instead of, when, after, report
      Flow:terms:
        - "rule_prefix"
        - - Term:private:
              - "prefix_value"
              - true

    - # Controls what to do after matching a rule.
      # Matches "then continue", "then stop", "then skip phase",
      # and "begins", "ends" ( for domain rules )
      # with an optional leading comma.
      Flow:terms:
        - "rule_suffix"
        - - Term:private:
              - "suffix_value"
              - true

    - # Specific names can follow rule declarations.
      # ex.
      #  ( this is the witness light rule )
      Flow:terms:
        - "rule_name"
        - - # "this is the"
            Term:type:optional:
              - "prefix"
              - "bool"
              - true
          - Term:type:optional:
              - "article"
              - "text"
              - true
          - Term: "matched"
          - # the word "rule"
            Term:type:optional:
              - "suffix"
              - "bool"
              - true

    - Flow:terms:
        - "rule_target"
        - - Term:optional:
              - "kind"
              - true
          - Term:optional:
              - "noun"
              - true

    - # Phrases can break out of plain text and into structured tell docs.
      # The documents start with a colon (:) followed by a newline
      # the next line is assumed to be an indented tell mapping or sequence
      # which ends with the first unindented line.
      # Sequences are treated as execute blocks;
      # Mappings are assumed to be a valid eval
      # ( ie. an implementation of one of the rtti interfaces. )
      Flow:terms:
        - "sub_assignment"
        - - Term: "assignment"

    - # Matches pattern rule definitions.
      Flow:terms:
        - "timed_rule"
        - - Term: "rule_prefix"
          - Term:type:optional:
              - "someone"
              - "bool"
              - true
          - # the pattern this rule targets.
            # the pattern must exist for this phrase to generate successfully.
            # ex. "instead of traveling"
            Term:type:
              - "pattern"
              - "kind"
          - Term:optional:
              - "rule_target"
              - true
          - Term:optional:
              - "rule_suffix"
              - true
          - # parenthetical text
            Term:optional:
              - "rule_name"
              - true
          - Term: "sub_assignment"

    - # Various phrases, all starting with the word "Understand".
      Flow:terms:
        - "understand"
        - - Term:type:
              - "understand" # the word "understand"
              - "words"
          - # all of jess's understand start with quoted text
            Term: "quoted_texts"
          - Term:type:
              - "as"
              - "words"
          - # inform is smart enough to *not* allow articles before actions.
            # i am lazy.
            Term:optional:
              - "article"
              - true
          - # ex. Understand "birds" and "ruddy ducks" as the plural of duck.
            # fix? in jess this (also) influences the story interpretation.
            Term:type:optional:
              - "plural_of"
              - "text"
              - true
          - # this matches one or more nouns or kinds:
            # generation susses out what to do with those nouns or kinds.
            # * aliases for nouns: Understand "floor" or "sawdust" as the message.
            # * aliases for kinds: Understand "cupboard" or "cupboards" or "cabinets" as a cabinet.
            # * grammar for actions: Understand "reach underneath/under/beneath/-- [something]" as looking under.
            # jess doesn't permit aliases for kinds, those generate errors.
            Term: "names"

    - # A mapping declaration starting with a room or door.
      # ex.
      #   A dead end called the Airport is west of the Road and north of the Farm.
      Flow:terms:
        - "map_locations"
        - - Term: "linking"
          - Term: "are"
          - Term: "direction_of_linking"
          - Term:optional:
              - "additional_directions"
              - true

    - # Matches additional directions.
      # only used by map_locations.
      Flow:terms:
        - "additional_directions"
        - - Term: "comma_and"
          - Term: "direction_of_linking"
          - Term:optional:
              - "additional_directions"
              - true

    - # A mapping declaration starting with a direction.
      Flow:terms:
        - "map_directions"
        - - Term: "direction_of_linking"
          - Term: "are"
          - # ex. `[Inside from the Meadow] is... the woodcutter's hut.`
            Term:optional:
              - "linking"
              - true
          - # ex. `[West of the Garden] is ... south of the Meadow.`
            Term:type:optional:
              - "redirect"
              - "direction_of_linking"
              - true

    - # A mapping declaration to set the destination of doors.
      # ex.
      #  Through the long slide is the cellar.
      #  Through the blue door and the red door is the kitchen.
      # The destination of a door is always treated as a room or nowhere.
      # ( Inform doesn't allow nowhere, but it seems like a good idea. )
      Flow:terms:
        - "map_connections"
        - - Term:type:
              - "through"
              - "bool"
          - Term:type:
              - "doors"
              - "linking"
          - Term:optional:
              - "additional_links"
              - true
          - Term: "are"
          - Term:type:
              - "room"
              - "linking"

    - # Partial phrase for mapping declarations.
      Flow:terms:
        - "direction_of_linking"
        - - Term: "direction"
          - Term:type:
              - "from_of"
              - "words"
          - # a room or door.
            Term: "linking"

    - # Matches some existing compass direction.
      Flow:terms:
        - "direction"
        - - Term: "text"

    - # Generates a room, a door, or nowhere.
      # ( This i similar to, but distinct from other noun matching phrases. )
      Flow:terms:
        - "linking"
        - - Term:type:optional:
              - "nowhere"
              - "bool"
              - true
          - Term:optional:
              - "kind_called"
              - true
          - Term:optional:
              - "noun"
              - true
          - Term:optional:
              - "name"
              - true

    - # Partial phrase used for map connections.
      # This allows multiple doors, etc. on the lhs.
      Flow:terms:
        - "additional_links"
        - - Term: "comma_and"
          - Term: "linking"
          - Term:optional:
              - "additional_links"
              - true
