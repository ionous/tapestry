// Code generated by capnpc-go. DO NOT EDIT.

package grammar

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type GrammarMaker struct{ capnp.Struct }

// GrammarMaker_TypeID is the unique identifier for the type GrammarMaker.
const GrammarMaker_TypeID = 0x8f1cb974605e751b

func NewGrammarMaker(s *capnp.Segment) (GrammarMaker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GrammarMaker{st}, err
}

func NewRootGrammarMaker(s *capnp.Segment) (GrammarMaker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GrammarMaker{st}, err
}

func ReadRootGrammarMaker(msg *capnp.Message) (GrammarMaker, error) {
	root, err := msg.RootPtr()
	return GrammarMaker{root.Struct()}, err
}

func (s GrammarMaker) String() string {
	str, _ := text.Marshal(0x8f1cb974605e751b, s.Struct)
	return str
}

func (s GrammarMaker) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s GrammarMaker) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GrammarMaker) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s GrammarMaker) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s GrammarMaker) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// GrammarMaker_List is a list of GrammarMaker.
type GrammarMaker_List struct{ capnp.List }

// NewGrammarMaker creates a new list of GrammarMaker.
func NewGrammarMaker_List(s *capnp.Segment, sz int32) (GrammarMaker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return GrammarMaker_List{l}, err
}

func (s GrammarMaker_List) At(i int) GrammarMaker { return GrammarMaker{s.List.Struct(i)} }

func (s GrammarMaker_List) Set(i int, v GrammarMaker) error { return s.List.SetStruct(i, v.Struct) }

func (s GrammarMaker_List) String() string {
	str, _ := text.MarshalList(0x8f1cb974605e751b, s.List)
	return str
}

// GrammarMaker_Promise is a wrapper for a GrammarMaker promised by a client call.
type GrammarMaker_Promise struct{ *capnp.Pipeline }

func (p GrammarMaker_Promise) Struct() (GrammarMaker, error) {
	s, err := p.Pipeline.Struct()
	return GrammarMaker{s}, err
}

func (p GrammarMaker_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type ScannerMaker struct{ capnp.Struct }

// ScannerMaker_TypeID is the unique identifier for the type ScannerMaker.
const ScannerMaker_TypeID = 0xadf097e8857b7a6a

func NewScannerMaker(s *capnp.Segment) (ScannerMaker, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ScannerMaker{st}, err
}

func NewRootScannerMaker(s *capnp.Segment) (ScannerMaker, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ScannerMaker{st}, err
}

func ReadRootScannerMaker(msg *capnp.Message) (ScannerMaker, error) {
	root, err := msg.RootPtr()
	return ScannerMaker{root.Struct()}, err
}

func (s ScannerMaker) String() string {
	str, _ := text.Marshal(0xadf097e8857b7a6a, s.Struct)
	return str
}

func (s ScannerMaker) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s ScannerMaker) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ScannerMaker) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ScannerMaker) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s ScannerMaker) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ScannerMaker_List is a list of ScannerMaker.
type ScannerMaker_List struct{ capnp.List }

// NewScannerMaker creates a new list of ScannerMaker.
func NewScannerMaker_List(s *capnp.Segment, sz int32) (ScannerMaker_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ScannerMaker_List{l}, err
}

func (s ScannerMaker_List) At(i int) ScannerMaker { return ScannerMaker{s.List.Struct(i)} }

func (s ScannerMaker_List) Set(i int, v ScannerMaker) error { return s.List.SetStruct(i, v.Struct) }

func (s ScannerMaker_List) String() string {
	str, _ := text.MarshalList(0xadf097e8857b7a6a, s.List)
	return str
}

// ScannerMaker_Promise is a wrapper for a ScannerMaker promised by a client call.
type ScannerMaker_Promise struct{ *capnp.Pipeline }

func (p ScannerMaker_Promise) Struct() (ScannerMaker, error) {
	s, err := p.Pipeline.Struct()
	return ScannerMaker{s}, err
}

func (p ScannerMaker_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type Action struct{ capnp.Struct }

// Action_TypeID is the unique identifier for the type Action.
const Action_TypeID = 0x878e0b2539f875ff

func NewAction(s *capnp.Segment) (Action, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Action{st}, err
}

func NewRootAction(s *capnp.Segment) (Action, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Action{st}, err
}

func ReadRootAction(msg *capnp.Message) (Action, error) {
	root, err := msg.RootPtr()
	return Action{root.Struct()}, err
}

func (s Action) String() string {
	str, _ := text.Marshal(0x878e0b2539f875ff, s.Struct)
	return str
}

func (s Action) Action() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Action) HasAction() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Action) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Action) SetAction(v string) error {
	return s.Struct.SetText(0, v)
}

// Action_List is a list of Action.
type Action_List struct{ capnp.List }

// NewAction creates a new list of Action.
func NewAction_List(s *capnp.Segment, sz int32) (Action_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Action_List{l}, err
}

func (s Action_List) At(i int) Action { return Action{s.List.Struct(i)} }

func (s Action_List) Set(i int, v Action) error { return s.List.SetStruct(i, v.Struct) }

func (s Action_List) String() string {
	str, _ := text.MarshalList(0x878e0b2539f875ff, s.List)
	return str
}

// Action_Promise is a wrapper for a Action promised by a client call.
type Action_Promise struct{ *capnp.Pipeline }

func (p Action_Promise) Struct() (Action, error) {
	s, err := p.Pipeline.Struct()
	return Action{s}, err
}

type Alias struct{ capnp.Struct }

// Alias_TypeID is the unique identifier for the type Alias.
const Alias_TypeID = 0xf07d98dbe050fdf1

func NewAlias(s *capnp.Segment) (Alias, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Alias{st}, err
}

func NewRootAlias(s *capnp.Segment) (Alias, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Alias{st}, err
}

func ReadRootAlias(msg *capnp.Message) (Alias, error) {
	root, err := msg.RootPtr()
	return Alias{root.Struct()}, err
}

func (s Alias) String() string {
	str, _ := text.Marshal(0xf07d98dbe050fdf1, s.Struct)
	return str
}

func (s Alias) Names() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Alias) HasNames() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Alias) SetNames(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNames sets the names field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Alias) NewNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Alias) AsNoun() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Alias) HasAsNoun() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Alias) AsNounBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Alias) SetAsNoun(v string) error {
	return s.Struct.SetText(1, v)
}

// Alias_List is a list of Alias.
type Alias_List struct{ capnp.List }

// NewAlias creates a new list of Alias.
func NewAlias_List(s *capnp.Segment, sz int32) (Alias_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Alias_List{l}, err
}

func (s Alias_List) At(i int) Alias { return Alias{s.List.Struct(i)} }

func (s Alias_List) Set(i int, v Alias) error { return s.List.SetStruct(i, v.Struct) }

func (s Alias_List) String() string {
	str, _ := text.MarshalList(0xf07d98dbe050fdf1, s.List)
	return str
}

// Alias_Promise is a wrapper for a Alias promised by a client call.
type Alias_Promise struct{ *capnp.Pipeline }

func (p Alias_Promise) Struct() (Alias, error) {
	s, err := p.Pipeline.Struct()
	return Alias{s}, err
}

type AllOf struct{ capnp.Struct }

// AllOf_TypeID is the unique identifier for the type AllOf.
const AllOf_TypeID = 0xef6db31bcbbad834

func NewAllOf(s *capnp.Segment) (AllOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllOf{st}, err
}

func NewRootAllOf(s *capnp.Segment) (AllOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllOf{st}, err
}

func ReadRootAllOf(msg *capnp.Message) (AllOf, error) {
	root, err := msg.RootPtr()
	return AllOf{root.Struct()}, err
}

func (s AllOf) String() string {
	str, _ := text.Marshal(0xef6db31bcbbad834, s.Struct)
	return str
}

func (s AllOf) Series() (ScannerMaker_List, error) {
	p, err := s.Struct.Ptr(0)
	return ScannerMaker_List{List: p.List()}, err
}

func (s AllOf) HasSeries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AllOf) SetSeries(v ScannerMaker_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSeries sets the series field to a newly
// allocated ScannerMaker_List, preferring placement in s's segment.
func (s AllOf) NewSeries(n int32) (ScannerMaker_List, error) {
	l, err := NewScannerMaker_List(s.Struct.Segment(), n)
	if err != nil {
		return ScannerMaker_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AllOf_List is a list of AllOf.
type AllOf_List struct{ capnp.List }

// NewAllOf creates a new list of AllOf.
func NewAllOf_List(s *capnp.Segment, sz int32) (AllOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AllOf_List{l}, err
}

func (s AllOf_List) At(i int) AllOf { return AllOf{s.List.Struct(i)} }

func (s AllOf_List) Set(i int, v AllOf) error { return s.List.SetStruct(i, v.Struct) }

func (s AllOf_List) String() string {
	str, _ := text.MarshalList(0xef6db31bcbbad834, s.List)
	return str
}

// AllOf_Promise is a wrapper for a AllOf promised by a client call.
type AllOf_Promise struct{ *capnp.Pipeline }

func (p AllOf_Promise) Struct() (AllOf, error) {
	s, err := p.Pipeline.Struct()
	return AllOf{s}, err
}

type AnyOf struct{ capnp.Struct }

// AnyOf_TypeID is the unique identifier for the type AnyOf.
const AnyOf_TypeID = 0xb71e3c5e7994bf32

func NewAnyOf(s *capnp.Segment) (AnyOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnyOf{st}, err
}

func NewRootAnyOf(s *capnp.Segment) (AnyOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnyOf{st}, err
}

func ReadRootAnyOf(msg *capnp.Message) (AnyOf, error) {
	root, err := msg.RootPtr()
	return AnyOf{root.Struct()}, err
}

func (s AnyOf) String() string {
	str, _ := text.Marshal(0xb71e3c5e7994bf32, s.Struct)
	return str
}

func (s AnyOf) Options() (ScannerMaker_List, error) {
	p, err := s.Struct.Ptr(0)
	return ScannerMaker_List{List: p.List()}, err
}

func (s AnyOf) HasOptions() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AnyOf) SetOptions(v ScannerMaker_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated ScannerMaker_List, preferring placement in s's segment.
func (s AnyOf) NewOptions(n int32) (ScannerMaker_List, error) {
	l, err := NewScannerMaker_List(s.Struct.Segment(), n)
	if err != nil {
		return ScannerMaker_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AnyOf_List is a list of AnyOf.
type AnyOf_List struct{ capnp.List }

// NewAnyOf creates a new list of AnyOf.
func NewAnyOf_List(s *capnp.Segment, sz int32) (AnyOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnyOf_List{l}, err
}

func (s AnyOf_List) At(i int) AnyOf { return AnyOf{s.List.Struct(i)} }

func (s AnyOf_List) Set(i int, v AnyOf) error { return s.List.SetStruct(i, v.Struct) }

func (s AnyOf_List) String() string {
	str, _ := text.MarshalList(0xb71e3c5e7994bf32, s.List)
	return str
}

// AnyOf_Promise is a wrapper for a AnyOf promised by a client call.
type AnyOf_Promise struct{ *capnp.Pipeline }

func (p AnyOf_Promise) Struct() (AnyOf, error) {
	s, err := p.Pipeline.Struct()
	return AnyOf{s}, err
}

type Directive struct{ capnp.Struct }

// Directive_TypeID is the unique identifier for the type Directive.
const Directive_TypeID = 0x8f7562ef636e702d

func NewDirective(s *capnp.Segment) (Directive, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Directive{st}, err
}

func NewRootDirective(s *capnp.Segment) (Directive, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Directive{st}, err
}

func ReadRootDirective(msg *capnp.Message) (Directive, error) {
	root, err := msg.RootPtr()
	return Directive{root.Struct()}, err
}

func (s Directive) String() string {
	str, _ := text.Marshal(0x8f7562ef636e702d, s.Struct)
	return str
}

func (s Directive) Lede() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Directive) HasLede() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Directive) SetLede(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLede sets the lede field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Directive) NewLede(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Directive) Scans() (ScannerMaker_List, error) {
	p, err := s.Struct.Ptr(1)
	return ScannerMaker_List{List: p.List()}, err
}

func (s Directive) HasScans() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Directive) SetScans(v ScannerMaker_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewScans sets the scans field to a newly
// allocated ScannerMaker_List, preferring placement in s's segment.
func (s Directive) NewScans(n int32) (ScannerMaker_List, error) {
	l, err := NewScannerMaker_List(s.Struct.Segment(), n)
	if err != nil {
		return ScannerMaker_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Directive_List is a list of Directive.
type Directive_List struct{ capnp.List }

// NewDirective creates a new list of Directive.
func NewDirective_List(s *capnp.Segment, sz int32) (Directive_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Directive_List{l}, err
}

func (s Directive_List) At(i int) Directive { return Directive{s.List.Struct(i)} }

func (s Directive_List) Set(i int, v Directive) error { return s.List.SetStruct(i, v.Struct) }

func (s Directive_List) String() string {
	str, _ := text.MarshalList(0x8f7562ef636e702d, s.List)
	return str
}

// Directive_Promise is a wrapper for a Directive promised by a client call.
type Directive_Promise struct{ *capnp.Pipeline }

func (p Directive_Promise) Struct() (Directive, error) {
	s, err := p.Pipeline.Struct()
	return Directive{s}, err
}

type GrammarDecl struct{ capnp.Struct }

// GrammarDecl_TypeID is the unique identifier for the type GrammarDecl.
const GrammarDecl_TypeID = 0x8ba811b05334cbe0

func NewGrammarDecl(s *capnp.Segment) (GrammarDecl, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GrammarDecl{st}, err
}

func NewRootGrammarDecl(s *capnp.Segment) (GrammarDecl, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GrammarDecl{st}, err
}

func ReadRootGrammarDecl(msg *capnp.Message) (GrammarDecl, error) {
	root, err := msg.RootPtr()
	return GrammarDecl{root.Struct()}, err
}

func (s GrammarDecl) String() string {
	str, _ := text.Marshal(0x8ba811b05334cbe0, s.Struct)
	return str
}

func (s GrammarDecl) Grammar() (GrammarMaker, error) {
	p, err := s.Struct.Ptr(0)
	return GrammarMaker{Struct: p.Struct()}, err
}

func (s GrammarDecl) HasGrammar() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GrammarDecl) SetGrammar(v GrammarMaker) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGrammar sets the grammar field to a newly
// allocated GrammarMaker struct, preferring placement in s's segment.
func (s GrammarDecl) NewGrammar() (GrammarMaker, error) {
	ss, err := NewGrammarMaker(s.Struct.Segment())
	if err != nil {
		return GrammarMaker{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// GrammarDecl_List is a list of GrammarDecl.
type GrammarDecl_List struct{ capnp.List }

// NewGrammarDecl creates a new list of GrammarDecl.
func NewGrammarDecl_List(s *capnp.Segment, sz int32) (GrammarDecl_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return GrammarDecl_List{l}, err
}

func (s GrammarDecl_List) At(i int) GrammarDecl { return GrammarDecl{s.List.Struct(i)} }

func (s GrammarDecl_List) Set(i int, v GrammarDecl) error { return s.List.SetStruct(i, v.Struct) }

func (s GrammarDecl_List) String() string {
	str, _ := text.MarshalList(0x8ba811b05334cbe0, s.List)
	return str
}

// GrammarDecl_Promise is a wrapper for a GrammarDecl promised by a client call.
type GrammarDecl_Promise struct{ *capnp.Pipeline }

func (p GrammarDecl_Promise) Struct() (GrammarDecl, error) {
	s, err := p.Pipeline.Struct()
	return GrammarDecl{s}, err
}

func (p GrammarDecl_Promise) Grammar() GrammarMaker_Promise {
	return GrammarMaker_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Noun struct{ capnp.Struct }

// Noun_TypeID is the unique identifier for the type Noun.
const Noun_TypeID = 0xf86368f5ba40b2d3

func NewNoun(s *capnp.Segment) (Noun, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Noun{st}, err
}

func NewRootNoun(s *capnp.Segment) (Noun, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Noun{st}, err
}

func ReadRootNoun(msg *capnp.Message) (Noun, error) {
	root, err := msg.RootPtr()
	return Noun{root.Struct()}, err
}

func (s Noun) String() string {
	str, _ := text.Marshal(0xf86368f5ba40b2d3, s.Struct)
	return str
}

func (s Noun) Kind() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Noun) HasKind() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Noun) KindBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Noun) SetKind(v string) error {
	return s.Struct.SetText(0, v)
}

// Noun_List is a list of Noun.
type Noun_List struct{ capnp.List }

// NewNoun creates a new list of Noun.
func NewNoun_List(s *capnp.Segment, sz int32) (Noun_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Noun_List{l}, err
}

func (s Noun_List) At(i int) Noun { return Noun{s.List.Struct(i)} }

func (s Noun_List) Set(i int, v Noun) error { return s.List.SetStruct(i, v.Struct) }

func (s Noun_List) String() string {
	str, _ := text.MarshalList(0xf86368f5ba40b2d3, s.List)
	return str
}

// Noun_Promise is a wrapper for a Noun promised by a client call.
type Noun_Promise struct{ *capnp.Pipeline }

func (p Noun_Promise) Struct() (Noun, error) {
	s, err := p.Pipeline.Struct()
	return Noun{s}, err
}

type Retarget struct{ capnp.Struct }

// Retarget_TypeID is the unique identifier for the type Retarget.
const Retarget_TypeID = 0xca303e4918b83d39

func NewRetarget(s *capnp.Segment) (Retarget, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Retarget{st}, err
}

func NewRootRetarget(s *capnp.Segment) (Retarget, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Retarget{st}, err
}

func ReadRootRetarget(msg *capnp.Message) (Retarget, error) {
	root, err := msg.RootPtr()
	return Retarget{root.Struct()}, err
}

func (s Retarget) String() string {
	str, _ := text.Marshal(0xca303e4918b83d39, s.Struct)
	return str
}

func (s Retarget) Span() (ScannerMaker_List, error) {
	p, err := s.Struct.Ptr(0)
	return ScannerMaker_List{List: p.List()}, err
}

func (s Retarget) HasSpan() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Retarget) SetSpan(v ScannerMaker_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSpan sets the span field to a newly
// allocated ScannerMaker_List, preferring placement in s's segment.
func (s Retarget) NewSpan(n int32) (ScannerMaker_List, error) {
	l, err := NewScannerMaker_List(s.Struct.Segment(), n)
	if err != nil {
		return ScannerMaker_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Retarget_List is a list of Retarget.
type Retarget_List struct{ capnp.List }

// NewRetarget creates a new list of Retarget.
func NewRetarget_List(s *capnp.Segment, sz int32) (Retarget_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Retarget_List{l}, err
}

func (s Retarget_List) At(i int) Retarget { return Retarget{s.List.Struct(i)} }

func (s Retarget_List) Set(i int, v Retarget) error { return s.List.SetStruct(i, v.Struct) }

func (s Retarget_List) String() string {
	str, _ := text.MarshalList(0xca303e4918b83d39, s.List)
	return str
}

// Retarget_Promise is a wrapper for a Retarget promised by a client call.
type Retarget_Promise struct{ *capnp.Pipeline }

func (p Retarget_Promise) Struct() (Retarget, error) {
	s, err := p.Pipeline.Struct()
	return Retarget{s}, err
}

type Reverse struct{ capnp.Struct }

// Reverse_TypeID is the unique identifier for the type Reverse.
const Reverse_TypeID = 0xbcb69e01a83a08db

func NewReverse(s *capnp.Segment) (Reverse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Reverse{st}, err
}

func NewRootReverse(s *capnp.Segment) (Reverse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Reverse{st}, err
}

func ReadRootReverse(msg *capnp.Message) (Reverse, error) {
	root, err := msg.RootPtr()
	return Reverse{root.Struct()}, err
}

func (s Reverse) String() string {
	str, _ := text.Marshal(0xbcb69e01a83a08db, s.Struct)
	return str
}

func (s Reverse) Reverses() (ScannerMaker_List, error) {
	p, err := s.Struct.Ptr(0)
	return ScannerMaker_List{List: p.List()}, err
}

func (s Reverse) HasReverses() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Reverse) SetReverses(v ScannerMaker_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewReverses sets the reverses field to a newly
// allocated ScannerMaker_List, preferring placement in s's segment.
func (s Reverse) NewReverses(n int32) (ScannerMaker_List, error) {
	l, err := NewScannerMaker_List(s.Struct.Segment(), n)
	if err != nil {
		return ScannerMaker_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Reverse_List is a list of Reverse.
type Reverse_List struct{ capnp.List }

// NewReverse creates a new list of Reverse.
func NewReverse_List(s *capnp.Segment, sz int32) (Reverse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Reverse_List{l}, err
}

func (s Reverse_List) At(i int) Reverse { return Reverse{s.List.Struct(i)} }

func (s Reverse_List) Set(i int, v Reverse) error { return s.List.SetStruct(i, v.Struct) }

func (s Reverse_List) String() string {
	str, _ := text.MarshalList(0xbcb69e01a83a08db, s.List)
	return str
}

// Reverse_Promise is a wrapper for a Reverse promised by a client call.
type Reverse_Promise struct{ *capnp.Pipeline }

func (p Reverse_Promise) Struct() (Reverse, error) {
	s, err := p.Pipeline.Struct()
	return Reverse{s}, err
}

type Self struct{ capnp.Struct }

// Self_TypeID is the unique identifier for the type Self.
const Self_TypeID = 0xf890e56029b6b902

func NewSelf(s *capnp.Segment) (Self, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Self{st}, err
}

func NewRootSelf(s *capnp.Segment) (Self, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Self{st}, err
}

func ReadRootSelf(msg *capnp.Message) (Self, error) {
	root, err := msg.RootPtr()
	return Self{root.Struct()}, err
}

func (s Self) String() string {
	str, _ := text.Marshal(0xf890e56029b6b902, s.Struct)
	return str
}

func (s Self) Player() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Self) HasPlayer() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Self) PlayerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Self) SetPlayer(v string) error {
	return s.Struct.SetText(0, v)
}

// Self_List is a list of Self.
type Self_List struct{ capnp.List }

// NewSelf creates a new list of Self.
func NewSelf_List(s *capnp.Segment, sz int32) (Self_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Self_List{l}, err
}

func (s Self_List) At(i int) Self { return Self{s.List.Struct(i)} }

func (s Self_List) Set(i int, v Self) error { return s.List.SetStruct(i, v.Struct) }

func (s Self_List) String() string {
	str, _ := text.MarshalList(0xf890e56029b6b902, s.List)
	return str
}

// Self_Promise is a wrapper for a Self promised by a client call.
type Self_Promise struct{ *capnp.Pipeline }

func (p Self_Promise) Struct() (Self, error) {
	s, err := p.Pipeline.Struct()
	return Self{s}, err
}

type Words struct{ capnp.Struct }

// Words_TypeID is the unique identifier for the type Words.
const Words_TypeID = 0x800a74cfdf02890b

func NewWords(s *capnp.Segment) (Words, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Words{st}, err
}

func NewRootWords(s *capnp.Segment) (Words, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Words{st}, err
}

func ReadRootWords(msg *capnp.Message) (Words, error) {
	root, err := msg.RootPtr()
	return Words{root.Struct()}, err
}

func (s Words) String() string {
	str, _ := text.Marshal(0x800a74cfdf02890b, s.Struct)
	return str
}

func (s Words) Words() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Words) HasWords() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Words) SetWords(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewWords sets the words field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Words) NewWords(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Words_List is a list of Words.
type Words_List struct{ capnp.List }

// NewWords creates a new list of Words.
func NewWords_List(s *capnp.Segment, sz int32) (Words_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Words_List{l}, err
}

func (s Words_List) At(i int) Words { return Words{s.List.Struct(i)} }

func (s Words_List) Set(i int, v Words) error { return s.List.SetStruct(i, v.Struct) }

func (s Words_List) String() string {
	str, _ := text.MarshalList(0x800a74cfdf02890b, s.List)
	return str
}

// Words_Promise is a wrapper for a Words promised by a client call.
type Words_Promise struct{ *capnp.Pipeline }

func (p Words_Promise) Struct() (Words, error) {
	s, err := p.Pipeline.Struct()
	return Words{s}, err
}

const schema_d042122a01e5f801 = "x\xda\x9c\x95_h\x1cE\x1c\xc7\xe77\xbb{s\xd8" +
	"\xb4\x97\xeb$Pl\xf4\x16I\xa0\x09\xa6\xa4!\xb0\xf4" +
	"0^\xf6(\x14\x0bM\xb2\x17J_L\xedx7i" +
	"\xce\xee\xed\x1e\xbb{\x89\xa7\xc8\xf9\"R\x8a\x7f\xc0\x82" +
	"R\xa8\x0f\x81h-\x06\xb4b\xb4A\x11\x04\x11-b" +
	"\xfdS0-h\xfb\x10\x11$\xb4>(A\x90\x95\xb9" +
	"?\xb9\\\xba\xed\xf5\xf26\xbb|\xe7;\x9f\xdf\xbf\x99" +
	"\x81E<\x82\xf7)%\x19!cH\x09\xf9\xdbN\xe1" +
	"\xdf\xbe\xf7\x1ex\x11Ew\x80\x0fk+\xd0\xb73y" +
	"\x05)@\x10\xa2=x\x8e\xf6cB\xfb\xb1Fs8" +
	"\x81\xc0\xf7\x0bk\xfb{\xb6\xbd\xfar\x90\xfa\x1c\xbe@" +
	"\xe71\xa1\xf3X\xa3+e\xf5\x8d\xcbC\x13\x1fD\xcf" +
	"\x9f\x0eR+\xd2\x8f4*\x11\x1a\x95\xc6\xe8)I\xa8" +
	"w\x17\x8e\x1d\xf7.u\xbd\x16\xa4~O\xbaF?\x96" +
	"\xc4\xea\xc3\xb2\xb6?o\xa5o=]\xd8\xac\xc5B\xf1" +
	"\x83\xf4%]\x96\x08]\x964\xfa\x90<\x8b\xc0\x7f\xe6" +
	"\xb9\xe7_\xfa\xe3\xcd\xdb\x0bA\xce\x9f\xcb\xd7\xe87\xb2" +
	"X}%\x0b\xe7\xc1/\xce\x14\x8f=\xf6\xf0'A\xda" +
	"\x15y\x8e\xae\xca\x84\xae\xca\x1a\xedW\x84\xfaz8~" +
	"\x1e\xde^\xfc,H=\xa9\\\xa4\\!\x94+\x1a\x9d" +
	"/\xab\xf7\x0f\x7f\xba\xeb\x89\xc7\x07\xbe\x0dR/+K" +
	"\xf4\xa6B\xe8ME\xa3=!\xa1\x1e\xfae\xe9\xf2\xee" +
	"\x8fr\xb7\x82\xd4GBst2D\xe8dH\xa3\xe7" +
	"\xca\xea\xbf\xfe\x1b\xbfq\xfd\xad\x17n\x07e\xe4\xbb\xd0" +
	"\x1c\xbd\x1a\"\xf4jH\xa3\x9dDd\xe4\xa7\x8b#K" +
	"\x7fO\xa7\xd7\x82\xbc\xe7\xc9Y\xba@\x08] \x1a]" +
	"%\xc2\x1b_Z\xec=\xbe\xf2z\xa0z{\xf8,\xed" +
	"\x0c\x13\xda\x19\xd6\xe8\x91\xb0P\x9fpX.\xc7\x9c\xbd" +
	"\x90fy+\x1f?j\x13'\xe3\x8e\x03\x18a\xc0\xfe" +
	"\xd7\x87\x7f^x\xdf\xeex\x05\x19\xed\x18\xf4.\xf0\xdf" +
	"\xf9\xf7\x9f\xdf\xc9\x99\xd9_\x91\xb1\x0b\x83\xde\x0d\xd0\x86" +
	"P\x14\x06cGm'\xe3\"T\xf9L\x96\xaa\xa6\x08" +
	"\x19\xb2$#$\x03B\xd1\xed\x83\x08\x19a\x09\x8cn" +
	"\x0c\xb1Y\xa1\x87\x1d\x08\xc6%\xe1\x81\xc5r3\x8a\x9e" +
	"\x8exY\xdbj\x91\xe5AIo\x06\x12\xaf\x82t`" +
	"H\xb0\xb48\xa3\x8c\xd0\xb6\x01\x01W\x10\x0eV>\x0f" +
	"\xf04\x98\x82\xa3\xad\x81\xa3\x0b\x83\xbeg#G7\x06" +
	"}\x00\xfc?\xaf\xf4\xe6N\xbf\xfb\xc8\x1b\xc8x\x14\x83" +
	">\x0e5\x98\x835\x98;\xe8\xc4\x8f}p\x01\xfc\x14" +
	"g\x19uv\x9a)\x9e\xeaMs5o\xb2\"wT" +
	"\xaf\x98\xe7\xae\xca\xac\x8c\xea\x15\x1cK\xcdzj\xd6\xf2" +
	"lU\xb0Gl\xcb\xdd\xdb\x18^\xb2\x1e^\xed\x04h" +
	"\xaf\xcf+\x02h\xbfk\xa4\x87\xd9I\x89;\"\xd4\x0d" +
	"\x86}u\xc3\x08\x9fa&\xecD\x18v\xde\xe9q " +
	"\xeb\xf0\xb4\x97\x9d\xe1(\xb8f\xea\xc6\\U\x92W\xc9" +
	"D\xca\xafmE\xc0\x83\x8a\x17^\x87\xe9\x150\xdd\x12" +
	"\x18#\x18\xa2\x00\x1d ~\x0e\x0fF\x87c\xc6\x93\x12" +
	"\x18\xcfb\x88\x98<\xc37\xb5V\xccM3\xcb5\xe4" +
	"\x06$\x19\x83\xde\xbe\xde\xc1e\x05B\xb5\x8d\xed\xf5k" +
	"\x08ACwV\x83\x9dH3\xcb\xe2[LX\xad\xc3" +
	"-R\x1c\x9bjy\xd8t\xab86\xd5\xa4\xc7\x93\xf5" +
	"a+\xd9y\xd1\xe3n\xf3\xd0\xaaX)\x1e\x9b\xe1\x8e" +
	"\xcb[\x04K\x96R\xbc\xbc\xaf\x09\xda!\x84\x8c6\x09" +
	"\x8c=\x18|\xa7\xb2\xc3E\xf7\x93\xf9u\xbc\x84\xc7\x9c" +
	"\x13\xdck\xb1\xcb\x0e\xf9)^\xd9(\x8c\xefE\xd8W" +
	"O^\xc4\xcd3\xeb\xbe\xd1t\x93\x98[)\xa8i6" +
	"-h\xbc\xce\x94p\xb9\x93\xe5n+TY\xe6n\x81" +
	"*\xcb\xdc&\xd38\x184\x8d\xf1\xda4Nc\x88Y" +
	",\xc77\xdf\xf4\x09\xe6\x8e\xda\x05\xeb\x1e\xf3\x98,1" +
	"\xf7)\xcb.X\xe5\xf3\x1b\xef\xe6jT\xa3\xb6Th" +
	"\xf5q\xe8\x8b\x8c\xd6<\x9bW_L\xef\xc9\xac\x95\xb9" +
	"\x1b\xc0\x04\x97\xcc\xa9\x96\x01&\xb89\xd5\xc2\xfbTy" +
	"\x01j\x08\xff\x07\x00\x00\xff\xff\xc6\xb0\x9c\xb8"

func init() {
	schemas.Register(schema_d042122a01e5f801,
		0x800a74cfdf02890b,
		0x878e0b2539f875ff,
		0x8ba811b05334cbe0,
		0x8f1cb974605e751b,
		0x8f7562ef636e702d,
		0xadf097e8857b7a6a,
		0xb71e3c5e7994bf32,
		0xbcb69e01a83a08db,
		0xca303e4918b83d39,
		0xef6db31bcbbad834,
		0xf07d98dbe050fdf1,
		0xf86368f5ba40b2d3,
		0xf890e56029b6b902)
}
