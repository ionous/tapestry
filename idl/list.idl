# List queries, transformations, etc.
Spec:requires:contains:
  - "list"
  - - "idl/call"
    - "idl/core"
    - "idl/prim"
    - "idl/rtti"
  - - # Erase at edge: Remove one or more values from a list.
      Flow:slots:lede:terms:
        - "erase_edge"
        - "execute"
        - "erase"
        - - Term:name:type:
              - "_"
              - "target"
              - "address"
          - Term:name:type:optional:
              - "at_front"
              - "at_edge"
              - "bool_eval"
              - true
    - # Erase at index: Remove one or more values from a list.
      Flow:slots:lede:terms:
        - "erase_index"
        - "execute"
        - "erase"
        - - Term:name:type:
              - "_"
              - "count"
              - "num_eval"
          - Term:name:type:
              - "from"
              - "target"
              - "address"
          - Term:type:
              - "at_index"
              - "num_eval"
    - # Erase elements from the front or back of a list.
      # Runs a pattern with a list containing the erased values.
      # If nothing was erased, the pattern will be called with an empty list.
      Flow:slots:terms:
        - "erasing"
        - "execute"
        - - Term:name:type:
              - "_"
              - "count"
              - "num_eval"
          - Term:name:type:
              - "from"
              - "target"
              - "address"
          - Term:type:
              - "at_index"
              - "num_eval"
          - Term:type:
              - "as"
              - "text"
          - Term:name:type:repeats:
              - "do"
              - "exe"
              - "execute"
              - true
    - # Erase one element from the front or back of a list.
      # Runs an activity with a list containing the erased values;
      # the list can be empty if nothing was erased.
      Flow:slots:lede:terms:
        - "erasing_edge"
        - "execute"
        - "erasing"
        - - Term:name:type:
              - "_"
              - "target"
              - "address"
          - Term:name:type:optional:
              - "at_front"
              - "at_edge"
              - "bool_eval"
              - true
          - Term:type:
              - "as"
              - "text"
          - Term:name:type:repeats:
              - "do"
              - "exe"
              - "execute"
              - true
          - Term:type:optional:
              - "else"
              - "brancher"
              - true
    - # Loops over the elements in the passed list, or runs the 'else' activity if empty.
      Flow:slots:lede:terms:
        - "list_each"
        - "execute"
        - "repeat"
        - - Term:name:type:
              - "across"
              - "list"
              - "assignment"
          - Term:type:
              - "as"
              - "text"
          - Term:name:type:repeats:
              - "do"
              - "exe"
              - "execute"
              - true
          - Term:type:optional:
              - "else"
              - "brancher"
              - true
    - # Search a list for a specific value.
      Flow:slots:lede:terms:
        - "list_find"
        - - "bool_eval"
          - "num_eval"
        - "find"
        - - Term:name:type:
              - "_"
              - "value"
              - "assignment"
          - Term:name:type:
              - "in_list"
              - "list"
              - "assignment"
    - # Transform the values from a list.
      # The named pattern gets with with two parameters for each value in the list:
      # 'in' as each value from the list, and 'out' as the var passed to the gather.
      Flow:lede:terms:
        - "list_gather"
        - "gather"
        - - Term:name:type:
              - "_"
              - "target"
              - "address"
          - Term:type:
              - "from"
              - "assignment"
          - Term:type:
              - "using"
              - "text"
    - # Determines the number of values in a list.
      Flow:slots:lede:terms:
        - "list_len"
        - "num_eval"
        - "len"
        - - Term:name:type:
              - "_"
              - "list"
              - "assignment"
    - Flow:slots:lede:terms:
        - "make_text_list"
        - "text_list_eval"
        - "list"
        - - Term:name:type:repeats:
              - "of_text"
              - "values"
              - "text_eval"
              - true
    - Flow:slots:lede:terms:
        - "make_num_list"
        - "num_list_eval"
        - "list"
        - - Term:name:type:repeats:
              - "of_numbers"
              - "values"
              - "num_eval"
              - true
    - Flow:slots:lede:terms:
        - "make_record_list"
        - "record_list_eval"
        - "list"
        - - Term:name:type:repeats:
              - "of_records"
              - "values"
              - "record_eval"
              - true
          - Term:name:type:
              - "of_type"
              - "kind"
              - "text_eval"
    - # Transform the values from one list and place the results in another list.
      # The designated pattern is called with each value from the 'from list', one value at a time.
      Flow:slots:lede:terms:
        - "list_map"
        - "execute"
        - "map"
        - - Term:name:type:
              - "_"
              - "target"
              - "address"
          - Term:name:type:
              - "from_list"
              - "list"
              - "assignment"
          - Term:name:type:
              - "using"
              - "pattern_name"
              - "text"
    - # Combine all of the values in a list into a single value.
      # The designated pattern is called with two parameters:
      #   1. each element of the list; and,
      #   2. the value being combined.
      # And, that pattern is expected to return the newly updated value.
      Flow:slots:lede:terms:
        - "list_reduce"
        - "execute"
        - "reduce"
        - - Term:name:type:
              - "into"
              - "target"
              - "address"
          - Term:name:type:
              - "from_list"
              - "list"
              - "assignment"
          - Term:name:type:
              - "using"
              - "pattern_name"
              - "text"
    - # Reverse a list.
      Flow:slots:lede:terms:
        - "list_reverse"
        - "execute"
        - "reverse"
        - - Term:name:type:
              - "list"
              - "target"
              - "address"
    - # Create a new list from a section of another list.
      # Start is optional, if omitted slice starts at the first element.
      # If start is greater the length, an empty array is returned.
      # Slice doesnt include the ending index.
      # Negatives indices indicates an offset from the end.
      # When end is omitted, copy up to and including the last element;
      # and do the same if the end is greater than the length
      Flow:slots:lede:terms:
        - "list_slice"
        - - "num_list_eval"
          - "text_list_eval"
          - "record_list_eval"
        - "slice"
        - - Term:name:type:
              - "_"
              - "list"
              - "assignment"
          - Term:type:optional:
              - "start"
              - "num_eval"
              - true
          - Term:type:optional:
              - "end"
              - "num_eval"
              - true
    - Flow:slots:lede:terms:
        - "list_sort_numbers"
        - "execute"
        - "sort_numbers"
        - - Term:name:type:
              - "_"
              - "target"
              - "address"
          - Term:type:
              - "by_field"
              - "text"
          - Term:type:optional:
              - "descending"
              - "bool_eval"
              - true
    - # Rearrange the elements in the named list by using the designated pattern to test pairs of elements.
      Flow:slots:lede:terms:
        - "list_sort_text"
        - "execute"
        - "sort_texts"
        - - Term:name:type:
              - "_"
              - "target"
              - "address"
          - Term:type:
              - "by_field"
              - "text"
          - Term:type:optional:
              - "descending"
              - "bool_eval"
              - true
          - Term:type:optional:
              - "using_case"
              - "bool_eval"
              - true
    - # Modify a list by adding and removing elements.
      # The type of the elements being added must match the type of the list.
      # Text cant be added to a list of numbers, numbers cant be added to a list of text.
      # If the starting index is negative, this begins that many elements from the end of the array;
      # if list's length plus the start is less than zero, this begins from index zero.
      # If the remove count is missing, this removes all elements from the start to the end;
      # if the remove count is zero or negative, no elements are removed.
      Flow:slots:lede:terms:
        - "list_splice"
        - - "execute"
          - "num_list_eval"
          - "text_list_eval"
          - "record_list_eval"
        - "splice"
        - - Term:name:type:
              - "_"
              - "target"
              - "address"
          - Term:type:
              - "start"
              - "num_eval"
          - Term:type:
              - "remove"
              - "num_eval"
          - Term:type:
              - "insert"
              - "assignment"
    - # Add a value to a list.
      Flow:slots:lede:terms:
        - "list_push"
        - "execute"
        - "push"
        - - Term:name:type:
              - "_"
              - "value"
              - "assignment"
          - Term:name:type:
              - "into"
              - "target"
              - "address"
          - Term:name:type:optional:
              - "at_front"
              - "at_edge"
              - "bool_eval"
              - true
    - # Generates a series of numbers r[i] = (start + step*i) where i>=0.
      # Start and step default to 1, stop defaults to start;
      # the inputs are truncated to produce whole numbers;
      # a zero step returns an error.
      # A positive step ends the series when the returned value would exceed stop
      # while a negative step ends before generating a value less than stop.
      Flow:slots:terms:
        - "range"
        - "num_list_eval"
        - - Term:name:type:
              - "_"
              - "to"
              - "num_eval"
          - Term:type:optional:
              - "from"
              - "num_eval"
              - true
          - Term:type:optional:
              - "by_step"
              - "num_eval"
              - true
