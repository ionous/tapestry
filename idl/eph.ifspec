{
    "eph": {
        "uses": "group",
        "desc": "commands generated by importing a story file",
        "specs": {
            "ephemera": {
                "uses": "slot"
            },
            "affinity": {
                "uses": "str",
                "spec": "{bool}, {number}, {num_list}, {text}, {text_list}, {record}, or {record_list}",
                "desc": [
                    "Indicates storage for fields and other properties."
                ]
            },
            "eph_at": {
                "spec": "eph {at:text} {eph:ephemera}"
            },
            "eph_list": {
                "spec": "eph {list%all+eph_at}"
            },
            "eph_begin_domain": {
                "spec": "eph {domain%name:text} {requires+text}",
                "slot": "ephemera"
            },
            "eph_end_domain": {
                "spec": "eph {domain%name:text}",
                "slot": "ephemera"
            },
            "eph_plurals": {
                "spec": "eph {plural:text} {singular:text}",
                "slot": "ephemera",
                "desc": [
                    "Rules for transforming plural text to singular text and back again.",
                    "Used by the assembler to help interpret author definitions,", 
                    "and at runtime to help the parser interpret user input."
                ]
            },
            "eph_aspects": {
                "spec": "eph {aspects:text} {traits+text}",
                "slot": "ephemera",
                "desc": [
                    "A set of related object states such that exactly one member of the set is true for a given object at a single time.",
                    "Generates an implicit kind of 'aspect' where every field of the kind is a boolean property."
                ]
            },
            "eph_kinds": {
                "spec": "eph {kinds:text} {from:text}",
                "slot": "ephemera",
                "desc": [
                    "A new type deriving from another existing type.",
                    "The new kind has all of the properties of all of its ancestor kinds",
                    "and it can be used wherever one of its ancestor kinds is needed.",
                    "( The reverse isn't true because the new kind can have its own unique properties not available to its ancestors. )"
                ]
            },
            "eph_fields": {
                "spec": "eph {kinds:text} {have%affinity:affinity} {called%name:text} {of%class?text}",
                "slot": "ephemera",
                "desc": [
                    "Contents of a kind.",
                    "'Affinity' designates the storage type of a given field",
                    "while 'class' is used to indicate an interpretation of that field, for example a reference to a kind."
                ]
            },
            "eph_params": {
                "spec": "eph {have%affinity:affinity} {called%name:text} {of%class?text}",
                "slot": "ephemera",
                "desc": [
                    "'Affinity' designates the storage type of a given parameter",
                    "while 'class' is used to indicate an interpretation of that parameter, for example a reference to a kind."
                ]
            },
            "eph_nouns": {
                "spec": "eph {noun:text} {kind:text}",
                "slot": "ephemera"
            },
            "eph_aliases": {
                "spec": "eph {understand%short_name:text} {as%aliases+text}",
                "slot": "ephemera"
            },
            "eph_programs": {
                "spec": "eph {go%name:text} {run%type:text} {using%prog:text}",
                "slot": "ephemera"
            },
            "eph_patterns": {
                "spec": "eph {pattern%name:text} {args*eph_params} {locals*eph_params} {result?eph_params}",
                "slot": "ephemera",
                "desc": [
                    "Patterns provide author reusable code.",
                    "Arguments define values provided by the caller.",
                    "Locals provide scratch values for use during pattern processing.",
                    "The result allows the pattern to return a value to the caller of pattern.",
                    "While multiple pattern commands can be used to define a pattern,",
                    "the set of arguments and the return can only be specified once."
                ]
            },
            "eph_rules": {
                "spec": "eph {pattern%name:text} {if%filter:text} {when:eph_timing} {do%prog:text} {touch?eph_always}",
                "slot": "ephemera"
            },
            "eph_timing": {
                "uses": "str",
                "spec": "{before}, {during}, {after}, or {later}"
            },
            "eph_always": {
                "uses": "str",
                "spec": "{always}"
            },
            "eph_cardinality": {
                "uses": "swap",
                "spec": "{one_one}, {one_many}, {many_one}, or {many_many}"
            },
            "one_one": {
                "uses": "flow",
                "spec": "kind {_%kind:text} {to_kind%other_kind:text}"
            },
            "one_many": {
                "uses": "flow",
                "spec": "kind {_%kind:text} {to_kinds%other_kinds:text}"
            },
            "many_one": {
                "uses": "flow",
                "spec": "kinds {_%kinds:text} {to_kind%other_kind:text}"
            },
            "many_many": {
                "uses": "flow",
                "spec": "kinds {_%kinds:text} {to_kinds%other_kinds:text}"
            },
            "eph_relations": {
                "spec": "eph {_%rel:text} {relate%cardinality:eph_cardinality}",
                "slot": "ephemera"
            }
        }
    }
}