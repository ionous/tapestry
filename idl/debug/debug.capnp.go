// Code generated by capnpc-go. DO NOT EDIT.

package debug

import (
	rtx "git.sr.ht/~ionous/iffy/idl/rtx"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type DoNothing struct{ capnp.Struct }

// DoNothing_TypeID is the unique identifier for the type DoNothing.
const DoNothing_TypeID = 0xcf35bf95ef99bf60

func NewDoNothing(s *capnp.Segment) (DoNothing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DoNothing{st}, err
}

func NewRootDoNothing(s *capnp.Segment) (DoNothing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DoNothing{st}, err
}

func ReadRootDoNothing(msg *capnp.Message) (DoNothing, error) {
	root, err := msg.RootPtr()
	return DoNothing{root.Struct()}, err
}

func (s DoNothing) String() string {
	str, _ := text.Marshal(0xcf35bf95ef99bf60, s.Struct)
	return str
}

func (s DoNothing) Reason() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DoNothing) HasReason() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DoNothing) ReasonBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DoNothing) SetReason(v string) error {
	return s.Struct.SetText(0, v)
}

// DoNothing_List is a list of DoNothing.
type DoNothing_List struct{ capnp.List }

// NewDoNothing creates a new list of DoNothing.
func NewDoNothing_List(s *capnp.Segment, sz int32) (DoNothing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return DoNothing_List{l}, err
}

func (s DoNothing_List) At(i int) DoNothing { return DoNothing{s.List.Struct(i)} }

func (s DoNothing_List) Set(i int, v DoNothing) error { return s.List.SetStruct(i, v.Struct) }

func (s DoNothing_List) String() string {
	str, _ := text.MarshalList(0xcf35bf95ef99bf60, s.List)
	return str
}

// DoNothing_Promise is a wrapper for a DoNothing promised by a client call.
type DoNothing_Promise struct{ *capnp.Pipeline }

func (p DoNothing_Promise) Struct() (DoNothing, error) {
	s, err := p.Pipeline.Struct()
	return DoNothing{s}, err
}

type Log struct{ capnp.Struct }

// Log_TypeID is the unique identifier for the type Log.
const Log_TypeID = 0xfdc770487538f197

func NewLog(s *capnp.Segment) (Log, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Log{st}, err
}

func NewRootLog(s *capnp.Segment) (Log, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Log{st}, err
}

func ReadRootLog(msg *capnp.Message) (Log, error) {
	root, err := msg.RootPtr()
	return Log{root.Struct()}, err
}

func (s Log) String() string {
	str, _ := text.Marshal(0xfdc770487538f197, s.Struct)
	return str
}

func (s Log) Level() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Log) SetLevel(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Log) Value() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Log) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Log) SetValue(v rtx.Assignment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Log) NewValue() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Log_List is a list of Log.
type Log_List struct{ capnp.List }

// NewLog creates a new list of Log.
func NewLog_List(s *capnp.Segment, sz int32) (Log_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Log_List{l}, err
}

func (s Log_List) At(i int) Log { return Log{s.List.Struct(i)} }

func (s Log_List) Set(i int, v Log) error { return s.List.SetStruct(i, v.Struct) }

func (s Log_List) String() string {
	str, _ := text.MarshalList(0xfdc770487538f197, s.List)
	return str
}

// Log_Promise is a wrapper for a Log promised by a client call.
type Log_Promise struct{ *capnp.Pipeline }

func (p Log_Promise) Struct() (Log, error) {
	s, err := p.Pipeline.Struct()
	return Log{s}, err
}

func (p Log_Promise) Value() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_e5343b8be2461313 = "x\xdal\x901h\x13a\x1c\xc5\xdf\xfbr\xf12\\" +
	"\xf1>.\x83\x82\xe5\x8eR\xb1\x95\xb4\x94P\xa9T\xa1" +
	"\x1e\x04I\xa1Z\xbf\xea\xe0\xe0`l\xcf\xa4p\xbd/" +
	"\xd8K\x0f\xc1E\x1d\x8b\x83\xa8\x88\xb88\xd9E\x17\x17" +
	"q\xea\xd8\xa5\xa0\x83\xb3\x83\xa0KA\xd1\xc1A\x94O" +
	".5\x12K\xc7\xf7\xe7\xcf{\xef\xf7\xdcgg\x84," +
	"\xbe\x06T\xa9x\xc0\\\xdd|\xf2\xf5\xd1\xe6\x89\xb7\x90" +
	"\x0e\x8d\xe7\x9d\xfd\xb8~j\xf2\x13\x8a\xb4\x01\x19\xbe\x92" +
	"\xb3\xb6\x9c\x9d\x97of@\xf3\xf8\xdb\xc9N\xbd\xbd\xf5" +
	"\x1b\xca\xe1\xdeW\xef0\xefx\x83\xb4\xbdA\xce{\xb7" +
	"\x99\x81f)\xba\xd6i\x8e/6\xd8N\xda\xd35}" +
	"^\xfbik9i^ \x95Ca\xb6\xce\xbd\x7f\xf9" +
	"B\x97\xefA\x1d\x11\x0c+4\xcf\x7f\xfe\xf8l?\xcc" +
	">@\x8d\x08\x86\x934;\xefFW\xd67\x86\x1e@" +
	"M\x08\x86u\xd2\x01$\x17L\xee\x95[\x81M`\xf7" +
	"x\xfc\xe0\xf5Xg=\xf5\xdd\\L\x1bi\xb4\x12%" +
	"\"\x0d\xb2\xd6\xf2b+X\xd2\xd1j\x90\xe8\xd4\xcf+" +
	"\x8c\x03\xca*X\x80E@\x0eL\xcb\x81)U/P" +
	"]\x12\x9c\xb9\x115Vu\xa2J\x14\xe6\xd8\xf6\xd3\xed" +
	"\x9d\xa9[w\xa1\\\xc1\xf0\x10\xfb*\x97\x05\xc3\x80(" +
	"\xec\xe6\x0d\xd9Y\xebf7\\\xd0\xd9K>\xa7\x9b\xd8" +
	"\x9fy\xa4\x9fyX0\x9c\xe8g\xae\x08\x86\xa7\xd9\x0b" +
	"\xc8]\xfe\xd2U\xfd\xae\x7fO.\x98Z.\x83Xw" +
	"\xf7P\xa5\x7f`\xa3U@\x0d\x17\x98\xcfG\x96\x99\xdf" +
	"\xc6\xaar\xccWs\x05\xaa\xcb\x82~\x1c\xadE1-" +
	"\x08Z\xa0\xbf\xd6\x88;\x91\xb2\xfe\xebi\x09\x86.{" +
	"\xc1\xdd\x0f\x80\xae\xd98Z\xa9]\xf9\xf2\xeb>@\xba" +
	"\xe0\x9f\x00\x00\x00\xff\xffxC\x9b\xee"

func init() {
	schemas.Register(schema_e5343b8be2461313,
		0xcf35bf95ef99bf60,
		0xfdc770487538f197)
}
