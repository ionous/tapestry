# shuttle communication
Spec:with group:
  - "jess"
  - Group contains:
    - # a snippet of matching text;
      # defined via an interface to allow instances
      # to track additional information (ex. db row).
      Spec:with slot:
      - "matched"
      - Slot: true

    - # the root of a sentence matching tree.
      Spec:with slot:
      - "matches"
      - Slot: true

    - # one of a predefined set of determiners:
      # the, a, some, etc.
      # see 'count' for leading numbers
      Spec:with flow:
      - "article"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # conjunction junction
      Spec:with flow:
      - "comma_and"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # matches "is" or "are".
      Spec:with flow:
      - "are"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # represents a single name or "x called y" phrase
      # both can generate a name.
      # todo: find a better name for this slot.
      Spec:with slot:
      - "name_called"
      - Slot: true

    - # matches a name of unknown type
      # for nouns, these names may be treated as aliases for existing nouns.
      # For example, when matching: "Gold Roger's treasure chest is a container. The chest is open."
      # The name "chest" implies the treasure chest.
      # there are some assumptions for optimizing matching:
      # the words "is/are/comma/and" are never part of noun names.
      # future: allow quoted "titles" ( which are then allowed to break those assumptions )
      # ( see also called )
      Spec:slots:with flow:
      - "name"
      - "name_called"
      - Flow uses:
        - # the match is always implemented as a span.
          Term:name:
          - "_"
          - "matched"

    - # called defines a noun and its kind in a single phrase.
      # <kind> "called" [the] _name_.
      # as per inform, the name of the noun is everything after the word called
      # until "is" or "are" or the end of the line.
      # For instance: `The container called the trunk and the box is in the lobby`
      # generates a single noun named "the trunk and the box."
      Spec:slots:with flow:
      - "called"
      - "name_called"
      - Flow uses:
        - Term: "named_kind"
        - # the word "called"
          Term:type:
          - "called"
          - "words"
        - Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # matches at least one name.
      # fix: maybe this should be called "nouns" ( and additional nouns )
      Spec:with flow:
      - "names"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "name_called"
        - Term:optional:
          - "additional_names"
          - true

    - # matches a name following another name.
      Spec:with flow:
      - "additional_names"
      - Flow uses:
        - # unlike traits, a separator is required between the names of names
          Term: "comma_and"
        - Term: "names"

    - # matches the name of an (existing) kind.
      Spec:with flow:
      - "named_kind"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # matches at least one kind.
      Spec:with flow:
      - "kinds"
      - Flow uses:
        - # while an article can precede every kind
          # it doesn't influence which kind gets matched.
          Term:optional:
          - "article"
          - true
        - Term: "named_kind"
        - Term:optional:
          - "additional_kinds"
          - true

    - # matches a kind following another kind.
      Spec:with flow:
      - "additional_kinds"
      - Flow uses:
        - # unlike traits, a separator is required between the names of kinds
          Term: "comma_and"
        - Term: "kinds"

    - # matches the name of an (existing) trait.
      Spec:with flow:
      - "named_trait"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # matches at least one trait.
      Spec:with flow:
      - "traits"
      - Flow uses:
        - # while an article can precede every trait
          # it doesn't influence which trait gets matched.
          Term:optional:
          - "article"
          - true
        - Term: "named_trait"
        - Term:optional:
          - "additional_traits"
          - true

    - # matches a trait following another trait
      Spec:with flow:
      - "additional_traits"
      - Flow uses:
        - Term:optional:
          - "comma_and"
          - true
        - Term: "traits"

    - # matches one or more predefined words
      Spec:with flow:
      - "words"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # matches one or more predefined words
      # and returns a macro. like words
      Spec:with flow:
      - "macro_name"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"
        - Term:private:
          - "macro"
          - true

    - # assigns default traits to a kind.
      # <the kind> are "usually" <traits>
      Spec:slots:with flow:
      - "kinds_are_traits"
      - "matches"
      - Flow uses:
        - Term: "kinds"
        - Term: "are"
        - Term:type:
          - "usually"
          - "words"
        - Term: "traits"

    - # declares nouns with traits and kinds.
      # <names> are <traits> <kinds>.
      # although traits and kinds are both optional,
      # at least one is required to match
      Spec:slots:with flow:
      - "nouns_traits_kinds"
      - "matches"
      - Flow uses:
        - Term: "names"
        - Term: "are"
        - Term:optional:
          - "traits"
          - true
        - # exists to support phrases like:
          # `the box is transparent and a container.`
          Term:optional:
          - "comma_and"
          - true
        - Term:optional:
          - "kinds"
          - true

    - # <names> <are> "a kind of"/"kinds of" <traits> <kind>.
      # interesting to note that inform allows "some kind/s of"
      # this is more strict.
      # like inform this doesn't try to limit the names
      # `The animals called kittens are a kind of things.` is legal.
      Spec:slots:with flow:
      - "kinds_of"
      - "matches"
      - Flow uses:
        - Term: "names"
        - Term: "are"
        - # the phrases "a kind of" or "kinds of"
          Term:type:
          - "kinds_of"
          - "words"
        - # inform doesnt allow commas or ands here,
          # since this definition reuses the traits list: it does allow comma/and.
          Term:optional:
          - "traits"
          - true
        - # inform (weirdly) allows multiple kinds:
          # `A box is a kind of container and things.`
          # but not if traits are specified, suggesting a switch there.
          # this doesnt switch to special traits, and doesnt allow multiple kinds.
          Term: "named_kind"