# shuttle communication
Spec:with group:
  - "jess"
  - Group contains:
    - # a snippet of matching text;
      # defined via an interface to allow instances
      # to track additional information (ex. db row).
      Spec:with slot:
      - "matched"
      - Slot: true

    - # one of a predefined set of determiners:
      # the, a, some, etc.
      # see 'counted_name' for names with leading numbers.
      Spec:with flow:
      - "article"
      - Flow uses:
        - Term: "matched"

    - # conjunction junction
      # matches "," or "and" or ", and"
      # relies on the fact package match treats commas and ands each as their own words.
      Spec:with flow:
      - "comma_and"
      - Flow uses:
        - Term: "matched"

    - # matches "is" or "are".
      Spec:with flow:
      - "are"
      - Flow uses:
        - Term: "matched"

    - # Specifies a single name, in full or in part.
      # For example, when matching: "Gold Roger's treasure chest is a container. The chest is open."
      # The name "chest" implies the treasure chest.
      # To optimizing matching the words "is/are/comma/and" are never part of name names.
      # future: allow quoted "titles" ( which are then allowed to break those assumptions )
      # ( see also 'kind_called' )
      Spec:with flow:
      - "name"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # Defines a name and its kind in a single phrase.
      # <kind> "called" [the] _name_.
      # as per inform, the name of the name is everything after the word called
      # until "is" or "are" or the end of the line.
      # For instance: `The container called the trunk and the box is in the lobby`
      # generates a single name named "the trunk and the box."
      Spec:with flow:
      - "kind_called"
      - Flow uses:
        - # note: doesn't use 'adjectives' because this doesn't allow
          # repetitions of the traits and kind.
          Term:optional:
          - "traits"
          - true
        - Term: "kind"
        - # the word "called"
          Term:type:
          - "called"
          - "words"
        - Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # Specifies one or more nouns, in full or in part.
      # Only one of the options, plus possibly 'additional_names', will match.
      # Not all options are valid in all contexts;
      # the users of 'names' may discard or avoid certain matches.
      # ( the options could be represented as a slot; this feels easier for now )
      Spec:with flow:
      - "names"
      - Flow uses:
        - Term:optional:
          - "counted_name"
          - true
        - # note: because this phrase is greedy
          # once used, no additional names will match.
          Term:optional:
          - "kind_called"
          - true
        - # used primarily for anonymous nouns: "the container"
          # noting that anonymous nouns are prohibited from starting a sentence.
          Term:optional:
          - "kind"
          - true
        - Term:optional:
          - "name"
          - true
        - Term:optional:
          - "additional_names"
          - true

    - # matches a name following another name.
      Spec:with flow:
      - "additional_names"
      - Flow uses:
        - # a separator is required between names
          Term: "comma_and"
        - Term: "names"

    - # provides english specification of a number of objects.
      # note: yes, `the five the containers` is permitted.
      Spec:with flow:
      - "counted_name"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "matching_number"
        - Term: "kind"
        - Term:private:
          - "matched"
          - true

    - # matches the name of an existing kind.
      Spec:with flow:
      - "kind"
      - Flow uses:
        - # while an article can precede every kind
          # it doesn't influence which kind gets matched.
          Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # matches a set of possible kinds as part of kinds_are_traits
      # jess tests for but prohibits leading traits.
      Spec:with flow:
      - "kinds"
      - Flow uses:
        - # inform uses traits specified here to select
          # matching nouns; jess is not that clever.
          Term:optional:
          - "traits"
          - true
        - Term:optional:
          - "article"
          - true
        - # matches a span ending with "is/are/comma/and"
          Term: "matched"
        - Term:optional:
          - "additional_kinds"
          - true

    - # matches a kind following another kind.
      Spec:with flow:
      - "additional_kinds"
      - Flow uses:
        - # a separator is required between the names of kinds
          Term: "comma_and"
        - Term: "kinds"

    - # matches the name of a field in a kind.
      Spec:with flow:
      - "property"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # matches the name of an (existing) trait.
      Spec:with flow:
      - "trait"
      - Flow uses:
        - # while an article can precede every trait
          # it doesn't influence which trait gets matched.
          Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # matches at least one trait.
      Spec:with flow:
      - "traits"
      - Flow uses:
        - Term: "trait"
        - Term:optional:
          - "additional_traits"
          - true

    - # matches a trait following another trait
      Spec:with flow:
      - "additional_traits"
      - Flow uses:
        - Term:optional:
          - "comma_and"
          - true
        - Term: "traits"

    - # matches one or more predefined words
      Spec:with flow:
      - "words"
      - Flow uses:
        - Term: "matched"

    - # matches one or more predefined verbs
      Spec:with flow:
      - "verb"
      - Flow uses:
        - Term: "matched"
        - # verbs are represented by "macros" in tapestry.
          Term:private:
          - "macro"
          - true

    - # assigns default traits to a kind.
      # <the kind> are "usually" <traits>
      # future: inform allows limiting traits to kinds with other traits:
      # for example, `the closed containers are fixed in place.`
      # makes any containers that are *initially* closed also immovable.
      Spec:with flow:
      - "kinds_are_traits"
      - Flow uses:
        - Term: "kinds"
        - Term: "are"
        - Term:type:
          - "usually"
          - "words"
        - Term: "traits"

    - # union of all possible matching sentences:
      # tests these in-order to find a match.
      # ( an alternative would be slots, and a registry; this is fine for now )
      Spec:with flow:
      - "matching_phrases"
      - Flow uses:
        - Term: "kinds_are_traits"
        - Term: "kinds_of"
        - Term: "verb_links"
        - Term: "links_verb"
        - Term: "links_adjectives"
        - Term: "property_noun_value"
        - Term: "noun_property_value"

    - # <names> <are> "a kind of"/"kinds of" <traits> <kind>.
      # interesting to note that inform allows "some kind/s of"
      # this is more strict.
      # like inform this doesn't try to limit the names
      # `The animals called kittens are a kind of things.` is legal.
      Spec:with flow:
      - "kinds_of"
      - Flow uses:
        - # a counted name here doesn't indicate multiple kinds
          # instead it generates a kind that has a number leading its name.
          Term: "names"
        - Term: "are"
        - # the phrases "a kind of" or "kinds of"
          Term:type:
          - "kinds_of"
          - "words"
        - # inform doesnt allow commas or ands here,
          # jess reuses the traits list here, so it does allow comma/and.
          Term:optional:
          - "traits"
          - true
        - # inform (weirdly) allows multiple kinds:
          # `A box is a kind of container and things.`
          # but not if traits are specified, suggesting a switch there.
          # this doesnt switch to special traits, and doesnt allow multiple kinds.
          Term: "kind"

    - # verb names are (other) names.
      # ex. `In the coffin are some coins, a notebook, and the gripping hand.`
      # This intentionally doesn't recognize adjectives attached to named names.
      # "In the closed coffin" generates a name with the name "closed coffin"
      # not a coffin in an initially closed state.
      Spec:with flow:
      - "verb_links"
      - Flow uses:
        - Term: "verb"
        - Term: "names"
        - Term: "are"
        - Term:type:
          - "other_names"
          - "names"

    - # names are verb (other) names.
      # ex. `The thing called the stake is on the supporter called the altar.`
      Spec:with flow:
      - "links_verb"
      - Flow uses:
        - Term: "names"
        - Term: "are"
        - Term: "verb"
        - Term:type:
          - "other_names"
          - "names"

    - # names are adjectives [verb names].
      # ex. `The bottle is a transparent, open, container.`
      # `The coffin is a closed container [in the antechamber]`
      # This is the *only* way of assigning names initial states directly.
      # All other phrases require a kind to be involved, here the kind is optional.
      Spec:with flow:
      - "links_adjectives"
      - Flow uses:
        - Term: "names"
        - Term: "are"
        - # adjectives are *not* optional.
          # if there are no adjectives present,
          # then 'links_verb' (might) match instead.
          Term: "adjectives"
        - Term:optional:
          - "verb_phrase"
          - true

    - # ex. ".... in the kitchen.", or "... carries the football and sousaphone."
      Spec:with flow:
      - "verb_phrase"
      - Flow uses:
        - Term: "verb"
        - # only succeeds on plain names.
          Term: "names"

    - # one or more phrases consisting of traits and a kind.
      # while all parts are marked as optional, matching expects
      # there will be at least one trait or one kind
      # and that there can only be additional adjective phrases
      # if the previous one ended with a kind.
      # ex. `a container`
      #     `closed and fixed in place`,
      #     `a closed container and a fixed in place thing`.
      Spec:with flow:
      - "adjectives"
      - Flow uses:
        - Term:optional:
          - "traits"
          - true
        - # exists to support phrases like:
          # `the box is transparent and a container.`
          Term:optional:
          - "comma_and"
          - true
        - Term:optional:
          - "kind"
          - true
        - Term:optional:
          - "additional_adjectives"
          - true

    - # an additional set of traits and a kind
      Spec:with flow:
      - "additional_adjectives"
      - Flow uses:
        - Term: "comma_and"
        - Term: "adjectives"

    - # assigns a default value to a noun.
      # ex. `The description of the pen is "mightier than the sword.`
      Spec:with flow:
      - "property_noun_value"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "property"
        - # the word "of"
          Term:type:
          - "of"
          - "words"
        - # note: "called the" isn't allowed here.
          Term:type:
          - "noun"
          - "name"
        - Term: "are"
        - Term: "single_value"

    - # assigns a default value to a noun.
      # ex. `The pen has the description "mightier than the sword.`
      # like inform, adjectives ( in phrases with "is" ) cannot be combined with property phrases ( "has/of" )
      Spec:with flow:
      - "noun_property_value"
      - Flow uses:
        - # note: "called the" isn't allowed here.
          Term:type:
          - "noun"
          - "name"
        - # the word "has"
          Term:type:
          - "has"
          - "words"
        - Term:optional:
          - "article"
          - true
        - Term: "property"
        - # the word "of", sometimes reads better this way
          Term:type:optional:
          - "of"
          - "words"
          - true
        - Term: "single_value"

    - # matches only one of its options
      # ( the options could be represented as a slot; this feels easier for now )
      Spec:with flow:
      - "single_value"
      - Flow uses:
        - Term:optional:
          - "quoted_text"
          - true
        - Term:optional:
          - "matching_number"
          - true

    - # text that begins and ends with double quotes.
      # the quotes themselves are not part of the matched text.
      Spec:with flow:
      - "quoted_text"
      - Flow uses:
        - Term: "matched"

    - # reads a number specified in words or as digits.
      # stores the result as the parsed number.
      Spec:with flow:
      - "matching_number"
      - Flow uses:
        - Term: "number"