# English like parsing
Spec:with group:
  - "jess"
  - Group contains:

    - # Used to store matching text
      Spec:with slot:
      - "matched"
      - Slot: true

    - # one of a predefined set of determiners: the, a/n, some, our.
      # only matches if the first letter is lowercase, or uppercase at the start of a sentence;
      # otherwise, the article gets treated as part of the name.
      # the lack of a recognized article makes something proper-named.
      # see 'counted_kind' for names with leading numbers: (ex. five or 27)
      # using "some"  (ex. "some coins") will set nouns as "plural named"
      Spec:with flow:
      - "article"
      - Flow uses:
        - Term: "text"
        - Term:type:private:
          - "flags"
          - "article_flags"
          - true

    - # conjunction junction.
      # matches "," or "and" or ", and"
      # relies on the fact package match treats commas and ands each as their own words.
      Spec:with flow:
      - "comma_and"
      - Flow uses:
        - Term: "matched"

    - # conjunction or junction.
      # matches commas, ands, and ors.
      # relies on the fact package match treats commas and ands each as their own words.
      Spec:with flow:
      - "comma_and_or"
      - Flow uses:
        - Term: "matched"

    - # matches "is" or "are".
      Spec:with flow:
      - "are"
      - Flow uses:
        - Term: "matched"

    - # matches the word "called".
      Spec:with flow:
      - "called"
      - Flow uses:
        - Term: "matched"

    - Spec:with slot:
      - "noun_builder"
      - Slot: true

    - # Specifies a name who's meaning depends on context.
      # For example, when matching: "Gold Roger's treasure chest is a container. The chest is open."
      # the "chest" implies the noun "treasure chest."
      # In other cases, the name might be a kind, or trait, or pretty much anything else.
      # To optimizing matching the words "is/are/comma/and" are never part of name names.
      # future: allow quoted "titles" ( which are then allowed to break those assumptions )
      Spec:slots:with flow:
      - "name"
      - "noun_builder"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # matches an existing noun
      # by checking multiple words for the best match.
      Spec:slots:with flow:
      - "noun"
      - "noun_builder"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - # the string that matched ( a noun name or alias )
          Term: "matched"
        - # the database info that matched
          Term:private:
          - "actual_noun"
          - true

    - # matches an existing noun, or if not: then something new.
      Spec:slots:with flow:
      - "named_noun"
      - "noun_builder"
      - Flow uses:
        - Term:optional:
          - "noun"
          - true
        - Term:optional:
          - "name"
          - true

    - # Defines a name and its kind in a single phrase.
      # Matches: (traits) kind "called" {the name}.
      # For example: `The closed container called the trunk is in the lobby.`
      # As per inform, the name includes all text after the word "called"
      # until "is", "are", or the end of the sentence;
      # and specifying "called the/our ..." gives the noun an indefinite article.
      Spec:with flow:
      - "kind_called"
      - Flow uses:
        - # note: doesn't use 'adjectives' because this doesn't allow
          # repetitions of the traits and kind.
          Term:optional:
          - "traits"
          - true
        - Term: "kind"
        - Term: "called"
        - Term: "named_noun"

    - # Specifies one or more nouns, in full or in part.
      # Only one of the options, plus possibly 'additional_names', will match.
      # Not all options are valid in all contexts.
      Spec:slots:with flow:
      - "names"
      - "noun_builder"
      - Flow uses:
        - Term:optional:
          - "counted_kind"
          - true
        - # note that because this phrase is greedy
          # once used, no additional names will match.
          Term:optional:
          - "kind_called"
          - true
        - # matches existing nouns
          Term:optional:
          - "noun"
          - true
        - # used primarily for anonymous nouns: ex. "the container"
          # note that anonymous nouns are prohibited from starting a sentence.
          Term:optional:
          - "kind"
          - true
        - Term:optional:
          - "name"
          - true
        - Term:optional:
          - "additional_names"
          - true

    - # matches a name following another name.
      Spec:with flow:
      - "additional_names"
      - Flow uses:
        - # a separator is required between names
          Term: "comma_and"
        - Term: "names"

    - # provides english specification of a number of objects.
      # ( note: yes, `the five the containers` is permitted. )
      Spec:slots:with flow:
      - "counted_kind"
      - "noun_builder"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "matching_number"
        - Term: "kind"
        - Term: "matched"

    - # matches the name of an existing kind;
      # can generate a single anonymous noun.
      Spec:slots:with flow:
      - "kind"
      - "noun_builder"
      - Flow uses:
        - # while an article can precede every kind
          # it doesn't influence which kind gets matched.
          Term:optional:
          - "article"
          - true
        - # the string that matched
          Term: "matched"
        - # the database info that matched
          Term:private:
          - "actual_kind"
          - true

    - # matches a set of possible kinds as part of kinds_are_traits
      # jess tests for but prohibits leading traits.
      Spec:with flow:
      - "kinds"
      - Flow uses:
        - # inform uses traits specified here to select
          # matching nouns; jess is not that clever.
          Term:optional:
          - "traits"
          - true
        - Term:optional:
          - "article"
          - true
        - # matches a span ending with "is/are/comma/and"
          Term: "matched"
        - Term:optional:
          - "additional_kinds"
          - true

    - # matches a kind following another kind.
      Spec:with flow:
      - "additional_kinds"
      - Flow uses:
        - # a separator is required between the names of kinds
          Term: "comma_and"
        - Term: "kinds"

    - # matches the name of a field in a kind.
      Spec:with flow:
      - "property"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term:type:
          - "matched"
          - "text"

    - # matches the name of an (existing) trait.
      Spec:with flow:
      - "trait"
      - Flow uses:
        - # while an article can precede every trait
          # it doesn't influence which trait gets matched.
          Term:optional:
          - "article"
          - true
        - Term:type:
          - "matched"
          - "text"

    - # matches at least one trait.
      Spec:with flow:
      - "traits"
      - Flow uses:
        - Term: "trait"
        - Term:optional:
          - "additional_traits"
          - true

    - # matches a trait following another trait
      Spec:with flow:
      - "additional_traits"
      - Flow uses:
        - Term:optional:
          - "comma_and"
          - true
        - Term: "traits"

    - # matches one or more predefined words
      Spec:with flow:
      - "words"
      - Flow uses:
        - Term: "matched"

    - # matches one or more predefined verbs
      # ( verbs are nouns of the verb kind )
      Spec:with flow:
      - "verb"
      - Flow uses:
        - Term: "text"

    - # union of all possible matching phrases.
      # for any given plain text sentence,
      # jess tries each of these looking for the first to succeed.
      # different phrases belong to different scheduled phases;
      # scheduling is handled manually.
      # ( an alternative might be slots and some scheduling metadata;
      # | this is fine for now )
      Spec:with flow:
      - "matching_phrases"
      - Flow uses:
        - Term: "understand"
        - Term: "timed_rule"
        - Term: "kinds_of"
        - Term: "aspects_are_traits"
        - Term: "kinds_are_traits"
        - Term: "kinds_have_properties"
        - Term: "kinds_are_either"
        - Term: "map_connections"
        - Term: "map_directions"
        - Term: "map_locations"
        - Term: "property_noun_value"
        - Term: "noun_property_value"
        - Term: "verb_names_are_names"
        - Term: "names_verb_names"
        - Term: "names_are_like_verbs"

    - # names are "a kind of"/"kinds of" traits kind:any.
      # interesting to note that inform allows "some kind/s of"
      # this is more strict.
      # like inform `The animals called kittens are a kind of things.` is legal.
      Spec:with flow:
      - "kinds_of"
      - Flow uses:
        - # can match plain names and existing kinds;
          # only allows a leading kind called, and errors on all counted kinds.
          Term: "names"
        - Term: "are"
        - # the phrases "a kind of" or "kinds of"
          Term:type:
          - "kinds_of"
          - "words"
        - # inform doesnt allow commas or ands here,
          # jess reuses the traits list here, so it does allow comma/and.
          Term:optional:
          - "traits"
          - true
        - # inform (weirdly) allows multiple kinds on the rhs:
          # `A box is a kind of container and things.`
          # but not if traits are specified, suggesting a switch there;
          # possibly to detect and reject `A box is a kind of closed and openable container.`
          # which it wants written as `A box is a kind of closed openable container.`
          # this doesnt switch to special traits, and doesnt allow multiple kinds.
          Term: "name"

    - # assigns default traits to a kind.
      # kinds:objects are "usually" traits
      # inform doesn't require the "usually" --
      #  i like it as a way to differentiate phrases about kinds vs. phrases about nouns.
      # future: inform allows limiting traits to kinds with other traits:
      # for example, `the closed containers are fixed in place.`
      # makes any containers that are *initially* closed also immovable.
      Spec:with flow:
      - "kinds_are_traits"
      - Flow uses:
        - Term: "kinds"
        - Term: "are"
        - Term:type:
          - "usually"
          - "words"
        - Term: "traits"

    - # defines traits for aspects that can be (re)used by various other kinds.
      # ex. `The colors are a kind of aspect. The colors are red, blue, and greasy green.`
      # aspects_are_traits, kinds_are_traits, and names_are_like_verbs all handle similar phrasing.
      Spec:with flow:
      - "aspects_are_traits"
      - Flow uses:
        - Term:type:
          - "aspect"
          - "kind"
        - Term: "are"
        - Term:type:
          - "plain_names"
          - "names"

    - # verb names are (other) names.
      # ex. `In the coffin are some coins, a notebook, and the gripping hand.`
      # This intentionally doesn't recognize adjectives attached to named names.
      # "In the closed coffin" generates a name with the name "closed coffin"
      # not a coffin in an initially closed state.
      Spec:with flow:
      - "verb_names_are_names"
      - Flow uses:
        - Term: "verb"
        - Term: "names"
        - Term: "are"
        - Term:type:
          - "other_names"
          - "names"

    - # names are verb (other) names.
      # ex. `The thing called the stake is on the supporter called the altar.`
      Spec:with flow:
      - "names_verb_names"
      - Flow uses:
        - Term: "names"
        - Term: "are"
        - Term: "verb"
        - Term:type:
          - "other_names"
          - "names"

    - # names are adjectives [verb names].
      # ex. `The bottle is a transparent, open, container.`
      # `The coffin is a closed container [in the antechamber]`
      # This is the *only* way of assigning names initial states directly.
      # All other phrases require a kind to be involved, here the kind is optional.
      Spec:with flow:
      - "names_are_like_verbs"
      - Flow uses:
        - Term: "names"
        - Term: "are"
        - # adjectives are *not* optional.
          # if there are no adjectives present,
          # then 'names_verb_names' (might) match instead.
          Term: "adjectives"
        - Term:optional:
          - "verb_phrase"
          - true

    - # ex. ".... in the kitchen.", or "... carries the football and sousaphone."
      Spec:with flow:
      - "verb_phrase"
      - Flow uses:
        - Term: "verb"
        - Term:type:
          - "plain_names"
          - "names"

    - # one or more phrases consisting of traits and a kind.
      # while all parts are marked as optional, matching expects
      # there will be at least one trait or one kind
      # and that there can only be additional adjective phrases
      # if the previous one ended with a kind.
      # ex. `a container`
      #     `closed and fixed in place`,
      #     `a closed container and a fixed in place thing`.
      Spec:with flow:
      - "adjectives"
      - Flow uses:
        - Term:optional:
          - "traits"
          - true
        - # exists to support phrases like:
          # `the box is transparent and a container.`
          Term:optional:
          - "comma_and"
          - true
        - Term:optional:
          - "kind"
          - true
        - Term:optional:
          - "additional_adjectives"
          - true

    - # an additional set of traits and a kind
      Spec:with flow:
      - "additional_adjectives"
      - Flow uses:
        - Term: "comma_and"
        - Term: "adjectives"

    - # assigns a default value to a noun.
      # ex. `The description of the pen is "mightier than the sword.`
      # as a special case allows also allows a list of quoted text
      # indicated with "are" ( versus "is" )
      Spec:with flow:
      - "property_noun_value"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "property"
        - # the word "of"
          Term:type:
          - "of"
          - "words"
        - Term: "named_noun"
        - Term: "are"
        - Term:optional:
          - "single_value"
          - true
        - Term:optional:
          - "quoted_texts"
          - true

    - # assigns a default value to a noun.
      # ex. `The pen has (the) description (of) "mightier than the sword."`
      # like inform, adjectives ( in phrases with "is" ) cannot be combined with property phrases ( "has/of" )
      Spec:with flow:
      - "noun_property_value"
      - Flow uses:
        - Term: "named_noun"
        - Term:type:
          - "has"
          - "words"
        - Term:optional:
          - "article"
          - true
        - Term: "property"
        - # the word "of", sometimes reads better this way
          Term:type:optional:
          - "of"
          - "words"
          - true
        - Term: "single_value"

    - # matches only one of its options
      # ( the options could be represented as a slot; this feels easier for now )
      Spec:with flow:
      - "single_value"
      - Flow uses:
        - Term:optional:
          - "quoted_text"
          - true
        - Term:optional:
          - "matching_number"
          - true
        - Term:optional:
          - "noun"
          - true
        - Term:optional:
          - "kind"
          - true

    - # text that begins and ends with double quotes.
      # the quotes themselves are not part of the matched text.
      Spec:with flow:
      - "quoted_text"
      - Flow uses:
        - Term:type:
          - "matched"
          - "text"

    - # reads a number specified in words or as digits.
      # stores the result as the parsed number.
      Spec:with flow:
      - "matching_number"
      - Flow uses:
        - Term: "number"

    - # kinds "have" a ("list of") type ("called" name)
      # ex. Things have some text called a description.
      Spec:with flow:
      - "kinds_have_properties"
      - Flow uses:
        - Term: "kind"
        - Term:type:
          - "have"   # or has
          - "words"
        - Term:optional:
          - "article"
          - true
        - Term:type:optional:
          - "list_of"
          - "text"
          - true
        - Term: "property_type"
        - Term:optional:
          - "called_name"
          - true

    - # for kinds_have_properties
      # like kind_called, specifying "called the/our ..." gives the noun an indefinite article.
      Spec:with flow:
      - "called_name"
      - Flow uses:
        - Term: "called"
        - Term: "name"

    - # matches text, number, kind ( kind|aspect|record )
      # as part of 'kinds_have_properties'
      # exactly one member can match
      Spec:with flow:
      - "property_type"
      - Flow uses:
        - Term:type:optional:
          - "primitive"
          - "text"
          - true
        - # kinds|aspects|records
          Term:optional:
          - "kind"
          - true

    - # kinds ("can be"|"are either") new_trait [or new_trait...]
      # ex. A thing can be open or closed.
      Spec:with flow:
      - "kinds_are_either"
      - Flow uses:
        - Term: "kind"
        - Term:type:
          - "can_be"   # ("can be"|"are either")
          - "words"
        - Term:type:
          - "traits"
          - "new_trait"

    - # one or more new trait names,
      # separated by the word "or"
      Spec:with flow:
      - "new_trait"
      - Flow uses:
        - Term: "matched"
        - Term:optional:
          - "new_trait"
          - true

    - # one or more strings of quoted text
      # separated by the words "and", "comma", or "or".
      Spec:with flow:
      - "quoted_texts"
      - Flow uses:
        - Term: "quoted_text"
        - Term:optional:
          - "additional_text"
          - true

    - # matches a text following another some previous text.
      Spec:with flow:
      - "additional_text"
      - Flow uses:
        - Term: "comma_and_or"
        - Term: "quoted_texts"

    - # matches rule prefixes
      # before, instead of, when, after, report
      Spec:with flow:
      - "rule_prefix"
      - Flow uses:
        - Term:private:
          - "prefix_value"
          - true

    - # controls what to do after matching a rule
      # matches "then continue", "then stop", "then jump",
      # and "begins", "ends" ( for domain rules )
      # with an optional leading comma
      Spec:with flow:
      - "rule_suffix"
      - Flow uses:
        - Term:private:
          - "suffix_value"
          - true

    - # specific names can follow rule declarations
      # "( this is the witness light rule )"
      Spec:with flow:
      - "rule_name"
      - Flow uses:
        - # "this is the"
          Term:type:optional:
          - "prefix"
          - "bool"
          - true
        - Term:type:optional:
          - "article"
          - "text"
          - true
        - Term: "matched"
        - # the word "rule"
          Term:type:optional:
          - "suffix"
          - "bool"
          - true

    - # phrases can break out of plain text and into structured tell docs.
      # the documents start with a colon (:) followed by a newline
      # the next line is assumed to be an indented tell mapping or sequence
      # which ends with the first unindented line.
      # sequences are treated as execute blocks
      # mappings are assumed to be a valid eval
      # ( ie. an implementation of one of the rtti interfaces. )
      Spec:with flow:
      - "sub_assignment"
      - Flow uses:
        - Term: "assignment"

    - # matches pattern rule definitions
      Spec:with flow:
      - "timed_rule"
      - Flow uses:
        - Term: "rule_prefix"
        - # the pattern this rule targets.
          # the pattern must exist for this phrase to generate successfully.
          # ex. "instead of traveling"
          Term:type:
          - "pattern"
          - "kind"
        - Term:type:optional:
          - "target"
          - "noun"
          - true
        - Term:optional:
          - "rule_suffix"
          - true
        - # parenthetical text
          Term:optional:
          - "rule_name"
          - true
        - Term: "sub_assignment"

    - # various phrases, all starting with the word "Understand"
      Spec:with flow:
      - "understand"
      - Flow uses:
        - Term:type:
          - "understand" # the word "understand"
          - "words"
        - # all of jess's understand start with quoted text
          Term: "quoted_texts"
        - Term:type:
          - "as"
          - "words"
        - # inform is smart enough to *not* allow articles before actions.
          # i am lazy.
          Term:optional:
          - "article"
          - true
        - # ex. Understand "birds" and "ruddy ducks" as the plural of duck.
          # fix? in jess this (also) influences the story interpretation.
          Term:type:optional:
          - "plural_of"
          - "text"
          - true
        - # this matches one or more nouns or kinds:
          # generation susses out what to do with those nouns or kinds.
          # * aliases for nouns: Understand "floor" or "sawdust" as the message.
          # * aliases for kinds: Understand "cupboard" or "cupboards" or "cabinets" as a cabinet.
          # * grammar for actions: Understand "reach underneath/under/beneath/-- [something]" as looking under.
          # jess doesn't permit aliases for kinds, those generate errors.
          Term: "names"

    - # A mapping declaration starting with a room or door.
      # ex. `A dead end called the Airport is west of the Road and north of the Farm.`
      Spec:with flow:
      - "map_locations"
      - Flow uses:
        - Term: "linking"
        - Term: "are"
        - Term: "direction_of_linking"
        - Term:optional:
          - "additional_directions"
          - true

    - # matches additional directions
      # only used by map_locations
      Spec:with flow:
      - "additional_directions"
      - Flow uses:
        - Term: "comma_and"
        - Term: "direction_of_linking"
        - Term:optional:
          - "additional_directions"
          - true

    - # A mapping declaration starting with a direction.
      Spec:with flow:
      - "map_directions"
      - Flow uses:
        - Term: "direction_of_linking"
        - Term: "are"
        - # ex. `[Inside from the Meadow] is... the woodcutter's hut.`
          Term:optional:
          - "linking"
          - true
        - # ex. `[West of the Garden] is ... south of the Meadow.`
          Term:type:optional:
          - "redirect"
          - "direction_of_linking"
          - true

    - # A mapping declaration to set the destination of doors.
      # ex. `Through the long slide is the cellar.`
      #     ` Through the blue door and the red door is the kitchen.`
      # The destination of a door is always treated as a room or nowhere.
      # ( Inform doesn't allow nowhere, but it seems like a good idea. )
      Spec:with flow:
      - "map_connections"
      - Flow uses:
        - Term:type:
          - "through"
          - "bool"
        - Term:type:
          - "doors"
          - "linking"
        - Term:optional:
          - "additional_links"
          - true
        - Term: "are"
        - Term:type:
          - "room"
          - "linking"

    - # partial phrase for mapping declarations.
      Spec:with flow:
      - "direction_of_linking"
      - Flow uses:
        - Term: "direction"
        - Term:type:
          - "from_of"
          - "words"
        - # a room or door.
          Term: "linking"

    - # matches some existing compass direction.
      Spec:with flow:
      - "direction"
      - Flow uses:
        - Term: "text"

    - # generates a room, a door, or nowhere.
      # ( similar to, but distinct from other noun matching phrases. )
      Spec:with flow:
      - "linking"
      - Flow uses:
        - Term:type:optional:
          - "nowhere"
          - "bool"
          - true
        - Term:optional:
          - "kind_called"
          - true
        - Term:optional:
          - "noun"
          - true
        - Term:optional:
          - "name"
          - true

    - # partial phrase used for map connections
      # allows multiple doors, etc. on the lhs.
      Spec:with flow:
      - "additional_links"
      - Flow uses:
        - Term: "comma_and"
        - Term: "linking"
        - Term:optional:
          - "additional_links"
          - true

