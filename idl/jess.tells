# shuttle communication
Spec:with group:
  - "jess"
  - Group contains:
    - # a snippet of matching text;
      # defined via an interface to allow instances
      # to track additional information (ex. db row).
      Spec:with slot:
      - "matched"
      - Slot: true

    - # the root of a sentence matching tree.
      Spec:with slot:
      - "matches"
      - Slot: true

    - # one of a predefined set of determiners:
      # the, a, some, etc.
      # see 'count' for leading numbers
      Spec:with flow:
      - "article"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # conjunction junction
      Spec:with flow:
      - "comma_and"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # matches "is" or "are".
      Spec:with flow:
      - "are"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # matches a name of unknown type ( usually nouns... )
      # there are some assumptions for optimization:
      # the words "is/are/comma/and" are never part of noun names.
      # future: allow quoted "titles" ( which are then allowed to break those assumptions )
      Spec:with flow:
      - "name"
      - Flow uses:
        - # the match is always implemented as a span.
          Term:name:
          - "_"
          - "matched"

    - # matches at least one name.
      Spec:with flow:
      - "names"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "name"
        - Term:optional:
          - "additional_names"
          - true

    - # matches a name following another name.
      Spec:with flow:
      - "additional_names"
      - Flow uses:
        - # unlike traits, a separator is required between the names of names
          Term: "comma_and"
        - Term: "names"


    - # matches the name of an (existing) kind.
      Spec:with flow:
      - "named_kind"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"


    - # matches at least one kind.
      Spec:with flow:
      - "kinds"
      - Flow uses:
        - # while an article can precede every kind
          # it doesn't influence which kind gets matched.
          Term:optional:
          - "article"
          - true
        - Term: "named_kind"
        - Term:optional:
          - "additional_kinds"
          - true

    - # matches a kind following another kind.
      Spec:with flow:
      - "additional_kinds"
      - Flow uses:
        - # unlike traits, a separator is required between the names of kinds
          Term: "comma_and"
        - Term: "kinds"

    - # matches the name of an (existing) trait.
      Spec:with flow:
      - "named_trait"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # matches at least one trait.
      Spec:with flow:
      - "traits"
      - Flow uses:
        - # while an article can precede every trait
          # it doesn't influence which trait gets matched.
          Term:optional:
          - "article"
          - true
        - Term: "named_trait"
        - Term:optional:
          - "additional_traits"
          - true

    - # matches a trait following another trait
      Spec:with flow:
      - "additional_traits"
      - Flow uses:
        - Term:optional:
          - "comma_and"
          - true
        - Term: "traits"

    - # matches one or more predefined words
      # the specific words are specified via metadata
      # on the term where this flow is declared.
      Spec:with flow:
      - "keywords"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"

    - # matches one or more predefined words
      # and returns a macro. like keywords
      # the phrase and macro are on defined via metadata
      Spec:with flow:
      - "macro_name"
      - Flow uses:
        - Term:name:
          - "_"
          - "matched"
        - Term:private:
          - "macro"
          - true

    - # assigns default traits to a kind.
      # [the] <kind> are "usually" <traits>
      Spec:slots:with flow:
      - "kinds_are_traits"
      - "matches"
      - Flow uses:
        - Term: "kinds"
        - Term: "are"
        - # always the "implies" macro
          Term:type:
          - "usually"
          - "macro_name"
          phrase: "usually"
        - Term: "traits"

    - # declares nouns with traits and kinds.
      # [the] <nouns> are <traits> <kinds>
      # although traits and kinds are both optional,
      # at least one is required to match
      Spec:slots:with flow:
      - "nouns_traits_kinds"
      - "matches"
      - Flow uses:
        - Term: "names"
        - Term: "are"
        - Term:optional:
          - "traits"
          - true
        - Term:optional:
          - "kinds"
          - true