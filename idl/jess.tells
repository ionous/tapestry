# shuttle communication
Spec:with group:
  - "jess"
  - Group contains:
    - # a snippet of matching text;
      # defined via an interface to allow instances
      # to track additional information (ex. db row).
      Spec:with slot:
      - "matched"
      - Slot: true

    - # one of a predefined set of determiners:
      # the, a, some, etc.
      # see 'count' for leading numbers
      Spec:with flow:
      - "article"
      - Flow uses:
        - Term: "matched"

    - # conjunction junction
      Spec:with flow:
      - "comma_and"
      - Flow uses:
        - Term: "matched"

    - # matches "is" or "are".
      Spec:with flow:
      - "are"
      - Flow uses:
        - Term: "matched"

    - # Declares a new name or match an existing one, in full or in part.
      # For example, when matching: "Gold Roger's treasure chest is a container. The chest is open."
      # The name "chest" implies the treasure chest.
      # To optimizing matching the words "is/are/comma/and" are never part of noun names.
      # future: allow quoted "titles" ( which are then allowed to break those assumptions )
      # ( see also kind_called )
      Spec:with flow:
      - "name"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "matched" # the match is always implemented as a span.

    - # matches at least one name.
      Spec:with flow:
      - "names"
      - Flow uses:
        - Term: "name"
        - Term:optional:
          - "additional_names"
          - true

    - # matches a name following another name.
      Spec:with flow:
      - "additional_names"
      - Flow uses:
        - # unlike traits, a separator is required between the names of names
          Term: "comma_and"
        - Term: "names"

    - # Defines a noun and its kind in a single phrase.
      # <kind> "called" [the] _name_.
      # as per inform, the name of the noun is everything after the word called
      # until "is" or "are" or the end of the line.
      # For instance: `The container called the trunk and the box is in the lobby`
      # generates a single noun named "the trunk and the box."
      Spec:with flow:
      - "kind_called"
      - Flow uses:
        - Term: "kind"
        - # the word "called"
          Term:type:
          - "called"
          - "words"
        - Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # Defines one or more new names ( or matches some existing ones. )
      # This works similar to 'names' but has more options.
      # Whether 'names' or 'nouns' is used in a particular situation
      # depends on the grammar and structure of the sentence.
      # Only one of the options, plus 'additional_names' will match.
      Spec:with flow:
      - "nouns"
      - Flow uses:
        - Term:optional:
          - "counted_noun"
          - true
        - # note: because this phrase is greedy
          # once used, no additional nouns will match.
          Term:optional:
          - "kind_called"
          - true
        - # anonymous nouns
          # nothing that anonymous nouns arent prohibited from starting a sentence.
          Term:optional:
          - "kind"
          - true
        - Term:optional:
          - "name"
          - true
        - Term:optional:
          - "additional_nouns"
          - true

    - # matches a noun following another noun.
      Spec:with flow:
      - "additional_nouns"
      - Flow uses:
        - # unlike traits, a separator is required between the nouns of nouns
          Term: "comma_and"
        - Term: "nouns"

    - # provides english specification of a number of objects.
      # note: yes, `the five the containers` is permitted.
      Spec:with flow:
      - "counted_noun"
      - Flow uses:
        - Term:optional:
          - "article"
          - true
        - Term: "number"
        - Term: "kind"

    - # matches the name of an (existing) kind.
      Spec:with flow:
      - "kind"
      - Flow uses:
        - # while an article can precede every kind
          # it doesn't influence which kind gets matched.
          Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # matches at least one kind.
      Spec:with flow:
      - "kinds"
      - Flow uses:
        - Term: "kind"
        - Term:optional:
          - "additional_kinds"
          - true

    - # matches a kind following another kind.
      Spec:with flow:
      - "additional_kinds"
      - Flow uses:
        - # unlike traits, a separator is required between the names of kinds
          Term: "comma_and"
        - Term: "kinds"

    - # matches the name of an (existing) trait.
      Spec:with flow:
      - "trait"
      - Flow uses:
        - # while an article can precede every trait
          # it doesn't influence which trait gets matched.
          Term:optional:
          - "article"
          - true
        - Term: "matched"

    - # matches at least one trait.
      Spec:with flow:
      - "traits"
      - Flow uses:
        - Term: "trait"
        - Term:optional:
          - "additional_traits"
          - true

    - # matches a trait following another trait
      Spec:with flow:
      - "additional_traits"
      - Flow uses:
        - Term:optional:
          - "comma_and"
          - true
        - Term: "traits"

    - # matches one or more predefined words
      Spec:with flow:
      - "words"
      - Flow uses:
        - Term: "matched"

    - # matches one or more predefined verbs
      Spec:with flow:
      - "verb"
      - Flow uses:
        - Term: "matched"
        - # verbs are represented by "macros" in tapestry.
          Term:private:
          - "macro"
          - true

    - # assigns default traits to a kind.
      # <the kind> are "usually" <traits>
      Spec:with flow:
      - "kinds_are_traits"
      - Flow uses:
        - Term: "kinds"
        - Term: "are"
        - Term:type:
          - "usually"
          - "words"
        - Term: "traits"

    - # union of all possible matching sentences:
      # tests these in-order to find a match.
      # ( an alternative would be slots, and a registry; this is fine for now )
      Spec:with flow:
      - "matching_phrases"
      - Flow uses:
        - Term: "kinds_are_traits"
        - Term: "kinds_of"
        - Term: "verb_links"
        - Term: "links_verb"
        - Term: "links_adjectives"

    - # <names> <are> "a kind of"/"kinds of" <traits> <kind>.
      # interesting to note that inform allows "some kind/s of"
      # this is more strict.
      # like inform this doesn't try to limit the names
      # `The animals called kittens are a kind of things.` is legal.
      Spec:with flow:
      - "kinds_of"
      - Flow uses:
        - Term: "nouns"
        - Term: "are"
        - # the phrases "a kind of" or "kinds of"
          Term:type:
          - "kinds_of"
          - "words"
        - # inform doesnt allow commas or ands here,
          # since this definition reuses the traits list: it does allow comma/and.
          Term:optional:
          - "traits"
          - true
        - # inform (weirdly) allows multiple kinds:
          # `A box is a kind of container and things.`
          # but not if traits are specified, suggesting a switch there.
          # this doesnt switch to special traits, and doesnt allow multiple kinds.
          Term: "kind"

    - # verb called are called.
      # ex. `In the coffin are some coins, a notebook, and the gripping hand.`
      Spec:with flow:
      - "verb_links"
      - Flow uses:
        - Term: "verb"
        - Term: "nouns"
        - Term: "are"
        - Term:type:
          - "other_nouns"
          - "nouns"

    - # verb called are called.
      # ex. `The thing called the stake is on the supporter called the altar.`
      Spec:with flow:
      - "links_verb"
      - Flow uses:
        - Term: "nouns"
        - Term: "are"
        - Term: "verb"
        - Term:type:
          - "other_nouns"
          - "nouns"

    - # verb called are called.
      # ex. `The bottle is a transparent, open, container.`
      # `The coffin is a closed container in the antechamber.`
      Spec:with flow:
      - "links_adjectives"
      - Flow uses:
        - Term: "nouns"
        - Term: "are"
        - # adjectives are *not* optional.
          # if there are no adjectives present,
          # then the links_verb pattern will match instead.
          Term: "adjectives"
        - Term:optional:
          - "verb_phrase"
          - true

    - # ex. ".... in the kitchen.", or "... carries the football and sousaphone."
      Spec:with flow:
      - "verb_phrase"
      - Flow uses:
        - Term: "verb"
        - Term: "names"

    - # one or more phrases consisting of traits and a kind.
      # while all parts are marked as optional, matching expects
      # there will be at least one trait or one kind
      # and that there can only be additional adjective phrases
      # if the previous one ended with a kind.
      # ex. `a container`
      #     `closed and fixed in place`,
      #     `a closed container and a fixed in place thing`.
      Spec:with flow:
      - "adjectives"
      - Flow uses:
        - Term:optional:
          - "traits"
          - true
        - # exists to support phrases like:
          # `the box is transparent and a container.`
          Term:optional:
          - "comma_and"
          - true
        - Term:optional:
          - "kind"
          - true
        - Term:optional:
          - "additional_adjectives"
          - true

    - # an additional set of traits and a kind
      Spec:with flow:
      - "additional_adjectives"
      - Flow uses:
        - Term: "comma_and"
        - Term: "adjectives"
