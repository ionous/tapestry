{
    "core":
    {
        "uses": "group",
        "specs":
        {
            "brancher":
            {
                "uses": "slot",
                "desc": "Helper for choose action."
            },
            "comparator":
            {
                "uses": "slot",
                "desc": "Helper for comparing values."
            },
            "from_source_fields":
            {
                "uses": "slot",
                "desc": "Helper for getting fields."
            },
            "into_target_fields":
            {
                "uses": "slot",
                "desc": "Helper for setting fields."
            },
            "trigger":
            {
                "uses": "slot",
                "desc": "Helper for counting values."
            },
            "activity":
            {
                "uses": "flow",
                "spec": "act {_%exe+execute}",
                "slot": "execute",
                "group": "hidden"
            },
            "all_true":
            {
                "uses": "flow",
                "spec": "all_true {_%test+bool_eval}",
                "slot": "bool_eval",
                "desc": "Returns true if all of the evaluations are true.",
                "group": "logic"
            },
            "always":
            {
                "uses": "flow",
                "spec": "always",
                "slot": "bool_eval",
                "desc": "Returns true.",
                "group": "logic"
            },
            "never":
            {
                "uses": "flow",
                "spec": "never",
                "slot": "bool_eval",
                "desc": "Returns false.",
                "group": "logic"
            },
            "any_true":
            {
                "uses": "flow",
                "spec": "any_true {_%test+bool_eval}",
                "slot": "bool_eval",
                "desc": "Returns true if any of the evaluations are true.",
                "group": "logic"
            },
            "assign":
            {
                "uses": "flow",
                "spec": "let {_%var:variable_name} {be%from:assignment}",
                "slot": "execute",
                "desc": "Assigns a variable to a value.",
                "group": "variables"
            },
            "bracket_text":
            {
                "uses": "flow",
                "spec": "brackets {_%do:activity}",
                "slot": "text_eval",
                "desc": "Sandwiches text printed during a block and puts them inside parenthesis '()'.",
                "group": "printing"
            },
            "break":
            {
                "uses": "flow",
                "spec": "break",
                "slot": "execute",
                "desc": "In a repeating loop, exit the loop.",
                "group": "flow"
            },
            "buffer_text":
            {
                "uses": "flow",
                "spec": "buffers {_%do:activity}",
                "slot": "text_eval",
                "group": "printing"
            },
            "call_arg":
            {
                "uses": "flow",
                "spec": "inarg {_%name:text} {from:assignment}",
                "desc": "Runtime version of argument",
                "group": "internal"
            },
            "call_args":
            {
                "uses": "flow",
                "spec": "inargs {_%args+call_arg}",
                "desc": "Runtime version of arguments",
                "group": "internal"
            },
            "call_pattern":
            {
                "uses": "flow",
                "spec": "call_pattern {_%pattern:pattern_name} {args%arguments:call_args}",
                "desc": "Runtime version of determine",
                "slot":
                [
                    "execute",
                    "bool_eval",
                    "number_eval",
                    "text_eval",
                    "record_eval",
                    "num_list_eval",
                    "text_list_eval",
                    "record_list_eval"
                ],
                "group": "internal"
            },
            "capitalize":
            {
                "uses": "flow",
                "spec": "capitalize {_%text:text_eval}",
                "slot": "text_eval",
                "desc": "Returns new text, with the first letter turned into uppercase.",
                "group": "format"
            },
            "choose_action":
            {
                "uses": "flow",
                "spec": "if {_%if:bool_eval} {do:activity} {else?brancher}",
                "slot":
                [
                    "execute",
                    "brancher"
                ],
                "desc": "An if statement.",
                "group": "misc"
            },
            "choose_more":
            {
                "uses": "flow",
                "spec": "else_if {_%if:bool_eval} {do:activity} {else?brancher}",
                "slot": "brancher",
                "group": "misc"
            },
            "choose_more_value":
            {
                "uses": "flow",
                "spec": "else_if {_%assign:text} {from:assignment} {and%filter:bool_eval} {do:activity} {else?brancher}",
                "slot": "brancher",
                "group": "misc"
            },
            "choose_nothing_else":
            {
                "uses": "flow",
                "spec": "else_do {_%do:activity}",
                "slot": "brancher",
                "group": "misc"
            },
            "choose_num":
            {
                "uses": "flow",
                "spec": "num {if:bool_eval} {then%true:number_eval} {else%false?number_eval}",
                "slot": "number_eval",
                "desc": "Pick one of two numbers based on a boolean test.",
                "group": "math"
            },
            "choose_text":
            {
                "uses": "flow",
                "spec": "txt {if:bool_eval} {then%true:text_eval} {else%false?text_eval}",
                "slot": "text_eval",
                "desc": "Pick one of two strings based on a boolean test.",
                "group": "format"
            },
            "choose_value":
            {
                "uses": "flow",
                "spec": "if {_%assign:text} {from:assignment} {and%filter:bool_eval} {do:activity} {else?brancher}",
                "slot":
                [
                    "execute",
                    "brancher"
                ],
                "desc": "An if statement with local assignment.",
                "group": "misc"
            },
            "comma_text":
            {
                "uses": "flow",
                "spec": "commas {_%do:activity}",
                "slot": "text_eval",
                "desc": "Separates words with commas, and 'and'.",
                "group": "printing"
            },
            "compare_num":
            {
                "uses": "flow",
                "spec": "cmp {_%a:number_eval} {is:comparator} {num%b:number_eval}",
                "slot": "bool_eval",
                "desc": "True if eq,ne,gt,lt,ge,le two numbers.",
                "group": "logic"
            },
            "compare_text":
            {
                "uses": "flow",
                "spec": "cmp {_%a:text_eval} {is:comparator} {txt%b:text_eval}",
                "slot": "bool_eval",
                "desc": "True if eq,ne,gt,lt,ge,le two strings ( lexical. )",
                "group": "logic"
            },
            "call_cycle":
            {
                "uses": "flow",
                "spec": "cycle {_%name:text} {over%parts+text_eval}",
                "slot": "text_eval",
                "desc": "Runtime version of cycle_text",
                "group": "internal"
            },
            "call_shuffle":
            {
                "uses": "flow",
                "spec": "shuffle {_%name:text} {over%parts+text_eval} {-%indices:shuffler}",
                "slot": "text_eval",
                "desc": "Runtime version of shuffle_text",
                "group": "internal"
            },
            "call_terminal":
            {
                "uses": "flow",
                "spec": "stopping {_%name:text} {over%parts+text_eval}",
                "slot": "text_eval",
                "desc": "Runtime version of stopping_text",
                "group": "internal"
            },
            "call_trigger":
            {
                "uses": "flow",
                "spec": "trigger {_%name:text} {on%trigger} {num:number_eval}",
                "slot": "bool_eval",
                "desc": "Runtime version of count_of",
                "group": "internal"
            },
            "diff_of":
            {
                "uses": "flow",
                "spec": "dec {_%a:number_eval} {by%b?number_eval}",
                "slot": "number_eval",
                "desc": "Subtract two numbers.",
                "group": "math"
            },
            "during":
            {
                "uses": "flow",
                "spec": "during {_%pattern:pattern_name}",
                "slot":
                [
                    "bool_eval",
                    "number_eval"
                ],
                "desc": "Decide whether a pattern is running.",
                "group": "patterns"
            },
            "equal":
            {
                "uses": "flow",
                "spec": "equals",
                "slot": "comparator",
                "desc": "Two values exactly match.",
                "group": "comparison"
            },
            "from_bool":
            {
                "uses": "flow",
                "spec": "from_bool {_%val:bool_eval}",
                "slot": "assignment",
                "desc": "Assigns the calculated boolean value.",
                "group": "variables"
            },
            "from_num":
            {
                "uses": "flow",
                "spec": "from_num {_%val:number_eval}",
                "slot": "assignment",
                "desc": "Assigns the calculated number.",
                "group": "variables"
            },
            "from_numbers":
            {
                "uses": "flow",
                "spec": "from_nums {_%vals:num_list_eval}",
                "slot": "assignment",
                "desc": "Assigns the calculated numbers.",
                "group": "variables"
            },
            "from_obj":
            {
                "uses": "flow",
                "spec": "obj_fields {_%object:text_eval}",
                "slot": "from_source_fields",
                "desc": "Targets an object with a computed name.",
                "group": "misc"
            },
            "from_rec":
            {
                "uses": "flow",
                "spec": "rec_fields {_%rec:record_eval}",
                "slot": "from_source_fields",
                "desc": "Targets a record stored in a record.",
                "group": "misc"
            },
            "from_record":
            {
                "uses": "flow",
                "spec": "from_rec {_%val:record_eval}",
                "slot": "assignment",
                "desc": "Assigns the calculated record.",
                "group": "variables"
            },
            "from_records":
            {
                "uses": "flow",
                "spec": "from_recs {_%vals:record_list_eval}",
                "slot": "assignment",
                "desc": "Assigns the calculated records.",
                "group": "variables"
            },
            "from_text":
            {
                "uses": "flow",
                "spec": "from_txt {_%val:text_eval}",
                "slot": "assignment",
                "desc": "Assigns the calculated piece of text.",
                "group": "variables"
            },
            "from_texts":
            {
                "uses": "flow",
                "spec": "from_txts {_%vals:text_list_eval}",
                "slot": "assignment",
                "desc": "Assigns the calculated texts.",
                "group": "variables"
            },
            "from_var":
            {
                "uses": "flow",
                "spec": "var_fields {_%var:variable_name}",
                "slot": "from_source_fields",
                "desc": "Targets a record stored in a variable.",
                "group": "misc"
            },
            "get_at_field":
            {
                "uses": "flow",
                "spec": "get {_%field:text} {from:from_source_fields}",
                "slot":
                [
                    "assignment",
                    "bool_eval",
                    "number_eval",
                    "text_eval",
                    "record_eval",
                    "num_list_eval",
                    "text_list_eval",
                    "record_list_eval"
                ],
                "desc": "Get a value from a record.",
                "group": "variables"
            },
            "at_least":
            {
                "uses": "flow",
                "spec": "at_least",
                "slot": "comparator",
                "desc": "The first value is greater than or equal to the second value.",
                "group": "comparison"
            },
            "greater_than":
            {
                "uses": "flow",
                "spec": "greater_than",
                "slot": "comparator",
                "desc": "The first value is larger than the second value.",
                "group": "comparison"
            },
            "has_dominion":
            {
                "uses": "flow",
                "spec": "has_dominion {_%name:text}",
                "slot": "bool_eval",
                "group": "logic"
            },
            "has_trait":
            {
                "uses": "flow",
                "spec": "get {obj%object:text_eval} {trait:text_eval}",
                "slot": "bool_eval",
                "desc": "Return true if the object is currently in the requested state.",
                "group": "objects"
            },
            "id_of":
            {
                "uses": "flow",
                "spec": "id_of {_%object:text_eval}",
                "slot": "text_eval",
                "desc": "A unique object identifier.",
                "group": "objects"
            },
            "includes":
            {
                "uses": "flow",
                "spec": "contains {_%text:text_eval} {part:text_eval}",
                "slot": "bool_eval",
                "desc": "True if text contains text.",
                "group": "strings"
            },
            "into_obj":
            {
                "uses": "flow",
                "spec": "obj_field {_%object:text_eval}",
                "slot": "into_target_fields",
                "desc": "Targets an object with a computed name.",
                "group": "misc"
            },
            "into_var":
            {
                "uses": "flow",
                "spec": "var_field {_%var:variable_name}",
                "slot": "into_target_fields",
                "desc": "Targets an object or record stored in a variable",
                "group": "misc"
            },
            "is_empty":
            {
                "uses": "flow",
                "spec": "is {empty%text:text_eval}",
                "slot": "bool_eval",
                "desc": "True if the text is empty.",
                "group": "strings"
            },
            "is_exact_kind_of":
            {
                "uses": "flow",
                "spec": "kind_of {_%object:text_eval} {is_exactly%kind:text}",
                "slot": "bool_eval",
                "desc": "True if the object is exactly the named kind.",
                "group": "objects"
            },
            "is_kind_of":
            {
                "uses": "flow",
                "spec": "kind_of {_%object:text_eval} {is%kind:text}",
                "slot": "bool_eval",
                "desc": "True if the object is compatible with the named kind.",
                "group": "objects"
            },
            "not":
            {
                "uses": "flow",
                "spec": "not {_%test:bool_eval}",
                "slot": "bool_eval",
                "desc": "Returns the opposite value.",
                "group": "logic"
            },
            "join":
            {
                "uses": "flow",
                "spec": "join {_%sep?text_eval} {parts+text_eval}",
                "slot": "text_eval",
                "desc": "Returns multiple pieces of text as a single new piece of text.",
                "group": "strings"
            },
            "kind_of":
            {
                "uses": "flow",
                "spec": "kind_of {_%object:text_eval}",
                "slot": "text_eval",
                "desc": "Friendly name of the object's kind.",
                "group": "objects"
            },
            "kinds_of":
            {
                "uses": "flow",
                "spec": "kinds_of {_%kind:text}",
                "slot": "text_list_eval",
                "desc": "A list of compatible kinds.",
                "group": "objects"
            },
            "at_most":
            {
                "uses": "flow",
                "spec": "at_most",
                "slot": "comparator",
                "desc": "The first value is less than or equal to the second value.",
                "group": "comparison"
            },
            "less_than":
            {
                "uses": "flow",
                "spec": "less_than",
                "slot": "comparator",
                "desc": "The first value is less than the second value.",
                "group": "comparison"
            },
            "call_make":
            {
                "uses": "flow",
                "spec": "call_make {_%kind:text} {args%arguments:call_args}",
                "slot": "record_eval",
                "desc": "Runtime version of make",
                "group": "internal"
            },
            "make_lowercase":
            {
                "uses": "flow",
                "spec": "lower {_%text:text_eval}",
                "slot": "text_eval",
                "desc": "Returns new text, with every letter turned into lowercase. For example, 'shout' from 'SHOUT'.",
                "group": "format"
            },
            "pluralize":
            {
                "uses": "flow",
                "spec": "plural {of%text:text_eval}",
                "slot": "text_eval",
                "desc": "Returns the plural form of a singular word. (ex. apples for apple. )",
                "group": "format"
            },
            "make_reversed":
            {
                "uses": "flow",
                "spec": "reverse {text:text_eval}",
                "slot": "text_eval",
                "desc": "Returns new text flipped back to front. For example, 'elppA' from 'Apple', or 'noon' from 'noon'.",
                "group": "format"
            },
            "make_sentence_case":
            {
                "uses": "flow",
                "spec": "sentence {_%text:text_eval}",
                "slot": "text_eval",
                "desc": "Returns new text, start each sentence with a capital letter. For example, 'Empire Apple.' from 'Empire apple.'.",
                "group": "format"
            },
            "singularize":
            {
                "uses": "flow",
                "spec": "singular {of%text:text_eval}",
                "slot": "text_eval",
                "desc": "Returns the singular form of a plural word. (ex. apple for apples )",
                "group": "format"
            },
            "make_title_case":
            {
                "uses": "flow",
                "spec": "title {_%text:text_eval}",
                "slot": "text_eval",
                "desc": "Returns new text, starting each word with a capital letter. For example, 'Empire Apple' from 'empire apple'.",
                "group": "format"
            },
            "make_uppercase":
            {
                "uses": "flow",
                "spec": "upper {_%text:text_eval}",
                "slot": "text_eval",
                "desc": "Returns new text, with every letter turned into uppercase. For example, 'APPLE' from 'apple'.",
                "group": "format"
            },
            "matches":
            {
                "uses": "flow",
                "spec": "matches {_%text:text_eval} {to%pattern:text} {-%cache:match_cache}",
                "slot": "bool_eval",
                "desc": "Determine whether the specified text is similar to the specified regular expression.",
                "group": "matching"
            },
            "name_of":
            {
                "uses": "flow",
                "spec": "name_of {_%object:text_eval}",
                "slot": "text_eval",
                "desc": "Full name of the object.",
                "group": "objects"
            },
            "newline":
            {
                "uses": "flow",
                "spec": "br",
                "slot": "execute",
                "desc": "Start a new line.",
                "group": "printing"
            },
            "next":
            {
                "uses": "flow",
                "spec": "next",
                "slot": "execute",
                "desc": "In a repeating loop, try the next iteration of the loop.",
                "group": "flow"
            },
            "unequal":
            {
                "uses": "flow",
                "spec": "other_than",
                "slot": "comparator",
                "desc": "The first value doesn't equal the second value.",
                "group": "comparison"
            },
            "object_exists":
            {
                "uses": "flow",
                "spec": "is {valid%object:text_eval}",
                "slot": "bool_eval",
                "desc": "Returns whether there is a object of the specified name.",
                "group": "objects"
            },
            "blankline":
            {
                "uses": "flow",
                "spec": "p",
                "slot": "execute",
                "desc": "Add a single blank line following some text.",
                "group": "printing"
            },
            "print_num":
            {
                "uses": "flow",
                "spec": "numeral {_%num:number_eval}",
                "slot": "text_eval",
                "desc": "Writes a number using numerals, eg. '1'.",
                "group": "printing"
            },
            "print_num_word":
            {
                "uses": "flow",
                "spec": "numeral {words%num:number_eval}",
                "slot": "text_eval",
                "desc": "Writes a number in plain english: eg. 'one'",
                "group": "printing"
            },
            "product_of":
            {
                "uses": "flow",
                "spec": "mul {_%a:number_eval} {by%b:number_eval}",
                "slot": "number_eval",
                "desc": "Multiply two numbers.",
                "group": "math"
            },
            "put_at_field":
            {
                "uses": "flow",
                "spec": "put {_%into:into_target_fields} {from:assignment} {at%at_field:text}",
                "slot": "execute",
                "desc": "Put a value into the field of an record or object",
                "group": "variables"
            },
            "quotient_of":
            {
                "uses": "flow",
                "spec": "div {_%a:number_eval} {by%b:number_eval}",
                "slot": "number_eval",
                "desc": "Divide one number by another.",
                "group": "math"
            },
            "remainder_of":
            {
                "uses": "flow",
                "spec": "mod {_%a:number_eval} {by%b:number_eval}",
                "slot": "number_eval",
                "desc": "Divide one number by another, and return the remainder.",
                "group": "math"
            },
            "response":
            {
                "uses": "flow",
                "spec": "response {_%name:text} {text?text_eval}",
                "slot": "text_eval",
                "desc": "Generate text in a replaceable manner.",
                "group": "output"
            },
            "row":
            {
                "uses": "flow",
                "spec": "row {_%do:activity}",
                "slot": "text_eval",
                "desc": "A single line as part of a group of lines.",
                "group": "printing"
            },
            "rows":
            {
                "uses": "flow",
                "spec": "rows {_%do:activity}",
                "slot": "text_eval",
                "desc": "Group text into successive lines.",
                "group": "printing"
            },
            "say_text":
            {
                "uses": "flow",
                "spec": "say {_%text:text_eval}",
                "slot": "execute",
                "desc": "Print some bit of text to the player.",
                "group": "printing"
            },
            "call_send":
            {
                "uses": "flow",
                "spec": "call_send {_%event:text} {to%path:text_list_eval} {args%arguments:call_args}",
                "slot":
                [
                    "execute",
                    "bool_eval"
                ],
                "group": "internal",
                "desc": "Runtime version of send"
            },
            "set_trait":
            {
                "uses": "flow",
                "spec": "put {obj%object:text_eval} {trait:text_eval}",
                "slot": "execute",
                "desc": "Put an object into a particular state.",
                "group": "objects"
            },
            "slash_text":
            {
                "uses": "flow",
                "spec": "slashes {_%do:activity}",
                "slot": "text_eval",
                "desc": "Separates words with left-leaning slashes '/'.",
                "group": "printing"
            },
            "softline":
            {
                "uses": "flow",
                "spec": "wbr",
                "slot": "execute",
                "desc": "Start a new line ( if not already at a new line. )",
                "group": "printing"
            },
            "span_text":
            {
                "uses": "flow",
                "spec": "spaces {_%do:activity}",
                "slot": "text_eval",
                "desc": "Writes text with spaces between words.",
                "group": "printing"
            },
            "sum_of":
            {
                "uses": "flow",
                "spec": "inc {_%a:number_eval} {by%b?number_eval}",
                "slot": "number_eval",
                "desc": "Add two numbers.",
                "group": "math"
            },
            "trigger_cycle":
            {
                "uses": "flow",
                "spec": "every",
                "slot": "trigger",
                "group": "comparison"
            },
            "trigger_once":
            {
                "uses": "flow",
                "spec": "at",
                "slot": "trigger",
                "group": "comparison"
            },
            "trigger_switch":
            {
                "uses": "flow",
                "spec": "after",
                "slot": "trigger",
                "group": "comparison"
            },
            "get_var":
            {
                "uses": "flow",
                "spec": "var {_%name:variable_name}",
                "slot":
                [
                    "assignment",
                    "bool_eval",
                    "number_eval",
                    "text_eval",
                    "record_eval",
                    "num_list_eval",
                    "text_list_eval",
                    "record_list_eval"
                ],
                "desc": "Get Variable: Return the value of the named variable.",
                "group": "variables"
            },
            "while":
            {
                "uses": "flow",
                "spec": "repeating {_%true:bool_eval} {do:activity}",
                "slot": "execute",
                "desc": "Keep running a series of actions while a condition is true.",
                "group": "flow"
            }
        }
    }
}