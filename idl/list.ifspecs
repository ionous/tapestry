{
  "--": "list",
  "Spec:with group:": [
    "list",
    {
      "Group contains:": [
        {
          "--": "Define the name of a number variable.",
          "Spec:slots:with flow:": [
            "as_num",
            [
              "list_iterator"
            ],
            {
              "flow trim:uses:": [
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Define the name of a record variable.",
          "Spec:slots:with flow:": [
            "as_rec",
            [
              "list_iterator"
            ],
            {
              "flow trim:uses:": [
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Define the name of a text variable.",
          "Spec:slots:with flow:": [
            "as_txt",
            [
              "list_iterator"
            ],
            {
              "flow trim:uses:": [
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Erase at edge: Remove one or more values from a list.",
          "Spec:slots:with flow:": [
            "erase_edge",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "erase",
                true,
                [
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "at_front",
                      "at_edge",
                      "bool_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Erase at index: Remove one or more values from a list.",
          "Spec:slots:with flow:": [
            "erase_index",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "erase",
                true,
                [
                  {
                    "Term:type:": [
                      "count",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:type:": [
                      "at_index",
                      "number_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Erase elements from the front or back of a list. Runs an activity with a list containing the erased values; the list can be empty if nothing was erased.",
          "Spec:slots:with flow:": [
            "erasing",
            [
              "execute"
            ],
            {
              "flow trim:uses:": [
                true,
                [
                  {
                    "Term:type:": [
                      "count",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:type:": [
                      "at_index",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "as",
                      "text"
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "does",
                      "execute",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Erase one element from the front or back of a list. Runs an activity with a list containing the erased values; the list can be empty if nothing was erased.",
          "Spec:slots:with flow:": [
            "erasing_edge",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "erasing",
                true,
                [
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "at_front",
                      "at_edge",
                      "bool_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:": [
                      "as",
                      "text"
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "does",
                      "execute",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "else",
                      "brancher",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Uses a list of numbers.",
          "Spec:slots:with flow:": [
            "from_num_list",
            [
              "list_source"
            ],
            {
              "flow:trim:uses:": [
                "var_of_nums",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Uses a list of records.",
          "Spec:slots:with flow:": [
            "from_rec_list",
            [
              "list_source"
            ],
            {
              "flow:trim:uses:": [
                "var_of_recs",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Uses a list of text.",
          "Spec:slots:with flow:": [
            "from_txt_list",
            [
              "list_source"
            ],
            {
              "flow:trim:uses:": [
                "var_of_txts",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Targets a list of numbers.",
          "Spec:slots:with flow:": [
            "into_num_list",
            [
              "list_target"
            ],
            {
              "flow:trim:uses:": [
                "into_nums",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Targets a list of records.",
          "Spec:slots:with flow:": [
            "into_rec_list",
            [
              "list_target"
            ],
            {
              "flow:trim:uses:": [
                "into_recs",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Targets a list of text.",
          "Spec:slots:with flow:": [
            "into_txt_list",
            [
              "list_target"
            ],
            {
              "flow:trim:uses:": [
                "into_txts",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Get a value from a list. The first element is is index 1.",
          "Spec:slots:with flow:": [
            "list_at",
            [
              "number_eval",
              "text_eval",
              "record_eval"
            ],
            {
              "flow:trim:uses:": [
                "get",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "index",
                      "number_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Loops over the elements in the passed list, or runs the 'else' activity if empty.",
          "Spec:slots:with flow:": [
            "list_each",
            [
              "execute"
            ],
            {
              "flow:uses:": [
                "repeating",
                [
                  {
                    "Term:name:type:": [
                      "across",
                      "list",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "as",
                      "list_iterator"
                    ]
                  },
                  {
                    "Term:type:repeats:": [
                      "does",
                      "execute",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "else",
                      "brancher",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Search a list for a specific value.",
          "Spec:slots:with flow:": [
            "list_find",
            [
              "bool_eval",
              "number_eval"
            ],
            {
              "flow:trim:uses:": [
                "find",
                true,
                [
                  {
                    "Term:type:": [
                      "value",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "list",
                      "assignment"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Transform the values from a list. The named pattern gets called once for each value in the list. It get called with two parameters: 'in' as each value from the list, and 'out' as the var passed to the gather.",
          "Spec:with flow:": [
            "list_gather",
            {
              "flow:trim:uses:": [
                "gather",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "list_source"
                    ]
                  },
                  {
                    "Term:type:": [
                      "using",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Helper for accessing lists.",
          "Spec:with slot:": [
            "list_iterator",
            {
              "Slot": true
            }
          ]
        },
        {
          "--": "Determines the number of values in a list.",
          "Spec:slots:with flow:": [
            "list_len",
            [
              "number_eval"
            ],
            {
              "flow:trim:uses:": [
                "len",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "assignment"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Transform the values from one list and place the results in another list. The designated pattern is called with each value from the 'from list', one value at a time.",
          "Spec:slots:with flow:": [
            "list_map",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "map",
                true,
                [
                  {
                    "Term:type:": [
                      "to_list",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from_list",
                      "assignment"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "using",
                      "using_pattern",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Transform the values from one list by combining them into a single value. The named pattern is called with two parameters: 'in' ( each element of the list ) and 'out' ( ex. a record ).",
          "Spec:slots:with flow:": [
            "list_reduce",
            [
              "execute"
            ],
            {
              "flow:uses:": [
                "reduce",
                [
                  {
                    "Term:name:type:": [
                      "into",
                      "into_value",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from_list",
                      "assignment"
                    ]
                  },
                  {
                    "Term:name:type:": [
                      "using",
                      "using_pattern",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Reverse a list.",
          "Spec:slots:with flow:": [
            "list_reverse",
            [
              "execute"
            ],
            {
              "flow:uses:": [
                "reverse",
                [
                  {
                    "Term:type:": [
                      "list",
                      "list_source"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Overwrite an existing value in a list.",
          "Spec:slots:with flow:": [
            "list_set",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "set",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "index",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "from",
                      "assignment"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Create a new list from a section of another list.",
            "Start is optional, if omitted slice starts at the first element.",
            "If start is greater the length, an empty array is returned.",
            "Slice doesnt include the ending index.",
            "Negatives indices indicates an offset from the end.",
            "When end is omitted, copy up to and including the last element;",
            "and do the same if the end is greater than the length"
          ],
          "Spec:slots:with flow:": [
            "list_slice",
            [
              "num_list_eval",
              "text_list_eval",
              "record_list_eval"
            ],
            {
              "flow:trim:uses:": [
                "slice",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "start",
                      "number_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "end",
                      "number_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "Spec:slots:with flow:": [
            "list_sort_numbers",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "sort_numbers",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "by_field",
                      "text"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "descending",
                      "bool_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Rearrange the elements in the named list by using the designated pattern to test pairs of elements.",
          "Spec:slots:with flow:": [
            "list_sort_text",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "sort_texts",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "by_field",
                      "text"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "descending",
                      "bool_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "using_case",
                      "bool_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Rearrange the elements in the named list by using the designated pattern to test pairs of elements.",
          "Spec:slots:with flow:": [
            "list_sort_using",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "sort",
                true,
                [
                  {
                    "Term:type:": [
                      "var",
                      "variable_name"
                    ]
                  },
                  {
                    "Term:type:": [
                      "using",
                      "text"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Helper for accessing lists.",
          "Spec:with slot:": [
            "list_source",
            {
              "Slot": true
            }
          ]
        },
        {
          "--": "Modify a list by adding and removing elements. Note: the type of the elements being added must match the type of the list. Text cant be added to a list of numbers, numbers cant be added to a list of text. If the starting index is negative, it will begin that many elements from the end of the array. If list's length + the start is less than 0, it will begin from index 0. If the remove count is missing, it removes all elements from the start to the end; if it is 0 or negative, no elements are removed.",
          "Spec:slots:with flow:": [
            "list_splice",
            [
              "execute",
              "num_list_eval",
              "text_list_eval",
              "record_list_eval"
            ],
            {
              "flow:trim:uses:": [
                "splice",
                true,
                [
                  {
                    "Term:type:": [
                      "list",
                      "text"
                    ]
                  },
                  {
                    "Term:type:": [
                      "start",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "remove",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:": [
                      "insert",
                      "assignment"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Helper for accessing lists.",
          "Spec:with slot:": [
            "list_target",
            {
              "Slot": true
            }
          ]
        },
        {
          "--": "Add a value to a list.",
          "Spec:slots:with flow:": [
            "put_edge",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "put",
                true,
                [
                  {
                    "Term:type:": [
                      "from",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "into",
                      "list_target"
                    ]
                  },
                  {
                    "Term:name:type:optional:": [
                      "at_front",
                      "at_edge",
                      "bool_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": "Replace one value in a list with another.",
          "Spec:slots:with flow:": [
            "put_index",
            [
              "execute"
            ],
            {
              "flow:trim:uses:": [
                "put",
                true,
                [
                  {
                    "Term:type:": [
                      "from",
                      "assignment"
                    ]
                  },
                  {
                    "Term:type:": [
                      "into",
                      "list_target"
                    ]
                  },
                  {
                    "Term:type:": [
                      "at_index",
                      "number_eval"
                    ]
                  }
                ]
              ]
            }
          ]
        },
        {
          "--": [
            "Generates a series of numbers r[i] = (start + step*i) where i>=0.",
            "Start and step default to 1, stop defaults to start;",
            "the inputs are truncated to produce whole numbers;",
            "a zero step returns an error.",
            "A positive step ends the series when the returned value would exceed stop",
            "while a negative step ends before generating a value less than stop."
          ],
          "Spec:slots:with flow:": [
            "range",
            [
              "num_list_eval"
            ],
            {
              "flow trim:uses:": [
                true,
                [
                  {
                    "Term:type:": [
                      "to",
                      "number_eval"
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "from",
                      "number_eval",
                      true
                    ]
                  },
                  {
                    "Term:type:optional:": [
                      "by_step",
                      "number_eval",
                      true
                    ]
                  }
                ]
              ]
            }
          ]
        }
      ]
    }
  ]
}
