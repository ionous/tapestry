# Operations on objects, variables, and kinds.
Spec:requires:contains:
  - "object"
  - - "idl/prim"
    - "idl/rtti"

  - - # Access values stored inside other values.
      Slot: "dot"

    - # Store a value into a variable or object.
      # Values are specified as a generic [Assignment].
      # The various "From" commands exist to cast specific value types into an assignment.
      #
      # WARNING: This doesn't convert values from one type to another.
      # For example:
      #   Set:value:
      #   - "@some_local_variable"
      #   - FromText: "a piece of text to store."
      # will only work if the local variable can store text. If the variable was declared as a number, the command will generate an error.
      Flow:slots:lede:terms:
        - "set_value"
        - "execute"
        - "set"
        - - # Object property or variable into which to write the value.
            Term:name:type:
              - "_"
              - "target"
              - "address"
          - # The value to copy into the destination.
            Term:type:
              - "value"
              - "assignment"

    - # Set the state of an object or record.
      # See also: story `Define state:names:`.
      Flow:slots:lede:terms:
        - "set_state"
        - "execute"
        - "set"
        - - # Object or record to change.
            Term:name:type:
              - "_"
              - "target"
              - "address"
          - # Name of the state to set.
            # Only one state in a state set is considered active at a time so this implicitly deactivates the other states in its set.
            # Errors if the state wasn't declared as part of the object's kind.
            Term:name:type:
              - "state"
              - "state_name"
              - "text_eval"

    - # Read a value from an object. As a special case, if there are no dot parts, this will return the id of the object.
      # In .tell files, this command is often specified with a shortcut. For example:
      #   "#my_object.some_field"
      # is a shorter way to say:
      #   Object:dot:
      #   - "my object"
      #   - "some field"
      # WARNING: This doesn't convert values from one type to another. For instance, if a field was declared as text, this will error if read as a boolean.
      Flow:slots:lede:terms:
        - "object_dot"
        - - "address"
          - "bool_eval"
          - "num_eval"
          - "text_eval"
          - "record_eval"
          - "num_list_eval"
          - "text_list_eval"
          - "record_list_eval"
        - "object"
        - - # Id or friendly name of the object.
            Term:name:type:
              - "_"
              - "noun_name"
              - "text_eval"
          - # A field or path within the object to read from.
            Term:optional:repeats:
              - "dot"
              - true
              - true

    - # Read a value from a variable.
      # In .tell files, this command is often specified with a shortcut. For example:
      #   "@some_local_variable"
      # is a shorter way to say:
      #   Variable:dot: "some local variable"
      # WARNING: This doesn't convert values from one type to another. For instance, if a field was declared as text, this will error if read as a boolean.
      blockly-color: "MATH_HUE"
      Flow:slots:lede:terms:
        - "variable_dot"
        - - "address"
          - "bool_eval"
          - "num_eval"
          - "text_eval"
          - "record_eval"
          - "num_list_eval"
          - "text_list_eval"
          - "record_list_eval"
        - "variable"
        - - # Exact name of the variable in question.
            Term:name:type:
              - "_"
              - "variable_name"
              - "text_eval"
          - # The field or path within the variable to read from.
            # Specifying a dot only makes sense when the variable contains
            # a record, a list, or the id an object.
            # When this isn't specified, the command returns the value of the variable itself.
            Term:optional:repeats:
              - "dot"
              - true
              - true

    - # Select a named field from a record, or a named property from an object.
      Flow:slots:lede:terms:
        - "at_field"
        - "dot"
        - "at"
        - - # The name of the field to read or write.
            # The field must exist in the object or record being accessed.
            Term:name:type:
              - "field"
              - "field_name"
              - "text_eval"

    - # Select a value from a list of values.
      Flow:slots:lede:terms:
        - "at_index"
        - "dot"
        - "at"
        - - # The one-based index to read or write.
            # The index must exist within the list being targeted.
            Term:type:
              - "index"
              - "num_eval"

    - # The full name of an object as originally specified by the author.
      # Generates an error for unknown objects except
      # it returns empty text when given empty text.
      # See also [ObjectDot] which can return the object's unique id.
      Flow:slots:lede:terms:
        - "object_name"
        - "text_eval"
        - "object"
        - - # The object in question.
            # ( Records don't have names. )
            Term:name:type:
              - "name"
              - "target"
              - "address"

    - # All of an object's current states as a list of text.
      # ( Despite the name, can also be used on records. )
      Flow:slots:lede:terms:
        - "object_states"
        - "text_list_eval"
        - "object"
        - - # The object or record in question.
            Term:name:type:
              - "states"
              - "target"
              - "address"

    - # Determine whether an object (or record) is of exactly the named kind.
      # For example, all containers are a kind of prop.
      # Asking if a container is exactly a prop would return false.
      # See also [IsKindOf].
      Flow:slots:lede:terms:
        - "is_exact_kind_of"
        - "bool_eval"
        - "is"
        - - # The object or record in question.
            Term:name:type:
              - "exactly"
              - "target"
              - "address"
          - # The kind to check.
            Term:name:type:
              - "kind"
              - "kind_name"
              - "text_eval"

    - # Determine whether an object (or record) is compatible with the named kind.
      # For example, all containers are a kind of prop.
      # Asking if a container is a kind of a prop would return true.
      # See also [IsExactKindOf].
      Flow:slots:lede:terms:
        - "is_kind_of"
        - "bool_eval"
        - "is"
        - - # The object or record in question.
            Term:name:type:
              - "compatible"
              - "target"
              - "address"
          - # The kind to check.
            Term:name:type:
              - "kind"
              - "kind_name"
              - "text_eval"
          - # Check whether the requested text of the object is empty
            # but the type of the requested text is still of requested kind.
            Term:type:optional:
              - "nothing"
              - "bool"
              - true

    - # The kind of an object or record.
      Flow:slots:lede:terms:
        - "kind_of"
        - "text_eval"
        - "kind"
        - - # The object or record in question.
            Term:name:type:
              - "of"
              - "target"
              - "address"
          - # Check whether the requested text of the object is empty
            # but the type of the requested text is still of requested kind.
            Term:type:optional:
              - "nothing"
              - "bool"
              - true

    - # A list of all objects accessible by the current scene that compatible with the specified kind.
      Flow:slots:lede:terms:
        - "kinds_of"
        - "text_list_eval"
        - "objects"
        - - # The kind in question.
            Term:name:type:
              - "of"
              - "kind_name"
              - "text_eval"

    - # A list of the fields of a given kind.
      Flow:slots:lede:terms:
        - "fields_of_kind"
        - "text_list_eval"
        - "fields"
        - -  # The kind in question.
             Term:name:type:
              - "of"
              - "kind_name"
              - "text_eval"

    - # Change to the next state in some particular set of states for a given object ( or record. )
      # Optionally, returns the new value of the state.
      # Uses the order of the states where as they were originally defined.
      # See [DefineState].
      Flow:slots:lede:terms:
        - "increment_aspect"
        - - "text_eval"
          - "execute"
        - "increase"
        - - # The object or record in question.
            Term:name:type:
              - "_"
              - "target"
              - "address"
          - # The name of the set of states in question.
            # See also [DefineState].
            Term:name:type:
              - "state"
              - "aspect_name"
              - "text_eval"
          - # Customize the size of the increment. When not specified, increase by a single step.
            Term:name:type:optional:
              - "by"
              - "step"
              - "num_eval"
              - true
          - # Customize the behavior of increment when the last state has been reached. If clamp if false ( or not specified ), increment will wrap around to the first state. When clamp is true, increment will stick to the last state.
            Term:type:optional:
              - "clamp"
              - "bool_eval"
              - true

    - # Change to the previous state in some particular set of states for a given object ( or record. )
      # Optionally, returns the new value of the state.
      # Uses the order of the states where as they were originally defined.
      # See [DefineState].
      Flow:slots:lede:terms:
        - "decrement_aspect"
        - - "text_eval"
          - "execute"
        - "decrease"
        - - # The object or record in question.
            Term:name:type:
              - "_"
              - "target"
              - "address"
          - # The name of the set of states in question.
            # See also [DefineState].
            Term:name:type:
              - "state"
              - "aspect_name"
              - "text_eval"
          - # Customize the size of the decrement. When not specified, decrease by a single step.
            Term:name:type:optional:
              - "by"
              - "step"
              - "num_eval"
              - true
          - #  Customize the behavior of decrement when the first state has been reached. If clamp if false ( or not specified ), decrement will wrap around to the last state. When clamp is true, decrement will stick to the first state.
            Term:type:optional:
              - "clamp"
              - "bool_eval"
              - true