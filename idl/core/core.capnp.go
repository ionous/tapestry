// Code generated by capnpc-go. DO NOT EDIT.

package core

import (
	reader "git.sr.ht/~ionous/iffy/idl/reader"
	rtx "git.sr.ht/~ionous/iffy/idl/rtx"
	math "math"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Brancher struct{ capnp.Struct }

// Brancher_TypeID is the unique identifier for the type Brancher.
const Brancher_TypeID = 0xcf8321567398e34b

func NewBrancher(s *capnp.Segment) (Brancher, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Brancher{st}, err
}

func NewRootBrancher(s *capnp.Segment) (Brancher, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Brancher{st}, err
}

func ReadRootBrancher(msg *capnp.Message) (Brancher, error) {
	root, err := msg.RootPtr()
	return Brancher{root.Struct()}, err
}

func (s Brancher) String() string {
	str, _ := text.Marshal(0xcf8321567398e34b, s.Struct)
	return str
}

func (s Brancher) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s Brancher) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Brancher) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Brancher) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s Brancher) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Brancher_List is a list of Brancher.
type Brancher_List struct{ capnp.List }

// NewBrancher creates a new list of Brancher.
func NewBrancher_List(s *capnp.Segment, sz int32) (Brancher_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Brancher_List{l}, err
}

func (s Brancher_List) At(i int) Brancher { return Brancher{s.List.Struct(i)} }

func (s Brancher_List) Set(i int, v Brancher) error { return s.List.SetStruct(i, v.Struct) }

func (s Brancher_List) String() string {
	str, _ := text.MarshalList(0xcf8321567398e34b, s.List)
	return str
}

// Brancher_Promise is a wrapper for a Brancher promised by a client call.
type Brancher_Promise struct{ *capnp.Pipeline }

func (p Brancher_Promise) Struct() (Brancher, error) {
	s, err := p.Pipeline.Struct()
	return Brancher{s}, err
}

func (p Brancher_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type Comparator struct{ capnp.Struct }

// Comparator_TypeID is the unique identifier for the type Comparator.
const Comparator_TypeID = 0xfd0d638c032b7cf9

func NewComparator(s *capnp.Segment) (Comparator, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Comparator{st}, err
}

func NewRootComparator(s *capnp.Segment) (Comparator, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Comparator{st}, err
}

func ReadRootComparator(msg *capnp.Message) (Comparator, error) {
	root, err := msg.RootPtr()
	return Comparator{root.Struct()}, err
}

func (s Comparator) String() string {
	str, _ := text.Marshal(0xfd0d638c032b7cf9, s.Struct)
	return str
}

func (s Comparator) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s Comparator) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Comparator) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Comparator) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s Comparator) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Comparator_List is a list of Comparator.
type Comparator_List struct{ capnp.List }

// NewComparator creates a new list of Comparator.
func NewComparator_List(s *capnp.Segment, sz int32) (Comparator_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Comparator_List{l}, err
}

func (s Comparator_List) At(i int) Comparator { return Comparator{s.List.Struct(i)} }

func (s Comparator_List) Set(i int, v Comparator) error { return s.List.SetStruct(i, v.Struct) }

func (s Comparator_List) String() string {
	str, _ := text.MarshalList(0xfd0d638c032b7cf9, s.List)
	return str
}

// Comparator_Promise is a wrapper for a Comparator promised by a client call.
type Comparator_Promise struct{ *capnp.Pipeline }

func (p Comparator_Promise) Struct() (Comparator, error) {
	s, err := p.Pipeline.Struct()
	return Comparator{s}, err
}

func (p Comparator_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type FromSourceFields struct{ capnp.Struct }

// FromSourceFields_TypeID is the unique identifier for the type FromSourceFields.
const FromSourceFields_TypeID = 0x8a16ba50cd3da338

func NewFromSourceFields(s *capnp.Segment) (FromSourceFields, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromSourceFields{st}, err
}

func NewRootFromSourceFields(s *capnp.Segment) (FromSourceFields, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromSourceFields{st}, err
}

func ReadRootFromSourceFields(msg *capnp.Message) (FromSourceFields, error) {
	root, err := msg.RootPtr()
	return FromSourceFields{root.Struct()}, err
}

func (s FromSourceFields) String() string {
	str, _ := text.Marshal(0x8a16ba50cd3da338, s.Struct)
	return str
}

func (s FromSourceFields) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s FromSourceFields) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromSourceFields) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s FromSourceFields) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s FromSourceFields) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// FromSourceFields_List is a list of FromSourceFields.
type FromSourceFields_List struct{ capnp.List }

// NewFromSourceFields creates a new list of FromSourceFields.
func NewFromSourceFields_List(s *capnp.Segment, sz int32) (FromSourceFields_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromSourceFields_List{l}, err
}

func (s FromSourceFields_List) At(i int) FromSourceFields { return FromSourceFields{s.List.Struct(i)} }

func (s FromSourceFields_List) Set(i int, v FromSourceFields) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FromSourceFields_List) String() string {
	str, _ := text.MarshalList(0x8a16ba50cd3da338, s.List)
	return str
}

// FromSourceFields_Promise is a wrapper for a FromSourceFields promised by a client call.
type FromSourceFields_Promise struct{ *capnp.Pipeline }

func (p FromSourceFields_Promise) Struct() (FromSourceFields, error) {
	s, err := p.Pipeline.Struct()
	return FromSourceFields{s}, err
}

func (p FromSourceFields_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type IntoTargetFields struct{ capnp.Struct }

// IntoTargetFields_TypeID is the unique identifier for the type IntoTargetFields.
const IntoTargetFields_TypeID = 0xd1bf534c77687ee1

func NewIntoTargetFields(s *capnp.Segment) (IntoTargetFields, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoTargetFields{st}, err
}

func NewRootIntoTargetFields(s *capnp.Segment) (IntoTargetFields, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoTargetFields{st}, err
}

func ReadRootIntoTargetFields(msg *capnp.Message) (IntoTargetFields, error) {
	root, err := msg.RootPtr()
	return IntoTargetFields{root.Struct()}, err
}

func (s IntoTargetFields) String() string {
	str, _ := text.Marshal(0xd1bf534c77687ee1, s.Struct)
	return str
}

func (s IntoTargetFields) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s IntoTargetFields) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IntoTargetFields) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s IntoTargetFields) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s IntoTargetFields) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// IntoTargetFields_List is a list of IntoTargetFields.
type IntoTargetFields_List struct{ capnp.List }

// NewIntoTargetFields creates a new list of IntoTargetFields.
func NewIntoTargetFields_List(s *capnp.Segment, sz int32) (IntoTargetFields_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IntoTargetFields_List{l}, err
}

func (s IntoTargetFields_List) At(i int) IntoTargetFields { return IntoTargetFields{s.List.Struct(i)} }

func (s IntoTargetFields_List) Set(i int, v IntoTargetFields) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IntoTargetFields_List) String() string {
	str, _ := text.MarshalList(0xd1bf534c77687ee1, s.List)
	return str
}

// IntoTargetFields_Promise is a wrapper for a IntoTargetFields promised by a client call.
type IntoTargetFields_Promise struct{ *capnp.Pipeline }

func (p IntoTargetFields_Promise) Struct() (IntoTargetFields, error) {
	s, err := p.Pipeline.Struct()
	return IntoTargetFields{s}, err
}

func (p IntoTargetFields_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type Trigger struct{ capnp.Struct }

// Trigger_TypeID is the unique identifier for the type Trigger.
const Trigger_TypeID = 0xf2ffbc4604e04e5f

func NewTrigger(s *capnp.Segment) (Trigger, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Trigger{st}, err
}

func NewRootTrigger(s *capnp.Segment) (Trigger, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Trigger{st}, err
}

func ReadRootTrigger(msg *capnp.Message) (Trigger, error) {
	root, err := msg.RootPtr()
	return Trigger{root.Struct()}, err
}

func (s Trigger) String() string {
	str, _ := text.Marshal(0xf2ffbc4604e04e5f, s.Struct)
	return str
}

func (s Trigger) Eval() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s Trigger) HasEval() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Trigger) EvalPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Trigger) SetEval(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s Trigger) SetEvalPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Trigger_List is a list of Trigger.
type Trigger_List struct{ capnp.List }

// NewTrigger creates a new list of Trigger.
func NewTrigger_List(s *capnp.Segment, sz int32) (Trigger_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Trigger_List{l}, err
}

func (s Trigger_List) At(i int) Trigger { return Trigger{s.List.Struct(i)} }

func (s Trigger_List) Set(i int, v Trigger) error { return s.List.SetStruct(i, v.Struct) }

func (s Trigger_List) String() string {
	str, _ := text.MarshalList(0xf2ffbc4604e04e5f, s.List)
	return str
}

// Trigger_Promise is a wrapper for a Trigger promised by a client call.
type Trigger_Promise struct{ *capnp.Pipeline }

func (p Trigger_Promise) Struct() (Trigger, error) {
	s, err := p.Pipeline.Struct()
	return Trigger{s}, err
}

func (p Trigger_Promise) Eval() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

type Activity struct{ capnp.Struct }

// Activity_TypeID is the unique identifier for the type Activity.
const Activity_TypeID = 0xf0b8e763afc6ac3f

func NewActivity(s *capnp.Segment) (Activity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Activity{st}, err
}

func NewRootActivity(s *capnp.Segment) (Activity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Activity{st}, err
}

func ReadRootActivity(msg *capnp.Message) (Activity, error) {
	root, err := msg.RootPtr()
	return Activity{root.Struct()}, err
}

func (s Activity) String() string {
	str, _ := text.Marshal(0xf0b8e763afc6ac3f, s.Struct)
	return str
}

func (s Activity) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Activity) HasExe() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Activity) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Activity) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Activity_List is a list of Activity.
type Activity_List struct{ capnp.List }

// NewActivity creates a new list of Activity.
func NewActivity_List(s *capnp.Segment, sz int32) (Activity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Activity_List{l}, err
}

func (s Activity_List) At(i int) Activity { return Activity{s.List.Struct(i)} }

func (s Activity_List) Set(i int, v Activity) error { return s.List.SetStruct(i, v.Struct) }

func (s Activity_List) String() string {
	str, _ := text.MarshalList(0xf0b8e763afc6ac3f, s.List)
	return str
}

// Activity_Promise is a wrapper for a Activity promised by a client call.
type Activity_Promise struct{ *capnp.Pipeline }

func (p Activity_Promise) Struct() (Activity, error) {
	s, err := p.Pipeline.Struct()
	return Activity{s}, err
}

type AllTrue struct{ capnp.Struct }

// AllTrue_TypeID is the unique identifier for the type AllTrue.
const AllTrue_TypeID = 0xaa73e7af8daef786

func NewAllTrue(s *capnp.Segment) (AllTrue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllTrue{st}, err
}

func NewRootAllTrue(s *capnp.Segment) (AllTrue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllTrue{st}, err
}

func ReadRootAllTrue(msg *capnp.Message) (AllTrue, error) {
	root, err := msg.RootPtr()
	return AllTrue{root.Struct()}, err
}

func (s AllTrue) String() string {
	str, _ := text.Marshal(0xaa73e7af8daef786, s.Struct)
	return str
}

func (s AllTrue) Test() (rtx.BoolEval_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.BoolEval_List{List: p.List()}, err
}

func (s AllTrue) HasTest() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AllTrue) SetTest(v rtx.BoolEval_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTest sets the test field to a newly
// allocated rtx.BoolEval_List, preferring placement in s's segment.
func (s AllTrue) NewTest(n int32) (rtx.BoolEval_List, error) {
	l, err := rtx.NewBoolEval_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.BoolEval_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AllTrue_List is a list of AllTrue.
type AllTrue_List struct{ capnp.List }

// NewAllTrue creates a new list of AllTrue.
func NewAllTrue_List(s *capnp.Segment, sz int32) (AllTrue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AllTrue_List{l}, err
}

func (s AllTrue_List) At(i int) AllTrue { return AllTrue{s.List.Struct(i)} }

func (s AllTrue_List) Set(i int, v AllTrue) error { return s.List.SetStruct(i, v.Struct) }

func (s AllTrue_List) String() string {
	str, _ := text.MarshalList(0xaa73e7af8daef786, s.List)
	return str
}

// AllTrue_Promise is a wrapper for a AllTrue promised by a client call.
type AllTrue_Promise struct{ *capnp.Pipeline }

func (p AllTrue_Promise) Struct() (AllTrue, error) {
	s, err := p.Pipeline.Struct()
	return AllTrue{s}, err
}

type Always struct{ capnp.Struct }

// Always_TypeID is the unique identifier for the type Always.
const Always_TypeID = 0xd755cb8169d3834a

func NewAlways(s *capnp.Segment) (Always, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Always{st}, err
}

func NewRootAlways(s *capnp.Segment) (Always, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Always{st}, err
}

func ReadRootAlways(msg *capnp.Message) (Always, error) {
	root, err := msg.RootPtr()
	return Always{root.Struct()}, err
}

func (s Always) String() string {
	str, _ := text.Marshal(0xd755cb8169d3834a, s.Struct)
	return str
}

// Always_List is a list of Always.
type Always_List struct{ capnp.List }

// NewAlways creates a new list of Always.
func NewAlways_List(s *capnp.Segment, sz int32) (Always_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Always_List{l}, err
}

func (s Always_List) At(i int) Always { return Always{s.List.Struct(i)} }

func (s Always_List) Set(i int, v Always) error { return s.List.SetStruct(i, v.Struct) }

func (s Always_List) String() string {
	str, _ := text.MarshalList(0xd755cb8169d3834a, s.List)
	return str
}

// Always_Promise is a wrapper for a Always promised by a client call.
type Always_Promise struct{ *capnp.Pipeline }

func (p Always_Promise) Struct() (Always, error) {
	s, err := p.Pipeline.Struct()
	return Always{s}, err
}

type AnyTrue struct{ capnp.Struct }

// AnyTrue_TypeID is the unique identifier for the type AnyTrue.
const AnyTrue_TypeID = 0xc6ea819242eb9964

func NewAnyTrue(s *capnp.Segment) (AnyTrue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnyTrue{st}, err
}

func NewRootAnyTrue(s *capnp.Segment) (AnyTrue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnyTrue{st}, err
}

func ReadRootAnyTrue(msg *capnp.Message) (AnyTrue, error) {
	root, err := msg.RootPtr()
	return AnyTrue{root.Struct()}, err
}

func (s AnyTrue) String() string {
	str, _ := text.Marshal(0xc6ea819242eb9964, s.Struct)
	return str
}

func (s AnyTrue) Test() (rtx.BoolEval_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.BoolEval_List{List: p.List()}, err
}

func (s AnyTrue) HasTest() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AnyTrue) SetTest(v rtx.BoolEval_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTest sets the test field to a newly
// allocated rtx.BoolEval_List, preferring placement in s's segment.
func (s AnyTrue) NewTest(n int32) (rtx.BoolEval_List, error) {
	l, err := rtx.NewBoolEval_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.BoolEval_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AnyTrue_List is a list of AnyTrue.
type AnyTrue_List struct{ capnp.List }

// NewAnyTrue creates a new list of AnyTrue.
func NewAnyTrue_List(s *capnp.Segment, sz int32) (AnyTrue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnyTrue_List{l}, err
}

func (s AnyTrue_List) At(i int) AnyTrue { return AnyTrue{s.List.Struct(i)} }

func (s AnyTrue_List) Set(i int, v AnyTrue) error { return s.List.SetStruct(i, v.Struct) }

func (s AnyTrue_List) String() string {
	str, _ := text.MarshalList(0xc6ea819242eb9964, s.List)
	return str
}

// AnyTrue_Promise is a wrapper for a AnyTrue promised by a client call.
type AnyTrue_Promise struct{ *capnp.Pipeline }

func (p AnyTrue_Promise) Struct() (AnyTrue, error) {
	s, err := p.Pipeline.Struct()
	return AnyTrue{s}, err
}

type Argument struct{ capnp.Struct }

// Argument_TypeID is the unique identifier for the type Argument.
const Argument_TypeID = 0xc0758967e4717746

func NewArgument(s *capnp.Segment) (Argument, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Argument{st}, err
}

func NewRootArgument(s *capnp.Segment) (Argument, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Argument{st}, err
}

func ReadRootArgument(msg *capnp.Message) (Argument, error) {
	root, err := msg.RootPtr()
	return Argument{root.Struct()}, err
}

func (s Argument) String() string {
	str, _ := text.Marshal(0xc0758967e4717746, s.Struct)
	return str
}

func (s Argument) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Argument) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Argument) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Argument) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Argument) From() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Argument) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Argument) SetFrom(v rtx.Assignment) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Argument) NewFrom() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Argument_List is a list of Argument.
type Argument_List struct{ capnp.List }

// NewArgument creates a new list of Argument.
func NewArgument_List(s *capnp.Segment, sz int32) (Argument_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Argument_List{l}, err
}

func (s Argument_List) At(i int) Argument { return Argument{s.List.Struct(i)} }

func (s Argument_List) Set(i int, v Argument) error { return s.List.SetStruct(i, v.Struct) }

func (s Argument_List) String() string {
	str, _ := text.MarshalList(0xc0758967e4717746, s.List)
	return str
}

// Argument_Promise is a wrapper for a Argument promised by a client call.
type Argument_Promise struct{ *capnp.Pipeline }

func (p Argument_Promise) Struct() (Argument, error) {
	s, err := p.Pipeline.Struct()
	return Argument{s}, err
}

func (p Argument_Promise) From() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Arguments struct{ capnp.Struct }

// Arguments_TypeID is the unique identifier for the type Arguments.
const Arguments_TypeID = 0xd8943673d1bbfa02

func NewArguments(s *capnp.Segment) (Arguments, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Arguments{st}, err
}

func NewRootArguments(s *capnp.Segment) (Arguments, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Arguments{st}, err
}

func ReadRootArguments(msg *capnp.Message) (Arguments, error) {
	root, err := msg.RootPtr()
	return Arguments{root.Struct()}, err
}

func (s Arguments) String() string {
	str, _ := text.Marshal(0xd8943673d1bbfa02, s.Struct)
	return str
}

func (s Arguments) Args() (Argument_List, error) {
	p, err := s.Struct.Ptr(0)
	return Argument_List{List: p.List()}, err
}

func (s Arguments) HasArgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Arguments) SetArgs(v Argument_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated Argument_List, preferring placement in s's segment.
func (s Arguments) NewArgs(n int32) (Argument_List, error) {
	l, err := NewArgument_List(s.Struct.Segment(), n)
	if err != nil {
		return Argument_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Arguments_List is a list of Arguments.
type Arguments_List struct{ capnp.List }

// NewArguments creates a new list of Arguments.
func NewArguments_List(s *capnp.Segment, sz int32) (Arguments_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Arguments_List{l}, err
}

func (s Arguments_List) At(i int) Arguments { return Arguments{s.List.Struct(i)} }

func (s Arguments_List) Set(i int, v Arguments) error { return s.List.SetStruct(i, v.Struct) }

func (s Arguments_List) String() string {
	str, _ := text.MarshalList(0xd8943673d1bbfa02, s.List)
	return str
}

// Arguments_Promise is a wrapper for a Arguments promised by a client call.
type Arguments_Promise struct{ *capnp.Pipeline }

func (p Arguments_Promise) Struct() (Arguments, error) {
	s, err := p.Pipeline.Struct()
	return Arguments{s}, err
}

type Assign struct{ capnp.Struct }

// Assign_TypeID is the unique identifier for the type Assign.
const Assign_TypeID = 0xd578ea6ceb7ae5a4

func NewAssign(s *capnp.Segment) (Assign, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assign{st}, err
}

func NewRootAssign(s *capnp.Segment) (Assign, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Assign{st}, err
}

func ReadRootAssign(msg *capnp.Message) (Assign, error) {
	root, err := msg.RootPtr()
	return Assign{root.Struct()}, err
}

func (s Assign) String() string {
	str, _ := text.Marshal(0xd578ea6ceb7ae5a4, s.Struct)
	return str
}

func (s Assign) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Assign) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Assign) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Assign) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Assign) From() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s Assign) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Assign) SetFrom(v rtx.Assignment) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s Assign) NewFrom() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Assign_List is a list of Assign.
type Assign_List struct{ capnp.List }

// NewAssign creates a new list of Assign.
func NewAssign_List(s *capnp.Segment, sz int32) (Assign_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Assign_List{l}, err
}

func (s Assign_List) At(i int) Assign { return Assign{s.List.Struct(i)} }

func (s Assign_List) Set(i int, v Assign) error { return s.List.SetStruct(i, v.Struct) }

func (s Assign_List) String() string {
	str, _ := text.MarshalList(0xd578ea6ceb7ae5a4, s.List)
	return str
}

// Assign_Promise is a wrapper for a Assign promised by a client call.
type Assign_Promise struct{ *capnp.Pipeline }

func (p Assign_Promise) Struct() (Assign, error) {
	s, err := p.Pipeline.Struct()
	return Assign{s}, err
}

func (p Assign_Promise) From() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type BoolValue struct{ capnp.Struct }

// BoolValue_TypeID is the unique identifier for the type BoolValue.
const BoolValue_TypeID = 0xaeafa53d5e166d68

func NewBoolValue(s *capnp.Segment) (BoolValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BoolValue{st}, err
}

func NewRootBoolValue(s *capnp.Segment) (BoolValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BoolValue{st}, err
}

func ReadRootBoolValue(msg *capnp.Message) (BoolValue, error) {
	root, err := msg.RootPtr()
	return BoolValue{root.Struct()}, err
}

func (s BoolValue) String() string {
	str, _ := text.Marshal(0xaeafa53d5e166d68, s.Struct)
	return str
}

func (s BoolValue) Bool() bool {
	return s.Struct.Bit(0)
}

func (s BoolValue) SetBool(v bool) {
	s.Struct.SetBit(0, v)
}

// BoolValue_List is a list of BoolValue.
type BoolValue_List struct{ capnp.List }

// NewBoolValue creates a new list of BoolValue.
func NewBoolValue_List(s *capnp.Segment, sz int32) (BoolValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return BoolValue_List{l}, err
}

func (s BoolValue_List) At(i int) BoolValue { return BoolValue{s.List.Struct(i)} }

func (s BoolValue_List) Set(i int, v BoolValue) error { return s.List.SetStruct(i, v.Struct) }

func (s BoolValue_List) String() string {
	str, _ := text.MarshalList(0xaeafa53d5e166d68, s.List)
	return str
}

// BoolValue_Promise is a wrapper for a BoolValue promised by a client call.
type BoolValue_Promise struct{ *capnp.Pipeline }

func (p BoolValue_Promise) Struct() (BoolValue, error) {
	s, err := p.Pipeline.Struct()
	return BoolValue{s}, err
}

type Bracket struct{ capnp.Struct }

// Bracket_TypeID is the unique identifier for the type Bracket.
const Bracket_TypeID = 0xa31f822e8c8cb596

func NewBracket(s *capnp.Segment) (Bracket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bracket{st}, err
}

func NewRootBracket(s *capnp.Segment) (Bracket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bracket{st}, err
}

func ReadRootBracket(msg *capnp.Message) (Bracket, error) {
	root, err := msg.RootPtr()
	return Bracket{root.Struct()}, err
}

func (s Bracket) String() string {
	str, _ := text.Marshal(0xa31f822e8c8cb596, s.Struct)
	return str
}

func (s Bracket) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Bracket) HasExe() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Bracket) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Bracket) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Bracket_List is a list of Bracket.
type Bracket_List struct{ capnp.List }

// NewBracket creates a new list of Bracket.
func NewBracket_List(s *capnp.Segment, sz int32) (Bracket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Bracket_List{l}, err
}

func (s Bracket_List) At(i int) Bracket { return Bracket{s.List.Struct(i)} }

func (s Bracket_List) Set(i int, v Bracket) error { return s.List.SetStruct(i, v.Struct) }

func (s Bracket_List) String() string {
	str, _ := text.MarshalList(0xa31f822e8c8cb596, s.List)
	return str
}

// Bracket_Promise is a wrapper for a Bracket promised by a client call.
type Bracket_Promise struct{ *capnp.Pipeline }

func (p Bracket_Promise) Struct() (Bracket, error) {
	s, err := p.Pipeline.Struct()
	return Bracket{s}, err
}

type Break struct{ capnp.Struct }

// Break_TypeID is the unique identifier for the type Break.
const Break_TypeID = 0xfb681291053dee8b

func NewBreak(s *capnp.Segment) (Break, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Break{st}, err
}

func NewRootBreak(s *capnp.Segment) (Break, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Break{st}, err
}

func ReadRootBreak(msg *capnp.Message) (Break, error) {
	root, err := msg.RootPtr()
	return Break{root.Struct()}, err
}

func (s Break) String() string {
	str, _ := text.Marshal(0xfb681291053dee8b, s.Struct)
	return str
}

// Break_List is a list of Break.
type Break_List struct{ capnp.List }

// NewBreak creates a new list of Break.
func NewBreak_List(s *capnp.Segment, sz int32) (Break_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Break_List{l}, err
}

func (s Break_List) At(i int) Break { return Break{s.List.Struct(i)} }

func (s Break_List) Set(i int, v Break) error { return s.List.SetStruct(i, v.Struct) }

func (s Break_List) String() string {
	str, _ := text.MarshalList(0xfb681291053dee8b, s.List)
	return str
}

// Break_Promise is a wrapper for a Break promised by a client call.
type Break_Promise struct{ *capnp.Pipeline }

func (p Break_Promise) Struct() (Break, error) {
	s, err := p.Pipeline.Struct()
	return Break{s}, err
}

type Buffer struct{ capnp.Struct }

// Buffer_TypeID is the unique identifier for the type Buffer.
const Buffer_TypeID = 0x9a7aeed660b3b244

func NewBuffer(s *capnp.Segment) (Buffer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Buffer{st}, err
}

func NewRootBuffer(s *capnp.Segment) (Buffer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Buffer{st}, err
}

func ReadRootBuffer(msg *capnp.Message) (Buffer, error) {
	root, err := msg.RootPtr()
	return Buffer{root.Struct()}, err
}

func (s Buffer) String() string {
	str, _ := text.Marshal(0x9a7aeed660b3b244, s.Struct)
	return str
}

func (s Buffer) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Buffer) HasExe() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Buffer) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Buffer) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Buffer_List is a list of Buffer.
type Buffer_List struct{ capnp.List }

// NewBuffer creates a new list of Buffer.
func NewBuffer_List(s *capnp.Segment, sz int32) (Buffer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Buffer_List{l}, err
}

func (s Buffer_List) At(i int) Buffer { return Buffer{s.List.Struct(i)} }

func (s Buffer_List) Set(i int, v Buffer) error { return s.List.SetStruct(i, v.Struct) }

func (s Buffer_List) String() string {
	str, _ := text.MarshalList(0x9a7aeed660b3b244, s.List)
	return str
}

// Buffer_Promise is a wrapper for a Buffer promised by a client call.
type Buffer_Promise struct{ *capnp.Pipeline }

func (p Buffer_Promise) Struct() (Buffer, error) {
	s, err := p.Pipeline.Struct()
	return Buffer{s}, err
}

type Capitalize struct{ capnp.Struct }

// Capitalize_TypeID is the unique identifier for the type Capitalize.
const Capitalize_TypeID = 0x9e0888307cd0b100

func NewCapitalize(s *capnp.Segment) (Capitalize, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Capitalize{st}, err
}

func NewRootCapitalize(s *capnp.Segment) (Capitalize, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Capitalize{st}, err
}

func ReadRootCapitalize(msg *capnp.Message) (Capitalize, error) {
	root, err := msg.RootPtr()
	return Capitalize{root.Struct()}, err
}

func (s Capitalize) String() string {
	str, _ := text.Marshal(0x9e0888307cd0b100, s.Struct)
	return str
}

func (s Capitalize) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s Capitalize) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Capitalize) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s Capitalize) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Capitalize_List is a list of Capitalize.
type Capitalize_List struct{ capnp.List }

// NewCapitalize creates a new list of Capitalize.
func NewCapitalize_List(s *capnp.Segment, sz int32) (Capitalize_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Capitalize_List{l}, err
}

func (s Capitalize_List) At(i int) Capitalize { return Capitalize{s.List.Struct(i)} }

func (s Capitalize_List) Set(i int, v Capitalize) error { return s.List.SetStruct(i, v.Struct) }

func (s Capitalize_List) String() string {
	str, _ := text.MarshalList(0x9e0888307cd0b100, s.List)
	return str
}

// Capitalize_Promise is a wrapper for a Capitalize promised by a client call.
type Capitalize_Promise struct{ *capnp.Pipeline }

func (p Capitalize_Promise) Struct() (Capitalize, error) {
	s, err := p.Pipeline.Struct()
	return Capitalize{s}, err
}

func (p Capitalize_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ChooseAction struct{ capnp.Struct }

// ChooseAction_TypeID is the unique identifier for the type ChooseAction.
const ChooseAction_TypeID = 0xa00595459060262c

func NewChooseAction(s *capnp.Segment) (ChooseAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ChooseAction{st}, err
}

func NewRootChooseAction(s *capnp.Segment) (ChooseAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ChooseAction{st}, err
}

func ReadRootChooseAction(msg *capnp.Message) (ChooseAction, error) {
	root, err := msg.RootPtr()
	return ChooseAction{root.Struct()}, err
}

func (s ChooseAction) String() string {
	str, _ := text.Marshal(0xa00595459060262c, s.Struct)
	return str
}

func (s ChooseAction) If() (rtx.BoolEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.BoolEval{Struct: p.Struct()}, err
}

func (s ChooseAction) HasIf() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChooseAction) SetIf(v rtx.BoolEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIf sets the if field to a newly
// allocated rtx.BoolEval struct, preferring placement in s's segment.
func (s ChooseAction) NewIf() (rtx.BoolEval, error) {
	ss, err := rtx.NewBoolEval(s.Struct.Segment())
	if err != nil {
		return rtx.BoolEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseAction) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Execute_List{List: p.List()}, err
}

func (s ChooseAction) HasExe() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChooseAction) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s ChooseAction) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ChooseAction) Else() (Brancher, error) {
	p, err := s.Struct.Ptr(2)
	return Brancher{Struct: p.Struct()}, err
}

func (s ChooseAction) HasElse() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ChooseAction) SetElse(v Brancher) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewElse sets the else field to a newly
// allocated Brancher struct, preferring placement in s's segment.
func (s ChooseAction) NewElse() (Brancher, error) {
	ss, err := NewBrancher(s.Struct.Segment())
	if err != nil {
		return Brancher{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// ChooseAction_List is a list of ChooseAction.
type ChooseAction_List struct{ capnp.List }

// NewChooseAction creates a new list of ChooseAction.
func NewChooseAction_List(s *capnp.Segment, sz int32) (ChooseAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ChooseAction_List{l}, err
}

func (s ChooseAction_List) At(i int) ChooseAction { return ChooseAction{s.List.Struct(i)} }

func (s ChooseAction_List) Set(i int, v ChooseAction) error { return s.List.SetStruct(i, v.Struct) }

func (s ChooseAction_List) String() string {
	str, _ := text.MarshalList(0xa00595459060262c, s.List)
	return str
}

// ChooseAction_Promise is a wrapper for a ChooseAction promised by a client call.
type ChooseAction_Promise struct{ *capnp.Pipeline }

func (p ChooseAction_Promise) Struct() (ChooseAction, error) {
	s, err := p.Pipeline.Struct()
	return ChooseAction{s}, err
}

func (p ChooseAction_Promise) If() rtx.BoolEval_Promise {
	return rtx.BoolEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ChooseAction_Promise) Else() Brancher_Promise {
	return Brancher_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type ChooseMore struct{ capnp.Struct }

// ChooseMore_TypeID is the unique identifier for the type ChooseMore.
const ChooseMore_TypeID = 0xd1cd83c0ff4e09e8

func NewChooseMore(s *capnp.Segment) (ChooseMore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ChooseMore{st}, err
}

func NewRootChooseMore(s *capnp.Segment) (ChooseMore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ChooseMore{st}, err
}

func ReadRootChooseMore(msg *capnp.Message) (ChooseMore, error) {
	root, err := msg.RootPtr()
	return ChooseMore{root.Struct()}, err
}

func (s ChooseMore) String() string {
	str, _ := text.Marshal(0xd1cd83c0ff4e09e8, s.Struct)
	return str
}

func (s ChooseMore) If() (rtx.BoolEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.BoolEval{Struct: p.Struct()}, err
}

func (s ChooseMore) HasIf() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChooseMore) SetIf(v rtx.BoolEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIf sets the if field to a newly
// allocated rtx.BoolEval struct, preferring placement in s's segment.
func (s ChooseMore) NewIf() (rtx.BoolEval, error) {
	ss, err := rtx.NewBoolEval(s.Struct.Segment())
	if err != nil {
		return rtx.BoolEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseMore) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Execute_List{List: p.List()}, err
}

func (s ChooseMore) HasExe() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChooseMore) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s ChooseMore) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ChooseMore) Else() (Brancher, error) {
	p, err := s.Struct.Ptr(2)
	return Brancher{Struct: p.Struct()}, err
}

func (s ChooseMore) HasElse() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ChooseMore) SetElse(v Brancher) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewElse sets the else field to a newly
// allocated Brancher struct, preferring placement in s's segment.
func (s ChooseMore) NewElse() (Brancher, error) {
	ss, err := NewBrancher(s.Struct.Segment())
	if err != nil {
		return Brancher{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// ChooseMore_List is a list of ChooseMore.
type ChooseMore_List struct{ capnp.List }

// NewChooseMore creates a new list of ChooseMore.
func NewChooseMore_List(s *capnp.Segment, sz int32) (ChooseMore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ChooseMore_List{l}, err
}

func (s ChooseMore_List) At(i int) ChooseMore { return ChooseMore{s.List.Struct(i)} }

func (s ChooseMore_List) Set(i int, v ChooseMore) error { return s.List.SetStruct(i, v.Struct) }

func (s ChooseMore_List) String() string {
	str, _ := text.MarshalList(0xd1cd83c0ff4e09e8, s.List)
	return str
}

// ChooseMore_Promise is a wrapper for a ChooseMore promised by a client call.
type ChooseMore_Promise struct{ *capnp.Pipeline }

func (p ChooseMore_Promise) Struct() (ChooseMore, error) {
	s, err := p.Pipeline.Struct()
	return ChooseMore{s}, err
}

func (p ChooseMore_Promise) If() rtx.BoolEval_Promise {
	return rtx.BoolEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ChooseMore_Promise) Else() Brancher_Promise {
	return Brancher_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type ChooseMoreValue struct{ capnp.Struct }

// ChooseMoreValue_TypeID is the unique identifier for the type ChooseMoreValue.
const ChooseMoreValue_TypeID = 0x8f6808705ebe6526

func NewChooseMoreValue(s *capnp.Segment) (ChooseMoreValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ChooseMoreValue{st}, err
}

func NewRootChooseMoreValue(s *capnp.Segment) (ChooseMoreValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ChooseMoreValue{st}, err
}

func ReadRootChooseMoreValue(msg *capnp.Message) (ChooseMoreValue, error) {
	root, err := msg.RootPtr()
	return ChooseMoreValue{root.Struct()}, err
}

func (s ChooseMoreValue) String() string {
	str, _ := text.Marshal(0x8f6808705ebe6526, s.Struct)
	return str
}

func (s ChooseMoreValue) Assign() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ChooseMoreValue) HasAssign() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChooseMoreValue) AssignBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ChooseMoreValue) SetAssign(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ChooseMoreValue) From() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s ChooseMoreValue) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChooseMoreValue) SetFrom(v rtx.Assignment) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s ChooseMoreValue) NewFrom() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseMoreValue) Filter() (rtx.BoolEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.BoolEval{Struct: p.Struct()}, err
}

func (s ChooseMoreValue) HasFilter() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ChooseMoreValue) SetFilter(v rtx.BoolEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewFilter sets the filter field to a newly
// allocated rtx.BoolEval struct, preferring placement in s's segment.
func (s ChooseMoreValue) NewFilter() (rtx.BoolEval, error) {
	ss, err := rtx.NewBoolEval(s.Struct.Segment())
	if err != nil {
		return rtx.BoolEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseMoreValue) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(3)
	return rtx.Execute_List{List: p.List()}, err
}

func (s ChooseMoreValue) HasExe() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ChooseMoreValue) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s ChooseMoreValue) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s ChooseMoreValue) Else() (Brancher, error) {
	p, err := s.Struct.Ptr(4)
	return Brancher{Struct: p.Struct()}, err
}

func (s ChooseMoreValue) HasElse() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ChooseMoreValue) SetElse(v Brancher) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewElse sets the else field to a newly
// allocated Brancher struct, preferring placement in s's segment.
func (s ChooseMoreValue) NewElse() (Brancher, error) {
	ss, err := NewBrancher(s.Struct.Segment())
	if err != nil {
		return Brancher{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

// ChooseMoreValue_List is a list of ChooseMoreValue.
type ChooseMoreValue_List struct{ capnp.List }

// NewChooseMoreValue creates a new list of ChooseMoreValue.
func NewChooseMoreValue_List(s *capnp.Segment, sz int32) (ChooseMoreValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return ChooseMoreValue_List{l}, err
}

func (s ChooseMoreValue_List) At(i int) ChooseMoreValue { return ChooseMoreValue{s.List.Struct(i)} }

func (s ChooseMoreValue_List) Set(i int, v ChooseMoreValue) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ChooseMoreValue_List) String() string {
	str, _ := text.MarshalList(0x8f6808705ebe6526, s.List)
	return str
}

// ChooseMoreValue_Promise is a wrapper for a ChooseMoreValue promised by a client call.
type ChooseMoreValue_Promise struct{ *capnp.Pipeline }

func (p ChooseMoreValue_Promise) Struct() (ChooseMoreValue, error) {
	s, err := p.Pipeline.Struct()
	return ChooseMoreValue{s}, err
}

func (p ChooseMoreValue_Promise) From() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p ChooseMoreValue_Promise) Filter() rtx.BoolEval_Promise {
	return rtx.BoolEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p ChooseMoreValue_Promise) Else() Brancher_Promise {
	return Brancher_Promise{Pipeline: p.Pipeline.GetPipeline(4)}
}

type ChooseNothingElse struct{ capnp.Struct }

// ChooseNothingElse_TypeID is the unique identifier for the type ChooseNothingElse.
const ChooseNothingElse_TypeID = 0xaf76c6cbf5a0cc44

func NewChooseNothingElse(s *capnp.Segment) (ChooseNothingElse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChooseNothingElse{st}, err
}

func NewRootChooseNothingElse(s *capnp.Segment) (ChooseNothingElse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChooseNothingElse{st}, err
}

func ReadRootChooseNothingElse(msg *capnp.Message) (ChooseNothingElse, error) {
	root, err := msg.RootPtr()
	return ChooseNothingElse{root.Struct()}, err
}

func (s ChooseNothingElse) String() string {
	str, _ := text.Marshal(0xaf76c6cbf5a0cc44, s.Struct)
	return str
}

func (s ChooseNothingElse) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Execute_List{List: p.List()}, err
}

func (s ChooseNothingElse) HasExe() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChooseNothingElse) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s ChooseNothingElse) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ChooseNothingElse_List is a list of ChooseNothingElse.
type ChooseNothingElse_List struct{ capnp.List }

// NewChooseNothingElse creates a new list of ChooseNothingElse.
func NewChooseNothingElse_List(s *capnp.Segment, sz int32) (ChooseNothingElse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ChooseNothingElse_List{l}, err
}

func (s ChooseNothingElse_List) At(i int) ChooseNothingElse {
	return ChooseNothingElse{s.List.Struct(i)}
}

func (s ChooseNothingElse_List) Set(i int, v ChooseNothingElse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ChooseNothingElse_List) String() string {
	str, _ := text.MarshalList(0xaf76c6cbf5a0cc44, s.List)
	return str
}

// ChooseNothingElse_Promise is a wrapper for a ChooseNothingElse promised by a client call.
type ChooseNothingElse_Promise struct{ *capnp.Pipeline }

func (p ChooseNothingElse_Promise) Struct() (ChooseNothingElse, error) {
	s, err := p.Pipeline.Struct()
	return ChooseNothingElse{s}, err
}

type ChooseNum struct{ capnp.Struct }

// ChooseNum_TypeID is the unique identifier for the type ChooseNum.
const ChooseNum_TypeID = 0xff64c5e8bbcfd49f

func NewChooseNum(s *capnp.Segment) (ChooseNum, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ChooseNum{st}, err
}

func NewRootChooseNum(s *capnp.Segment) (ChooseNum, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ChooseNum{st}, err
}

func ReadRootChooseNum(msg *capnp.Message) (ChooseNum, error) {
	root, err := msg.RootPtr()
	return ChooseNum{root.Struct()}, err
}

func (s ChooseNum) String() string {
	str, _ := text.Marshal(0xff64c5e8bbcfd49f, s.Struct)
	return str
}

func (s ChooseNum) True() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s ChooseNum) HasTrue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChooseNum) SetTrue(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrue sets the true field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s ChooseNum) NewTrue() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseNum) If() (rtx.BoolEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.BoolEval{Struct: p.Struct()}, err
}

func (s ChooseNum) HasIf() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChooseNum) SetIf(v rtx.BoolEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewIf sets the if field to a newly
// allocated rtx.BoolEval struct, preferring placement in s's segment.
func (s ChooseNum) NewIf() (rtx.BoolEval, error) {
	ss, err := rtx.NewBoolEval(s.Struct.Segment())
	if err != nil {
		return rtx.BoolEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseNum) False() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s ChooseNum) HasFalse() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ChooseNum) SetFalse(v rtx.NumberEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewFalse sets the false field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s ChooseNum) NewFalse() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// ChooseNum_List is a list of ChooseNum.
type ChooseNum_List struct{ capnp.List }

// NewChooseNum creates a new list of ChooseNum.
func NewChooseNum_List(s *capnp.Segment, sz int32) (ChooseNum_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ChooseNum_List{l}, err
}

func (s ChooseNum_List) At(i int) ChooseNum { return ChooseNum{s.List.Struct(i)} }

func (s ChooseNum_List) Set(i int, v ChooseNum) error { return s.List.SetStruct(i, v.Struct) }

func (s ChooseNum_List) String() string {
	str, _ := text.MarshalList(0xff64c5e8bbcfd49f, s.List)
	return str
}

// ChooseNum_Promise is a wrapper for a ChooseNum promised by a client call.
type ChooseNum_Promise struct{ *capnp.Pipeline }

func (p ChooseNum_Promise) Struct() (ChooseNum, error) {
	s, err := p.Pipeline.Struct()
	return ChooseNum{s}, err
}

func (p ChooseNum_Promise) True() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ChooseNum_Promise) If() rtx.BoolEval_Promise {
	return rtx.BoolEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p ChooseNum_Promise) False() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type ChooseText struct{ capnp.Struct }

// ChooseText_TypeID is the unique identifier for the type ChooseText.
const ChooseText_TypeID = 0xf6a494a34dcb999f

func NewChooseText(s *capnp.Segment) (ChooseText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ChooseText{st}, err
}

func NewRootChooseText(s *capnp.Segment) (ChooseText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ChooseText{st}, err
}

func ReadRootChooseText(msg *capnp.Message) (ChooseText, error) {
	root, err := msg.RootPtr()
	return ChooseText{root.Struct()}, err
}

func (s ChooseText) String() string {
	str, _ := text.Marshal(0xf6a494a34dcb999f, s.Struct)
	return str
}

func (s ChooseText) True() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s ChooseText) HasTrue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChooseText) SetTrue(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrue sets the true field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s ChooseText) NewTrue() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseText) If() (rtx.BoolEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.BoolEval{Struct: p.Struct()}, err
}

func (s ChooseText) HasIf() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChooseText) SetIf(v rtx.BoolEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewIf sets the if field to a newly
// allocated rtx.BoolEval struct, preferring placement in s's segment.
func (s ChooseText) NewIf() (rtx.BoolEval, error) {
	ss, err := rtx.NewBoolEval(s.Struct.Segment())
	if err != nil {
		return rtx.BoolEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseText) False() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s ChooseText) HasFalse() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ChooseText) SetFalse(v rtx.TextEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewFalse sets the false field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s ChooseText) NewFalse() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// ChooseText_List is a list of ChooseText.
type ChooseText_List struct{ capnp.List }

// NewChooseText creates a new list of ChooseText.
func NewChooseText_List(s *capnp.Segment, sz int32) (ChooseText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ChooseText_List{l}, err
}

func (s ChooseText_List) At(i int) ChooseText { return ChooseText{s.List.Struct(i)} }

func (s ChooseText_List) Set(i int, v ChooseText) error { return s.List.SetStruct(i, v.Struct) }

func (s ChooseText_List) String() string {
	str, _ := text.MarshalList(0xf6a494a34dcb999f, s.List)
	return str
}

// ChooseText_Promise is a wrapper for a ChooseText promised by a client call.
type ChooseText_Promise struct{ *capnp.Pipeline }

func (p ChooseText_Promise) Struct() (ChooseText, error) {
	s, err := p.Pipeline.Struct()
	return ChooseText{s}, err
}

func (p ChooseText_Promise) True() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ChooseText_Promise) If() rtx.BoolEval_Promise {
	return rtx.BoolEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p ChooseText_Promise) False() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type ChooseValue struct{ capnp.Struct }

// ChooseValue_TypeID is the unique identifier for the type ChooseValue.
const ChooseValue_TypeID = 0xa91aa9cd403b1c6a

func NewChooseValue(s *capnp.Segment) (ChooseValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ChooseValue{st}, err
}

func NewRootChooseValue(s *capnp.Segment) (ChooseValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ChooseValue{st}, err
}

func ReadRootChooseValue(msg *capnp.Message) (ChooseValue, error) {
	root, err := msg.RootPtr()
	return ChooseValue{root.Struct()}, err
}

func (s ChooseValue) String() string {
	str, _ := text.Marshal(0xa91aa9cd403b1c6a, s.Struct)
	return str
}

func (s ChooseValue) Assign() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ChooseValue) HasAssign() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChooseValue) AssignBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ChooseValue) SetAssign(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ChooseValue) From() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s ChooseValue) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChooseValue) SetFrom(v rtx.Assignment) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s ChooseValue) NewFrom() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseValue) Filter() (rtx.BoolEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.BoolEval{Struct: p.Struct()}, err
}

func (s ChooseValue) HasFilter() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ChooseValue) SetFilter(v rtx.BoolEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewFilter sets the filter field to a newly
// allocated rtx.BoolEval struct, preferring placement in s's segment.
func (s ChooseValue) NewFilter() (rtx.BoolEval, error) {
	ss, err := rtx.NewBoolEval(s.Struct.Segment())
	if err != nil {
		return rtx.BoolEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s ChooseValue) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(3)
	return rtx.Execute_List{List: p.List()}, err
}

func (s ChooseValue) HasExe() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ChooseValue) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s ChooseValue) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s ChooseValue) Else() (Brancher, error) {
	p, err := s.Struct.Ptr(4)
	return Brancher{Struct: p.Struct()}, err
}

func (s ChooseValue) HasElse() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ChooseValue) SetElse(v Brancher) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewElse sets the else field to a newly
// allocated Brancher struct, preferring placement in s's segment.
func (s ChooseValue) NewElse() (Brancher, error) {
	ss, err := NewBrancher(s.Struct.Segment())
	if err != nil {
		return Brancher{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

// ChooseValue_List is a list of ChooseValue.
type ChooseValue_List struct{ capnp.List }

// NewChooseValue creates a new list of ChooseValue.
func NewChooseValue_List(s *capnp.Segment, sz int32) (ChooseValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return ChooseValue_List{l}, err
}

func (s ChooseValue_List) At(i int) ChooseValue { return ChooseValue{s.List.Struct(i)} }

func (s ChooseValue_List) Set(i int, v ChooseValue) error { return s.List.SetStruct(i, v.Struct) }

func (s ChooseValue_List) String() string {
	str, _ := text.MarshalList(0xa91aa9cd403b1c6a, s.List)
	return str
}

// ChooseValue_Promise is a wrapper for a ChooseValue promised by a client call.
type ChooseValue_Promise struct{ *capnp.Pipeline }

func (p ChooseValue_Promise) Struct() (ChooseValue, error) {
	s, err := p.Pipeline.Struct()
	return ChooseValue{s}, err
}

func (p ChooseValue_Promise) From() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p ChooseValue_Promise) Filter() rtx.BoolEval_Promise {
	return rtx.BoolEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p ChooseValue_Promise) Else() Brancher_Promise {
	return Brancher_Promise{Pipeline: p.Pipeline.GetPipeline(4)}
}

type Commas struct{ capnp.Struct }

// Commas_TypeID is the unique identifier for the type Commas.
const Commas_TypeID = 0xeaca3f1753ed9a9f

func NewCommas(s *capnp.Segment) (Commas, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Commas{st}, err
}

func NewRootCommas(s *capnp.Segment) (Commas, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Commas{st}, err
}

func ReadRootCommas(msg *capnp.Message) (Commas, error) {
	root, err := msg.RootPtr()
	return Commas{root.Struct()}, err
}

func (s Commas) String() string {
	str, _ := text.Marshal(0xeaca3f1753ed9a9f, s.Struct)
	return str
}

func (s Commas) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Commas) HasExe() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commas) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Commas) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Commas_List is a list of Commas.
type Commas_List struct{ capnp.List }

// NewCommas creates a new list of Commas.
func NewCommas_List(s *capnp.Segment, sz int32) (Commas_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Commas_List{l}, err
}

func (s Commas_List) At(i int) Commas { return Commas{s.List.Struct(i)} }

func (s Commas_List) Set(i int, v Commas) error { return s.List.SetStruct(i, v.Struct) }

func (s Commas_List) String() string {
	str, _ := text.MarshalList(0xeaca3f1753ed9a9f, s.List)
	return str
}

// Commas_Promise is a wrapper for a Commas promised by a client call.
type Commas_Promise struct{ *capnp.Pipeline }

func (p Commas_Promise) Struct() (Commas, error) {
	s, err := p.Pipeline.Struct()
	return Commas{s}, err
}

type CompareNum struct{ capnp.Struct }

// CompareNum_TypeID is the unique identifier for the type CompareNum.
const CompareNum_TypeID = 0xc5ff63eaa7558acb

func NewCompareNum(s *capnp.Segment) (CompareNum, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CompareNum{st}, err
}

func NewRootCompareNum(s *capnp.Segment) (CompareNum, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CompareNum{st}, err
}

func ReadRootCompareNum(msg *capnp.Message) (CompareNum, error) {
	root, err := msg.RootPtr()
	return CompareNum{root.Struct()}, err
}

func (s CompareNum) String() string {
	str, _ := text.Marshal(0xc5ff63eaa7558acb, s.Struct)
	return str
}

func (s CompareNum) A() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s CompareNum) HasA() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CompareNum) SetA(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA sets the a field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s CompareNum) NewA() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CompareNum) Is() (Comparator, error) {
	p, err := s.Struct.Ptr(1)
	return Comparator{Struct: p.Struct()}, err
}

func (s CompareNum) HasIs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CompareNum) SetIs(v Comparator) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewIs sets the is field to a newly
// allocated Comparator struct, preferring placement in s's segment.
func (s CompareNum) NewIs() (Comparator, error) {
	ss, err := NewComparator(s.Struct.Segment())
	if err != nil {
		return Comparator{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s CompareNum) B() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s CompareNum) HasB() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s CompareNum) SetB(v rtx.NumberEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewB sets the b field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s CompareNum) NewB() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// CompareNum_List is a list of CompareNum.
type CompareNum_List struct{ capnp.List }

// NewCompareNum creates a new list of CompareNum.
func NewCompareNum_List(s *capnp.Segment, sz int32) (CompareNum_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return CompareNum_List{l}, err
}

func (s CompareNum_List) At(i int) CompareNum { return CompareNum{s.List.Struct(i)} }

func (s CompareNum_List) Set(i int, v CompareNum) error { return s.List.SetStruct(i, v.Struct) }

func (s CompareNum_List) String() string {
	str, _ := text.MarshalList(0xc5ff63eaa7558acb, s.List)
	return str
}

// CompareNum_Promise is a wrapper for a CompareNum promised by a client call.
type CompareNum_Promise struct{ *capnp.Pipeline }

func (p CompareNum_Promise) Struct() (CompareNum, error) {
	s, err := p.Pipeline.Struct()
	return CompareNum{s}, err
}

func (p CompareNum_Promise) A() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CompareNum_Promise) Is() Comparator_Promise {
	return Comparator_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p CompareNum_Promise) B() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type CompareText struct{ capnp.Struct }

// CompareText_TypeID is the unique identifier for the type CompareText.
const CompareText_TypeID = 0xd971dee9f4341a8a

func NewCompareText(s *capnp.Segment) (CompareText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CompareText{st}, err
}

func NewRootCompareText(s *capnp.Segment) (CompareText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CompareText{st}, err
}

func ReadRootCompareText(msg *capnp.Message) (CompareText, error) {
	root, err := msg.RootPtr()
	return CompareText{root.Struct()}, err
}

func (s CompareText) String() string {
	str, _ := text.Marshal(0xd971dee9f4341a8a, s.Struct)
	return str
}

func (s CompareText) A() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s CompareText) HasA() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CompareText) SetA(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA sets the a field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s CompareText) NewA() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CompareText) Is() (Comparator, error) {
	p, err := s.Struct.Ptr(1)
	return Comparator{Struct: p.Struct()}, err
}

func (s CompareText) HasIs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CompareText) SetIs(v Comparator) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewIs sets the is field to a newly
// allocated Comparator struct, preferring placement in s's segment.
func (s CompareText) NewIs() (Comparator, error) {
	ss, err := NewComparator(s.Struct.Segment())
	if err != nil {
		return Comparator{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s CompareText) B() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(2)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s CompareText) HasB() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s CompareText) SetB(v rtx.TextEval) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewB sets the b field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s CompareText) NewB() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// CompareText_List is a list of CompareText.
type CompareText_List struct{ capnp.List }

// NewCompareText creates a new list of CompareText.
func NewCompareText_List(s *capnp.Segment, sz int32) (CompareText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return CompareText_List{l}, err
}

func (s CompareText_List) At(i int) CompareText { return CompareText{s.List.Struct(i)} }

func (s CompareText_List) Set(i int, v CompareText) error { return s.List.SetStruct(i, v.Struct) }

func (s CompareText_List) String() string {
	str, _ := text.MarshalList(0xd971dee9f4341a8a, s.List)
	return str
}

// CompareText_Promise is a wrapper for a CompareText promised by a client call.
type CompareText_Promise struct{ *capnp.Pipeline }

func (p CompareText_Promise) Struct() (CompareText, error) {
	s, err := p.Pipeline.Struct()
	return CompareText{s}, err
}

func (p CompareText_Promise) A() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CompareText_Promise) Is() Comparator_Promise {
	return Comparator_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p CompareText_Promise) B() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type CountOf struct{ capnp.Struct }

// CountOf_TypeID is the unique identifier for the type CountOf.
const CountOf_TypeID = 0xcaa51cd969201b46

func NewCountOf(s *capnp.Segment) (CountOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CountOf{st}, err
}

func NewRootCountOf(s *capnp.Segment) (CountOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CountOf{st}, err
}

func ReadRootCountOf(msg *capnp.Message) (CountOf, error) {
	root, err := msg.RootPtr()
	return CountOf{root.Struct()}, err
}

func (s CountOf) String() string {
	str, _ := text.Marshal(0xcaa51cd969201b46, s.Struct)
	return str
}

func (s CountOf) At() (reader.Pos, error) {
	p, err := s.Struct.Ptr(0)
	return reader.Pos{Struct: p.Struct()}, err
}

func (s CountOf) HasAt() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CountOf) SetAt(v reader.Pos) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAt sets the at field to a newly
// allocated reader.Pos struct, preferring placement in s's segment.
func (s CountOf) NewAt() (reader.Pos, error) {
	ss, err := reader.NewPos(s.Struct.Segment())
	if err != nil {
		return reader.Pos{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CountOf) Num() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s CountOf) HasNum() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CountOf) SetNum(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewNum sets the num field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s CountOf) NewNum() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s CountOf) Trigger() (Trigger, error) {
	p, err := s.Struct.Ptr(2)
	return Trigger{Struct: p.Struct()}, err
}

func (s CountOf) HasTrigger() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s CountOf) SetTrigger(v Trigger) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTrigger sets the trigger field to a newly
// allocated Trigger struct, preferring placement in s's segment.
func (s CountOf) NewTrigger() (Trigger, error) {
	ss, err := NewTrigger(s.Struct.Segment())
	if err != nil {
		return Trigger{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// CountOf_List is a list of CountOf.
type CountOf_List struct{ capnp.List }

// NewCountOf creates a new list of CountOf.
func NewCountOf_List(s *capnp.Segment, sz int32) (CountOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return CountOf_List{l}, err
}

func (s CountOf_List) At(i int) CountOf { return CountOf{s.List.Struct(i)} }

func (s CountOf_List) Set(i int, v CountOf) error { return s.List.SetStruct(i, v.Struct) }

func (s CountOf_List) String() string {
	str, _ := text.MarshalList(0xcaa51cd969201b46, s.List)
	return str
}

// CountOf_Promise is a wrapper for a CountOf promised by a client call.
type CountOf_Promise struct{ *capnp.Pipeline }

func (p CountOf_Promise) Struct() (CountOf, error) {
	s, err := p.Pipeline.Struct()
	return CountOf{s}, err
}

func (p CountOf_Promise) At() reader.Pos_Promise {
	return reader.Pos_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CountOf_Promise) Num() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p CountOf_Promise) Trigger() Trigger_Promise {
	return Trigger_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type CycleText struct{ capnp.Struct }

// CycleText_TypeID is the unique identifier for the type CycleText.
const CycleText_TypeID = 0xa05de55f091d7c1e

func NewCycleText(s *capnp.Segment) (CycleText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CycleText{st}, err
}

func NewRootCycleText(s *capnp.Segment) (CycleText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CycleText{st}, err
}

func ReadRootCycleText(msg *capnp.Message) (CycleText, error) {
	root, err := msg.RootPtr()
	return CycleText{root.Struct()}, err
}

func (s CycleText) String() string {
	str, _ := text.Marshal(0xa05de55f091d7c1e, s.Struct)
	return str
}

func (s CycleText) Seq() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s CycleText) HasSeq() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CycleText) SeqBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s CycleText) SetSeq(v string) error {
	return s.Struct.SetText(0, v)
}

func (s CycleText) Parts() (rtx.TextEval_List, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval_List{List: p.List()}, err
}

func (s CycleText) HasParts() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CycleText) SetParts(v rtx.TextEval_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewParts sets the parts field to a newly
// allocated rtx.TextEval_List, preferring placement in s's segment.
func (s CycleText) NewParts(n int32) (rtx.TextEval_List, error) {
	l, err := rtx.NewTextEval_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.TextEval_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// CycleText_List is a list of CycleText.
type CycleText_List struct{ capnp.List }

// NewCycleText creates a new list of CycleText.
func NewCycleText_List(s *capnp.Segment, sz int32) (CycleText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return CycleText_List{l}, err
}

func (s CycleText_List) At(i int) CycleText { return CycleText{s.List.Struct(i)} }

func (s CycleText_List) Set(i int, v CycleText) error { return s.List.SetStruct(i, v.Struct) }

func (s CycleText_List) String() string {
	str, _ := text.MarshalList(0xa05de55f091d7c1e, s.List)
	return str
}

// CycleText_Promise is a wrapper for a CycleText promised by a client call.
type CycleText_Promise struct{ *capnp.Pipeline }

func (p CycleText_Promise) Struct() (CycleText, error) {
	s, err := p.Pipeline.Struct()
	return CycleText{s}, err
}

type Determine struct{ capnp.Struct }

// Determine_TypeID is the unique identifier for the type Determine.
const Determine_TypeID = 0xe810e2aaa0634755

func NewDetermine(s *capnp.Segment) (Determine, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Determine{st}, err
}

func NewRootDetermine(s *capnp.Segment) (Determine, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Determine{st}, err
}

func ReadRootDetermine(msg *capnp.Message) (Determine, error) {
	root, err := msg.RootPtr()
	return Determine{root.Struct()}, err
}

func (s Determine) String() string {
	str, _ := text.Marshal(0xe810e2aaa0634755, s.Struct)
	return str
}

func (s Determine) Pattern() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Determine) HasPattern() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Determine) PatternBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Determine) SetPattern(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Determine) Args() (Argument_List, error) {
	p, err := s.Struct.Ptr(1)
	return Argument_List{List: p.List()}, err
}

func (s Determine) HasArgs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Determine) SetArgs(v Argument_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated Argument_List, preferring placement in s's segment.
func (s Determine) NewArgs(n int32) (Argument_List, error) {
	l, err := NewArgument_List(s.Struct.Segment(), n)
	if err != nil {
		return Argument_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Determine_List is a list of Determine.
type Determine_List struct{ capnp.List }

// NewDetermine creates a new list of Determine.
func NewDetermine_List(s *capnp.Segment, sz int32) (Determine_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Determine_List{l}, err
}

func (s Determine_List) At(i int) Determine { return Determine{s.List.Struct(i)} }

func (s Determine_List) Set(i int, v Determine) error { return s.List.SetStruct(i, v.Struct) }

func (s Determine_List) String() string {
	str, _ := text.MarshalList(0xe810e2aaa0634755, s.List)
	return str
}

// Determine_Promise is a wrapper for a Determine promised by a client call.
type Determine_Promise struct{ *capnp.Pipeline }

func (p Determine_Promise) Struct() (Determine, error) {
	s, err := p.Pipeline.Struct()
	return Determine{s}, err
}

type DiffOf struct{ capnp.Struct }

// DiffOf_TypeID is the unique identifier for the type DiffOf.
const DiffOf_TypeID = 0xe4d36d4a59fb4d07

func NewDiffOf(s *capnp.Segment) (DiffOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffOf{st}, err
}

func NewRootDiffOf(s *capnp.Segment) (DiffOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiffOf{st}, err
}

func ReadRootDiffOf(msg *capnp.Message) (DiffOf, error) {
	root, err := msg.RootPtr()
	return DiffOf{root.Struct()}, err
}

func (s DiffOf) String() string {
	str, _ := text.Marshal(0xe4d36d4a59fb4d07, s.Struct)
	return str
}

func (s DiffOf) A() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s DiffOf) HasA() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DiffOf) SetA(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA sets the a field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s DiffOf) NewA() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s DiffOf) B() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s DiffOf) HasB() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DiffOf) SetB(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewB sets the b field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s DiffOf) NewB() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// DiffOf_List is a list of DiffOf.
type DiffOf_List struct{ capnp.List }

// NewDiffOf creates a new list of DiffOf.
func NewDiffOf_List(s *capnp.Segment, sz int32) (DiffOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DiffOf_List{l}, err
}

func (s DiffOf_List) At(i int) DiffOf { return DiffOf{s.List.Struct(i)} }

func (s DiffOf_List) Set(i int, v DiffOf) error { return s.List.SetStruct(i, v.Struct) }

func (s DiffOf_List) String() string {
	str, _ := text.MarshalList(0xe4d36d4a59fb4d07, s.List)
	return str
}

// DiffOf_Promise is a wrapper for a DiffOf promised by a client call.
type DiffOf_Promise struct{ *capnp.Pipeline }

func (p DiffOf_Promise) Struct() (DiffOf, error) {
	s, err := p.Pipeline.Struct()
	return DiffOf{s}, err
}

func (p DiffOf_Promise) A() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p DiffOf_Promise) B() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type During struct{ capnp.Struct }

// During_TypeID is the unique identifier for the type During.
const During_TypeID = 0xc61d82bed18ad104

func NewDuring(s *capnp.Segment) (During, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return During{st}, err
}

func NewRootDuring(s *capnp.Segment) (During, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return During{st}, err
}

func ReadRootDuring(msg *capnp.Message) (During, error) {
	root, err := msg.RootPtr()
	return During{root.Struct()}, err
}

func (s During) String() string {
	str, _ := text.Marshal(0xc61d82bed18ad104, s.Struct)
	return str
}

func (s During) Pattern() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s During) HasPattern() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s During) PatternBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s During) SetPattern(v string) error {
	return s.Struct.SetText(0, v)
}

// During_List is a list of During.
type During_List struct{ capnp.List }

// NewDuring creates a new list of During.
func NewDuring_List(s *capnp.Segment, sz int32) (During_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return During_List{l}, err
}

func (s During_List) At(i int) During { return During{s.List.Struct(i)} }

func (s During_List) Set(i int, v During) error { return s.List.SetStruct(i, v.Struct) }

func (s During_List) String() string {
	str, _ := text.MarshalList(0xc61d82bed18ad104, s.List)
	return str
}

// During_Promise is a wrapper for a During promised by a client call.
type During_Promise struct{ *capnp.Pipeline }

func (p During_Promise) Struct() (During, error) {
	s, err := p.Pipeline.Struct()
	return During{s}, err
}

type EqualTo struct{ capnp.Struct }

// EqualTo_TypeID is the unique identifier for the type EqualTo.
const EqualTo_TypeID = 0xb6c0d83393ea59c4

func NewEqualTo(s *capnp.Segment) (EqualTo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EqualTo{st}, err
}

func NewRootEqualTo(s *capnp.Segment) (EqualTo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EqualTo{st}, err
}

func ReadRootEqualTo(msg *capnp.Message) (EqualTo, error) {
	root, err := msg.RootPtr()
	return EqualTo{root.Struct()}, err
}

func (s EqualTo) String() string {
	str, _ := text.Marshal(0xb6c0d83393ea59c4, s.Struct)
	return str
}

// EqualTo_List is a list of EqualTo.
type EqualTo_List struct{ capnp.List }

// NewEqualTo creates a new list of EqualTo.
func NewEqualTo_List(s *capnp.Segment, sz int32) (EqualTo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return EqualTo_List{l}, err
}

func (s EqualTo_List) At(i int) EqualTo { return EqualTo{s.List.Struct(i)} }

func (s EqualTo_List) Set(i int, v EqualTo) error { return s.List.SetStruct(i, v.Struct) }

func (s EqualTo_List) String() string {
	str, _ := text.MarshalList(0xb6c0d83393ea59c4, s.List)
	return str
}

// EqualTo_Promise is a wrapper for a EqualTo promised by a client call.
type EqualTo_Promise struct{ *capnp.Pipeline }

func (p EqualTo_Promise) Struct() (EqualTo, error) {
	s, err := p.Pipeline.Struct()
	return EqualTo{s}, err
}

type FromBool struct{ capnp.Struct }

// FromBool_TypeID is the unique identifier for the type FromBool.
const FromBool_TypeID = 0x97f4e7be35afaa61

func NewFromBool(s *capnp.Segment) (FromBool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromBool{st}, err
}

func NewRootFromBool(s *capnp.Segment) (FromBool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromBool{st}, err
}

func ReadRootFromBool(msg *capnp.Message) (FromBool, error) {
	root, err := msg.RootPtr()
	return FromBool{root.Struct()}, err
}

func (s FromBool) String() string {
	str, _ := text.Marshal(0x97f4e7be35afaa61, s.Struct)
	return str
}

func (s FromBool) Val() (rtx.BoolEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.BoolEval{Struct: p.Struct()}, err
}

func (s FromBool) HasVal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromBool) SetVal(v rtx.BoolEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVal sets the val field to a newly
// allocated rtx.BoolEval struct, preferring placement in s's segment.
func (s FromBool) NewVal() (rtx.BoolEval, error) {
	ss, err := rtx.NewBoolEval(s.Struct.Segment())
	if err != nil {
		return rtx.BoolEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FromBool_List is a list of FromBool.
type FromBool_List struct{ capnp.List }

// NewFromBool creates a new list of FromBool.
func NewFromBool_List(s *capnp.Segment, sz int32) (FromBool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromBool_List{l}, err
}

func (s FromBool_List) At(i int) FromBool { return FromBool{s.List.Struct(i)} }

func (s FromBool_List) Set(i int, v FromBool) error { return s.List.SetStruct(i, v.Struct) }

func (s FromBool_List) String() string {
	str, _ := text.MarshalList(0x97f4e7be35afaa61, s.List)
	return str
}

// FromBool_Promise is a wrapper for a FromBool promised by a client call.
type FromBool_Promise struct{ *capnp.Pipeline }

func (p FromBool_Promise) Struct() (FromBool, error) {
	s, err := p.Pipeline.Struct()
	return FromBool{s}, err
}

func (p FromBool_Promise) Val() rtx.BoolEval_Promise {
	return rtx.BoolEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FromNum struct{ capnp.Struct }

// FromNum_TypeID is the unique identifier for the type FromNum.
const FromNum_TypeID = 0x9a05a39cbd16b6ff

func NewFromNum(s *capnp.Segment) (FromNum, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromNum{st}, err
}

func NewRootFromNum(s *capnp.Segment) (FromNum, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromNum{st}, err
}

func ReadRootFromNum(msg *capnp.Message) (FromNum, error) {
	root, err := msg.RootPtr()
	return FromNum{root.Struct()}, err
}

func (s FromNum) String() string {
	str, _ := text.Marshal(0x9a05a39cbd16b6ff, s.Struct)
	return str
}

func (s FromNum) Val() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s FromNum) HasVal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromNum) SetVal(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVal sets the val field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s FromNum) NewVal() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FromNum_List is a list of FromNum.
type FromNum_List struct{ capnp.List }

// NewFromNum creates a new list of FromNum.
func NewFromNum_List(s *capnp.Segment, sz int32) (FromNum_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromNum_List{l}, err
}

func (s FromNum_List) At(i int) FromNum { return FromNum{s.List.Struct(i)} }

func (s FromNum_List) Set(i int, v FromNum) error { return s.List.SetStruct(i, v.Struct) }

func (s FromNum_List) String() string {
	str, _ := text.MarshalList(0x9a05a39cbd16b6ff, s.List)
	return str
}

// FromNum_Promise is a wrapper for a FromNum promised by a client call.
type FromNum_Promise struct{ *capnp.Pipeline }

func (p FromNum_Promise) Struct() (FromNum, error) {
	s, err := p.Pipeline.Struct()
	return FromNum{s}, err
}

func (p FromNum_Promise) Val() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FromNumbers struct{ capnp.Struct }

// FromNumbers_TypeID is the unique identifier for the type FromNumbers.
const FromNumbers_TypeID = 0x919616a0da15bb90

func NewFromNumbers(s *capnp.Segment) (FromNumbers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromNumbers{st}, err
}

func NewRootFromNumbers(s *capnp.Segment) (FromNumbers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromNumbers{st}, err
}

func ReadRootFromNumbers(msg *capnp.Message) (FromNumbers, error) {
	root, err := msg.RootPtr()
	return FromNumbers{root.Struct()}, err
}

func (s FromNumbers) String() string {
	str, _ := text.Marshal(0x919616a0da15bb90, s.Struct)
	return str
}

func (s FromNumbers) Vals() (rtx.NumListEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumListEval{Struct: p.Struct()}, err
}

func (s FromNumbers) HasVals() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromNumbers) SetVals(v rtx.NumListEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVals sets the vals field to a newly
// allocated rtx.NumListEval struct, preferring placement in s's segment.
func (s FromNumbers) NewVals() (rtx.NumListEval, error) {
	ss, err := rtx.NewNumListEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumListEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FromNumbers_List is a list of FromNumbers.
type FromNumbers_List struct{ capnp.List }

// NewFromNumbers creates a new list of FromNumbers.
func NewFromNumbers_List(s *capnp.Segment, sz int32) (FromNumbers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromNumbers_List{l}, err
}

func (s FromNumbers_List) At(i int) FromNumbers { return FromNumbers{s.List.Struct(i)} }

func (s FromNumbers_List) Set(i int, v FromNumbers) error { return s.List.SetStruct(i, v.Struct) }

func (s FromNumbers_List) String() string {
	str, _ := text.MarshalList(0x919616a0da15bb90, s.List)
	return str
}

// FromNumbers_Promise is a wrapper for a FromNumbers promised by a client call.
type FromNumbers_Promise struct{ *capnp.Pipeline }

func (p FromNumbers_Promise) Struct() (FromNumbers, error) {
	s, err := p.Pipeline.Struct()
	return FromNumbers{s}, err
}

func (p FromNumbers_Promise) Vals() rtx.NumListEval_Promise {
	return rtx.NumListEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FromObj struct{ capnp.Struct }

// FromObj_TypeID is the unique identifier for the type FromObj.
const FromObj_TypeID = 0xc1d1af819c6d1185

func NewFromObj(s *capnp.Segment) (FromObj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromObj{st}, err
}

func NewRootFromObj(s *capnp.Segment) (FromObj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromObj{st}, err
}

func ReadRootFromObj(msg *capnp.Message) (FromObj, error) {
	root, err := msg.RootPtr()
	return FromObj{root.Struct()}, err
}

func (s FromObj) String() string {
	str, _ := text.Marshal(0xc1d1af819c6d1185, s.Struct)
	return str
}

func (s FromObj) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s FromObj) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromObj) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s FromObj) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FromObj_List is a list of FromObj.
type FromObj_List struct{ capnp.List }

// NewFromObj creates a new list of FromObj.
func NewFromObj_List(s *capnp.Segment, sz int32) (FromObj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromObj_List{l}, err
}

func (s FromObj_List) At(i int) FromObj { return FromObj{s.List.Struct(i)} }

func (s FromObj_List) Set(i int, v FromObj) error { return s.List.SetStruct(i, v.Struct) }

func (s FromObj_List) String() string {
	str, _ := text.MarshalList(0xc1d1af819c6d1185, s.List)
	return str
}

// FromObj_Promise is a wrapper for a FromObj promised by a client call.
type FromObj_Promise struct{ *capnp.Pipeline }

func (p FromObj_Promise) Struct() (FromObj, error) {
	s, err := p.Pipeline.Struct()
	return FromObj{s}, err
}

func (p FromObj_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FromRec struct{ capnp.Struct }

// FromRec_TypeID is the unique identifier for the type FromRec.
const FromRec_TypeID = 0xab943e8ad822e7e3

func NewFromRec(s *capnp.Segment) (FromRec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromRec{st}, err
}

func NewRootFromRec(s *capnp.Segment) (FromRec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromRec{st}, err
}

func ReadRootFromRec(msg *capnp.Message) (FromRec, error) {
	root, err := msg.RootPtr()
	return FromRec{root.Struct()}, err
}

func (s FromRec) String() string {
	str, _ := text.Marshal(0xab943e8ad822e7e3, s.Struct)
	return str
}

func (s FromRec) Rec() (rtx.RecordEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.RecordEval{Struct: p.Struct()}, err
}

func (s FromRec) HasRec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromRec) SetRec(v rtx.RecordEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRec sets the rec field to a newly
// allocated rtx.RecordEval struct, preferring placement in s's segment.
func (s FromRec) NewRec() (rtx.RecordEval, error) {
	ss, err := rtx.NewRecordEval(s.Struct.Segment())
	if err != nil {
		return rtx.RecordEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FromRec_List is a list of FromRec.
type FromRec_List struct{ capnp.List }

// NewFromRec creates a new list of FromRec.
func NewFromRec_List(s *capnp.Segment, sz int32) (FromRec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromRec_List{l}, err
}

func (s FromRec_List) At(i int) FromRec { return FromRec{s.List.Struct(i)} }

func (s FromRec_List) Set(i int, v FromRec) error { return s.List.SetStruct(i, v.Struct) }

func (s FromRec_List) String() string {
	str, _ := text.MarshalList(0xab943e8ad822e7e3, s.List)
	return str
}

// FromRec_Promise is a wrapper for a FromRec promised by a client call.
type FromRec_Promise struct{ *capnp.Pipeline }

func (p FromRec_Promise) Struct() (FromRec, error) {
	s, err := p.Pipeline.Struct()
	return FromRec{s}, err
}

func (p FromRec_Promise) Rec() rtx.RecordEval_Promise {
	return rtx.RecordEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FromRecord struct{ capnp.Struct }

// FromRecord_TypeID is the unique identifier for the type FromRecord.
const FromRecord_TypeID = 0xd2d78f74338be800

func NewFromRecord(s *capnp.Segment) (FromRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromRecord{st}, err
}

func NewRootFromRecord(s *capnp.Segment) (FromRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromRecord{st}, err
}

func ReadRootFromRecord(msg *capnp.Message) (FromRecord, error) {
	root, err := msg.RootPtr()
	return FromRecord{root.Struct()}, err
}

func (s FromRecord) String() string {
	str, _ := text.Marshal(0xd2d78f74338be800, s.Struct)
	return str
}

func (s FromRecord) Val() (rtx.RecordEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.RecordEval{Struct: p.Struct()}, err
}

func (s FromRecord) HasVal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromRecord) SetVal(v rtx.RecordEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVal sets the val field to a newly
// allocated rtx.RecordEval struct, preferring placement in s's segment.
func (s FromRecord) NewVal() (rtx.RecordEval, error) {
	ss, err := rtx.NewRecordEval(s.Struct.Segment())
	if err != nil {
		return rtx.RecordEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FromRecord_List is a list of FromRecord.
type FromRecord_List struct{ capnp.List }

// NewFromRecord creates a new list of FromRecord.
func NewFromRecord_List(s *capnp.Segment, sz int32) (FromRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromRecord_List{l}, err
}

func (s FromRecord_List) At(i int) FromRecord { return FromRecord{s.List.Struct(i)} }

func (s FromRecord_List) Set(i int, v FromRecord) error { return s.List.SetStruct(i, v.Struct) }

func (s FromRecord_List) String() string {
	str, _ := text.MarshalList(0xd2d78f74338be800, s.List)
	return str
}

// FromRecord_Promise is a wrapper for a FromRecord promised by a client call.
type FromRecord_Promise struct{ *capnp.Pipeline }

func (p FromRecord_Promise) Struct() (FromRecord, error) {
	s, err := p.Pipeline.Struct()
	return FromRecord{s}, err
}

func (p FromRecord_Promise) Val() rtx.RecordEval_Promise {
	return rtx.RecordEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FromRecords struct{ capnp.Struct }

// FromRecords_TypeID is the unique identifier for the type FromRecords.
const FromRecords_TypeID = 0x8adadbe6e8774d21

func NewFromRecords(s *capnp.Segment) (FromRecords, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromRecords{st}, err
}

func NewRootFromRecords(s *capnp.Segment) (FromRecords, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromRecords{st}, err
}

func ReadRootFromRecords(msg *capnp.Message) (FromRecords, error) {
	root, err := msg.RootPtr()
	return FromRecords{root.Struct()}, err
}

func (s FromRecords) String() string {
	str, _ := text.Marshal(0x8adadbe6e8774d21, s.Struct)
	return str
}

func (s FromRecords) Vals() (rtx.RecordListEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.RecordListEval{Struct: p.Struct()}, err
}

func (s FromRecords) HasVals() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromRecords) SetVals(v rtx.RecordListEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVals sets the vals field to a newly
// allocated rtx.RecordListEval struct, preferring placement in s's segment.
func (s FromRecords) NewVals() (rtx.RecordListEval, error) {
	ss, err := rtx.NewRecordListEval(s.Struct.Segment())
	if err != nil {
		return rtx.RecordListEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FromRecords_List is a list of FromRecords.
type FromRecords_List struct{ capnp.List }

// NewFromRecords creates a new list of FromRecords.
func NewFromRecords_List(s *capnp.Segment, sz int32) (FromRecords_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromRecords_List{l}, err
}

func (s FromRecords_List) At(i int) FromRecords { return FromRecords{s.List.Struct(i)} }

func (s FromRecords_List) Set(i int, v FromRecords) error { return s.List.SetStruct(i, v.Struct) }

func (s FromRecords_List) String() string {
	str, _ := text.MarshalList(0x8adadbe6e8774d21, s.List)
	return str
}

// FromRecords_Promise is a wrapper for a FromRecords promised by a client call.
type FromRecords_Promise struct{ *capnp.Pipeline }

func (p FromRecords_Promise) Struct() (FromRecords, error) {
	s, err := p.Pipeline.Struct()
	return FromRecords{s}, err
}

func (p FromRecords_Promise) Vals() rtx.RecordListEval_Promise {
	return rtx.RecordListEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FromText struct{ capnp.Struct }

// FromText_TypeID is the unique identifier for the type FromText.
const FromText_TypeID = 0xc8e8008a265a5b3d

func NewFromText(s *capnp.Segment) (FromText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromText{st}, err
}

func NewRootFromText(s *capnp.Segment) (FromText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromText{st}, err
}

func ReadRootFromText(msg *capnp.Message) (FromText, error) {
	root, err := msg.RootPtr()
	return FromText{root.Struct()}, err
}

func (s FromText) String() string {
	str, _ := text.Marshal(0xc8e8008a265a5b3d, s.Struct)
	return str
}

func (s FromText) Val() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s FromText) HasVal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromText) SetVal(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVal sets the val field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s FromText) NewVal() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FromText_List is a list of FromText.
type FromText_List struct{ capnp.List }

// NewFromText creates a new list of FromText.
func NewFromText_List(s *capnp.Segment, sz int32) (FromText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromText_List{l}, err
}

func (s FromText_List) At(i int) FromText { return FromText{s.List.Struct(i)} }

func (s FromText_List) Set(i int, v FromText) error { return s.List.SetStruct(i, v.Struct) }

func (s FromText_List) String() string {
	str, _ := text.MarshalList(0xc8e8008a265a5b3d, s.List)
	return str
}

// FromText_Promise is a wrapper for a FromText promised by a client call.
type FromText_Promise struct{ *capnp.Pipeline }

func (p FromText_Promise) Struct() (FromText, error) {
	s, err := p.Pipeline.Struct()
	return FromText{s}, err
}

func (p FromText_Promise) Val() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FromTexts struct{ capnp.Struct }

// FromTexts_TypeID is the unique identifier for the type FromTexts.
const FromTexts_TypeID = 0x80a653c37ba7cb11

func NewFromTexts(s *capnp.Segment) (FromTexts, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromTexts{st}, err
}

func NewRootFromTexts(s *capnp.Segment) (FromTexts, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromTexts{st}, err
}

func ReadRootFromTexts(msg *capnp.Message) (FromTexts, error) {
	root, err := msg.RootPtr()
	return FromTexts{root.Struct()}, err
}

func (s FromTexts) String() string {
	str, _ := text.Marshal(0x80a653c37ba7cb11, s.Struct)
	return str
}

func (s FromTexts) Vals() (rtx.TextListEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextListEval{Struct: p.Struct()}, err
}

func (s FromTexts) HasVals() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromTexts) SetVals(v rtx.TextListEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVals sets the vals field to a newly
// allocated rtx.TextListEval struct, preferring placement in s's segment.
func (s FromTexts) NewVals() (rtx.TextListEval, error) {
	ss, err := rtx.NewTextListEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextListEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FromTexts_List is a list of FromTexts.
type FromTexts_List struct{ capnp.List }

// NewFromTexts creates a new list of FromTexts.
func NewFromTexts_List(s *capnp.Segment, sz int32) (FromTexts_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromTexts_List{l}, err
}

func (s FromTexts_List) At(i int) FromTexts { return FromTexts{s.List.Struct(i)} }

func (s FromTexts_List) Set(i int, v FromTexts) error { return s.List.SetStruct(i, v.Struct) }

func (s FromTexts_List) String() string {
	str, _ := text.MarshalList(0x80a653c37ba7cb11, s.List)
	return str
}

// FromTexts_Promise is a wrapper for a FromTexts promised by a client call.
type FromTexts_Promise struct{ *capnp.Pipeline }

func (p FromTexts_Promise) Struct() (FromTexts, error) {
	s, err := p.Pipeline.Struct()
	return FromTexts{s}, err
}

func (p FromTexts_Promise) Vals() rtx.TextListEval_Promise {
	return rtx.TextListEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type FromVar struct{ capnp.Struct }

// FromVar_TypeID is the unique identifier for the type FromVar.
const FromVar_TypeID = 0xfdf2b13420db51f5

func NewFromVar(s *capnp.Segment) (FromVar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromVar{st}, err
}

func NewRootFromVar(s *capnp.Segment) (FromVar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FromVar{st}, err
}

func ReadRootFromVar(msg *capnp.Message) (FromVar, error) {
	root, err := msg.RootPtr()
	return FromVar{root.Struct()}, err
}

func (s FromVar) String() string {
	str, _ := text.Marshal(0xfdf2b13420db51f5, s.Struct)
	return str
}

func (s FromVar) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FromVar) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FromVar) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FromVar) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// FromVar_List is a list of FromVar.
type FromVar_List struct{ capnp.List }

// NewFromVar creates a new list of FromVar.
func NewFromVar_List(s *capnp.Segment, sz int32) (FromVar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FromVar_List{l}, err
}

func (s FromVar_List) At(i int) FromVar { return FromVar{s.List.Struct(i)} }

func (s FromVar_List) Set(i int, v FromVar) error { return s.List.SetStruct(i, v.Struct) }

func (s FromVar_List) String() string {
	str, _ := text.MarshalList(0xfdf2b13420db51f5, s.List)
	return str
}

// FromVar_Promise is a wrapper for a FromVar promised by a client call.
type FromVar_Promise struct{ *capnp.Pipeline }

func (p FromVar_Promise) Struct() (FromVar, error) {
	s, err := p.Pipeline.Struct()
	return FromVar{s}, err
}

type GetAtField struct{ capnp.Struct }

// GetAtField_TypeID is the unique identifier for the type GetAtField.
const GetAtField_TypeID = 0xea2159c2c44d3b40

func NewGetAtField(s *capnp.Segment) (GetAtField, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetAtField{st}, err
}

func NewRootGetAtField(s *capnp.Segment) (GetAtField, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetAtField{st}, err
}

func ReadRootGetAtField(msg *capnp.Message) (GetAtField, error) {
	root, err := msg.RootPtr()
	return GetAtField{root.Struct()}, err
}

func (s GetAtField) String() string {
	str, _ := text.Marshal(0xea2159c2c44d3b40, s.Struct)
	return str
}

func (s GetAtField) Field() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetAtField) HasField() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GetAtField) FieldBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetAtField) SetField(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GetAtField) From() (FromSourceFields, error) {
	p, err := s.Struct.Ptr(1)
	return FromSourceFields{Struct: p.Struct()}, err
}

func (s GetAtField) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GetAtField) SetFrom(v FromSourceFields) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated FromSourceFields struct, preferring placement in s's segment.
func (s GetAtField) NewFrom() (FromSourceFields, error) {
	ss, err := NewFromSourceFields(s.Struct.Segment())
	if err != nil {
		return FromSourceFields{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// GetAtField_List is a list of GetAtField.
type GetAtField_List struct{ capnp.List }

// NewGetAtField creates a new list of GetAtField.
func NewGetAtField_List(s *capnp.Segment, sz int32) (GetAtField_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return GetAtField_List{l}, err
}

func (s GetAtField_List) At(i int) GetAtField { return GetAtField{s.List.Struct(i)} }

func (s GetAtField_List) Set(i int, v GetAtField) error { return s.List.SetStruct(i, v.Struct) }

func (s GetAtField_List) String() string {
	str, _ := text.MarshalList(0xea2159c2c44d3b40, s.List)
	return str
}

// GetAtField_Promise is a wrapper for a GetAtField promised by a client call.
type GetAtField_Promise struct{ *capnp.Pipeline }

func (p GetAtField_Promise) Struct() (GetAtField, error) {
	s, err := p.Pipeline.Struct()
	return GetAtField{s}, err
}

func (p GetAtField_Promise) From() FromSourceFields_Promise {
	return FromSourceFields_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type GreaterOrEqual struct{ capnp.Struct }

// GreaterOrEqual_TypeID is the unique identifier for the type GreaterOrEqual.
const GreaterOrEqual_TypeID = 0xa32558b2ae4c572f

func NewGreaterOrEqual(s *capnp.Segment) (GreaterOrEqual, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GreaterOrEqual{st}, err
}

func NewRootGreaterOrEqual(s *capnp.Segment) (GreaterOrEqual, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GreaterOrEqual{st}, err
}

func ReadRootGreaterOrEqual(msg *capnp.Message) (GreaterOrEqual, error) {
	root, err := msg.RootPtr()
	return GreaterOrEqual{root.Struct()}, err
}

func (s GreaterOrEqual) String() string {
	str, _ := text.Marshal(0xa32558b2ae4c572f, s.Struct)
	return str
}

// GreaterOrEqual_List is a list of GreaterOrEqual.
type GreaterOrEqual_List struct{ capnp.List }

// NewGreaterOrEqual creates a new list of GreaterOrEqual.
func NewGreaterOrEqual_List(s *capnp.Segment, sz int32) (GreaterOrEqual_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return GreaterOrEqual_List{l}, err
}

func (s GreaterOrEqual_List) At(i int) GreaterOrEqual { return GreaterOrEqual{s.List.Struct(i)} }

func (s GreaterOrEqual_List) Set(i int, v GreaterOrEqual) error { return s.List.SetStruct(i, v.Struct) }

func (s GreaterOrEqual_List) String() string {
	str, _ := text.MarshalList(0xa32558b2ae4c572f, s.List)
	return str
}

// GreaterOrEqual_Promise is a wrapper for a GreaterOrEqual promised by a client call.
type GreaterOrEqual_Promise struct{ *capnp.Pipeline }

func (p GreaterOrEqual_Promise) Struct() (GreaterOrEqual, error) {
	s, err := p.Pipeline.Struct()
	return GreaterOrEqual{s}, err
}

type GreaterThan struct{ capnp.Struct }

// GreaterThan_TypeID is the unique identifier for the type GreaterThan.
const GreaterThan_TypeID = 0xea77e5cbde28d045

func NewGreaterThan(s *capnp.Segment) (GreaterThan, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GreaterThan{st}, err
}

func NewRootGreaterThan(s *capnp.Segment) (GreaterThan, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GreaterThan{st}, err
}

func ReadRootGreaterThan(msg *capnp.Message) (GreaterThan, error) {
	root, err := msg.RootPtr()
	return GreaterThan{root.Struct()}, err
}

func (s GreaterThan) String() string {
	str, _ := text.Marshal(0xea77e5cbde28d045, s.Struct)
	return str
}

// GreaterThan_List is a list of GreaterThan.
type GreaterThan_List struct{ capnp.List }

// NewGreaterThan creates a new list of GreaterThan.
func NewGreaterThan_List(s *capnp.Segment, sz int32) (GreaterThan_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return GreaterThan_List{l}, err
}

func (s GreaterThan_List) At(i int) GreaterThan { return GreaterThan{s.List.Struct(i)} }

func (s GreaterThan_List) Set(i int, v GreaterThan) error { return s.List.SetStruct(i, v.Struct) }

func (s GreaterThan_List) String() string {
	str, _ := text.MarshalList(0xea77e5cbde28d045, s.List)
	return str
}

// GreaterThan_Promise is a wrapper for a GreaterThan promised by a client call.
type GreaterThan_Promise struct{ *capnp.Pipeline }

func (p GreaterThan_Promise) Struct() (GreaterThan, error) {
	s, err := p.Pipeline.Struct()
	return GreaterThan{s}, err
}

type HasDominion struct{ capnp.Struct }

// HasDominion_TypeID is the unique identifier for the type HasDominion.
const HasDominion_TypeID = 0xc4fa37edca098790

func NewHasDominion(s *capnp.Segment) (HasDominion, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HasDominion{st}, err
}

func NewRootHasDominion(s *capnp.Segment) (HasDominion, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HasDominion{st}, err
}

func ReadRootHasDominion(msg *capnp.Message) (HasDominion, error) {
	root, err := msg.RootPtr()
	return HasDominion{root.Struct()}, err
}

func (s HasDominion) String() string {
	str, _ := text.Marshal(0xc4fa37edca098790, s.Struct)
	return str
}

func (s HasDominion) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HasDominion) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HasDominion) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HasDominion) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// HasDominion_List is a list of HasDominion.
type HasDominion_List struct{ capnp.List }

// NewHasDominion creates a new list of HasDominion.
func NewHasDominion_List(s *capnp.Segment, sz int32) (HasDominion_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HasDominion_List{l}, err
}

func (s HasDominion_List) At(i int) HasDominion { return HasDominion{s.List.Struct(i)} }

func (s HasDominion_List) Set(i int, v HasDominion) error { return s.List.SetStruct(i, v.Struct) }

func (s HasDominion_List) String() string {
	str, _ := text.MarshalList(0xc4fa37edca098790, s.List)
	return str
}

// HasDominion_Promise is a wrapper for a HasDominion promised by a client call.
type HasDominion_Promise struct{ *capnp.Pipeline }

func (p HasDominion_Promise) Struct() (HasDominion, error) {
	s, err := p.Pipeline.Struct()
	return HasDominion{s}, err
}

type HasTrait struct{ capnp.Struct }

// HasTrait_TypeID is the unique identifier for the type HasTrait.
const HasTrait_TypeID = 0x9ccddbfbcc1df2fe

func NewHasTrait(s *capnp.Segment) (HasTrait, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return HasTrait{st}, err
}

func NewRootHasTrait(s *capnp.Segment) (HasTrait, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return HasTrait{st}, err
}

func ReadRootHasTrait(msg *capnp.Message) (HasTrait, error) {
	root, err := msg.RootPtr()
	return HasTrait{root.Struct()}, err
}

func (s HasTrait) String() string {
	str, _ := text.Marshal(0x9ccddbfbcc1df2fe, s.Struct)
	return str
}

func (s HasTrait) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s HasTrait) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HasTrait) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s HasTrait) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HasTrait) Trait() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s HasTrait) HasTrait() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HasTrait) SetTrait(v rtx.TextEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTrait sets the trait field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s HasTrait) NewTrait() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// HasTrait_List is a list of HasTrait.
type HasTrait_List struct{ capnp.List }

// NewHasTrait creates a new list of HasTrait.
func NewHasTrait_List(s *capnp.Segment, sz int32) (HasTrait_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return HasTrait_List{l}, err
}

func (s HasTrait_List) At(i int) HasTrait { return HasTrait{s.List.Struct(i)} }

func (s HasTrait_List) Set(i int, v HasTrait) error { return s.List.SetStruct(i, v.Struct) }

func (s HasTrait_List) String() string {
	str, _ := text.MarshalList(0x9ccddbfbcc1df2fe, s.List)
	return str
}

// HasTrait_Promise is a wrapper for a HasTrait promised by a client call.
type HasTrait_Promise struct{ *capnp.Pipeline }

func (p HasTrait_Promise) Struct() (HasTrait, error) {
	s, err := p.Pipeline.Struct()
	return HasTrait{s}, err
}

func (p HasTrait_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p HasTrait_Promise) Trait() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type IdOf struct{ capnp.Struct }

// IdOf_TypeID is the unique identifier for the type IdOf.
const IdOf_TypeID = 0xa111a44d05aaaf98

func NewIdOf(s *capnp.Segment) (IdOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IdOf{st}, err
}

func NewRootIdOf(s *capnp.Segment) (IdOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IdOf{st}, err
}

func ReadRootIdOf(msg *capnp.Message) (IdOf, error) {
	root, err := msg.RootPtr()
	return IdOf{root.Struct()}, err
}

func (s IdOf) String() string {
	str, _ := text.Marshal(0xa111a44d05aaaf98, s.Struct)
	return str
}

func (s IdOf) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s IdOf) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IdOf) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s IdOf) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IdOf_List is a list of IdOf.
type IdOf_List struct{ capnp.List }

// NewIdOf creates a new list of IdOf.
func NewIdOf_List(s *capnp.Segment, sz int32) (IdOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IdOf_List{l}, err
}

func (s IdOf_List) At(i int) IdOf { return IdOf{s.List.Struct(i)} }

func (s IdOf_List) Set(i int, v IdOf) error { return s.List.SetStruct(i, v.Struct) }

func (s IdOf_List) String() string {
	str, _ := text.MarshalList(0xa111a44d05aaaf98, s.List)
	return str
}

// IdOf_Promise is a wrapper for a IdOf promised by a client call.
type IdOf_Promise struct{ *capnp.Pipeline }

func (p IdOf_Promise) Struct() (IdOf, error) {
	s, err := p.Pipeline.Struct()
	return IdOf{s}, err
}

func (p IdOf_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Includes struct{ capnp.Struct }

// Includes_TypeID is the unique identifier for the type Includes.
const Includes_TypeID = 0x923a6a1c735decfb

func NewIncludes(s *capnp.Segment) (Includes, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Includes{st}, err
}

func NewRootIncludes(s *capnp.Segment) (Includes, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Includes{st}, err
}

func ReadRootIncludes(msg *capnp.Message) (Includes, error) {
	root, err := msg.RootPtr()
	return Includes{root.Struct()}, err
}

func (s Includes) String() string {
	str, _ := text.Marshal(0x923a6a1c735decfb, s.Struct)
	return str
}

func (s Includes) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s Includes) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Includes) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s Includes) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Includes) Part() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s Includes) HasPart() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Includes) SetPart(v rtx.TextEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPart sets the part field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s Includes) NewPart() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Includes_List is a list of Includes.
type Includes_List struct{ capnp.List }

// NewIncludes creates a new list of Includes.
func NewIncludes_List(s *capnp.Segment, sz int32) (Includes_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Includes_List{l}, err
}

func (s Includes_List) At(i int) Includes { return Includes{s.List.Struct(i)} }

func (s Includes_List) Set(i int, v Includes) error { return s.List.SetStruct(i, v.Struct) }

func (s Includes_List) String() string {
	str, _ := text.MarshalList(0x923a6a1c735decfb, s.List)
	return str
}

// Includes_Promise is a wrapper for a Includes promised by a client call.
type Includes_Promise struct{ *capnp.Pipeline }

func (p Includes_Promise) Struct() (Includes, error) {
	s, err := p.Pipeline.Struct()
	return Includes{s}, err
}

func (p Includes_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Includes_Promise) Part() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type IntoObj struct{ capnp.Struct }

// IntoObj_TypeID is the unique identifier for the type IntoObj.
const IntoObj_TypeID = 0x97cc109d05abbd9f

func NewIntoObj(s *capnp.Segment) (IntoObj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoObj{st}, err
}

func NewRootIntoObj(s *capnp.Segment) (IntoObj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoObj{st}, err
}

func ReadRootIntoObj(msg *capnp.Message) (IntoObj, error) {
	root, err := msg.RootPtr()
	return IntoObj{root.Struct()}, err
}

func (s IntoObj) String() string {
	str, _ := text.Marshal(0x97cc109d05abbd9f, s.Struct)
	return str
}

func (s IntoObj) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s IntoObj) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IntoObj) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s IntoObj) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IntoObj_List is a list of IntoObj.
type IntoObj_List struct{ capnp.List }

// NewIntoObj creates a new list of IntoObj.
func NewIntoObj_List(s *capnp.Segment, sz int32) (IntoObj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IntoObj_List{l}, err
}

func (s IntoObj_List) At(i int) IntoObj { return IntoObj{s.List.Struct(i)} }

func (s IntoObj_List) Set(i int, v IntoObj) error { return s.List.SetStruct(i, v.Struct) }

func (s IntoObj_List) String() string {
	str, _ := text.MarshalList(0x97cc109d05abbd9f, s.List)
	return str
}

// IntoObj_Promise is a wrapper for a IntoObj promised by a client call.
type IntoObj_Promise struct{ *capnp.Pipeline }

func (p IntoObj_Promise) Struct() (IntoObj, error) {
	s, err := p.Pipeline.Struct()
	return IntoObj{s}, err
}

func (p IntoObj_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type IntoVar struct{ capnp.Struct }

// IntoVar_TypeID is the unique identifier for the type IntoVar.
const IntoVar_TypeID = 0xf8580afd882eace5

func NewIntoVar(s *capnp.Segment) (IntoVar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoVar{st}, err
}

func NewRootIntoVar(s *capnp.Segment) (IntoVar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IntoVar{st}, err
}

func ReadRootIntoVar(msg *capnp.Message) (IntoVar, error) {
	root, err := msg.RootPtr()
	return IntoVar{root.Struct()}, err
}

func (s IntoVar) String() string {
	str, _ := text.Marshal(0xf8580afd882eace5, s.Struct)
	return str
}

func (s IntoVar) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IntoVar) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IntoVar) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IntoVar) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

// IntoVar_List is a list of IntoVar.
type IntoVar_List struct{ capnp.List }

// NewIntoVar creates a new list of IntoVar.
func NewIntoVar_List(s *capnp.Segment, sz int32) (IntoVar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IntoVar_List{l}, err
}

func (s IntoVar_List) At(i int) IntoVar { return IntoVar{s.List.Struct(i)} }

func (s IntoVar_List) Set(i int, v IntoVar) error { return s.List.SetStruct(i, v.Struct) }

func (s IntoVar_List) String() string {
	str, _ := text.MarshalList(0xf8580afd882eace5, s.List)
	return str
}

// IntoVar_Promise is a wrapper for a IntoVar promised by a client call.
type IntoVar_Promise struct{ *capnp.Pipeline }

func (p IntoVar_Promise) Struct() (IntoVar, error) {
	s, err := p.Pipeline.Struct()
	return IntoVar{s}, err
}

type IsEmpty struct{ capnp.Struct }

// IsEmpty_TypeID is the unique identifier for the type IsEmpty.
const IsEmpty_TypeID = 0xb4cb54f11da736f0

func NewIsEmpty(s *capnp.Segment) (IsEmpty, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IsEmpty{st}, err
}

func NewRootIsEmpty(s *capnp.Segment) (IsEmpty, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IsEmpty{st}, err
}

func ReadRootIsEmpty(msg *capnp.Message) (IsEmpty, error) {
	root, err := msg.RootPtr()
	return IsEmpty{root.Struct()}, err
}

func (s IsEmpty) String() string {
	str, _ := text.Marshal(0xb4cb54f11da736f0, s.Struct)
	return str
}

func (s IsEmpty) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s IsEmpty) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IsEmpty) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s IsEmpty) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IsEmpty_List is a list of IsEmpty.
type IsEmpty_List struct{ capnp.List }

// NewIsEmpty creates a new list of IsEmpty.
func NewIsEmpty_List(s *capnp.Segment, sz int32) (IsEmpty_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IsEmpty_List{l}, err
}

func (s IsEmpty_List) At(i int) IsEmpty { return IsEmpty{s.List.Struct(i)} }

func (s IsEmpty_List) Set(i int, v IsEmpty) error { return s.List.SetStruct(i, v.Struct) }

func (s IsEmpty_List) String() string {
	str, _ := text.MarshalList(0xb4cb54f11da736f0, s.List)
	return str
}

// IsEmpty_Promise is a wrapper for a IsEmpty promised by a client call.
type IsEmpty_Promise struct{ *capnp.Pipeline }

func (p IsEmpty_Promise) Struct() (IsEmpty, error) {
	s, err := p.Pipeline.Struct()
	return IsEmpty{s}, err
}

func (p IsEmpty_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type IsExactKindOf struct{ capnp.Struct }

// IsExactKindOf_TypeID is the unique identifier for the type IsExactKindOf.
const IsExactKindOf_TypeID = 0xee86f150e4f752f9

func NewIsExactKindOf(s *capnp.Segment) (IsExactKindOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IsExactKindOf{st}, err
}

func NewRootIsExactKindOf(s *capnp.Segment) (IsExactKindOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IsExactKindOf{st}, err
}

func ReadRootIsExactKindOf(msg *capnp.Message) (IsExactKindOf, error) {
	root, err := msg.RootPtr()
	return IsExactKindOf{root.Struct()}, err
}

func (s IsExactKindOf) String() string {
	str, _ := text.Marshal(0xee86f150e4f752f9, s.Struct)
	return str
}

func (s IsExactKindOf) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s IsExactKindOf) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IsExactKindOf) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s IsExactKindOf) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s IsExactKindOf) Kind() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IsExactKindOf) HasKind() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s IsExactKindOf) KindBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IsExactKindOf) SetKind(v string) error {
	return s.Struct.SetText(1, v)
}

// IsExactKindOf_List is a list of IsExactKindOf.
type IsExactKindOf_List struct{ capnp.List }

// NewIsExactKindOf creates a new list of IsExactKindOf.
func NewIsExactKindOf_List(s *capnp.Segment, sz int32) (IsExactKindOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return IsExactKindOf_List{l}, err
}

func (s IsExactKindOf_List) At(i int) IsExactKindOf { return IsExactKindOf{s.List.Struct(i)} }

func (s IsExactKindOf_List) Set(i int, v IsExactKindOf) error { return s.List.SetStruct(i, v.Struct) }

func (s IsExactKindOf_List) String() string {
	str, _ := text.MarshalList(0xee86f150e4f752f9, s.List)
	return str
}

// IsExactKindOf_Promise is a wrapper for a IsExactKindOf promised by a client call.
type IsExactKindOf_Promise struct{ *capnp.Pipeline }

func (p IsExactKindOf_Promise) Struct() (IsExactKindOf, error) {
	s, err := p.Pipeline.Struct()
	return IsExactKindOf{s}, err
}

func (p IsExactKindOf_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type IsKindOf struct{ capnp.Struct }

// IsKindOf_TypeID is the unique identifier for the type IsKindOf.
const IsKindOf_TypeID = 0xa5fd92eed3d94a02

func NewIsKindOf(s *capnp.Segment) (IsKindOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IsKindOf{st}, err
}

func NewRootIsKindOf(s *capnp.Segment) (IsKindOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IsKindOf{st}, err
}

func ReadRootIsKindOf(msg *capnp.Message) (IsKindOf, error) {
	root, err := msg.RootPtr()
	return IsKindOf{root.Struct()}, err
}

func (s IsKindOf) String() string {
	str, _ := text.Marshal(0xa5fd92eed3d94a02, s.Struct)
	return str
}

func (s IsKindOf) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s IsKindOf) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IsKindOf) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s IsKindOf) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s IsKindOf) Kind() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IsKindOf) HasKind() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s IsKindOf) KindBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IsKindOf) SetKind(v string) error {
	return s.Struct.SetText(1, v)
}

// IsKindOf_List is a list of IsKindOf.
type IsKindOf_List struct{ capnp.List }

// NewIsKindOf creates a new list of IsKindOf.
func NewIsKindOf_List(s *capnp.Segment, sz int32) (IsKindOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return IsKindOf_List{l}, err
}

func (s IsKindOf_List) At(i int) IsKindOf { return IsKindOf{s.List.Struct(i)} }

func (s IsKindOf_List) Set(i int, v IsKindOf) error { return s.List.SetStruct(i, v.Struct) }

func (s IsKindOf_List) String() string {
	str, _ := text.MarshalList(0xa5fd92eed3d94a02, s.List)
	return str
}

// IsKindOf_Promise is a wrapper for a IsKindOf promised by a client call.
type IsKindOf_Promise struct{ *capnp.Pipeline }

func (p IsKindOf_Promise) Struct() (IsKindOf, error) {
	s, err := p.Pipeline.Struct()
	return IsKindOf{s}, err
}

func (p IsKindOf_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type IsNotTrue struct{ capnp.Struct }

// IsNotTrue_TypeID is the unique identifier for the type IsNotTrue.
const IsNotTrue_TypeID = 0xd36f8f2ae9012e8e

func NewIsNotTrue(s *capnp.Segment) (IsNotTrue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IsNotTrue{st}, err
}

func NewRootIsNotTrue(s *capnp.Segment) (IsNotTrue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IsNotTrue{st}, err
}

func ReadRootIsNotTrue(msg *capnp.Message) (IsNotTrue, error) {
	root, err := msg.RootPtr()
	return IsNotTrue{root.Struct()}, err
}

func (s IsNotTrue) String() string {
	str, _ := text.Marshal(0xd36f8f2ae9012e8e, s.Struct)
	return str
}

func (s IsNotTrue) Test() (rtx.BoolEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.BoolEval{Struct: p.Struct()}, err
}

func (s IsNotTrue) HasTest() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IsNotTrue) SetTest(v rtx.BoolEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTest sets the test field to a newly
// allocated rtx.BoolEval struct, preferring placement in s's segment.
func (s IsNotTrue) NewTest() (rtx.BoolEval, error) {
	ss, err := rtx.NewBoolEval(s.Struct.Segment())
	if err != nil {
		return rtx.BoolEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IsNotTrue_List is a list of IsNotTrue.
type IsNotTrue_List struct{ capnp.List }

// NewIsNotTrue creates a new list of IsNotTrue.
func NewIsNotTrue_List(s *capnp.Segment, sz int32) (IsNotTrue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IsNotTrue_List{l}, err
}

func (s IsNotTrue_List) At(i int) IsNotTrue { return IsNotTrue{s.List.Struct(i)} }

func (s IsNotTrue_List) Set(i int, v IsNotTrue) error { return s.List.SetStruct(i, v.Struct) }

func (s IsNotTrue_List) String() string {
	str, _ := text.MarshalList(0xd36f8f2ae9012e8e, s.List)
	return str
}

// IsNotTrue_Promise is a wrapper for a IsNotTrue promised by a client call.
type IsNotTrue_Promise struct{ *capnp.Pipeline }

func (p IsNotTrue_Promise) Struct() (IsNotTrue, error) {
	s, err := p.Pipeline.Struct()
	return IsNotTrue{s}, err
}

func (p IsNotTrue_Promise) Test() rtx.BoolEval_Promise {
	return rtx.BoolEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Join struct{ capnp.Struct }

// Join_TypeID is the unique identifier for the type Join.
const Join_TypeID = 0xeaf963bc830bb059

func NewJoin(s *capnp.Segment) (Join, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Join{st}, err
}

func NewRootJoin(s *capnp.Segment) (Join, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Join{st}, err
}

func ReadRootJoin(msg *capnp.Message) (Join, error) {
	root, err := msg.RootPtr()
	return Join{root.Struct()}, err
}

func (s Join) String() string {
	str, _ := text.Marshal(0xeaf963bc830bb059, s.Struct)
	return str
}

func (s Join) Sep() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s Join) HasSep() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Join) SetSep(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSep sets the sep field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s Join) NewSep() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Join) Parts() (rtx.TextEval_List, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval_List{List: p.List()}, err
}

func (s Join) HasParts() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Join) SetParts(v rtx.TextEval_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewParts sets the parts field to a newly
// allocated rtx.TextEval_List, preferring placement in s's segment.
func (s Join) NewParts(n int32) (rtx.TextEval_List, error) {
	l, err := rtx.NewTextEval_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.TextEval_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Join_List is a list of Join.
type Join_List struct{ capnp.List }

// NewJoin creates a new list of Join.
func NewJoin_List(s *capnp.Segment, sz int32) (Join_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Join_List{l}, err
}

func (s Join_List) At(i int) Join { return Join{s.List.Struct(i)} }

func (s Join_List) Set(i int, v Join) error { return s.List.SetStruct(i, v.Struct) }

func (s Join_List) String() string {
	str, _ := text.MarshalList(0xeaf963bc830bb059, s.List)
	return str
}

// Join_Promise is a wrapper for a Join promised by a client call.
type Join_Promise struct{ *capnp.Pipeline }

func (p Join_Promise) Struct() (Join, error) {
	s, err := p.Pipeline.Struct()
	return Join{s}, err
}

func (p Join_Promise) Sep() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type KindOf struct{ capnp.Struct }

// KindOf_TypeID is the unique identifier for the type KindOf.
const KindOf_TypeID = 0xc3904f59de48ca8a

func NewKindOf(s *capnp.Segment) (KindOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return KindOf{st}, err
}

func NewRootKindOf(s *capnp.Segment) (KindOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return KindOf{st}, err
}

func ReadRootKindOf(msg *capnp.Message) (KindOf, error) {
	root, err := msg.RootPtr()
	return KindOf{root.Struct()}, err
}

func (s KindOf) String() string {
	str, _ := text.Marshal(0xc3904f59de48ca8a, s.Struct)
	return str
}

func (s KindOf) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s KindOf) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s KindOf) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s KindOf) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// KindOf_List is a list of KindOf.
type KindOf_List struct{ capnp.List }

// NewKindOf creates a new list of KindOf.
func NewKindOf_List(s *capnp.Segment, sz int32) (KindOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return KindOf_List{l}, err
}

func (s KindOf_List) At(i int) KindOf { return KindOf{s.List.Struct(i)} }

func (s KindOf_List) Set(i int, v KindOf) error { return s.List.SetStruct(i, v.Struct) }

func (s KindOf_List) String() string {
	str, _ := text.MarshalList(0xc3904f59de48ca8a, s.List)
	return str
}

// KindOf_Promise is a wrapper for a KindOf promised by a client call.
type KindOf_Promise struct{ *capnp.Pipeline }

func (p KindOf_Promise) Struct() (KindOf, error) {
	s, err := p.Pipeline.Struct()
	return KindOf{s}, err
}

func (p KindOf_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type KindsOf struct{ capnp.Struct }

// KindsOf_TypeID is the unique identifier for the type KindsOf.
const KindsOf_TypeID = 0x931cbad222a195f8

func NewKindsOf(s *capnp.Segment) (KindsOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return KindsOf{st}, err
}

func NewRootKindsOf(s *capnp.Segment) (KindsOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return KindsOf{st}, err
}

func ReadRootKindsOf(msg *capnp.Message) (KindsOf, error) {
	root, err := msg.RootPtr()
	return KindsOf{root.Struct()}, err
}

func (s KindsOf) String() string {
	str, _ := text.Marshal(0x931cbad222a195f8, s.Struct)
	return str
}

func (s KindsOf) Kind() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s KindsOf) HasKind() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s KindsOf) KindBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s KindsOf) SetKind(v string) error {
	return s.Struct.SetText(0, v)
}

// KindsOf_List is a list of KindsOf.
type KindsOf_List struct{ capnp.List }

// NewKindsOf creates a new list of KindsOf.
func NewKindsOf_List(s *capnp.Segment, sz int32) (KindsOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return KindsOf_List{l}, err
}

func (s KindsOf_List) At(i int) KindsOf { return KindsOf{s.List.Struct(i)} }

func (s KindsOf_List) Set(i int, v KindsOf) error { return s.List.SetStruct(i, v.Struct) }

func (s KindsOf_List) String() string {
	str, _ := text.MarshalList(0x931cbad222a195f8, s.List)
	return str
}

// KindsOf_Promise is a wrapper for a KindsOf promised by a client call.
type KindsOf_Promise struct{ *capnp.Pipeline }

func (p KindsOf_Promise) Struct() (KindsOf, error) {
	s, err := p.Pipeline.Struct()
	return KindsOf{s}, err
}

type LessOrEqual struct{ capnp.Struct }

// LessOrEqual_TypeID is the unique identifier for the type LessOrEqual.
const LessOrEqual_TypeID = 0x9a5385a250ba27d6

func NewLessOrEqual(s *capnp.Segment) (LessOrEqual, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LessOrEqual{st}, err
}

func NewRootLessOrEqual(s *capnp.Segment) (LessOrEqual, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LessOrEqual{st}, err
}

func ReadRootLessOrEqual(msg *capnp.Message) (LessOrEqual, error) {
	root, err := msg.RootPtr()
	return LessOrEqual{root.Struct()}, err
}

func (s LessOrEqual) String() string {
	str, _ := text.Marshal(0x9a5385a250ba27d6, s.Struct)
	return str
}

// LessOrEqual_List is a list of LessOrEqual.
type LessOrEqual_List struct{ capnp.List }

// NewLessOrEqual creates a new list of LessOrEqual.
func NewLessOrEqual_List(s *capnp.Segment, sz int32) (LessOrEqual_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LessOrEqual_List{l}, err
}

func (s LessOrEqual_List) At(i int) LessOrEqual { return LessOrEqual{s.List.Struct(i)} }

func (s LessOrEqual_List) Set(i int, v LessOrEqual) error { return s.List.SetStruct(i, v.Struct) }

func (s LessOrEqual_List) String() string {
	str, _ := text.MarshalList(0x9a5385a250ba27d6, s.List)
	return str
}

// LessOrEqual_Promise is a wrapper for a LessOrEqual promised by a client call.
type LessOrEqual_Promise struct{ *capnp.Pipeline }

func (p LessOrEqual_Promise) Struct() (LessOrEqual, error) {
	s, err := p.Pipeline.Struct()
	return LessOrEqual{s}, err
}

type LessThan struct{ capnp.Struct }

// LessThan_TypeID is the unique identifier for the type LessThan.
const LessThan_TypeID = 0xd481f2b2c3780a25

func NewLessThan(s *capnp.Segment) (LessThan, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LessThan{st}, err
}

func NewRootLessThan(s *capnp.Segment) (LessThan, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LessThan{st}, err
}

func ReadRootLessThan(msg *capnp.Message) (LessThan, error) {
	root, err := msg.RootPtr()
	return LessThan{root.Struct()}, err
}

func (s LessThan) String() string {
	str, _ := text.Marshal(0xd481f2b2c3780a25, s.Struct)
	return str
}

// LessThan_List is a list of LessThan.
type LessThan_List struct{ capnp.List }

// NewLessThan creates a new list of LessThan.
func NewLessThan_List(s *capnp.Segment, sz int32) (LessThan_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return LessThan_List{l}, err
}

func (s LessThan_List) At(i int) LessThan { return LessThan{s.List.Struct(i)} }

func (s LessThan_List) Set(i int, v LessThan) error { return s.List.SetStruct(i, v.Struct) }

func (s LessThan_List) String() string {
	str, _ := text.MarshalList(0xd481f2b2c3780a25, s.List)
	return str
}

// LessThan_Promise is a wrapper for a LessThan promised by a client call.
type LessThan_Promise struct{ *capnp.Pipeline }

func (p LessThan_Promise) Struct() (LessThan, error) {
	s, err := p.Pipeline.Struct()
	return LessThan{s}, err
}

type Lines struct{ capnp.Struct }

// Lines_TypeID is the unique identifier for the type Lines.
const Lines_TypeID = 0xe7bfb8915a5744c3

func NewLines(s *capnp.Segment) (Lines, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Lines{st}, err
}

func NewRootLines(s *capnp.Segment) (Lines, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Lines{st}, err
}

func ReadRootLines(msg *capnp.Message) (Lines, error) {
	root, err := msg.RootPtr()
	return Lines{root.Struct()}, err
}

func (s Lines) String() string {
	str, _ := text.Marshal(0xe7bfb8915a5744c3, s.Struct)
	return str
}

func (s Lines) Lines() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Lines) HasLines() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Lines) LinesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Lines) SetLines(v string) error {
	return s.Struct.SetText(0, v)
}

// Lines_List is a list of Lines.
type Lines_List struct{ capnp.List }

// NewLines creates a new list of Lines.
func NewLines_List(s *capnp.Segment, sz int32) (Lines_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Lines_List{l}, err
}

func (s Lines_List) At(i int) Lines { return Lines{s.List.Struct(i)} }

func (s Lines_List) Set(i int, v Lines) error { return s.List.SetStruct(i, v.Struct) }

func (s Lines_List) String() string {
	str, _ := text.MarshalList(0xe7bfb8915a5744c3, s.List)
	return str
}

// Lines_Promise is a wrapper for a Lines promised by a client call.
type Lines_Promise struct{ *capnp.Pipeline }

func (p Lines_Promise) Struct() (Lines, error) {
	s, err := p.Pipeline.Struct()
	return Lines{s}, err
}

type Make struct{ capnp.Struct }

// Make_TypeID is the unique identifier for the type Make.
const Make_TypeID = 0xe370e7dffb14fc7f

func NewMake(s *capnp.Segment) (Make, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Make{st}, err
}

func NewRootMake(s *capnp.Segment) (Make, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Make{st}, err
}

func ReadRootMake(msg *capnp.Message) (Make, error) {
	root, err := msg.RootPtr()
	return Make{root.Struct()}, err
}

func (s Make) String() string {
	str, _ := text.Marshal(0xe370e7dffb14fc7f, s.Struct)
	return str
}

func (s Make) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Make) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Make) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Make) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Make) Args() (Argument_List, error) {
	p, err := s.Struct.Ptr(1)
	return Argument_List{List: p.List()}, err
}

func (s Make) HasArgs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Make) SetArgs(v Argument_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated Argument_List, preferring placement in s's segment.
func (s Make) NewArgs(n int32) (Argument_List, error) {
	l, err := NewArgument_List(s.Struct.Segment(), n)
	if err != nil {
		return Argument_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Make_List is a list of Make.
type Make_List struct{ capnp.List }

// NewMake creates a new list of Make.
func NewMake_List(s *capnp.Segment, sz int32) (Make_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Make_List{l}, err
}

func (s Make_List) At(i int) Make { return Make{s.List.Struct(i)} }

func (s Make_List) Set(i int, v Make) error { return s.List.SetStruct(i, v.Struct) }

func (s Make_List) String() string {
	str, _ := text.MarshalList(0xe370e7dffb14fc7f, s.List)
	return str
}

// Make_Promise is a wrapper for a Make promised by a client call.
type Make_Promise struct{ *capnp.Pipeline }

func (p Make_Promise) Struct() (Make, error) {
	s, err := p.Pipeline.Struct()
	return Make{s}, err
}

type MakeLowercase struct{ capnp.Struct }

// MakeLowercase_TypeID is the unique identifier for the type MakeLowercase.
const MakeLowercase_TypeID = 0x9061f8eb183dbbed

func NewMakeLowercase(s *capnp.Segment) (MakeLowercase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeLowercase{st}, err
}

func NewRootMakeLowercase(s *capnp.Segment) (MakeLowercase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeLowercase{st}, err
}

func ReadRootMakeLowercase(msg *capnp.Message) (MakeLowercase, error) {
	root, err := msg.RootPtr()
	return MakeLowercase{root.Struct()}, err
}

func (s MakeLowercase) String() string {
	str, _ := text.Marshal(0x9061f8eb183dbbed, s.Struct)
	return str
}

func (s MakeLowercase) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s MakeLowercase) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MakeLowercase) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s MakeLowercase) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MakeLowercase_List is a list of MakeLowercase.
type MakeLowercase_List struct{ capnp.List }

// NewMakeLowercase creates a new list of MakeLowercase.
func NewMakeLowercase_List(s *capnp.Segment, sz int32) (MakeLowercase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MakeLowercase_List{l}, err
}

func (s MakeLowercase_List) At(i int) MakeLowercase { return MakeLowercase{s.List.Struct(i)} }

func (s MakeLowercase_List) Set(i int, v MakeLowercase) error { return s.List.SetStruct(i, v.Struct) }

func (s MakeLowercase_List) String() string {
	str, _ := text.MarshalList(0x9061f8eb183dbbed, s.List)
	return str
}

// MakeLowercase_Promise is a wrapper for a MakeLowercase promised by a client call.
type MakeLowercase_Promise struct{ *capnp.Pipeline }

func (p MakeLowercase_Promise) Struct() (MakeLowercase, error) {
	s, err := p.Pipeline.Struct()
	return MakeLowercase{s}, err
}

func (p MakeLowercase_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MakePlural struct{ capnp.Struct }

// MakePlural_TypeID is the unique identifier for the type MakePlural.
const MakePlural_TypeID = 0xe7c4cf7f7b4332de

func NewMakePlural(s *capnp.Segment) (MakePlural, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakePlural{st}, err
}

func NewRootMakePlural(s *capnp.Segment) (MakePlural, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakePlural{st}, err
}

func ReadRootMakePlural(msg *capnp.Message) (MakePlural, error) {
	root, err := msg.RootPtr()
	return MakePlural{root.Struct()}, err
}

func (s MakePlural) String() string {
	str, _ := text.Marshal(0xe7c4cf7f7b4332de, s.Struct)
	return str
}

func (s MakePlural) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s MakePlural) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MakePlural) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s MakePlural) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MakePlural_List is a list of MakePlural.
type MakePlural_List struct{ capnp.List }

// NewMakePlural creates a new list of MakePlural.
func NewMakePlural_List(s *capnp.Segment, sz int32) (MakePlural_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MakePlural_List{l}, err
}

func (s MakePlural_List) At(i int) MakePlural { return MakePlural{s.List.Struct(i)} }

func (s MakePlural_List) Set(i int, v MakePlural) error { return s.List.SetStruct(i, v.Struct) }

func (s MakePlural_List) String() string {
	str, _ := text.MarshalList(0xe7c4cf7f7b4332de, s.List)
	return str
}

// MakePlural_Promise is a wrapper for a MakePlural promised by a client call.
type MakePlural_Promise struct{ *capnp.Pipeline }

func (p MakePlural_Promise) Struct() (MakePlural, error) {
	s, err := p.Pipeline.Struct()
	return MakePlural{s}, err
}

func (p MakePlural_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MakeReversed struct{ capnp.Struct }

// MakeReversed_TypeID is the unique identifier for the type MakeReversed.
const MakeReversed_TypeID = 0xa43ac13d0fb9abc0

func NewMakeReversed(s *capnp.Segment) (MakeReversed, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeReversed{st}, err
}

func NewRootMakeReversed(s *capnp.Segment) (MakeReversed, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeReversed{st}, err
}

func ReadRootMakeReversed(msg *capnp.Message) (MakeReversed, error) {
	root, err := msg.RootPtr()
	return MakeReversed{root.Struct()}, err
}

func (s MakeReversed) String() string {
	str, _ := text.Marshal(0xa43ac13d0fb9abc0, s.Struct)
	return str
}

func (s MakeReversed) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s MakeReversed) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MakeReversed) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s MakeReversed) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MakeReversed_List is a list of MakeReversed.
type MakeReversed_List struct{ capnp.List }

// NewMakeReversed creates a new list of MakeReversed.
func NewMakeReversed_List(s *capnp.Segment, sz int32) (MakeReversed_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MakeReversed_List{l}, err
}

func (s MakeReversed_List) At(i int) MakeReversed { return MakeReversed{s.List.Struct(i)} }

func (s MakeReversed_List) Set(i int, v MakeReversed) error { return s.List.SetStruct(i, v.Struct) }

func (s MakeReversed_List) String() string {
	str, _ := text.MarshalList(0xa43ac13d0fb9abc0, s.List)
	return str
}

// MakeReversed_Promise is a wrapper for a MakeReversed promised by a client call.
type MakeReversed_Promise struct{ *capnp.Pipeline }

func (p MakeReversed_Promise) Struct() (MakeReversed, error) {
	s, err := p.Pipeline.Struct()
	return MakeReversed{s}, err
}

func (p MakeReversed_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MakeSentenceCase struct{ capnp.Struct }

// MakeSentenceCase_TypeID is the unique identifier for the type MakeSentenceCase.
const MakeSentenceCase_TypeID = 0x8e16a8fb55246273

func NewMakeSentenceCase(s *capnp.Segment) (MakeSentenceCase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeSentenceCase{st}, err
}

func NewRootMakeSentenceCase(s *capnp.Segment) (MakeSentenceCase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeSentenceCase{st}, err
}

func ReadRootMakeSentenceCase(msg *capnp.Message) (MakeSentenceCase, error) {
	root, err := msg.RootPtr()
	return MakeSentenceCase{root.Struct()}, err
}

func (s MakeSentenceCase) String() string {
	str, _ := text.Marshal(0x8e16a8fb55246273, s.Struct)
	return str
}

func (s MakeSentenceCase) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s MakeSentenceCase) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MakeSentenceCase) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s MakeSentenceCase) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MakeSentenceCase_List is a list of MakeSentenceCase.
type MakeSentenceCase_List struct{ capnp.List }

// NewMakeSentenceCase creates a new list of MakeSentenceCase.
func NewMakeSentenceCase_List(s *capnp.Segment, sz int32) (MakeSentenceCase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MakeSentenceCase_List{l}, err
}

func (s MakeSentenceCase_List) At(i int) MakeSentenceCase { return MakeSentenceCase{s.List.Struct(i)} }

func (s MakeSentenceCase_List) Set(i int, v MakeSentenceCase) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MakeSentenceCase_List) String() string {
	str, _ := text.MarshalList(0x8e16a8fb55246273, s.List)
	return str
}

// MakeSentenceCase_Promise is a wrapper for a MakeSentenceCase promised by a client call.
type MakeSentenceCase_Promise struct{ *capnp.Pipeline }

func (p MakeSentenceCase_Promise) Struct() (MakeSentenceCase, error) {
	s, err := p.Pipeline.Struct()
	return MakeSentenceCase{s}, err
}

func (p MakeSentenceCase_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MakeSingular struct{ capnp.Struct }

// MakeSingular_TypeID is the unique identifier for the type MakeSingular.
const MakeSingular_TypeID = 0xb60218526f8931a3

func NewMakeSingular(s *capnp.Segment) (MakeSingular, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeSingular{st}, err
}

func NewRootMakeSingular(s *capnp.Segment) (MakeSingular, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeSingular{st}, err
}

func ReadRootMakeSingular(msg *capnp.Message) (MakeSingular, error) {
	root, err := msg.RootPtr()
	return MakeSingular{root.Struct()}, err
}

func (s MakeSingular) String() string {
	str, _ := text.Marshal(0xb60218526f8931a3, s.Struct)
	return str
}

func (s MakeSingular) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s MakeSingular) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MakeSingular) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s MakeSingular) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MakeSingular_List is a list of MakeSingular.
type MakeSingular_List struct{ capnp.List }

// NewMakeSingular creates a new list of MakeSingular.
func NewMakeSingular_List(s *capnp.Segment, sz int32) (MakeSingular_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MakeSingular_List{l}, err
}

func (s MakeSingular_List) At(i int) MakeSingular { return MakeSingular{s.List.Struct(i)} }

func (s MakeSingular_List) Set(i int, v MakeSingular) error { return s.List.SetStruct(i, v.Struct) }

func (s MakeSingular_List) String() string {
	str, _ := text.MarshalList(0xb60218526f8931a3, s.List)
	return str
}

// MakeSingular_Promise is a wrapper for a MakeSingular promised by a client call.
type MakeSingular_Promise struct{ *capnp.Pipeline }

func (p MakeSingular_Promise) Struct() (MakeSingular, error) {
	s, err := p.Pipeline.Struct()
	return MakeSingular{s}, err
}

func (p MakeSingular_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MakeTitleCase struct{ capnp.Struct }

// MakeTitleCase_TypeID is the unique identifier for the type MakeTitleCase.
const MakeTitleCase_TypeID = 0xb0bffe9b403dbf27

func NewMakeTitleCase(s *capnp.Segment) (MakeTitleCase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeTitleCase{st}, err
}

func NewRootMakeTitleCase(s *capnp.Segment) (MakeTitleCase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeTitleCase{st}, err
}

func ReadRootMakeTitleCase(msg *capnp.Message) (MakeTitleCase, error) {
	root, err := msg.RootPtr()
	return MakeTitleCase{root.Struct()}, err
}

func (s MakeTitleCase) String() string {
	str, _ := text.Marshal(0xb0bffe9b403dbf27, s.Struct)
	return str
}

func (s MakeTitleCase) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s MakeTitleCase) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MakeTitleCase) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s MakeTitleCase) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MakeTitleCase_List is a list of MakeTitleCase.
type MakeTitleCase_List struct{ capnp.List }

// NewMakeTitleCase creates a new list of MakeTitleCase.
func NewMakeTitleCase_List(s *capnp.Segment, sz int32) (MakeTitleCase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MakeTitleCase_List{l}, err
}

func (s MakeTitleCase_List) At(i int) MakeTitleCase { return MakeTitleCase{s.List.Struct(i)} }

func (s MakeTitleCase_List) Set(i int, v MakeTitleCase) error { return s.List.SetStruct(i, v.Struct) }

func (s MakeTitleCase_List) String() string {
	str, _ := text.MarshalList(0xb0bffe9b403dbf27, s.List)
	return str
}

// MakeTitleCase_Promise is a wrapper for a MakeTitleCase promised by a client call.
type MakeTitleCase_Promise struct{ *capnp.Pipeline }

func (p MakeTitleCase_Promise) Struct() (MakeTitleCase, error) {
	s, err := p.Pipeline.Struct()
	return MakeTitleCase{s}, err
}

func (p MakeTitleCase_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MakeUppercase struct{ capnp.Struct }

// MakeUppercase_TypeID is the unique identifier for the type MakeUppercase.
const MakeUppercase_TypeID = 0xa26b5090c288352a

func NewMakeUppercase(s *capnp.Segment) (MakeUppercase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeUppercase{st}, err
}

func NewRootMakeUppercase(s *capnp.Segment) (MakeUppercase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MakeUppercase{st}, err
}

func ReadRootMakeUppercase(msg *capnp.Message) (MakeUppercase, error) {
	root, err := msg.RootPtr()
	return MakeUppercase{root.Struct()}, err
}

func (s MakeUppercase) String() string {
	str, _ := text.Marshal(0xa26b5090c288352a, s.Struct)
	return str
}

func (s MakeUppercase) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s MakeUppercase) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MakeUppercase) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s MakeUppercase) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MakeUppercase_List is a list of MakeUppercase.
type MakeUppercase_List struct{ capnp.List }

// NewMakeUppercase creates a new list of MakeUppercase.
func NewMakeUppercase_List(s *capnp.Segment, sz int32) (MakeUppercase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MakeUppercase_List{l}, err
}

func (s MakeUppercase_List) At(i int) MakeUppercase { return MakeUppercase{s.List.Struct(i)} }

func (s MakeUppercase_List) Set(i int, v MakeUppercase) error { return s.List.SetStruct(i, v.Struct) }

func (s MakeUppercase_List) String() string {
	str, _ := text.MarshalList(0xa26b5090c288352a, s.List)
	return str
}

// MakeUppercase_Promise is a wrapper for a MakeUppercase promised by a client call.
type MakeUppercase_Promise struct{ *capnp.Pipeline }

func (p MakeUppercase_Promise) Struct() (MakeUppercase, error) {
	s, err := p.Pipeline.Struct()
	return MakeUppercase{s}, err
}

func (p MakeUppercase_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Matches struct{ capnp.Struct }

// Matches_TypeID is the unique identifier for the type Matches.
const Matches_TypeID = 0x925c9c89b47282be

func NewMatches(s *capnp.Segment) (Matches, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Matches{st}, err
}

func NewRootMatches(s *capnp.Segment) (Matches, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Matches{st}, err
}

func ReadRootMatches(msg *capnp.Message) (Matches, error) {
	root, err := msg.RootPtr()
	return Matches{root.Struct()}, err
}

func (s Matches) String() string {
	str, _ := text.Marshal(0x925c9c89b47282be, s.Struct)
	return str
}

func (s Matches) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s Matches) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Matches) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s Matches) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Matches) Pattern() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Matches) HasPattern() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Matches) PatternBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Matches) SetPattern(v string) error {
	return s.Struct.SetText(1, v)
}

// Matches_List is a list of Matches.
type Matches_List struct{ capnp.List }

// NewMatches creates a new list of Matches.
func NewMatches_List(s *capnp.Segment, sz int32) (Matches_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Matches_List{l}, err
}

func (s Matches_List) At(i int) Matches { return Matches{s.List.Struct(i)} }

func (s Matches_List) Set(i int, v Matches) error { return s.List.SetStruct(i, v.Struct) }

func (s Matches_List) String() string {
	str, _ := text.MarshalList(0x925c9c89b47282be, s.List)
	return str
}

// Matches_Promise is a wrapper for a Matches promised by a client call.
type Matches_Promise struct{ *capnp.Pipeline }

func (p Matches_Promise) Struct() (Matches, error) {
	s, err := p.Pipeline.Struct()
	return Matches{s}, err
}

func (p Matches_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type NameOf struct{ capnp.Struct }

// NameOf_TypeID is the unique identifier for the type NameOf.
const NameOf_TypeID = 0xd4aa17845243e275

func NewNameOf(s *capnp.Segment) (NameOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NameOf{st}, err
}

func NewRootNameOf(s *capnp.Segment) (NameOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NameOf{st}, err
}

func ReadRootNameOf(msg *capnp.Message) (NameOf, error) {
	root, err := msg.RootPtr()
	return NameOf{root.Struct()}, err
}

func (s NameOf) String() string {
	str, _ := text.Marshal(0xd4aa17845243e275, s.Struct)
	return str
}

func (s NameOf) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s NameOf) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NameOf) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s NameOf) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// NameOf_List is a list of NameOf.
type NameOf_List struct{ capnp.List }

// NewNameOf creates a new list of NameOf.
func NewNameOf_List(s *capnp.Segment, sz int32) (NameOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return NameOf_List{l}, err
}

func (s NameOf_List) At(i int) NameOf { return NameOf{s.List.Struct(i)} }

func (s NameOf_List) Set(i int, v NameOf) error { return s.List.SetStruct(i, v.Struct) }

func (s NameOf_List) String() string {
	str, _ := text.MarshalList(0xd4aa17845243e275, s.List)
	return str
}

// NameOf_Promise is a wrapper for a NameOf promised by a client call.
type NameOf_Promise struct{ *capnp.Pipeline }

func (p NameOf_Promise) Struct() (NameOf, error) {
	s, err := p.Pipeline.Struct()
	return NameOf{s}, err
}

func (p NameOf_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Newline struct{ capnp.Struct }

// Newline_TypeID is the unique identifier for the type Newline.
const Newline_TypeID = 0xbfc3fc933416f31b

func NewNewline(s *capnp.Segment) (Newline, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Newline{st}, err
}

func NewRootNewline(s *capnp.Segment) (Newline, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Newline{st}, err
}

func ReadRootNewline(msg *capnp.Message) (Newline, error) {
	root, err := msg.RootPtr()
	return Newline{root.Struct()}, err
}

func (s Newline) String() string {
	str, _ := text.Marshal(0xbfc3fc933416f31b, s.Struct)
	return str
}

// Newline_List is a list of Newline.
type Newline_List struct{ capnp.List }

// NewNewline creates a new list of Newline.
func NewNewline_List(s *capnp.Segment, sz int32) (Newline_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Newline_List{l}, err
}

func (s Newline_List) At(i int) Newline { return Newline{s.List.Struct(i)} }

func (s Newline_List) Set(i int, v Newline) error { return s.List.SetStruct(i, v.Struct) }

func (s Newline_List) String() string {
	str, _ := text.MarshalList(0xbfc3fc933416f31b, s.List)
	return str
}

// Newline_Promise is a wrapper for a Newline promised by a client call.
type Newline_Promise struct{ *capnp.Pipeline }

func (p Newline_Promise) Struct() (Newline, error) {
	s, err := p.Pipeline.Struct()
	return Newline{s}, err
}

type Next struct{ capnp.Struct }

// Next_TypeID is the unique identifier for the type Next.
const Next_TypeID = 0x9acc76381ab821b6

func NewNext(s *capnp.Segment) (Next, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Next{st}, err
}

func NewRootNext(s *capnp.Segment) (Next, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Next{st}, err
}

func ReadRootNext(msg *capnp.Message) (Next, error) {
	root, err := msg.RootPtr()
	return Next{root.Struct()}, err
}

func (s Next) String() string {
	str, _ := text.Marshal(0x9acc76381ab821b6, s.Struct)
	return str
}

// Next_List is a list of Next.
type Next_List struct{ capnp.List }

// NewNext creates a new list of Next.
func NewNext_List(s *capnp.Segment, sz int32) (Next_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Next_List{l}, err
}

func (s Next_List) At(i int) Next { return Next{s.List.Struct(i)} }

func (s Next_List) Set(i int, v Next) error { return s.List.SetStruct(i, v.Struct) }

func (s Next_List) String() string {
	str, _ := text.MarshalList(0x9acc76381ab821b6, s.List)
	return str
}

// Next_Promise is a wrapper for a Next promised by a client call.
type Next_Promise struct{ *capnp.Pipeline }

func (p Next_Promise) Struct() (Next, error) {
	s, err := p.Pipeline.Struct()
	return Next{s}, err
}

type NotEqualTo struct{ capnp.Struct }

// NotEqualTo_TypeID is the unique identifier for the type NotEqualTo.
const NotEqualTo_TypeID = 0xfe03535863e28eb6

func NewNotEqualTo(s *capnp.Segment) (NotEqualTo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return NotEqualTo{st}, err
}

func NewRootNotEqualTo(s *capnp.Segment) (NotEqualTo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return NotEqualTo{st}, err
}

func ReadRootNotEqualTo(msg *capnp.Message) (NotEqualTo, error) {
	root, err := msg.RootPtr()
	return NotEqualTo{root.Struct()}, err
}

func (s NotEqualTo) String() string {
	str, _ := text.Marshal(0xfe03535863e28eb6, s.Struct)
	return str
}

// NotEqualTo_List is a list of NotEqualTo.
type NotEqualTo_List struct{ capnp.List }

// NewNotEqualTo creates a new list of NotEqualTo.
func NewNotEqualTo_List(s *capnp.Segment, sz int32) (NotEqualTo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return NotEqualTo_List{l}, err
}

func (s NotEqualTo_List) At(i int) NotEqualTo { return NotEqualTo{s.List.Struct(i)} }

func (s NotEqualTo_List) Set(i int, v NotEqualTo) error { return s.List.SetStruct(i, v.Struct) }

func (s NotEqualTo_List) String() string {
	str, _ := text.MarshalList(0xfe03535863e28eb6, s.List)
	return str
}

// NotEqualTo_Promise is a wrapper for a NotEqualTo promised by a client call.
type NotEqualTo_Promise struct{ *capnp.Pipeline }

func (p NotEqualTo_Promise) Struct() (NotEqualTo, error) {
	s, err := p.Pipeline.Struct()
	return NotEqualTo{s}, err
}

type NumList struct{ capnp.Struct }

// NumList_TypeID is the unique identifier for the type NumList.
const NumList_TypeID = 0x8117002cdfa91921

func NewNumList(s *capnp.Segment) (NumList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NumList{st}, err
}

func NewRootNumList(s *capnp.Segment) (NumList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NumList{st}, err
}

func ReadRootNumList(msg *capnp.Message) (NumList, error) {
	root, err := msg.RootPtr()
	return NumList{root.Struct()}, err
}

func (s NumList) String() string {
	str, _ := text.Marshal(0x8117002cdfa91921, s.Struct)
	return str
}

func (s NumList) Values() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s NumList) HasValues() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NumList) SetValues(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s NumList) NewValues(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// NumList_List is a list of NumList.
type NumList_List struct{ capnp.List }

// NewNumList creates a new list of NumList.
func NewNumList_List(s *capnp.Segment, sz int32) (NumList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return NumList_List{l}, err
}

func (s NumList_List) At(i int) NumList { return NumList{s.List.Struct(i)} }

func (s NumList_List) Set(i int, v NumList) error { return s.List.SetStruct(i, v.Struct) }

func (s NumList_List) String() string {
	str, _ := text.MarshalList(0x8117002cdfa91921, s.List)
	return str
}

// NumList_Promise is a wrapper for a NumList promised by a client call.
type NumList_Promise struct{ *capnp.Pipeline }

func (p NumList_Promise) Struct() (NumList, error) {
	s, err := p.Pipeline.Struct()
	return NumList{s}, err
}

type NumValue struct{ capnp.Struct }

// NumValue_TypeID is the unique identifier for the type NumValue.
const NumValue_TypeID = 0xa0840f88af1c7706

func NewNumValue(s *capnp.Segment) (NumValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NumValue{st}, err
}

func NewRootNumValue(s *capnp.Segment) (NumValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NumValue{st}, err
}

func ReadRootNumValue(msg *capnp.Message) (NumValue, error) {
	root, err := msg.RootPtr()
	return NumValue{root.Struct()}, err
}

func (s NumValue) String() string {
	str, _ := text.Marshal(0xa0840f88af1c7706, s.Struct)
	return str
}

func (s NumValue) Num() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s NumValue) SetNum(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// NumValue_List is a list of NumValue.
type NumValue_List struct{ capnp.List }

// NewNumValue creates a new list of NumValue.
func NewNumValue_List(s *capnp.Segment, sz int32) (NumValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return NumValue_List{l}, err
}

func (s NumValue_List) At(i int) NumValue { return NumValue{s.List.Struct(i)} }

func (s NumValue_List) Set(i int, v NumValue) error { return s.List.SetStruct(i, v.Struct) }

func (s NumValue_List) String() string {
	str, _ := text.MarshalList(0xa0840f88af1c7706, s.List)
	return str
}

// NumValue_Promise is a wrapper for a NumValue promised by a client call.
type NumValue_Promise struct{ *capnp.Pipeline }

func (p NumValue_Promise) Struct() (NumValue, error) {
	s, err := p.Pipeline.Struct()
	return NumValue{s}, err
}

type ObjectExists struct{ capnp.Struct }

// ObjectExists_TypeID is the unique identifier for the type ObjectExists.
const ObjectExists_TypeID = 0xeb65b9493136f4e9

func NewObjectExists(s *capnp.Segment) (ObjectExists, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ObjectExists{st}, err
}

func NewRootObjectExists(s *capnp.Segment) (ObjectExists, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ObjectExists{st}, err
}

func ReadRootObjectExists(msg *capnp.Message) (ObjectExists, error) {
	root, err := msg.RootPtr()
	return ObjectExists{root.Struct()}, err
}

func (s ObjectExists) String() string {
	str, _ := text.Marshal(0xeb65b9493136f4e9, s.Struct)
	return str
}

func (s ObjectExists) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s ObjectExists) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ObjectExists) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s ObjectExists) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ObjectExists_List is a list of ObjectExists.
type ObjectExists_List struct{ capnp.List }

// NewObjectExists creates a new list of ObjectExists.
func NewObjectExists_List(s *capnp.Segment, sz int32) (ObjectExists_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ObjectExists_List{l}, err
}

func (s ObjectExists_List) At(i int) ObjectExists { return ObjectExists{s.List.Struct(i)} }

func (s ObjectExists_List) Set(i int, v ObjectExists) error { return s.List.SetStruct(i, v.Struct) }

func (s ObjectExists_List) String() string {
	str, _ := text.MarshalList(0xeb65b9493136f4e9, s.List)
	return str
}

// ObjectExists_Promise is a wrapper for a ObjectExists promised by a client call.
type ObjectExists_Promise struct{ *capnp.Pipeline }

func (p ObjectExists_Promise) Struct() (ObjectExists, error) {
	s, err := p.Pipeline.Struct()
	return ObjectExists{s}, err
}

func (p ObjectExists_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Paragraph struct{ capnp.Struct }

// Paragraph_TypeID is the unique identifier for the type Paragraph.
const Paragraph_TypeID = 0x8713039dfed99d40

func NewParagraph(s *capnp.Segment) (Paragraph, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Paragraph{st}, err
}

func NewRootParagraph(s *capnp.Segment) (Paragraph, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Paragraph{st}, err
}

func ReadRootParagraph(msg *capnp.Message) (Paragraph, error) {
	root, err := msg.RootPtr()
	return Paragraph{root.Struct()}, err
}

func (s Paragraph) String() string {
	str, _ := text.Marshal(0x8713039dfed99d40, s.Struct)
	return str
}

// Paragraph_List is a list of Paragraph.
type Paragraph_List struct{ capnp.List }

// NewParagraph creates a new list of Paragraph.
func NewParagraph_List(s *capnp.Segment, sz int32) (Paragraph_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Paragraph_List{l}, err
}

func (s Paragraph_List) At(i int) Paragraph { return Paragraph{s.List.Struct(i)} }

func (s Paragraph_List) Set(i int, v Paragraph) error { return s.List.SetStruct(i, v.Struct) }

func (s Paragraph_List) String() string {
	str, _ := text.MarshalList(0x8713039dfed99d40, s.List)
	return str
}

// Paragraph_Promise is a wrapper for a Paragraph promised by a client call.
type Paragraph_Promise struct{ *capnp.Pipeline }

func (p Paragraph_Promise) Struct() (Paragraph, error) {
	s, err := p.Pipeline.Struct()
	return Paragraph{s}, err
}

type PrintNum struct{ capnp.Struct }

// PrintNum_TypeID is the unique identifier for the type PrintNum.
const PrintNum_TypeID = 0xfee08ce6db9d2add

func NewPrintNum(s *capnp.Segment) (PrintNum, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PrintNum{st}, err
}

func NewRootPrintNum(s *capnp.Segment) (PrintNum, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PrintNum{st}, err
}

func ReadRootPrintNum(msg *capnp.Message) (PrintNum, error) {
	root, err := msg.RootPtr()
	return PrintNum{root.Struct()}, err
}

func (s PrintNum) String() string {
	str, _ := text.Marshal(0xfee08ce6db9d2add, s.Struct)
	return str
}

func (s PrintNum) Num() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s PrintNum) HasNum() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PrintNum) SetNum(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNum sets the num field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s PrintNum) NewNum() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PrintNum_List is a list of PrintNum.
type PrintNum_List struct{ capnp.List }

// NewPrintNum creates a new list of PrintNum.
func NewPrintNum_List(s *capnp.Segment, sz int32) (PrintNum_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PrintNum_List{l}, err
}

func (s PrintNum_List) At(i int) PrintNum { return PrintNum{s.List.Struct(i)} }

func (s PrintNum_List) Set(i int, v PrintNum) error { return s.List.SetStruct(i, v.Struct) }

func (s PrintNum_List) String() string {
	str, _ := text.MarshalList(0xfee08ce6db9d2add, s.List)
	return str
}

// PrintNum_Promise is a wrapper for a PrintNum promised by a client call.
type PrintNum_Promise struct{ *capnp.Pipeline }

func (p PrintNum_Promise) Struct() (PrintNum, error) {
	s, err := p.Pipeline.Struct()
	return PrintNum{s}, err
}

func (p PrintNum_Promise) Num() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PrintNumWord struct{ capnp.Struct }

// PrintNumWord_TypeID is the unique identifier for the type PrintNumWord.
const PrintNumWord_TypeID = 0xa076d33f5e383b94

func NewPrintNumWord(s *capnp.Segment) (PrintNumWord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PrintNumWord{st}, err
}

func NewRootPrintNumWord(s *capnp.Segment) (PrintNumWord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PrintNumWord{st}, err
}

func ReadRootPrintNumWord(msg *capnp.Message) (PrintNumWord, error) {
	root, err := msg.RootPtr()
	return PrintNumWord{root.Struct()}, err
}

func (s PrintNumWord) String() string {
	str, _ := text.Marshal(0xa076d33f5e383b94, s.Struct)
	return str
}

func (s PrintNumWord) Num() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s PrintNumWord) HasNum() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PrintNumWord) SetNum(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNum sets the num field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s PrintNumWord) NewNum() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PrintNumWord_List is a list of PrintNumWord.
type PrintNumWord_List struct{ capnp.List }

// NewPrintNumWord creates a new list of PrintNumWord.
func NewPrintNumWord_List(s *capnp.Segment, sz int32) (PrintNumWord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PrintNumWord_List{l}, err
}

func (s PrintNumWord_List) At(i int) PrintNumWord { return PrintNumWord{s.List.Struct(i)} }

func (s PrintNumWord_List) Set(i int, v PrintNumWord) error { return s.List.SetStruct(i, v.Struct) }

func (s PrintNumWord_List) String() string {
	str, _ := text.MarshalList(0xa076d33f5e383b94, s.List)
	return str
}

// PrintNumWord_Promise is a wrapper for a PrintNumWord promised by a client call.
type PrintNumWord_Promise struct{ *capnp.Pipeline }

func (p PrintNumWord_Promise) Struct() (PrintNumWord, error) {
	s, err := p.Pipeline.Struct()
	return PrintNumWord{s}, err
}

func (p PrintNumWord_Promise) Num() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ProductOf struct{ capnp.Struct }

// ProductOf_TypeID is the unique identifier for the type ProductOf.
const ProductOf_TypeID = 0xfffdfd1009a67345

func NewProductOf(s *capnp.Segment) (ProductOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ProductOf{st}, err
}

func NewRootProductOf(s *capnp.Segment) (ProductOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ProductOf{st}, err
}

func ReadRootProductOf(msg *capnp.Message) (ProductOf, error) {
	root, err := msg.RootPtr()
	return ProductOf{root.Struct()}, err
}

func (s ProductOf) String() string {
	str, _ := text.Marshal(0xfffdfd1009a67345, s.Struct)
	return str
}

func (s ProductOf) A() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s ProductOf) HasA() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ProductOf) SetA(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA sets the a field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s ProductOf) NewA() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ProductOf) B() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s ProductOf) HasB() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ProductOf) SetB(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewB sets the b field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s ProductOf) NewB() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// ProductOf_List is a list of ProductOf.
type ProductOf_List struct{ capnp.List }

// NewProductOf creates a new list of ProductOf.
func NewProductOf_List(s *capnp.Segment, sz int32) (ProductOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ProductOf_List{l}, err
}

func (s ProductOf_List) At(i int) ProductOf { return ProductOf{s.List.Struct(i)} }

func (s ProductOf_List) Set(i int, v ProductOf) error { return s.List.SetStruct(i, v.Struct) }

func (s ProductOf_List) String() string {
	str, _ := text.MarshalList(0xfffdfd1009a67345, s.List)
	return str
}

// ProductOf_Promise is a wrapper for a ProductOf promised by a client call.
type ProductOf_Promise struct{ *capnp.Pipeline }

func (p ProductOf_Promise) Struct() (ProductOf, error) {
	s, err := p.Pipeline.Struct()
	return ProductOf{s}, err
}

func (p ProductOf_Promise) A() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ProductOf_Promise) B() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type PutAtField struct{ capnp.Struct }

// PutAtField_TypeID is the unique identifier for the type PutAtField.
const PutAtField_TypeID = 0xa912305a41b0825b

func NewPutAtField(s *capnp.Segment) (PutAtField, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PutAtField{st}, err
}

func NewRootPutAtField(s *capnp.Segment) (PutAtField, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PutAtField{st}, err
}

func ReadRootPutAtField(msg *capnp.Message) (PutAtField, error) {
	root, err := msg.RootPtr()
	return PutAtField{root.Struct()}, err
}

func (s PutAtField) String() string {
	str, _ := text.Marshal(0xa912305a41b0825b, s.Struct)
	return str
}

func (s PutAtField) Into() (IntoTargetFields, error) {
	p, err := s.Struct.Ptr(0)
	return IntoTargetFields{Struct: p.Struct()}, err
}

func (s PutAtField) HasInto() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PutAtField) SetInto(v IntoTargetFields) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInto sets the into field to a newly
// allocated IntoTargetFields struct, preferring placement in s's segment.
func (s PutAtField) NewInto() (IntoTargetFields, error) {
	ss, err := NewIntoTargetFields(s.Struct.Segment())
	if err != nil {
		return IntoTargetFields{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PutAtField) From() (rtx.Assignment, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Assignment{Struct: p.Struct()}, err
}

func (s PutAtField) HasFrom() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PutAtField) SetFrom(v rtx.Assignment) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated rtx.Assignment struct, preferring placement in s's segment.
func (s PutAtField) NewFrom() (rtx.Assignment, error) {
	ss, err := rtx.NewAssignment(s.Struct.Segment())
	if err != nil {
		return rtx.Assignment{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s PutAtField) AtField() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s PutAtField) HasAtField() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PutAtField) AtFieldBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s PutAtField) SetAtField(v string) error {
	return s.Struct.SetText(2, v)
}

// PutAtField_List is a list of PutAtField.
type PutAtField_List struct{ capnp.List }

// NewPutAtField creates a new list of PutAtField.
func NewPutAtField_List(s *capnp.Segment, sz int32) (PutAtField_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return PutAtField_List{l}, err
}

func (s PutAtField_List) At(i int) PutAtField { return PutAtField{s.List.Struct(i)} }

func (s PutAtField_List) Set(i int, v PutAtField) error { return s.List.SetStruct(i, v.Struct) }

func (s PutAtField_List) String() string {
	str, _ := text.MarshalList(0xa912305a41b0825b, s.List)
	return str
}

// PutAtField_Promise is a wrapper for a PutAtField promised by a client call.
type PutAtField_Promise struct{ *capnp.Pipeline }

func (p PutAtField_Promise) Struct() (PutAtField, error) {
	s, err := p.Pipeline.Struct()
	return PutAtField{s}, err
}

func (p PutAtField_Promise) Into() IntoTargetFields_Promise {
	return IntoTargetFields_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PutAtField_Promise) From() rtx.Assignment_Promise {
	return rtx.Assignment_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type QuotientOf struct{ capnp.Struct }

// QuotientOf_TypeID is the unique identifier for the type QuotientOf.
const QuotientOf_TypeID = 0xbdd9ef9dd8153525

func NewQuotientOf(s *capnp.Segment) (QuotientOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return QuotientOf{st}, err
}

func NewRootQuotientOf(s *capnp.Segment) (QuotientOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return QuotientOf{st}, err
}

func ReadRootQuotientOf(msg *capnp.Message) (QuotientOf, error) {
	root, err := msg.RootPtr()
	return QuotientOf{root.Struct()}, err
}

func (s QuotientOf) String() string {
	str, _ := text.Marshal(0xbdd9ef9dd8153525, s.Struct)
	return str
}

func (s QuotientOf) A() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s QuotientOf) HasA() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s QuotientOf) SetA(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA sets the a field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s QuotientOf) NewA() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s QuotientOf) B() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s QuotientOf) HasB() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s QuotientOf) SetB(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewB sets the b field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s QuotientOf) NewB() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// QuotientOf_List is a list of QuotientOf.
type QuotientOf_List struct{ capnp.List }

// NewQuotientOf creates a new list of QuotientOf.
func NewQuotientOf_List(s *capnp.Segment, sz int32) (QuotientOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return QuotientOf_List{l}, err
}

func (s QuotientOf_List) At(i int) QuotientOf { return QuotientOf{s.List.Struct(i)} }

func (s QuotientOf_List) Set(i int, v QuotientOf) error { return s.List.SetStruct(i, v.Struct) }

func (s QuotientOf_List) String() string {
	str, _ := text.MarshalList(0xbdd9ef9dd8153525, s.List)
	return str
}

// QuotientOf_Promise is a wrapper for a QuotientOf promised by a client call.
type QuotientOf_Promise struct{ *capnp.Pipeline }

func (p QuotientOf_Promise) Struct() (QuotientOf, error) {
	s, err := p.Pipeline.Struct()
	return QuotientOf{s}, err
}

func (p QuotientOf_Promise) A() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p QuotientOf_Promise) B() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type RemainderOf struct{ capnp.Struct }

// RemainderOf_TypeID is the unique identifier for the type RemainderOf.
const RemainderOf_TypeID = 0x8cde518c70ef5445

func NewRemainderOf(s *capnp.Segment) (RemainderOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RemainderOf{st}, err
}

func NewRootRemainderOf(s *capnp.Segment) (RemainderOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RemainderOf{st}, err
}

func ReadRootRemainderOf(msg *capnp.Message) (RemainderOf, error) {
	root, err := msg.RootPtr()
	return RemainderOf{root.Struct()}, err
}

func (s RemainderOf) String() string {
	str, _ := text.Marshal(0x8cde518c70ef5445, s.Struct)
	return str
}

func (s RemainderOf) A() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s RemainderOf) HasA() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RemainderOf) SetA(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA sets the a field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s RemainderOf) NewA() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s RemainderOf) B() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s RemainderOf) HasB() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RemainderOf) SetB(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewB sets the b field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s RemainderOf) NewB() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// RemainderOf_List is a list of RemainderOf.
type RemainderOf_List struct{ capnp.List }

// NewRemainderOf creates a new list of RemainderOf.
func NewRemainderOf_List(s *capnp.Segment, sz int32) (RemainderOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RemainderOf_List{l}, err
}

func (s RemainderOf_List) At(i int) RemainderOf { return RemainderOf{s.List.Struct(i)} }

func (s RemainderOf_List) Set(i int, v RemainderOf) error { return s.List.SetStruct(i, v.Struct) }

func (s RemainderOf_List) String() string {
	str, _ := text.MarshalList(0x8cde518c70ef5445, s.List)
	return str
}

// RemainderOf_Promise is a wrapper for a RemainderOf promised by a client call.
type RemainderOf_Promise struct{ *capnp.Pipeline }

func (p RemainderOf_Promise) Struct() (RemainderOf, error) {
	s, err := p.Pipeline.Struct()
	return RemainderOf{s}, err
}

func (p RemainderOf_Promise) A() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p RemainderOf_Promise) B() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Response struct{ capnp.Struct }

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xdbc30f48286b6a6b

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xdbc30f48286b6a6b, s.Struct)
	return str
}

func (s Response) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Response) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Response) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Response) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s Response) HasText() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Response) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s Response) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xdbc30f48286b6a6b, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

func (p Response_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Row struct{ capnp.Struct }

// Row_TypeID is the unique identifier for the type Row.
const Row_TypeID = 0xa50aa319d7d7c9ff

func NewRow(s *capnp.Segment) (Row, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Row{st}, err
}

func NewRootRow(s *capnp.Segment) (Row, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Row{st}, err
}

func ReadRootRow(msg *capnp.Message) (Row, error) {
	root, err := msg.RootPtr()
	return Row{root.Struct()}, err
}

func (s Row) String() string {
	str, _ := text.Marshal(0xa50aa319d7d7c9ff, s.Struct)
	return str
}

func (s Row) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Row) HasExe() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Row) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Row) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Row_List is a list of Row.
type Row_List struct{ capnp.List }

// NewRow creates a new list of Row.
func NewRow_List(s *capnp.Segment, sz int32) (Row_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Row_List{l}, err
}

func (s Row_List) At(i int) Row { return Row{s.List.Struct(i)} }

func (s Row_List) Set(i int, v Row) error { return s.List.SetStruct(i, v.Struct) }

func (s Row_List) String() string {
	str, _ := text.MarshalList(0xa50aa319d7d7c9ff, s.List)
	return str
}

// Row_Promise is a wrapper for a Row promised by a client call.
type Row_Promise struct{ *capnp.Pipeline }

func (p Row_Promise) Struct() (Row, error) {
	s, err := p.Pipeline.Struct()
	return Row{s}, err
}

type Rows struct{ capnp.Struct }

// Rows_TypeID is the unique identifier for the type Rows.
const Rows_TypeID = 0xd0d3a85442ac5d5d

func NewRows(s *capnp.Segment) (Rows, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Rows{st}, err
}

func NewRootRows(s *capnp.Segment) (Rows, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Rows{st}, err
}

func ReadRootRows(msg *capnp.Message) (Rows, error) {
	root, err := msg.RootPtr()
	return Rows{root.Struct()}, err
}

func (s Rows) String() string {
	str, _ := text.Marshal(0xd0d3a85442ac5d5d, s.Struct)
	return str
}

func (s Rows) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Rows) HasExe() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Rows) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Rows) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Rows_List is a list of Rows.
type Rows_List struct{ capnp.List }

// NewRows creates a new list of Rows.
func NewRows_List(s *capnp.Segment, sz int32) (Rows_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Rows_List{l}, err
}

func (s Rows_List) At(i int) Rows { return Rows{s.List.Struct(i)} }

func (s Rows_List) Set(i int, v Rows) error { return s.List.SetStruct(i, v.Struct) }

func (s Rows_List) String() string {
	str, _ := text.MarshalList(0xd0d3a85442ac5d5d, s.List)
	return str
}

// Rows_Promise is a wrapper for a Rows promised by a client call.
type Rows_Promise struct{ *capnp.Pipeline }

func (p Rows_Promise) Struct() (Rows, error) {
	s, err := p.Pipeline.Struct()
	return Rows{s}, err
}

type Say struct{ capnp.Struct }

// Say_TypeID is the unique identifier for the type Say.
const Say_TypeID = 0xa8979c2a5ccfbf0e

func NewSay(s *capnp.Segment) (Say, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Say{st}, err
}

func NewRootSay(s *capnp.Segment) (Say, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Say{st}, err
}

func ReadRootSay(msg *capnp.Message) (Say, error) {
	root, err := msg.RootPtr()
	return Say{root.Struct()}, err
}

func (s Say) String() string {
	str, _ := text.Marshal(0xa8979c2a5ccfbf0e, s.Struct)
	return str
}

func (s Say) Text() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s Say) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Say) SetText(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewText sets the text field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s Say) NewText() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Say_List is a list of Say.
type Say_List struct{ capnp.List }

// NewSay creates a new list of Say.
func NewSay_List(s *capnp.Segment, sz int32) (Say_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Say_List{l}, err
}

func (s Say_List) At(i int) Say { return Say{s.List.Struct(i)} }

func (s Say_List) Set(i int, v Say) error { return s.List.SetStruct(i, v.Struct) }

func (s Say_List) String() string {
	str, _ := text.MarshalList(0xa8979c2a5ccfbf0e, s.List)
	return str
}

// Say_Promise is a wrapper for a Say promised by a client call.
type Say_Promise struct{ *capnp.Pipeline }

func (p Say_Promise) Struct() (Say, error) {
	s, err := p.Pipeline.Struct()
	return Say{s}, err
}

func (p Say_Promise) Text() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Send struct{ capnp.Struct }

// Send_TypeID is the unique identifier for the type Send.
const Send_TypeID = 0xf5929658e6b89319

func NewSend(s *capnp.Segment) (Send, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Send{st}, err
}

func NewRootSend(s *capnp.Segment) (Send, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Send{st}, err
}

func ReadRootSend(msg *capnp.Message) (Send, error) {
	root, err := msg.RootPtr()
	return Send{root.Struct()}, err
}

func (s Send) String() string {
	str, _ := text.Marshal(0xf5929658e6b89319, s.Struct)
	return str
}

func (s Send) Event() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Send) HasEvent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Send) EventBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Send) SetEvent(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Send) Path() (rtx.TextListEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextListEval{Struct: p.Struct()}, err
}

func (s Send) HasPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Send) SetPath(v rtx.TextListEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPath sets the path field to a newly
// allocated rtx.TextListEval struct, preferring placement in s's segment.
func (s Send) NewPath() (rtx.TextListEval, error) {
	ss, err := rtx.NewTextListEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextListEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Send) Args() (Argument_List, error) {
	p, err := s.Struct.Ptr(2)
	return Argument_List{List: p.List()}, err
}

func (s Send) HasArgs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Send) SetArgs(v Argument_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated Argument_List, preferring placement in s's segment.
func (s Send) NewArgs(n int32) (Argument_List, error) {
	l, err := NewArgument_List(s.Struct.Segment(), n)
	if err != nil {
		return Argument_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Send_List is a list of Send.
type Send_List struct{ capnp.List }

// NewSend creates a new list of Send.
func NewSend_List(s *capnp.Segment, sz int32) (Send_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Send_List{l}, err
}

func (s Send_List) At(i int) Send { return Send{s.List.Struct(i)} }

func (s Send_List) Set(i int, v Send) error { return s.List.SetStruct(i, v.Struct) }

func (s Send_List) String() string {
	str, _ := text.MarshalList(0xf5929658e6b89319, s.List)
	return str
}

// Send_Promise is a wrapper for a Send promised by a client call.
type Send_Promise struct{ *capnp.Pipeline }

func (p Send_Promise) Struct() (Send, error) {
	s, err := p.Pipeline.Struct()
	return Send{s}, err
}

func (p Send_Promise) Path() rtx.TextListEval_Promise {
	return rtx.TextListEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SetTrait struct{ capnp.Struct }

// SetTrait_TypeID is the unique identifier for the type SetTrait.
const SetTrait_TypeID = 0x80214cf1fe310028

func NewSetTrait(s *capnp.Segment) (SetTrait, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SetTrait{st}, err
}

func NewRootSetTrait(s *capnp.Segment) (SetTrait, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SetTrait{st}, err
}

func ReadRootSetTrait(msg *capnp.Message) (SetTrait, error) {
	root, err := msg.RootPtr()
	return SetTrait{root.Struct()}, err
}

func (s SetTrait) String() string {
	str, _ := text.Marshal(0x80214cf1fe310028, s.Struct)
	return str
}

func (s SetTrait) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s SetTrait) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SetTrait) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s SetTrait) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SetTrait) Trait() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s SetTrait) HasTrait() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SetTrait) SetTrait(v rtx.TextEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTrait sets the trait field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s SetTrait) NewTrait() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SetTrait_List is a list of SetTrait.
type SetTrait_List struct{ capnp.List }

// NewSetTrait creates a new list of SetTrait.
func NewSetTrait_List(s *capnp.Segment, sz int32) (SetTrait_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SetTrait_List{l}, err
}

func (s SetTrait_List) At(i int) SetTrait { return SetTrait{s.List.Struct(i)} }

func (s SetTrait_List) Set(i int, v SetTrait) error { return s.List.SetStruct(i, v.Struct) }

func (s SetTrait_List) String() string {
	str, _ := text.MarshalList(0x80214cf1fe310028, s.List)
	return str
}

// SetTrait_Promise is a wrapper for a SetTrait promised by a client call.
type SetTrait_Promise struct{ *capnp.Pipeline }

func (p SetTrait_Promise) Struct() (SetTrait, error) {
	s, err := p.Pipeline.Struct()
	return SetTrait{s}, err
}

func (p SetTrait_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SetTrait_Promise) Trait() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ShuffleText struct{ capnp.Struct }

// ShuffleText_TypeID is the unique identifier for the type ShuffleText.
const ShuffleText_TypeID = 0x982ceaf849ef1156

func NewShuffleText(s *capnp.Segment) (ShuffleText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ShuffleText{st}, err
}

func NewRootShuffleText(s *capnp.Segment) (ShuffleText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ShuffleText{st}, err
}

func ReadRootShuffleText(msg *capnp.Message) (ShuffleText, error) {
	root, err := msg.RootPtr()
	return ShuffleText{root.Struct()}, err
}

func (s ShuffleText) String() string {
	str, _ := text.Marshal(0x982ceaf849ef1156, s.Struct)
	return str
}

func (s ShuffleText) Seq() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ShuffleText) HasSeq() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ShuffleText) SeqBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ShuffleText) SetSeq(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ShuffleText) Parts() (rtx.TextEval_List, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval_List{List: p.List()}, err
}

func (s ShuffleText) HasParts() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ShuffleText) SetParts(v rtx.TextEval_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewParts sets the parts field to a newly
// allocated rtx.TextEval_List, preferring placement in s's segment.
func (s ShuffleText) NewParts(n int32) (rtx.TextEval_List, error) {
	l, err := rtx.NewTextEval_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.TextEval_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// ShuffleText_List is a list of ShuffleText.
type ShuffleText_List struct{ capnp.List }

// NewShuffleText creates a new list of ShuffleText.
func NewShuffleText_List(s *capnp.Segment, sz int32) (ShuffleText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ShuffleText_List{l}, err
}

func (s ShuffleText_List) At(i int) ShuffleText { return ShuffleText{s.List.Struct(i)} }

func (s ShuffleText_List) Set(i int, v ShuffleText) error { return s.List.SetStruct(i, v.Struct) }

func (s ShuffleText_List) String() string {
	str, _ := text.MarshalList(0x982ceaf849ef1156, s.List)
	return str
}

// ShuffleText_Promise is a wrapper for a ShuffleText promised by a client call.
type ShuffleText_Promise struct{ *capnp.Pipeline }

func (p ShuffleText_Promise) Struct() (ShuffleText, error) {
	s, err := p.Pipeline.Struct()
	return ShuffleText{s}, err
}

type Slash struct{ capnp.Struct }

// Slash_TypeID is the unique identifier for the type Slash.
const Slash_TypeID = 0x8714571008c030ba

func NewSlash(s *capnp.Segment) (Slash, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Slash{st}, err
}

func NewRootSlash(s *capnp.Segment) (Slash, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Slash{st}, err
}

func ReadRootSlash(msg *capnp.Message) (Slash, error) {
	root, err := msg.RootPtr()
	return Slash{root.Struct()}, err
}

func (s Slash) String() string {
	str, _ := text.Marshal(0x8714571008c030ba, s.Struct)
	return str
}

func (s Slash) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Slash) HasExe() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Slash) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Slash) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Slash_List is a list of Slash.
type Slash_List struct{ capnp.List }

// NewSlash creates a new list of Slash.
func NewSlash_List(s *capnp.Segment, sz int32) (Slash_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Slash_List{l}, err
}

func (s Slash_List) At(i int) Slash { return Slash{s.List.Struct(i)} }

func (s Slash_List) Set(i int, v Slash) error { return s.List.SetStruct(i, v.Struct) }

func (s Slash_List) String() string {
	str, _ := text.MarshalList(0x8714571008c030ba, s.List)
	return str
}

// Slash_Promise is a wrapper for a Slash promised by a client call.
type Slash_Promise struct{ *capnp.Pipeline }

func (p Slash_Promise) Struct() (Slash, error) {
	s, err := p.Pipeline.Struct()
	return Slash{s}, err
}

type Softline struct{ capnp.Struct }

// Softline_TypeID is the unique identifier for the type Softline.
const Softline_TypeID = 0xcf350be9cec5bc9a

func NewSoftline(s *capnp.Segment) (Softline, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Softline{st}, err
}

func NewRootSoftline(s *capnp.Segment) (Softline, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Softline{st}, err
}

func ReadRootSoftline(msg *capnp.Message) (Softline, error) {
	root, err := msg.RootPtr()
	return Softline{root.Struct()}, err
}

func (s Softline) String() string {
	str, _ := text.Marshal(0xcf350be9cec5bc9a, s.Struct)
	return str
}

// Softline_List is a list of Softline.
type Softline_List struct{ capnp.List }

// NewSoftline creates a new list of Softline.
func NewSoftline_List(s *capnp.Segment, sz int32) (Softline_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Softline_List{l}, err
}

func (s Softline_List) At(i int) Softline { return Softline{s.List.Struct(i)} }

func (s Softline_List) Set(i int, v Softline) error { return s.List.SetStruct(i, v.Struct) }

func (s Softline_List) String() string {
	str, _ := text.MarshalList(0xcf350be9cec5bc9a, s.List)
	return str
}

// Softline_Promise is a wrapper for a Softline promised by a client call.
type Softline_Promise struct{ *capnp.Pipeline }

func (p Softline_Promise) Struct() (Softline, error) {
	s, err := p.Pipeline.Struct()
	return Softline{s}, err
}

type Span struct{ capnp.Struct }

// Span_TypeID is the unique identifier for the type Span.
const Span_TypeID = 0xa35d3b6d50378bf3

func NewSpan(s *capnp.Segment) (Span, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Span{st}, err
}

func NewRootSpan(s *capnp.Segment) (Span, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Span{st}, err
}

func ReadRootSpan(msg *capnp.Message) (Span, error) {
	root, err := msg.RootPtr()
	return Span{root.Struct()}, err
}

func (s Span) String() string {
	str, _ := text.Marshal(0xa35d3b6d50378bf3, s.Struct)
	return str
}

func (s Span) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.Execute_List{List: p.List()}, err
}

func (s Span) HasExe() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Span) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s Span) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Span_List is a list of Span.
type Span_List struct{ capnp.List }

// NewSpan creates a new list of Span.
func NewSpan_List(s *capnp.Segment, sz int32) (Span_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Span_List{l}, err
}

func (s Span_List) At(i int) Span { return Span{s.List.Struct(i)} }

func (s Span_List) Set(i int, v Span) error { return s.List.SetStruct(i, v.Struct) }

func (s Span_List) String() string {
	str, _ := text.MarshalList(0xa35d3b6d50378bf3, s.List)
	return str
}

// Span_Promise is a wrapper for a Span promised by a client call.
type Span_Promise struct{ *capnp.Pipeline }

func (p Span_Promise) Struct() (Span, error) {
	s, err := p.Pipeline.Struct()
	return Span{s}, err
}

type StoppingText struct{ capnp.Struct }

// StoppingText_TypeID is the unique identifier for the type StoppingText.
const StoppingText_TypeID = 0xf2eb6108931f1f92

func NewStoppingText(s *capnp.Segment) (StoppingText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StoppingText{st}, err
}

func NewRootStoppingText(s *capnp.Segment) (StoppingText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StoppingText{st}, err
}

func ReadRootStoppingText(msg *capnp.Message) (StoppingText, error) {
	root, err := msg.RootPtr()
	return StoppingText{root.Struct()}, err
}

func (s StoppingText) String() string {
	str, _ := text.Marshal(0xf2eb6108931f1f92, s.Struct)
	return str
}

func (s StoppingText) Seq() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StoppingText) HasSeq() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s StoppingText) SeqBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StoppingText) SetSeq(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StoppingText) Parts() (rtx.TextEval_List, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval_List{List: p.List()}, err
}

func (s StoppingText) HasParts() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s StoppingText) SetParts(v rtx.TextEval_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewParts sets the parts field to a newly
// allocated rtx.TextEval_List, preferring placement in s's segment.
func (s StoppingText) NewParts(n int32) (rtx.TextEval_List, error) {
	l, err := rtx.NewTextEval_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.TextEval_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// StoppingText_List is a list of StoppingText.
type StoppingText_List struct{ capnp.List }

// NewStoppingText creates a new list of StoppingText.
func NewStoppingText_List(s *capnp.Segment, sz int32) (StoppingText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return StoppingText_List{l}, err
}

func (s StoppingText_List) At(i int) StoppingText { return StoppingText{s.List.Struct(i)} }

func (s StoppingText_List) Set(i int, v StoppingText) error { return s.List.SetStruct(i, v.Struct) }

func (s StoppingText_List) String() string {
	str, _ := text.MarshalList(0xf2eb6108931f1f92, s.List)
	return str
}

// StoppingText_Promise is a wrapper for a StoppingText promised by a client call.
type StoppingText_Promise struct{ *capnp.Pipeline }

func (p StoppingText_Promise) Struct() (StoppingText, error) {
	s, err := p.Pipeline.Struct()
	return StoppingText{s}, err
}

type SumOf struct{ capnp.Struct }

// SumOf_TypeID is the unique identifier for the type SumOf.
const SumOf_TypeID = 0x82c9a60e89dfae1c

func NewSumOf(s *capnp.Segment) (SumOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SumOf{st}, err
}

func NewRootSumOf(s *capnp.Segment) (SumOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SumOf{st}, err
}

func ReadRootSumOf(msg *capnp.Message) (SumOf, error) {
	root, err := msg.RootPtr()
	return SumOf{root.Struct()}, err
}

func (s SumOf) String() string {
	str, _ := text.Marshal(0x82c9a60e89dfae1c, s.Struct)
	return str
}

func (s SumOf) A() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s SumOf) HasA() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SumOf) SetA(v rtx.NumberEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA sets the a field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s SumOf) NewA() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SumOf) B() (rtx.NumberEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.NumberEval{Struct: p.Struct()}, err
}

func (s SumOf) HasB() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SumOf) SetB(v rtx.NumberEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewB sets the b field to a newly
// allocated rtx.NumberEval struct, preferring placement in s's segment.
func (s SumOf) NewB() (rtx.NumberEval, error) {
	ss, err := rtx.NewNumberEval(s.Struct.Segment())
	if err != nil {
		return rtx.NumberEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SumOf_List is a list of SumOf.
type SumOf_List struct{ capnp.List }

// NewSumOf creates a new list of SumOf.
func NewSumOf_List(s *capnp.Segment, sz int32) (SumOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SumOf_List{l}, err
}

func (s SumOf_List) At(i int) SumOf { return SumOf{s.List.Struct(i)} }

func (s SumOf_List) Set(i int, v SumOf) error { return s.List.SetStruct(i, v.Struct) }

func (s SumOf_List) String() string {
	str, _ := text.MarshalList(0x82c9a60e89dfae1c, s.List)
	return str
}

// SumOf_Promise is a wrapper for a SumOf promised by a client call.
type SumOf_Promise struct{ *capnp.Pipeline }

func (p SumOf_Promise) Struct() (SumOf, error) {
	s, err := p.Pipeline.Struct()
	return SumOf{s}, err
}

func (p SumOf_Promise) A() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SumOf_Promise) B() rtx.NumberEval_Promise {
	return rtx.NumberEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type TextList struct{ capnp.Struct }

// TextList_TypeID is the unique identifier for the type TextList.
const TextList_TypeID = 0x93dba7c30f677fdb

func NewTextList(s *capnp.Segment) (TextList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TextList{st}, err
}

func NewRootTextList(s *capnp.Segment) (TextList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TextList{st}, err
}

func ReadRootTextList(msg *capnp.Message) (TextList, error) {
	root, err := msg.RootPtr()
	return TextList{root.Struct()}, err
}

func (s TextList) String() string {
	str, _ := text.Marshal(0x93dba7c30f677fdb, s.Struct)
	return str
}

func (s TextList) Values() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s TextList) HasValues() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TextList) SetValues(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s TextList) NewValues(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TextList_List is a list of TextList.
type TextList_List struct{ capnp.List }

// NewTextList creates a new list of TextList.
func NewTextList_List(s *capnp.Segment, sz int32) (TextList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TextList_List{l}, err
}

func (s TextList_List) At(i int) TextList { return TextList{s.List.Struct(i)} }

func (s TextList_List) Set(i int, v TextList) error { return s.List.SetStruct(i, v.Struct) }

func (s TextList_List) String() string {
	str, _ := text.MarshalList(0x93dba7c30f677fdb, s.List)
	return str
}

// TextList_Promise is a wrapper for a TextList promised by a client call.
type TextList_Promise struct{ *capnp.Pipeline }

func (p TextList_Promise) Struct() (TextList, error) {
	s, err := p.Pipeline.Struct()
	return TextList{s}, err
}

type TextValue struct{ capnp.Struct }

// TextValue_TypeID is the unique identifier for the type TextValue.
const TextValue_TypeID = 0x84563c2b3ff25bdc

func NewTextValue(s *capnp.Segment) (TextValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TextValue{st}, err
}

func NewRootTextValue(s *capnp.Segment) (TextValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TextValue{st}, err
}

func ReadRootTextValue(msg *capnp.Message) (TextValue, error) {
	root, err := msg.RootPtr()
	return TextValue{root.Struct()}, err
}

func (s TextValue) String() string {
	str, _ := text.Marshal(0x84563c2b3ff25bdc, s.Struct)
	return str
}

func (s TextValue) Text() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TextValue) HasText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TextValue) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TextValue) SetText(v string) error {
	return s.Struct.SetText(0, v)
}

// TextValue_List is a list of TextValue.
type TextValue_List struct{ capnp.List }

// NewTextValue creates a new list of TextValue.
func NewTextValue_List(s *capnp.Segment, sz int32) (TextValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TextValue_List{l}, err
}

func (s TextValue_List) At(i int) TextValue { return TextValue{s.List.Struct(i)} }

func (s TextValue_List) Set(i int, v TextValue) error { return s.List.SetStruct(i, v.Struct) }

func (s TextValue_List) String() string {
	str, _ := text.MarshalList(0x84563c2b3ff25bdc, s.List)
	return str
}

// TextValue_Promise is a wrapper for a TextValue promised by a client call.
type TextValue_Promise struct{ *capnp.Pipeline }

func (p TextValue_Promise) Struct() (TextValue, error) {
	s, err := p.Pipeline.Struct()
	return TextValue{s}, err
}

type TriggerCycle struct{ capnp.Struct }

// TriggerCycle_TypeID is the unique identifier for the type TriggerCycle.
const TriggerCycle_TypeID = 0xdd724009a1ee7fc3

func NewTriggerCycle(s *capnp.Segment) (TriggerCycle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TriggerCycle{st}, err
}

func NewRootTriggerCycle(s *capnp.Segment) (TriggerCycle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TriggerCycle{st}, err
}

func ReadRootTriggerCycle(msg *capnp.Message) (TriggerCycle, error) {
	root, err := msg.RootPtr()
	return TriggerCycle{root.Struct()}, err
}

func (s TriggerCycle) String() string {
	str, _ := text.Marshal(0xdd724009a1ee7fc3, s.Struct)
	return str
}

// TriggerCycle_List is a list of TriggerCycle.
type TriggerCycle_List struct{ capnp.List }

// NewTriggerCycle creates a new list of TriggerCycle.
func NewTriggerCycle_List(s *capnp.Segment, sz int32) (TriggerCycle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TriggerCycle_List{l}, err
}

func (s TriggerCycle_List) At(i int) TriggerCycle { return TriggerCycle{s.List.Struct(i)} }

func (s TriggerCycle_List) Set(i int, v TriggerCycle) error { return s.List.SetStruct(i, v.Struct) }

func (s TriggerCycle_List) String() string {
	str, _ := text.MarshalList(0xdd724009a1ee7fc3, s.List)
	return str
}

// TriggerCycle_Promise is a wrapper for a TriggerCycle promised by a client call.
type TriggerCycle_Promise struct{ *capnp.Pipeline }

func (p TriggerCycle_Promise) Struct() (TriggerCycle, error) {
	s, err := p.Pipeline.Struct()
	return TriggerCycle{s}, err
}

type TriggerOnce struct{ capnp.Struct }

// TriggerOnce_TypeID is the unique identifier for the type TriggerOnce.
const TriggerOnce_TypeID = 0xb7629c8415587a87

func NewTriggerOnce(s *capnp.Segment) (TriggerOnce, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TriggerOnce{st}, err
}

func NewRootTriggerOnce(s *capnp.Segment) (TriggerOnce, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TriggerOnce{st}, err
}

func ReadRootTriggerOnce(msg *capnp.Message) (TriggerOnce, error) {
	root, err := msg.RootPtr()
	return TriggerOnce{root.Struct()}, err
}

func (s TriggerOnce) String() string {
	str, _ := text.Marshal(0xb7629c8415587a87, s.Struct)
	return str
}

// TriggerOnce_List is a list of TriggerOnce.
type TriggerOnce_List struct{ capnp.List }

// NewTriggerOnce creates a new list of TriggerOnce.
func NewTriggerOnce_List(s *capnp.Segment, sz int32) (TriggerOnce_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TriggerOnce_List{l}, err
}

func (s TriggerOnce_List) At(i int) TriggerOnce { return TriggerOnce{s.List.Struct(i)} }

func (s TriggerOnce_List) Set(i int, v TriggerOnce) error { return s.List.SetStruct(i, v.Struct) }

func (s TriggerOnce_List) String() string {
	str, _ := text.MarshalList(0xb7629c8415587a87, s.List)
	return str
}

// TriggerOnce_Promise is a wrapper for a TriggerOnce promised by a client call.
type TriggerOnce_Promise struct{ *capnp.Pipeline }

func (p TriggerOnce_Promise) Struct() (TriggerOnce, error) {
	s, err := p.Pipeline.Struct()
	return TriggerOnce{s}, err
}

type TriggerSwitch struct{ capnp.Struct }

// TriggerSwitch_TypeID is the unique identifier for the type TriggerSwitch.
const TriggerSwitch_TypeID = 0x9d851d2b7136f540

func NewTriggerSwitch(s *capnp.Segment) (TriggerSwitch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TriggerSwitch{st}, err
}

func NewRootTriggerSwitch(s *capnp.Segment) (TriggerSwitch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TriggerSwitch{st}, err
}

func ReadRootTriggerSwitch(msg *capnp.Message) (TriggerSwitch, error) {
	root, err := msg.RootPtr()
	return TriggerSwitch{root.Struct()}, err
}

func (s TriggerSwitch) String() string {
	str, _ := text.Marshal(0x9d851d2b7136f540, s.Struct)
	return str
}

// TriggerSwitch_List is a list of TriggerSwitch.
type TriggerSwitch_List struct{ capnp.List }

// NewTriggerSwitch creates a new list of TriggerSwitch.
func NewTriggerSwitch_List(s *capnp.Segment, sz int32) (TriggerSwitch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TriggerSwitch_List{l}, err
}

func (s TriggerSwitch_List) At(i int) TriggerSwitch { return TriggerSwitch{s.List.Struct(i)} }

func (s TriggerSwitch_List) Set(i int, v TriggerSwitch) error { return s.List.SetStruct(i, v.Struct) }

func (s TriggerSwitch_List) String() string {
	str, _ := text.MarshalList(0x9d851d2b7136f540, s.List)
	return str
}

// TriggerSwitch_Promise is a wrapper for a TriggerSwitch promised by a client call.
type TriggerSwitch_Promise struct{ *capnp.Pipeline }

func (p TriggerSwitch_Promise) Struct() (TriggerSwitch, error) {
	s, err := p.Pipeline.Struct()
	return TriggerSwitch{s}, err
}

type Var struct{ capnp.Struct }

// Var_TypeID is the unique identifier for the type Var.
const Var_TypeID = 0xc94df1528f12bd43

func NewVar(s *capnp.Segment) (Var, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Var{st}, err
}

func NewRootVar(s *capnp.Segment) (Var, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Var{st}, err
}

func ReadRootVar(msg *capnp.Message) (Var, error) {
	root, err := msg.RootPtr()
	return Var{root.Struct()}, err
}

func (s Var) String() string {
	str, _ := text.Marshal(0xc94df1528f12bd43, s.Struct)
	return str
}

func (s Var) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Var) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Var) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Var) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Var_List is a list of Var.
type Var_List struct{ capnp.List }

// NewVar creates a new list of Var.
func NewVar_List(s *capnp.Segment, sz int32) (Var_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Var_List{l}, err
}

func (s Var_List) At(i int) Var { return Var{s.List.Struct(i)} }

func (s Var_List) Set(i int, v Var) error { return s.List.SetStruct(i, v.Struct) }

func (s Var_List) String() string {
	str, _ := text.MarshalList(0xc94df1528f12bd43, s.List)
	return str
}

// Var_Promise is a wrapper for a Var promised by a client call.
type Var_Promise struct{ *capnp.Pipeline }

func (p Var_Promise) Struct() (Var, error) {
	s, err := p.Pipeline.Struct()
	return Var{s}, err
}

type Variable struct{ capnp.Struct }

// Variable_TypeID is the unique identifier for the type Variable.
const Variable_TypeID = 0xdbff954d8d653fb1

func NewVariable(s *capnp.Segment) (Variable, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Variable{st}, err
}

func NewRootVariable(s *capnp.Segment) (Variable, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Variable{st}, err
}

func ReadRootVariable(msg *capnp.Message) (Variable, error) {
	root, err := msg.RootPtr()
	return Variable{root.Struct()}, err
}

func (s Variable) String() string {
	str, _ := text.Marshal(0xdbff954d8d653fb1, s.Struct)
	return str
}

func (s Variable) At() (reader.Pos, error) {
	p, err := s.Struct.Ptr(0)
	return reader.Pos{Struct: p.Struct()}, err
}

func (s Variable) HasAt() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Variable) SetAt(v reader.Pos) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAt sets the at field to a newly
// allocated reader.Pos struct, preferring placement in s's segment.
func (s Variable) NewAt() (reader.Pos, error) {
	ss, err := reader.NewPos(s.Struct.Segment())
	if err != nil {
		return reader.Pos{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Variable) Str() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Variable) HasStr() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Variable) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Variable) SetStr(v string) error {
	return s.Struct.SetText(1, v)
}

// Variable_List is a list of Variable.
type Variable_List struct{ capnp.List }

// NewVariable creates a new list of Variable.
func NewVariable_List(s *capnp.Segment, sz int32) (Variable_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Variable_List{l}, err
}

func (s Variable_List) At(i int) Variable { return Variable{s.List.Struct(i)} }

func (s Variable_List) Set(i int, v Variable) error { return s.List.SetStruct(i, v.Struct) }

func (s Variable_List) String() string {
	str, _ := text.MarshalList(0xdbff954d8d653fb1, s.List)
	return str
}

// Variable_Promise is a wrapper for a Variable promised by a client call.
type Variable_Promise struct{ *capnp.Pipeline }

func (p Variable_Promise) Struct() (Variable, error) {
	s, err := p.Pipeline.Struct()
	return Variable{s}, err
}

func (p Variable_Promise) At() reader.Pos_Promise {
	return reader.Pos_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type While struct{ capnp.Struct }

// While_TypeID is the unique identifier for the type While.
const While_TypeID = 0xb5167ef8e676676e

func NewWhile(s *capnp.Segment) (While, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return While{st}, err
}

func NewRootWhile(s *capnp.Segment) (While, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return While{st}, err
}

func ReadRootWhile(msg *capnp.Message) (While, error) {
	root, err := msg.RootPtr()
	return While{root.Struct()}, err
}

func (s While) String() string {
	str, _ := text.Marshal(0xb5167ef8e676676e, s.Struct)
	return str
}

func (s While) True() (rtx.BoolEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.BoolEval{Struct: p.Struct()}, err
}

func (s While) HasTrue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s While) SetTrue(v rtx.BoolEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrue sets the true field to a newly
// allocated rtx.BoolEval struct, preferring placement in s's segment.
func (s While) NewTrue() (rtx.BoolEval, error) {
	ss, err := rtx.NewBoolEval(s.Struct.Segment())
	if err != nil {
		return rtx.BoolEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s While) Exe() (rtx.Execute_List, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.Execute_List{List: p.List()}, err
}

func (s While) HasExe() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s While) SetExe(v rtx.Execute_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewExe sets the exe field to a newly
// allocated rtx.Execute_List, preferring placement in s's segment.
func (s While) NewExe(n int32) (rtx.Execute_List, error) {
	l, err := rtx.NewExecute_List(s.Struct.Segment(), n)
	if err != nil {
		return rtx.Execute_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// While_List is a list of While.
type While_List struct{ capnp.List }

// NewWhile creates a new list of While.
func NewWhile_List(s *capnp.Segment, sz int32) (While_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return While_List{l}, err
}

func (s While_List) At(i int) While { return While{s.List.Struct(i)} }

func (s While_List) Set(i int, v While) error { return s.List.SetStruct(i, v.Struct) }

func (s While_List) String() string {
	str, _ := text.MarshalList(0xb5167ef8e676676e, s.List)
	return str
}

// While_Promise is a wrapper for a While promised by a client call.
type While_Promise struct{ *capnp.Pipeline }

func (p While_Promise) Struct() (While, error) {
	s, err := p.Pipeline.Struct()
	return While{s}, err
}

func (p While_Promise) True() rtx.BoolEval_Promise {
	return rtx.BoolEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_db087b68b3c8ece3 = "x\xda\xec}\x7f|T\xd5\xb5\xef\xd9s\x12\x8f\xa8\x18" +
	"\x86\xc5\x0fEp\x0e\x91\x9f!D\x92\x0a\xc1(\x86\x09" +
	"\x09$\x90\xe4d\x92\xe1\xe7\x15\xf0df's\xe4\xcc" +
	"9\x93s\xce\x90\x84\xdaK\x83z[PZE\xed\x95" +
	"\\}\xd5\xa8\xb5P[\x0aW\xfa\x84\xd6_Xz\x15" +
	"\xe5)U\xafE_\xf5\xaaE\x05\xab-\xb4\xde+Z" +
	"\x98\xf7\xd9{f\xceL&{&?\x06\xbd\xf7\xbe\xf7" +
	"\xfe\x0b\xc9\x9a5k\xaf\xbd\xd6\xdak}\xd7\xda\x9bY" +
	"e\x13\xe6;\x8as]\x938\xae\xe9a\x94{\xde\x99" +
	"i\xc5gO\xd6N\xfc\xb6\xf3B\x14y\xff\x8f\xcf\xff" +
	"s\xe0\x9b\xe7\xbf\xc5\xe5:\x04\x8e\x83\xcf\x9c=p\xc6" +
	")\xc0\x19\xa7\x04\xc1\x91\xed\x1c\x8a8_|\xf4\x9b\xcf" +
	"5\xfd\xe8\xdb\\ojD\xa8\x9d\xb0\x13.\x05\x01." +
	"\x05\x096C9\x87\xde\x99x\xe9\x8ew\x0a\xc7v1" +
	"hw@7\xec\x06\x01v\x83\x04\x93G\x95s(2" +
	"\xfeg\xefl\xbe\xf8G/l\xe2\x18r,\x1d\xb5\x05" +
	"V\x8f\x12`\xf5(\x09\x0e\x8e\"r\xfc\xef\xbf;U" +
	">\xe3\xdae\xb7\xb0\xe4\x90G\xef\x04e\xb4\x00\xcah" +
	"\x09\x8e\x8e&\xbc\xe7\xdf\x7f\xf4\xec\xfd<|\xa77u" +
	"\x0e!>=z'\xa01\x02\xa01\x12\xe7\x88\xec\x9f" +
	"\xf5\xcc\xf9#\x96\x8f\xfa\x0e\x8b\xed\xca1[@\x1e#" +
	"\x80<F\x82\xdf\x8f!l\xe7>4\xefp\xc3\xfe1" +
	"[X\xd4\xc5c\xdf\x83yc\xc9OW\x8f%\xb4\x13" +
	"\xeb\xda?\xfa\xe0\xad7\x99\xb4+\xc7\xee\x07y\xac\x00" +
	"\xf2X\x09\x8eP\xea*\xef\x9fB\xb7{\xde\xbe\x9d\xa5" +
	"\x8c\x93c\xf7\xc3\xe9\xb1\x02\x9c\x1e+A\xdb%D\x19" +
	"f\xf3\xa4\xa5_\xfex\xcc\xf7X\xbcO^\xf2\x1e\x9c" +
	"\xb9D\x803\x97Hp\xcf\xa5\x84\xf7\x14\xfc\xd4\x9a\xd0" +
	"\xf9\x81\xef\xa7P\xe7\x12\xea\xbd\x97\xbe\x09\xcf^*\xc0" +
	"\xb3\x97\x96~\x03\x8ds!\x0eE>\xf9\xe5\xbcK>" +
	"\xfe\\\xbe\x83\xc5\xfc\xf0e\x87\xe0\xe8e\x02\x1c\xbdL" +
	"\x02<\x9e0\xbf\xe3\x97\xa3\xdf|`\xcc\x0f\xeedQ" +
	"\xdf:~?l\x1d/\xc0\xd6\xf1\x12\x9c\xa1\xd4_\xfe" +
	"q\xb59\xfe\xc6\xb2m\xaceN\x98\xd0\x03\x93'\x08" +
	"0y\x82\x04\xf7L \xcb|j\x93\xf1\xf8\xe6\xfb\xae" +
	"gR\x8f\xbe\xbc\x1b&\\.\xc0\x84\xcb%\xd8q9" +
	"\xa1\xfe\xfc\x9e\x07\xf3\x7f\xbb\x7f\xfc],I\xa6\xbb\xba" +
	"\xa1\xd8%@\xb1K\x82\xfb]D\x92\xb76\xb6\xe6=" +
	"\xf7\xe8[L\xea']=p\xd0%\xc0A\x97\x04W" +
	"\x8b\x84\xfa\x87O\xfe$\xf7\xfe\x11/\xfd#\x8bZ\x11" +
	"\xbb\xa1M\x14\xa0M\x94\xe0]J-\xef\xdc5\xfb\xa9" +
	"\x0f\xff\xca\xa4F\x13{`\xd8D\x01\x86M\x94\xe0[" +
	"\x13\x09\xf52\xe7\x9fj>?Qx/k\x95\xf7O" +
	"\xdc\x0f\x8fL\x14\xe0\x91\x89\x12L\xcc'\xab\x8c\xfcb" +
	"\xcc\x93\xf7=\x94\xdb\xcd\xe2\xfd\xd3\xfcn\xd8\x9b/\xc0" +
	"\xde|\x09&_Ax\xff\xeb\xd4\xfd\x0d=\xb76u" +
	"3\xfc\xa0\xea\x8a\xfdPw\x85\x00uW\x10?\xa8\xdc" +
	"\xf3\xcf7\xfc\xeb\xa7\x1b\x98lw\\\xb1\x0dv_!" +
	"\xc0\xee+J\xe14e\xfb\x8b\x89O\x8c\x9b\xbb\xfe%" +
	"\x16\xdb\xbaI\x9b\xc03I\x00\xcf$\xc2\xf6\xec\xa9\x09" +
	"/}\xf9\xd6\xe1\xfbXk\xfb\xe9\xa4\x1e\xd8;I\x80" +
	"\xbd\x93$(\x9eL\xd66\xff\xb39m3&\xdcz" +
	"?\x83\xed\xeb\x93\x0f\xc1\xbb\x93\x05xwr)\xe78" +
	"\xbb\xfb\x95\x9bf}\xf7\xfc\xff\xc1\x905w\xca\x1e\x18" +
	">E\x80\xe1S$\xd8:\x85\xc8Z8\xe5\x86;\xaa" +
	"\xee\xc9} E\x04\x9e\x8a0\xe5\x00\xec\x9d\"\xc0\xde" +
	")\x12L\x98\xba\x8bC\x91\xcbo\x9a0l\xed\xb1\xd5" +
	"\x0f\xb0\x04\x9e>m'\x14O\x13\xa0x\x9a\x04?\x9d" +
	"F\x04\xbe\xfb\x9a\xb9k\xca_]\xff\x00KkWO" +
	"?\x00\xee\xe9\x02\xb8\xa7K\xb0o:\x91\xe4\xbc\xf6\xf1" +
	"\xbb\xbe\x9bw\xcb\x03\x9c\xe7B\x94\xba\xbe3\xd3{ " +
	"\xb7@\x80\xdc\x02\x09\xc2\x05\x84\xfa\xde];s\xeb\x1e" +
	"v>\xc8\xe2}O\xc1&\xd8^ \xc0\xf6\x02\x09r" +
	"g\x10\xea\x82\xd9\xdf=pG\xc3\xba\x1e\x16\xf5\xe4\x19" +
	"\x87\xa0x\x86\x00\xc53$x\x92R\xff`\xef\xed\xb7" +
	"\x17mr=\xc4\xa2\xfe\xfd\x8cn86C\x80c3" +
	"$h+$\xd4W.\xaf\xfd\xd9\x9e\x15\x93\x1fbl" +
	"\xcb\xc1\xc2\xdf\xc2\x91B\x01\x8e\x14\x92\xdd\xfe\xcbm\xa5" +
	"\x0d\xc1kV3\xd9\xce\x9c\xb9\x09\x8ag\x0aP<S" +
	"\x82\x1d3\x09\xdbg~\xb2/o\xde\xb3e\x0f\xb3\xa8" +
	"\xcf\xcc<\x00\xb9E\x02\xe4\x16IpO\x11\xa1\x8e\xbc" +
	"\xf0\xc6\x1b\x97>t\xc1#,\xea\xbdE\x1b`_\x91" +
	"\x00\xfb\x8a$(\xbe\x92P;\x16\x1f}\xf5\xd3mg" +
	"\x1eam\xe3\xadW\xf6\xc0\xd6+\x05\xd8z\xa5\x04\xb9" +
	"\xb3\xc86^\xfc\xf4\xcb\xd7\x17\xdc\xf7\x8f?f\xc6\xb0" +
	"Y\x1b`\xf3,\x016\xcf\x92\xe0\xcc,\xc2\xfb\xef6" +
	"\xfd\xdc\xbdj\xd6\xc8\x1d,\x83\x9aP\xbc\x07&\x17\x0b" +
	"0\xb9X\x82\x07\x8b\x89A\xdd8\xfe\x9a\xf9\x87w\x8c" +
	"\xdb\xc1\x0a\xbe]%\xfbas\x89\x00\x9bK\xa4o\x9c" +
	".\xa1\xc1\xf7\x1f\xfe\xe3g[w}h\xeed\x89r" +
	"\xf0\xaan8|\x95\x00\x87\xaf\x92\xa0j6\x11\xe5\xfd" +
	"\x0f\xf3\x7f\xb7\xe5\xba\xbb\x7f\xc2\xa2\x0e\xcf\xee\x86o\xcd" +
	"\x16\xe0[\xb3%\xf8\x84R\x07\x82c\xd6\xcc{d\xd7" +
	"\xcfX\xf67|\xceN\x18=G\x80\xd1s$\xd8:" +
	"\x87PW\xbe\xf4\xc0g/\xfef\xfd.f\xa0\x99s" +
	"\x02\xf6\xcd\x11`\xdf\x9cR8M\xa9\xa7>=o\xfe" +
	"?\x9d}\xfa\xe7,\xea\xba\xd2C\xb0\xb2T\x80\x95\xa5" +
	"\x12|RJ\xa8\xff<\xe7\xd1\x09'\xbd/>\xce\xa2" +
	"\x1e>\xb7\x1bF\xcf\x15`\xf4\\\x09\xba\xe6\x12j\xad" +
	"u\xfd\x07\x9f\xff\xfd\x98\xbd\xac\xcd<8w\x0b\x1c\x9e" +
	"+\xc0\xe1\xb9\x12\xd4]M6\xf3\xa1\xe2\xcdz\xe3%" +
	"\x8e_0m\xfb\xea\x03p\xecj\x01\x8e]-\x81R" +
	"Fx\xffz\xe5\x89\xbb\xbe\xf1\xbbg~\xc1\xb0\xed\xcd" +
	"e\xddpg\x99\x00w\x96\x11\xdb\xfe\xce\x86\x15\xa3o" +
	"\xb9\xaf\xf9\x7f2\x08\xdf-\xdb\x0f\xc7\xcb\x048^V" +
	"\xca9\"\x93g\x8f\xfe\xdd\xfd\x7f:\xfa$K\xda\xe1" +
	"\xd7\xec\x81\xd1\xd7\x080\xfa\x1a\x09\xba\xae!\xd2^\xf6" +
	"\x971W\xdd\xf5\xb7\xe7\x9ef\xb0E\xd7v\xc3\xb0k" +
	"\x05\x18v-\xf9\xfe\x85\xedm\x7fh\xdd\x1c~\x86\x99" +
	"-]\xdb\x03\xab\xaf\x15`\xf5\xb5\xa5\xf0\xe0\xb5\x84\xed" +
	"\xad\xce\xe0}]\xbb\x8e<\xcbR\xc2\xc4y\xdd0}" +
	"\x9e\x00\xd3\xe7I\xb0}\x1eQ\xc2\x96C\xd5o\xaf\x94" +
	"\xeex\x8eE\xbdo\xde6xv\x9e\x00\xcf\xce\x93\xa0" +
	"\xf8:z\xe2\x7fg\xd8\xa1OJ\xbf\xf85\x8b\xdas" +
	"\xdd~Xy\x9d\x00+\xaf+\x85\xfb)\xf5\x8b[\x96" +
	">z\xc2\x179\xc8\xf2\x96w\xaf\xdb\x03\xc7\xaf\x13\xe0" +
	"\xf8u\x12\xac,'\xde\x92sd\xcb\x91\xa76M\xf8" +
	"\x0d3\xa0\xce\xdf\x06\xee\xf9\x02\xb8\xe7K\xb0w>\xe1" +
	"\xed\xdf\xfeq\xc5\xb6\xae\x13L\xea\xd3\xf3\xbb\x01\xb9\x05" +
	"@n\x09:\xdd$7\x9d\xf7w\xab\xa6l\xf9\xe8y" +
	"\xd6\x01\xe7\xee\x81\xddn\x01v\xbb%\x98\\A8/" +
	"xr\xe4\xf7\x1bO\xd6\xbd\xc0\xe2\\U\xb1\x01j*" +
	"\x04\xa8\xa9\x90\xe0IJ\xbd\xf02Q9:\xfe\x91C" +
	"\xac5\xe6.\xe8\x86\xe1\x0b\x04\x18\xbe@\x82\x1d\x0b\xc8" +
	"\x1a\xbb\x7fu\xf0\x7f\x1d\xbfp\xf6\xcb\x8c-\xbf\xb5\xb2" +
	"\x07\xb6V\x0a\xb0\xb5\x92l\xf9\x92\xf7\xef5\x97M\xbc" +
	"\xf9e\x96\x10\xc7+{\xe0d%\xf9\xe9\x93J\"\xc2" +
	"\xea\xd5\x8fUx\x7f\xfc\xea+L\x8f\xaa\xda\x04\xce*" +
	"\x01\x9cU\x12\xdcZE\xa8\xdf\xfd\xfb@{m\xd3\xd3" +
	"GX\xd4G\xab\xde\x83cUt{(\xedG\xc3\xea" +
	"#\xcf\xdc|\xf8\x08kqh\xe1\x1e\x18\xb6P\x80a" +
	"\x0bK\xa1f\xe1.\x0e\x9d\xfd\xe8\xb6oX\xdf\x7f\xe3" +
	"\xb7\x0c\xbeK\x17\xed\x81\xd5\x8b\x04X\xbdH\x82\xc3\x8b" +
	"\x08\xe7\xef\x15\xa1\xe3\x05\xdf\xd7_eI\xf1\xc9\xa2\x9d" +
	"\xf0\xd9\"\x01>[$\x81\\M\xa8'_\xd0\xf1\xdc" +
	"\x9eS]\xaf1\xd4\xd6U\xdd\x03\x9b\xab\x05\xd8\\M" +
	"\xd4\x16~oA\xe3-cw\xbe\xc6b{\xacz\x1b" +
	"|R-\xc0'\xd5\x12\xac\xac!l\x1f>\xb6\xe1c" +
	"\xf5D\xc7\xeb,\xbf\xea\xac\xd9\x06]5\x02t\xd5H" +
	"p\xb2\x86\xf8\xd5\xe2\x9b_U\xba^\\\xfa\x06C\x88" +
	"\xed\x8b\xb7\xc1\x83\x8b\x05xp1\x11\xc2\xf1\xc5/\x8f" +
	"\x98s\xee\xfe\x1ds\xef\x16\xef\x84\x93\x8b\x058\xb9\xb8" +
	"\x14\xae^B\x1dp\xdcU\x7f=\xfev\xdbQ\x96\x8e" +
	"\x95%\xfb\xa1m\x89\x00mK$8\xbe\x84\x18\xd0\xba" +
	"\x1b\xd7M\xab\xce{\xee-\x96\xc8/\xd4\xf6\xc0\x91Z" +
	"\x01\x8e\xd4JPUGD\xde]\x8e\xb7\xd6\xdd\x13a" +
	"R\xbf[\xd7\x03\xc7\xeb\x048^W\x0a\xd3\xeb\x09\xf5" +
	"s\x1b?}p\xd8|\xe3\xf7\x8c\x05\x1e\xae?\x00\xaf" +
	"\xd7\x0b\xf0z=\x09s\x1b\xff6\xea\xcbw>\x0c\xbd" +
	"\xcfb{\xba~\x13\x9c\xa9\x17\xe0L})\xcc\x93\x08" +
	"[\xa1\xee\xcb\x95\x8b\x83\xaf\xfe\x81Y\xdeH\xdb\xe0\xb4" +
	"$\xc0iI\x02\xb9\x81\x0aQ\xb9|\xd5\x9dO<\xfd" +
	"!33h\xd8\x02\xb9\x1e\x01r=\x12tz\x88\xf2" +
	"\xde.Y\xf0\xcd\x8d/\xff\x9aI\xbd\xdd\xb3\x07\x1e\xf4" +
	"\x08\xf0\xa0G\x82\xc9\x8d\x84z\xe9\"\xdf\x03;\xdf\x1b" +
	"\xf1\x11K\x92\xaa\xc6\x9dP\xd7(@]\xa3\x04\x87\x1b" +
	"iFzM\xdd\xaf\x0f\xac\x9cx\x82E\xdd\xd5\xb4\x07" +
	"67\x09\xb0\xb9I\x82\xd3M\x84\xba\xea\x95io\xbf" +
	"x\xac\xfd\x04Cy\x9d\xde\xfd\xd0\xe5\x15\xa0\xcbK\xac" +
	"\xe3\x87\xdd\x9f4\x8d-?t\x82%\xf2\xbb\xdemp" +
	"\xdc+\xc0q\xaf\x04\xf2R\"\xf2\xca\x9f_x\xf3\xaf" +
	"|\xa7\x99B\xec]\xba\x09\xf6-\x15`\xdfR\x09f" +
	"/#B\x1c\xff\xeb\x9c\xe2\x9a}\xf8cf\x06\xb1\xec" +
	"\x00\x1c^&\xc0\xe1e\x12\xd4,'\xbcO7\xfe\xc7" +
	"\x1f\x1aN\xfe\xc3\xa7,\xde[\x97\x1f\x82\xed\xcb\x05\xd8" +
	"\xbe\\\x82\xe1+\x08\xef\xf2\xc7~\xb3\xcb\xf7\xe1\x13\x7f" +
	"f\xf1\xbesE\x0fl_!\xc0\xf6\x15\xa5pt\x05" +
	"\xe1\xbd\xcd\xe5\xba\xeb|\xf9\xe3S,\xde3W\x1e\x80" +
	"\xd9+\x05\x98\xbdR\x82\x83+\x09\xef\xb5\xf5\xff\x96\xb3" +
	"\xf0W\x91S\xccceU7\xac\\E\xa3\xc8*\xc2" +
	"\xf9\xd2\xbb\x9e\xf8`\xc5\x0f\xb6}\xc6\xf2\x97\xf0\xaaM" +
	"\xd0\xb9J\x80\xceU\x12\x9c\\E\xfc\xe5\x87\xdb_\xac" +
	"{\xe8\xee\x87\xff\x9d\x19\x9e\xaf\xdf\x03\xc3\xaf\x17`\xf8" +
	"\xf5\x12\xdcz=\xa1>\xf6X\xd1w\xcf\\\xb0\xe2s" +
	"\x96\x1cxu7\x04W\x0b\x10\\-\xc1\xb1\xd5D\x92" +
	"\xdb>\x9d\x97{\xe7\xc8\xc0\x97\x8c-\x9f\xb9f\x0b\xcc" +
	"^#\xc0\xec5d\xcbO\xdf4\x83\xbf\xdd7\xfc\x0c" +
	"3\xc7\\\xb3\x07\xb6\xae\xa19\xc7\x1a\xc2\xf43\xcf[" +
	"\xe2U\xbbO1iw\xac\xe9\x86\xddk\x04\xd8\xbdF" +
	"\x82\x89ki1\xf6\xbd\xf7|+\x9a\xf8\xb3\x0c\x11\x94" +
	"\xb5{\xa0m\xad\x00mk\x89\x08\xbf/\xb8\xff\xad\x0f" +
	"n\xff\xb7\xb3L\xcbX\xdb\x03\x87\xd7\x0apx\xad\x04" +
	"U7\xd0\x92\xf7\xb5\x97\x7f\xf9\xd1A\x7f\x84\xa55|" +
	"\xc3N\x08\xde @\xf0\x06\x09\x8e\xdd@\xb4Ve\xfe" +
	"h\xd8\x883g\"\xcc\x1cM\xde\x09\x87e\x01\x0e\xcb" +
	"\x12\xccn&{\xed\xd3\x0d\\\xe4\x93CH\x0b\x955" +
	"a\xcbk\x08\xb2b5 \xe4\xb9\x089\"\xffR\xf7" +
	"\xdaO\x1f\xd3Gm\xe5<\xe3\x1d\xc8=\x0dE~\xf4" +
	"\xc5\xbf\x7f \xdc\xdd\xfe6\xe7\x99\xe4@\xeeY(\xf2" +
	"\xf1+\xd3\x83\xb7=\x9a\x7f\x17\xe7)t w5B" +
	"\x17q\x9c\x13\xe5\x0b\x0da\x8b\xe3\xa2\xff\xa8\xd8\xa87" +
	"\xdf\x88}\x96\x19\xfdE1*C\x91\x86\xb0%\xca\x9a" +
	"\xa8\xf3\xf4/\xa2\xa2Y\xba(\x8b!\xd9\xb0\x14_X" +
	"\x95\x0d\xb1\xdc\xb4d\x0b\x17q\x9c\xe7|>\x87\xe3r" +
	"\x10\xc79\xa7\x979\xa7\xbb<\xd5<\xf2x\x1d\xc8\x89" +
	"\xd0(D~\xeb)qz\\\x9e\x10\x8f<79P" +
	"y\xf4\xab<9\xbd\x84\xcfq \xf7\x08[4\xbd\xf9" +
	"F\x8eC#\"%\x0b\x9e8\xe6\xfc\xe0\xf9\x1e\x8eC" +
	"h\x04\x87\\\x96!+\x99>Y\x12\xa5`}\xb6\x97" +
	"\x16\x17\x1az\xd0\x9b\x87;,s\x80j\xbc*Y\x8d" +
	"\xb3\x92\xd4X\x90\xe7\xed\x88\xab\xcd\x89\x1a#\xebeC" +
	"\x91\x9bU\xcc!\xfb\x97\xa7\"n\xd3TZ5St" +
	"X\x01,\xfad\x95\xe8\xcf\xc2~\xd1r\x11\x11\x88\x06" +
	"sl\x0d\x0e/\xa0\x0aE\x9eQ\x0e\x94\xb7^VM" +
	"4\"\xd2a\x15\xde\xfb\xfa\x05c\x9fb-\xa5>\x1c" +
	"\xacUx\xd3\x1a\xeaBj\xed\x85\xd4\x87\x83\xb6\xcc\x8b" +
	"#\xaabaCV\xc9o\xa2&\x91\x8f\"M!\xec" +
	"SZ:E^\x16U\xc5\xb4D\xbdE\x0c\x86UK" +
	"\x09\xa9X\xd4\xc2\xc1f,\x18\xa9\xab)\x8b\xadf\x92" +
	"\x03\x95\xaf\x97\xd506\xd1\xc5\x1cj\xe0\x11\xba\x90s" +
	"\x90\x1f{[w8(\xb5p\xdcPm{\xbem@" +
	"5\x9a/\xbe\x94\x82\xbc\xa0l\x05\xe2\xff\xda\x12q\xfb" +
	"\xfd\xa2\xd5\xae\x8b\x88JL\x04F\xc9\x06<\x92\xe3<" +
	"\x93xDtc\xdb\xef\xcc\x91\xce\x99\xa5\x9e\x00\x8f<" +
	"\x96\x03!\x19\x8d\x888\xc3k\xdfy{I\xcf\xb6\xd8" +
	"\x8e\xa0f\xcf\xf9\xc8\x11\x99\xfa\xd2?\xbd\xf4q\xe9M" +
	"7s\x9e\x11\x0e\xe4\xbe\x04%-`\x94\x03\xb9E\xc4" +
	"\xf1Q)\xc6\xf1\xcd\x9d\xd4HS\xf8\xf4R\x86\x17w" +
	"X\xcb\xf2\x88\xce\xb25\xd2|\xc1\xdba\xa5\xddZ'" +
	":a\xef\xacC\x16\xcd\xa0\xac\xaab\xb3B\xb7\xd7\"" +
	"N\x92\xc1@-\xdca\xa1\x8b8\x07\xba(E\xf8\x06" +
	"\xd9\x90[\xf3\x0c9\x14\x18\xaa\xf0\x0d1\xe1F\xa2\x86" +
	"\x84\xe8!C\xd1,Ek\xb5\xad\xf2FD7T\x16" +
	"M%GkU\xb1\xd8\xac\xca\xda:QU4,\xb6" +
	"\xe8\xaa\xaa\xb7+Z\xabh\xeaAl\xaf\xa5\xb7\xc5\xa9" +
	"\xb2\x19Hgq\x85\xc9BNs \xf7\xdcd!\xaf" +
	"r \xb7\x17\xc5\x1d\x9f2\xf2\xe2\x0e\x0eY\x19\xc4\xdd" +
	"\x80\"M8$\x1b\xb2\x85sL\xb1]7\xfc\xa6\xd8" +
	"\xaeX\x01Q\xc5-\xd6L\x15\xcb\x1a\x15\x97\xf0\xc2\xe5" +
	"\xa68\xf5\xca\xa9)\xca\xcfw\x0ewy\x0ay\xe4\xa9" +
	"v \x01w\xe0\x0c\xc1p\x1c\xef\xd79.\xeen#" +
	"\"\xfe\xbf\xa8\x01W\xd1\xd9\x93D\x98d\xc7s\xc4\x02" +
	"b\x93\x1e6|x\xa1\x82\x05\xd5O\xe3b\x9a=\xc7" +
	"\xebe\x15\x8d\xe4\x1ch$#\xaa6\x96c\x1fYU" +
	"\xf6q\xb5\x11\xfb2\xc5\xd5b\xe4@v`\xe5S\x02" +
	"\xab\x11\x15\xa2\x88\xeb7\xb4\x8e8{\xdb\x9c\xd6g\x87" +
	"=\xc4r\xc0F\x1c\x94\x95r\xcd\x8f\x0d\xa9e\xa8!" +
	"\xa9\xc1v\xc1:\xdd\xcf\x0aI\xc5\xe8\x00\x8aT*\xeb" +
	"\x15?\x16\xf5\xf3\xb4X 5\xc4\xe6NQ\xd6t+" +
	"\x80\x8dBQ\xd6\xc8\x92\xac\xb0\xa1\x89d\xa1\x06\x91\x8b" +
	"\x88E\xd77\x80\xd8\xe5\xf2\xd4\xf2\xc8\xb3\"m\xec\xca" +
	"dC\xfd\x04*b<u\xf2:\xdc\x845\x0bk>" +
	"\xbc@\x90M<@o\xea\xb3\xf9!\x14w\x9c8;" +
	";D\x95\x95\xb7\xe8FP\xb6\xe2J\xdb\xc4G\x1a\xa9" +
	"FLq\xb8\x86\xdbE\x12\x88\x0aE\xd3\x92\x0dK\xc4" +
	"\xb2/ \x9a1\x0eQ\xf7\x92E\x9f\x1cR,Y\x15" +
	"UlY\xd8(\x12\x17\xea\x86\x88;\xe4`H\xc5\x85" +
	"\xe2\xd4\xaa`H1\xb0\xe8\x0e\x85T\\4Ul1" +
	"\xf4\xa0\xfdK9\xfa\xcbL\xc6D\xc3`\xfa\x94\x83(" +
	"iA@\xd7M\\\xa7\x1bx\x99\xac\xf2\xd1\x98~~" +
	"/\x1d\x913c|\xb2\x8e.q \xf7${\xfdU" +
	"\xaa\x89kZ\x92LH1}\x1c\xe7\x19eK\xf4-" +
	"r\xd6v\xf0\xc8sK\xd2\xf6w\x158\xbb\\\x9e\x07" +
	"x\xe4y\xcc\x81\x9c\x0e\xc7(\xe4\xe08\xe7\x8e2\xe7" +
	"\x0e\x97\xe7y\x1ey^s '\xcf\x8fB<\xc79" +
	"\x8f\xe4;\x8f\xb8<\x7f\xe6Q\xd3E\xc8\x81\x9c99" +
	"\xa3P\x0e\xc7\xc10T\x00\xc3PiS%\xe2QS" +
	"\x03r\xa0r\x99\xba]<\xee\xe7\x11me\xb0\xa1\x02" +
	"J@\xad\xe8\xd1\xc9\x85\x95\xd7\x7f\xfa\xb7;c\x0a*" +
	"oQT\x0b\x1b\x19SAY\xf3\xd3\x8fv\xb9\xfe\xfa" +
	"T\xd7\xb4\xbb\xde\x88}4\xbb\xd8\x97\x87U\x13\x0f\xee" +
	"\xc8.\xa0\x9f\xa1\xa2\xd8HS\x1a_\xa8\xd5\xdb\xb1\xe1" +
	"\x93\x09\xf5P\xc3\x86\xdfNh)\xb3\xf8\xae\xa7z\xc1" +
	")\x87\xed\x05\x17$\xbc\x80Z<^\x8f\x8d\xce\x98\xb5" +
	"\x8b\x84\x04\xfb\xa39\xbc\x1a\x97.\xd5\x07\xcc\x80\x1e\xb6" +
	"\xe2\xb6\xdfT\xed\x92\x96z\xa7\x16\x0d\xd9\xe6\xe3\x07B" +
	"}y4\xcd\xca\xfe@H\xceO\x07{ \xd8\xb9^" +
	"\xbf\x07\xc2\xa6\x99\x81+\x1f\x9e\xeey\x9c\xb5\x9e\x1a\xcd" +
	"\xa7\x86\x05?6\x87\x1a\xe0\xaa\xed\x00\xb7@\xd7,Y" +
	"\xd1\x129X\xc5F\xd32\x14\xad\xd5^\xe2{\x11\xaf" +
	"\x11\xc6\xa2\xd2\":\x88\xaaE_\xec\x13\xa2\x85\x85h" +
	"N\x96\x14\xf9\x0bX\x91\xbf )\xf2\xa7\xd9\xae<R" +
	"\xcfe\xf4]B\xd0o=U'[\xbe\x00\x8f\x87\xbc" +
	"\xc9~[\x09\x94\x13N\xaaC\x82\xe4\x17\xc9)\xd4N" +
	"G\xa4\x12[\xd8\x08*\xda0,\xb6\x0709#\xe9" +
	"\xb9h\xd2$V!\x85\x15Q\x98b\x8a\xa6\x12TH" +
	"\xa9j\xe9)\x04\x06n\xa55,\xee\x08\x19\xd84\xf3" +
	"\x14]\x1b\x88F+\xfa\xd7\xe8\xc6\x90L\\N\xcb\x18" +
	"\x9c,\x9d.\xb0o\xda\xbcD\xd1\xfc&?\xf4t\xa3" +
	"\xd2V$\xe5$\xb5\xa4\xa9\xf0\x89y\xb9cE\x9c\xa3" +
	"E\xf4\xe9\xc1\x90l)\xcd*\x16\xd7)\x9a\xe0\xcfT" +
	"\x93\xaeS4?SvR\xaf\xd4\x0a\xca\xb9(E\x93" +
	"kjF):2^\x8a*\x987\x13%h\xd4\x81" +
	"\xc4X\x999\xe0B\xf4\"F!Z\xa3Y\xba\xc47" +
	"\xdf\x98=\xca\"Q(\xa3\xd7\x99\x1d]D\x05\x8ax" +
	"e\xa3\x15[\xa6\x98#kbt{\xeclE\x0f\x86" +
	"\xc24p\xc9A\x9c\x1a\xb5\xca\x12\xbb\x11\x03S\x06\x10" +
	"\x87+\x04]W\xb3\xdf\x99\x0a]W3\x06\xe1\x92\xf4" +
	"A\xb8Y\xd7I\x85#\xaew\x11\xfd\xa7\x166\x89E" +
	"\x09\xa4\xc0\xe8s\xe2\xf7.\xdb\x02\xe1\x96\x96r\x15\x13" +
	"\x9b\x1b\xea\x1eym_\xa1\xdcT\x9c8e\xf5\xb0\x15" +
	"\x0a\xdb\xa7\xec!\x14Y\x1e\xc0\x1aY\xcay*\xf6'" +
	"\x0c\xceR\x82\xd8\x8ce\xe6\xa6\xa8X\xa6\xa8h\xa1\xb0" +
	"e\x8a\xb2%\x1a\xb2\xe6\xd7\x83)\xe0B\xbes\xba\xcb" +
	"S\xc9#OCRT\xa9+\xe18\x0a\x99\xf9\x1dH" +
	"0q\x1b\x8d\x1c\xef\xfc\xcb\xe3\xc7\xef\x1d]z2\x1a" +
	"9.\x8a\xa6!\xd4\xe7\\$\"\x9b\x89\xd4&y\xe3" +
	"/f\x1d\xc0|8\x98=\x80P\x1f\x0ef\x04\xb9\xbe" +
	"H\x0bri\xd1\x04\xa0\xdf\xed\xce\x04\x85\xd4b\xd3\x94" +
	"\xca\x8d\xaa\xb6\xb0<d\x1b\xf6\xda\x99\xb4\xdb\xaa\xd3M" +
	"\xbbJ_\x15\xa1\xd1\xcfPL\x8e\xd7\xb5\xf8\x9eoA" +
	"\x11o\x00\x8b-\x8aa\xe6Z\xd1\x90B\x0e\x14\x95x" +
	",9m\xe4h)fb\x9f\xae\xf9\xa3\x7f/J\x11" +
	"\xba\"\xdc\xd2\x82\x91\xc1N\xf4\xc5dy\xa3\xc9C\\" +
	"\x1c\xfa9\xc3\x8b9\xbe\x83\x0d%|\xc5x\x00E\x15" +
	"q\x87\xc5e\xebX\x05y\x94\x8d\x1d\xfdZT\xbd=" +
	"\xc9\xa7j4Q\x16\x0d\x1c:\x0f\xcbda\xa2\xaa\xeb" +
	"\xa1B\xd12:\xa9f5z\x84\x93\xc0o)\xbaF" +
	"\xb1\xa8\x00\xa64\xa9z\xae\x96\xcd\xec q\xafm\xe5" +
	"\x8bpzH\xfc\x0b\x14\xcb\xb5E\xeb\xbcXbF$" +
	"\x8a\xc5m\xc5\x14}a\xc3\xc0\x9a\xa5v\x8aJ\xbcN" +
	"o\x0bc\x93\xf8\xc0\x7fS\xa8\x9c\x144^Cim" +
	"\xc5FS\xbbb\xf9b@\xd9\x00\xca\xd6i\xf6\xb7\xb8" +
	"[\xacD\xfd\x92\xeak\xbd\xf6q\x01\xa9\xd0]\xb2\xaa" +
	"l\x182\x80\xb0\xc2v\xa2\x05\xd1r_\xe1\xf8\x0d8" +
	"]\xf5d\xef\xa8)\x9e\x97R=Y1\xdf\xb7X\x15" +
	"T8\x14\xc2\xe5\xd1\x12\xea\x1c@\x02n\x1f1\xf0\xac" +
	"1\xefq|_p\xc0\x86\xbc5b\xad\xa6\x85d\x0b" +
	"\x07\xb1f\x91S\xe9\"[\xec\xaaq\x1c\xe7\x99\xcf#" +
	"Om\x92\x1d\xd6\xe4;k\\\x14\xf2\xbe%\x097\xe8" +
	"*pv\x95z~\xc5#\xcf\xf3\x0e\xc4+-\xff=" +
	"\xearj\\\x9d>\x15\xe7\x9d\x8bt\xa1\xc4Ey\xa5" +
	"K\x16\x1c\x0e;Y\x10\xfa&\x0b\x85v\xb6@A*" +
	"\xbd%9k a#lh\xa9\xa8\xde\xd7\x994\x10" +
	"\xb3l 'M}8\xb8\\7\xfc\\\xb6\xe8}\xc5" +
	"\xc6\xfap\x90d\xef\x19@\xf1f\x14Yn(\x166" +
	"E9'\x0e\x7f*\x9a\x18ReE\x13\xb1\xd6\xaa*" +
	"f\xa0L\xc4\xadE\xe2T]\xd0\xf0\xd44\x88\xf8\\" +
	"\x07\x12\xb4p0c\xcc\xa3\x88{\xbf\x9d\x97\xfapp" +
	"\x99,\x9c\x93\xc6KR\xde\xd4_\xe3%\xa9\xb5\xaa\x85" +
	"\x83y\x99s&-\x1c\xa4\x1d\xb4\x0bS\x0b\x17\xbf\xd4" +
	"\xc2e[=\x16\xe4Q6\x99J\xc7\xb0\xa6\xb4\x85\xb1" +
	"\xc3>\xfe\xfcX\xb3\x94\x16E\xe8#\xf4\xa0\x8a\x958" +
	"\x82\xb64\x14:w\x08\x1aev.\x11\xb4p\\\xba" +
	"T\x04\xcd\xdd\xd0P[\x15G\xd0\xe4\x90+\xa4\xe2," +
	"\x11\xb4\x0aC\xf6\xad\xe3\xb15\xd4\xfeT\\\x0b\xcd\x11" +
	"\xca\x09[^N\xc0\x1d\x99:T\x86#\xd2$k\xfe" +
	"v\xc5\x178\x1f\x9bQ$\x85\x12a\xbf\xe8\x0f\xd3\x02" +
	"[\x16\x9bU\xdd\xb7\x8e\xb6%h\xe0\xb2\x028(*" +
	"\x9a\xa9\xf81\xb1b\xacY\x01l*\xa6\xe8\x9a:m" +
	"\xfa\xd7\xd4\xc0Zd`\xd9\xc2\x86Dk\x04\x94u\x91" +
	"P\xb1\xd1m\xd5b\xf9k\xa8\x12\x9aB\xb26\xe4\xf6" +
	"cC\xa2a\x12\x925otg\xd3nm\x99\x1dg" +
	"-\x9el+\xb5r3$\xfb\xb0)6c\xab\x1dc" +
	"M,o\x8f5\xce\xbe\x86=#\x9e\xdeH\xbc\xcc\xc4" +
	"\xfe!\xfby\xc0\xde\xb1\x18\xabt\x9e>2\xd11\xba" +
	"0\xee\xe9b\x8b\xaa\x84B\xd8/6\xcb\xbeu\xa2\xa5" +
	"\x13\xd7\xd5\xacT\xb7\xc6j(\xe4\x8e\xbb5m\x11M" +
	"-\x14uC\x9c\xaa\xe9\xba\x16\xff=\xfd\x19\x0d\xdd\xdb" +
	"\xb9r-T\xd6\xa8\xb7g{\xe0\xe6\x0b\x8d\xf1*\x8b" +
	"i\x04\xabP\xc4-\x9a\x8a\xd6\xaa\xe2\x9ch\x9b\\6" +
	"\xe9\xd1C\x92\x11Yl5\xf4p\x88\xfcH\xfe\xc4\x7f" +
	"\x0d\x86@\x0f-s\x89\xa2\x09\xfe\xec\xbb\xace\xe5K" +
	"\x14-\xfd\xd1U\x8c\xf6 \x1bU\xcfM\xa9\xde\x12\x10" +
	"\xa8]\x01hr\x10\xfbE\xd7:E\xf3\xa7\xd6n\xfd" +
	"\xe1\xedi\xcf:\x8a\x9ff\xd4\x9bb2\xc0aj\x1e" +
	"Mrg\xb6\x08^\xc5\xc6&\xb9\xd3\x9b\xf9\x08(A" +
	"\x11\x9a\x03\x8a\xa6\xce\x07\xb1=\x0aB\xfc%\x06\xa4\x87" +
	"T\x97\xdc\xd9\xe7\xa8\x1f\xe4\xd9\xd6\x10\xb6\xdc\x96k\xa1" +
	"\x82U\x7f\xb6\xe1\xba\xd70\x1b\x13\x96\xdc\x16\x1bh\x13" +
	"\xd7\xcb\xb94Jk\xb1\xa5\xb4\x90\xef\xa7\xb6\xaf\xc5\xc6" +
	"\x06\x88k\xd3\xddC\x16\xc7%\xd7I\x05\xac:\xa9 " +
	"^'YIuR[\x85\xb3\xcd\xe5\xb9\x83G\x9e\xfb" +
	"\x1c(\x8f|\x17\x1a\x91\x18#\x8f\x19\xc2\x90\xdb\xa6\x1b" +
	"e\x8bj-\xa3\x15\xc5\x02__\x98\x9eV\x9d\xe5x" +
	"\xd9 \x06\x8b\xd2\xc2\xdb\xe9\x8aNz\xd6\xc4\xabN>" +
	"Vu\xc6\x06]t\x9f\xac\x8a\xb4\x83\\\xaeE\x8b\xd1" +
	"\xff\xdf\xc4\xfe/V,\xbbU\xd5k\xf0C7\x8f\x86" +
	"\x04\xfa\xa3\xaa\x89h\\\xe2R\xf5V\xc5\x97\x94<\xc5" +
	"\x0f\xe4\\+\x16\x94eU\x8dC}\x98\xa4K\x14\xfc" +
	"3E\xd9\xc0\"!)\xe2\x98SI\x93h\xc01\xad" +
	"\x84\xaa\x92\x15\xcd\x02\xc5\x1by\xec\xcb\xbe\xb7\xd3\x88}" +
	"l\xeb/H\xf4vx9\x1eVLK7h\x09A" +
	"aO_\x9en\xf83\x14x\x06\xf6\xa1\x11\x91\xb2\x12" +
	"k\xd7\x1f\xf7\xbe\xdf\xcd\xac\x0dt]\xcdn>\xb0\x81" +
	"\xd9\xd6a4\xdc\x16'f?sdM\xc4\x1d!U" +
	"\xf1)\x16\xdd\x13\x12.[d\xd5\xc4v~\x9b\xeeL" +
	"h\xd6u\x15!\xce\x81\x10\x13\x08\xab\xd7\xad\x80\xa2\xb5" +
	"\xe6U\xa9\xe6\xd0\xa6c*\xf5>\xd31_O\x12\xeb" +
	"U,\x15/\xc8\xaa\\Um\x97\xa1\xcc\xd2%\xb17" +
	"&\x92\xd8\x8bR\xc6\x9eHeFA%\x92\xc1\x0f~" +
	"\xea)\x9e\xc7b{\xe8)/\xeb\xea\xb5\xc6\xac\x0a\x86" +
	"x\xab3[<b\x1c_c&R\xba\x949\x897" +
	"\x93\xe6$\x02\xd8n\xfd\xe3`\xc8\xe2;S\xe5O\xc2" +
	"\x8a\xe8\x022\x82E\x84Eg\xbf\xb3\x0f\xcb\x03\x8a\x8a" +
	"\x07<A\x9a\x16\xb2n\x8c4\xe2\x10\xed\x84p\xa8\x95" +
	"\xdd3y\x0fE\x96`\x1c\x12\x8d\xb0v\x9e\x16-\xc4" +
	"Ml(\xd8\xa4\xe9\x8b/\x1a*\xdb\x898\xb4\x83\xac" +
	"\xf9\x15\xda:QL\xd12\x840\x1e\xc8\x80C~<" +
	"\x85\x0d\x10\x05\x19a|\xae\x0f\xad\xbe\x83\x83\x8aFG" +
	"1\x86\xac\xc0\xebm\x88\xc3f%(\xe9A\xff\xfc\x04" +
	"\xe0#\xd0\xda<\xf6!\x91\x90Ek\xa0\x90\x1a6d" +
	"\x95\xfaQ\x918\x0dw\x14EG\x00\x09E\xf4'\xc1" +
	"\x14\xa7g\xe5\x18\xb4\x91\xc9{\xf5l\xf1\xc5\x8a\x8d\x94" +
	"\x93W\xcf\x04S8\xd1o#\xdev\x9d\x86g\x076" +
	"\x89\xff\xfb,\xb5S\xa4\x935(u \x9a\xf6{\xca" +
	"\xb1!i><\xc8f\xcf8\xdem\x0d\xa8\xd3\xe3\x09" +
	"\xeb\x96\xe2\xc2\x9a\x95\xfd\xa0K\xbeP\xa9\xacg\x8f\xfa" +
	"\x9f\xb2\xc7j\x1d\xa9c\xb5.+\x10\xad^\xfes\x87" +
	"g\xa3\x9d\xd6vU\xe1\xb5!\x9f\xe1\x89\x18Ya\xa4" +
	"\xad\xe9\x9ch[\xa4\x89\xce\xc6\xca\"\"\xe7\x06\xa9\xee" +
	"\xfbl\xbd\xdbh\x0d\x07\x05\xacY\x83\xdc\xf7|\xc1m" +
	"\xb4&}wt\x00\x8a\x04\xe8\xc1\x8d\xa8\x91r;\xfb" +
	"|\xbcO\xae\xf7\x7f\xcf\x1c\x0f\x057PK\xb6\x8b\xe9" +
	"\x17%\xc9G\x91\x85\x86\x825\xbf\xda\xc9S\xc9\xe39" +
	"y\x94n\xaa)\xaeS\x04\xcd_\x94\xe5r\xaae\xb3" +
	"R/\x0f*\x9a\xa2k\x03\x9c\x92\x98f\x07{\xfa\xe1" +
	"\xa0\xa2q\x82\x92\x08tv\x85\x91\xf6\xd0'\xab\xa1f" +
	"%/8\xfa\xc3\xe5\x0f\xbd\xf0\xbd\xdefUV\xee\xd7" +
	"\x83\xb2\xa2\xa5\xab\x9dILs\x19\xb8~\xc0#5\x19" +
	",jA0\x94\xa62*K\xa0T<n+\xd4p" +
	"a\xabU\xa8Z\x85\xad\xb8P\xc5\xf4\xf2\x92\x16.\x8f" +
	"\x0f\xb4&#\x14#Y\x08\xc58&B12\x09\xa1" +
	"`E6^1\xfbG\xa9F$.j\x0e \x1e\xe6" +
	"\x0bZ8\xd8o@\xac\x0c\x1b\x8a\x86Z\xb3\x05\xba\xca" +
	"\xca)#v\\\xb2\xab\xb4J\xec#'D;\x1f\x1b" +
	"#\x95\xc5\x18\x15\xc9\x9a\x8c\xb0\xa6\xe5)Zk\x8a\x9d" +
	"W$\xd9S\xafiO\xb6IU\xc4i\xd2\xd8\x94[" +
	"\xeb<W\xc5\xb6\xd69\xb8b[\xeb\xfcZ\x8am\xaf" +
	"0\xf0\xb6{\xda\xfd\xecu\x87m\xb0\x93\x87!\x05\xfb" +
	"h\x10sY}\xef\xb3\xf5\x1dE\xcb\x88\xd1/\x93\x8d" +
	"\xec\xd7\xb2L62\xae\xa5\"1l\x94\x13\x88U\xd6" +
	"\xf1\xbd\x8a\xa2\xd2\xf1\x0f\xf5\x19i'\xd69\x8bG\x9e" +
	"k\xd3G\xbbQv\x8f\xc8\xfej\x0e\xa5\x09xa\xcd" +
	"\xcab\x1e\xd9\xb2\x9d\x80rJk\x9e'\xf8\x88[l" +
	"\x0d\xcb\x86_\xbc\xb8=\xa0\xf8\x02\xf6\x9c\x045\xd6f" +
	"\xd9\xc4~Q\xd7\xe8\x89\x1a\xd6h)\xbb \xfa\x83\x19" +
	"\xbb\xf4#[\xe2\x06l\xe8\xb4)I,X\xd1|\x06" +
	"\x85\x1d\xb1?\xd6\xc9\xb5\x94 \xa6\x0a\x8c~\x0f=\xb1" +
	"}\x01\xec\xcb[\x87\xfd)qt\x9c\xb3\xca\xe5\xb9\x81" +
	"G\x1e5)\x90*\xc4P\xfc<\xf2\x84\x92\xe2h\xb0" +
	"\xc2\x19tyn\xe7\x91\xe7^\x07\xe2e+\xdd\x1c\xc6" +
	"\x88\xc8\x98-\xf9\xa7\xf6<>\xfe\xa5x\x19\xa5\x85\x83" +
	"}#\xe1F+:n\x95!\x8aV\xc4ih$\xb5" +
	"\xdf\x01`\x0d\xc9\xea-\x96*(C\xcf-\x13\xf0\xfa" +
	"\xf2f#C\xc3\xa0\x1b\xd9\xd9en<\xbb\x14\xa7\x91" +
	"\x10\xa3\xe9\x96(\xab\x06\x96\xfd\x9dd\x87d1\xfe\xe7" +
	"\"\x9e\x94P\xa9\xbdn\xcd'\x04\xb01\x94\xbb\x87\x8d" +
	"z\xbb\xc9e?\xdeL\xd9\xa4_\xe8H\x14YD\x1b" +
	"d\x16\xe6;bw\xe2\xcd\xb0\xcf\x87MSY\x8f\xe9" +
	"\xc2\xfa\x0c\x9e\x7fE\xb8S\x8df\xe9\xd1\xbc3\x8b\x1b" +
	"\x9b\x14xs\xd1[i\xe7\xea>\xda\xffcse\x14" +
	"LvQ\x807\xfba\xa1$<y\x90C\xd6F\xf4" +
	"\xdam\xbf'[&<\xb9\xc6\xac\xd7\xad<\x92xf" +
	"_\x94\xd7\xeb\x163\xd2;\xd1{v\x1eB\xd7\xa0\x87" +
	"B\xba\xa9X\xf4\x88\x13\xc2\x99\x07*M\xab\x9f[\x01" +
	"\xb5\xd84\xbdB@\xd6\xb2\xbd\xce\xbd8BY\x05d" +
	"\xcd.\xa0\xd9\x03 \x1b\x12\x03 9\xc9\x03 \xd84" +
	"\xfb\x8c\x7f\x94\xc7\xf0\xf1\xdeQ\xaf^\x0e\xe2,j\xba" +
	"J\xdb\x1f)\xa3\xf4C[\x87\"\x0b\xc3\xaaJ\x92\x07" +
	"GJ9\x97\x92\xe7\x0d\xba\x8c\xa36\x89\xb4\xec\xcd\xbf" +
	"\x16[\x035\x7f\xd9\xce\x7fD\xfa,\x89\xad\xdb>\x83" +
	"\x931p\xc1\x0e@K\x0b\x9cK]\x1e\x8bG\x9eo" +
	";\x90`Z\xc6`\xf3\xa3\xfe\x90\x89q|3\xee\x17" +
	"\x97p\xab\xedr'2\xb3\x1d\xfa-+\xa7\x8c\xcc4" +
	"\xbe\xb6\xd3\xf65D\xd3(Ym\xcf\x93;M&\xee" +
	"\x93\x87\xb5\xe8k(\x83\xb8\xab\xd0\x18\xa1\x1f\xc5\x9a\x95" +
	"\xb4K\xbd\x01\xa04\x05\x84l\xb4&M\xa3\xda\xaf\xf5" +
	"1\x0a\x08Zr\x97\x1bY\xdd\xf4i\x18@\xcd\xdd\x9d" +
	"4\x19\xc2\xae\xb9c}\x07q\x9a\xa8\xe2\x0e\xc5'\xab" +
	"\xd1\x1c\xe6\\\xd5\xdf).\xf6\x95\xd4\xdfVG\xffw" +
	"9\x1b\xb1\x19\xd2\x05m\xe8\xb7\xf8km\xef\xa1\xac4" +
	"3\xf9\x16\x7f\xefa\xe92\x14Y\x845l\xc8\x16\xe6" +
	"c\x9d\x9b\xd8\xa5\x10U\xf6a\xea\xde\xc1rY\xd3\xfa" +
	"\x80\xb5\xe9\xc0D\xfb\x95\x96\xde`\"m\xf5\x0c\xf2\xf8" +
	"\xb7\xf0\x00\x94\xb5\x8c\xc4\x07\xa1Y\x1dl\xfa\xd4\xab\x02" +
	"\xb4s\xa7\xa4\x05\x8ec\x0e}\xe7;\xeb\xec\xcb!\x83" +
	"*6\x86\x10\xe7X\xb7@\xa2\x93\xef\x83\xbe\x03RE" +
	"\xea\xaf\x01u\x06\xea\xe4u\x03\xe6?\xc9\xce\xda\xe9\xa7" +
	"2(\xb3\x80y\xd3\xa6 ~\xd3\xe6\xf6\xfeq\xc1\x02" +
	":\xb6\x95@ph\x00\xcb\x08O\x13\x82\xe4\x8c4S" +
	"\x8c\xabTZZ\xb2\xc8\x01\x12\xcf\x1eU\xe24\xcf\x1e" +
	"\xed\x894\x85\x9b-C\xf6Y(\x86\x1f\x06]q\xfc" +
	"\xf0\xbf\xe4\xe3G\xb5\xa4\x94\xe2\xceAEW\x8d\x0d\x9c" +
	"a\xb2a\\\xd2\xabV\xbaF\x87\x19\x82\xba\x11+\xe5" +
	"bco|*bT\x92H\x91\\\xd1\x9a\x8f\x85\x9d" +
	"\x10\xablp\xd1^b\xb6\xbd\xcd\xc6H\x03\xe5\xa3l" +
	"\xe0P\xda\xcefAJg3\xd6\xc6L\xf45\xedV" +
	"gjg\xd3\xb4[\x9by\xb8(\xcb\xd6&\xbd\x9b\x9f" +
	"\x17L\x8b:\xf4\x9f\x84':\xe2\xf1{\xfeI\x8bf" +
	"\xc0\xb8[P\xa41\xac\x99\xa2,\x86r\xa3\x7f\x8b\xbe" +
	"\x98\x13\xd2-\xacY\x8a\xac\xaa\x9d6\x9a$'\x86T" +
	"\x92\xcc\xbe\xa2\xdf\xf804\x9c\xf7\xdcF\x89E8\xeb" +
	"y\xc9j\xd6MGf\xae\xfdfd\x11\x8e\x8eK:" +
	"HMCgCb\x93L|\xea0lI\x7f\x9d=" +
	"\x17\x1d\xb2\x1cBk\xcf\xfe\x1f$\x18\x86F'\xfe\xcb" +
	"\xb1\xe1\xcd\xa2\xde[a\xb7\x93b\xf7\x07\xbc\x9c\x10-" +
	"\xfa\xbe\xda\xa1\xff\x05z0(#3\xdb\xb1\xff\xc6\x08" +
	"e\xd4\xef\xabc\x15\xe9^\x1d\xf3\x91\x8f\x9bQw\x99" +
	"*k\xfe>\x8f\x1c}E\x03\xdf\x8buE;\x07\xd7" +
	"\x8b)\x1b\xf6\\P\xef\xdb\x9d\xf6%<\xda\x080\xed" +
	"qf\xd9\x8c\x85E\x15Sd2\xde'(\x17\xe3}" +
	"\x82\xe4r\x92e\xe6%I\x033\x82\x89C\x8c\x9b\xb8" +
	"\xf4\xea]\xc6A#J\x91\xac\xbbL\xd7\xf3$Z\x93" +
	"Wu(\xa6ef\xad\xc3\xde\x93U)m\xe0CI" +
	"\x1aLzg\xc5\xa0\xe6.\xc7;\xdd1,!\xf1\xb6" +
	"J\xb4\xd5\xdd\x1bSHj\x99\xf5\x7f\xa9\xb9\xc4\xb5^" +
	"V\x15\x7f\xbfW\x93k\xcc\xaa\x0e\xd9g\xc5\x9b\xd9C" +
	"\xd5E\xed@\xdb\xe2F\xa2D\xcc\xe9}y >R" +
	"3\xd4K\x03\x0d<\xf2\\?\x84K\x03\xa3lpJ" +
	"1\xd7R!8^\xedL\xd7h\xf4Y\xcazA\x89" +
	"\x8e\xe3\x0d\xaaVq\xfb\xacD\xd2\x11P\xfc~\xac}" +
	"-\x18w\x93\xa5\x87B\x8a\xd6\xeaM\xff\x1aA\xff9" +
	"T qG*\xc6.m9z(qw\xf7\x82\x0c" +
	"\x0f}\xa4\xbf\xba[(\x9a\x96\xe2[\xa7h\xad\xf1\x9b" +
	"\x12\xaalZ\xa2\xae\xe1\xff\xe4\x87@h\xfd\xc6\x0f\xad" +
	"\xb5\xd2\x84\xb5\xa1_\xcfJ\x8c\x18S6\xb6\x15\xe1\xf5" +
	"XK\xb9\x96C+L3W\x94E\xfa\xc7\xc2\xa4\xa4" +
	"\xcd2\xc2\xf8\xca\xe8\x90q\xac\xdd\x92\xf4\x88L\x12\xfe" +
	"R\xe2\xacr\xd9-\xba\xb8Z\x83\x05I-:\x1b\x80" +
	"\xb9\xa7\xc0y\x8f\xcb\xf38\x8f<\xaf8\x90\x8b~c" +
	"\x86\xe4\xae$J\x91\x94\xda\x85d+\xd0\xff\x1bO}" +
	"\xde\xee=\xb7)a\xac\x7fsn\xb0\xb1\xa4\xfezj" +
	"i\xb1\x05E\x1a\x14\xdf:b\xc8\xb94\xe0'\xc1a" +
	"I\xbd\xd9\xf8\x03?\x166S\xdf\x18(\x1882V" +
	"\x92|w&6\x83\xda\x07\x1ck\xc9\x0c\x8e\xb5\xb0\xae" +
	"[\xb8\xa8\x05eT\xbe\xdd\xf3\xc98\xd6\xacY\xfa2" +
	"~\xc0c\x00\x19T\xce\x00\x81\x129fl\xa8,7" +
	"1T\xa6\x1b\xac\xbb\x04\x89\xec\xbdOH\x8e\xcd\x01d" +
	"\x05\xffD[\xb3X^7\xf4\x13\xb6\xda\xf6\xa2\x18#" +
	"\xd6ts~\xe2E\x18\xbe\xd7\x8b0\xb8C\xb1b\x8f" +
	"\xbf\x08z(\x15\xbc\x8e\x8dd\xc9\x96n\x0c\xf5\xcd\xda" +
	"l\xf6\xb2\xba\xff\xbd,\xeb\xef2\xc8z\xd9(\x8f\xcf" +
	"r|e[X\xaf[Um.:,<\xd4\xb2\xa3" +
	"\xd6.;$\x92\x06z\x032\x87\xfa\xa9\x95\x1c\xc8\x1e" +
	"=\xe6\xb1)\xfaum\xaa\x15\x1d<\x8e\xe7L\xa4\xe2" +
	"\xe8}-\x90T/B\xfd\xd0\x1f\xad\x1a\xcc\xd3\x13\x8b" +
	"\x19OO\x84IA@\xfeA\x91\xa2\xc2\xe8\xc3\x13\xc5" +
	"SSR\xda\xd4\xc7\x182\xc3Y4P\xe7e37" +
	"\xd8\xc0zR\xa2\xf7C\xc2\xac(\x1d{\xf8\xf2\xeb\x89" +
	"\xd2}F\x08\xbf\xea(\x9dI\xe5\x0d\x86\xee\x0f\xe7\xf9" +
	"\xb2\x981O\xe0\xaaua5\x1d\xaeZ\x17\xcd\x11;" +
	"\x87\x84\xab\x9e\xfb\xd9\xf2\xff\x13\x00\x00\xff\xff\x07\xf4X" +
	"\x91"

func init() {
	schemas.Register(schema_db087b68b3c8ece3,
		0x80214cf1fe310028,
		0x80a653c37ba7cb11,
		0x8117002cdfa91921,
		0x82c9a60e89dfae1c,
		0x84563c2b3ff25bdc,
		0x8713039dfed99d40,
		0x8714571008c030ba,
		0x8a16ba50cd3da338,
		0x8adadbe6e8774d21,
		0x8cde518c70ef5445,
		0x8e16a8fb55246273,
		0x8f6808705ebe6526,
		0x9061f8eb183dbbed,
		0x919616a0da15bb90,
		0x923a6a1c735decfb,
		0x925c9c89b47282be,
		0x931cbad222a195f8,
		0x93dba7c30f677fdb,
		0x97cc109d05abbd9f,
		0x97f4e7be35afaa61,
		0x982ceaf849ef1156,
		0x9a05a39cbd16b6ff,
		0x9a5385a250ba27d6,
		0x9a7aeed660b3b244,
		0x9acc76381ab821b6,
		0x9ccddbfbcc1df2fe,
		0x9d851d2b7136f540,
		0x9e0888307cd0b100,
		0xa00595459060262c,
		0xa05de55f091d7c1e,
		0xa076d33f5e383b94,
		0xa0840f88af1c7706,
		0xa111a44d05aaaf98,
		0xa26b5090c288352a,
		0xa31f822e8c8cb596,
		0xa32558b2ae4c572f,
		0xa35d3b6d50378bf3,
		0xa43ac13d0fb9abc0,
		0xa50aa319d7d7c9ff,
		0xa5fd92eed3d94a02,
		0xa8979c2a5ccfbf0e,
		0xa912305a41b0825b,
		0xa91aa9cd403b1c6a,
		0xaa73e7af8daef786,
		0xab943e8ad822e7e3,
		0xaeafa53d5e166d68,
		0xaf76c6cbf5a0cc44,
		0xb0bffe9b403dbf27,
		0xb4cb54f11da736f0,
		0xb5167ef8e676676e,
		0xb60218526f8931a3,
		0xb6c0d83393ea59c4,
		0xb7629c8415587a87,
		0xbdd9ef9dd8153525,
		0xbfc3fc933416f31b,
		0xc0758967e4717746,
		0xc1d1af819c6d1185,
		0xc3904f59de48ca8a,
		0xc4fa37edca098790,
		0xc5ff63eaa7558acb,
		0xc61d82bed18ad104,
		0xc6ea819242eb9964,
		0xc8e8008a265a5b3d,
		0xc94df1528f12bd43,
		0xcaa51cd969201b46,
		0xcf350be9cec5bc9a,
		0xcf8321567398e34b,
		0xd0d3a85442ac5d5d,
		0xd1bf534c77687ee1,
		0xd1cd83c0ff4e09e8,
		0xd2d78f74338be800,
		0xd36f8f2ae9012e8e,
		0xd481f2b2c3780a25,
		0xd4aa17845243e275,
		0xd578ea6ceb7ae5a4,
		0xd755cb8169d3834a,
		0xd8943673d1bbfa02,
		0xd971dee9f4341a8a,
		0xdbc30f48286b6a6b,
		0xdbff954d8d653fb1,
		0xdd724009a1ee7fc3,
		0xe370e7dffb14fc7f,
		0xe4d36d4a59fb4d07,
		0xe7bfb8915a5744c3,
		0xe7c4cf7f7b4332de,
		0xe810e2aaa0634755,
		0xea2159c2c44d3b40,
		0xea77e5cbde28d045,
		0xeaca3f1753ed9a9f,
		0xeaf963bc830bb059,
		0xeb65b9493136f4e9,
		0xee86f150e4f752f9,
		0xf0b8e763afc6ac3f,
		0xf2eb6108931f1f92,
		0xf2ffbc4604e04e5f,
		0xf5929658e6b89319,
		0xf6a494a34dcb999f,
		0xf8580afd882eace5,
		0xfb681291053dee8b,
		0xfd0d638c032b7cf9,
		0xfdf2b13420db51f5,
		0xfe03535863e28eb6,
		0xfee08ce6db9d2add,
		0xff64c5e8bbcfd49f,
		0xfffdfd1009a67345)
}
