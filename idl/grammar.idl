# Player input parsing.
Spec:requires:contains:
  - "grammar"
  - - "idl/call"
    - "idl/prim"
  - - # Commands which interpret player input.
      Slot: "scanner_maker"

    - # Starts a parser scanner.
      # This is generated by story statement "DefineNamedGrammar"
      # so that grammar doesn't have to import weave.
      internal: true
      Flow:lede:terms:
        - "directive"
        - "interpret"
        - - Term:type:
              - "name"
              - "text"
          - Term:name:type:repeats:
              - "with"
              - "series"
              - "scanner_maker"
              - true

    - # Run a script defined action.
      # The action will be parameterized with the actor performing the action,
      # and up to two other nouns. The actor is always the player's,
      # the nouns are whichever were matched by [Noun].
      # This command usually appears last in a series of sub-scanners,
      # after all of the earlier scanners have successfully matched.
      Flow:slots:lede:terms:
        - "action"
        - "scanner_maker"
        - "action"
        - - # Name of the action.
            # See also: [DefineAction].
            Term:name:type:
              - "_"
              - "action_name"
              - "text"
          - # Optional additional arguments to pass to the action.
            Term:name:type:optional:repeats:
              - "args"
              - "arguments"
              - "arg"
              - true
              - true

    - # Require that all of its sub-scanners match.
      Flow:slots:terms:
        - "sequence"
        - "scanner_maker"
        - - # A series of other scanners to match.
            Term:name:type:repeats:
              - "_"
              - "series"
              - "scanner_maker"
              - true

    - # Attempts to match exactly one of its sub-scanners.
      # Its sub-scanners are evaluated in the order listed;
      # stopping after the first successful match has occurred.
      Flow:slots:lede:terms:
        - "choose_one"
        - "scanner_maker"
        - "one"
        - - # A series of other scanners to match.
            Term:name:type:repeats:
              - "of"
              - "options"
              - "scanner_maker"
              - true

    - # Attempt to find a noun matching one or more words
      # entered by the player. Out of all the nouns in a game world
      # the specific nouns matched will, by default, depend on what
      # objects are visible to the player.
      Flow:slots:lede:terms:
        - "noun"
        - "scanner_maker"
        - "one"
        - - # The kind of the noun that should be allowed to match.
            # Most often this is the most generic kind: "objects".
            # That allows the action to respond to the player
            # when an unexpected or undesired noun was entered.
            Term:name:type:
              - "noun"
              - "kind"
              - "text"

    - # Uses the last noun in a series of sub-scanners as a source
      # for finding for the first noun in the series.
      # For example, in the phrase "take book from table"
      # if there was one book on a table, and many books on a bookshelf,
      # refine would ensure that the book on the table was selected.
      Flow:slots:terms:
        - "refine"
        - "scanner_maker"
        - - Term:name:type:repeats:
              - "sequence"
              - "series"
              - "scanner_maker"
              - true

    - # Assuming that the first and last sub-scanners in a set
      # match nouns, reverse the order of those nouns when sending
      # them to an action.
      Flow:slots:terms:
        - "reverse"
        - "scanner_maker"
        - - Term:name:type:repeats:
              - "_"
              - "reverses"
              - "scanner_maker"
              - true

    - # Select a specific set of bounds for the scanner to use when matching nouns.
      # Currently, the set of scanners is defined in golang,
      # and cannot be extended by script.
      # They are:
      #   * "" - the empty string for the current locale ( the default bounds )
      #   * "compass" - for nouns of kind "directions" ( north, east, etc. )
      #   * "player" - for the player's inventory
      #   * "debugging" - for all objects of kind "objects"
      # see: https://pkg.go.dev/git.sr.ht/~ionous/tapestry/support/play#Survey
      Flow:slots:terms:
        - "focus"
        - "scanner_maker"
        - - Term:name:type:
              - "_"
              - "player"
              - "text"
          - Term:name:type:repeats:
              - "sequence"
              - "series"
              - "scanner_maker"
              - true

    - # Match text exactly as typed by the player.
      # To match two words that must appear together
      # use a [Sequence] containing two separate word commands.
      # For example, to match the phrase "take off", use:
      #   Sequence:
      #     - One word: "take"
      #     - One word: "off"
      Flow:slots:lede:terms:
        - "words"
        - "scanner_maker"
        - "one"
        - - # One or more synonyms to match.
            # Only the first word matched will be used.
            # For example: "pluck", "pick", "strum"
            # would match either "pluck the guitar",
            # or "strum the guitar".
            Term:name:type:repeats:
              - "word"
              - "words"
              - "text"
              - true
