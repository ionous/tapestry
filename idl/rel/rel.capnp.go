// Code generated by capnpc-go. DO NOT EDIT.

package rel

import (
	reader "git.sr.ht/~ionous/iffy/idl/reader"
	rtx "git.sr.ht/~ionous/iffy/idl/rtx"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ReciprocalOf struct{ capnp.Struct }

// ReciprocalOf_TypeID is the unique identifier for the type ReciprocalOf.
const ReciprocalOf_TypeID = 0x93892cd2d4d7d91c

func NewReciprocalOf(s *capnp.Segment) (ReciprocalOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ReciprocalOf{st}, err
}

func NewRootReciprocalOf(s *capnp.Segment) (ReciprocalOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ReciprocalOf{st}, err
}

func ReadRootReciprocalOf(msg *capnp.Message) (ReciprocalOf, error) {
	root, err := msg.RootPtr()
	return ReciprocalOf{root.Struct()}, err
}

func (s ReciprocalOf) String() string {
	str, _ := text.Marshal(0x93892cd2d4d7d91c, s.Struct)
	return str
}

func (s ReciprocalOf) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ReciprocalOf) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ReciprocalOf) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ReciprocalOf) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ReciprocalOf) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s ReciprocalOf) HasObject() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ReciprocalOf) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s ReciprocalOf) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// ReciprocalOf_List is a list of ReciprocalOf.
type ReciprocalOf_List struct{ capnp.List }

// NewReciprocalOf creates a new list of ReciprocalOf.
func NewReciprocalOf_List(s *capnp.Segment, sz int32) (ReciprocalOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ReciprocalOf_List{l}, err
}

func (s ReciprocalOf_List) At(i int) ReciprocalOf { return ReciprocalOf{s.List.Struct(i)} }

func (s ReciprocalOf_List) Set(i int, v ReciprocalOf) error { return s.List.SetStruct(i, v.Struct) }

func (s ReciprocalOf_List) String() string {
	str, _ := text.MarshalList(0x93892cd2d4d7d91c, s.List)
	return str
}

// ReciprocalOf_Promise is a wrapper for a ReciprocalOf promised by a client call.
type ReciprocalOf_Promise struct{ *capnp.Pipeline }

func (p ReciprocalOf_Promise) Struct() (ReciprocalOf, error) {
	s, err := p.Pipeline.Struct()
	return ReciprocalOf{s}, err
}

func (p ReciprocalOf_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ReciprocalsOf struct{ capnp.Struct }

// ReciprocalsOf_TypeID is the unique identifier for the type ReciprocalsOf.
const ReciprocalsOf_TypeID = 0xdc5fdcc147a27ed9

func NewReciprocalsOf(s *capnp.Segment) (ReciprocalsOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ReciprocalsOf{st}, err
}

func NewRootReciprocalsOf(s *capnp.Segment) (ReciprocalsOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ReciprocalsOf{st}, err
}

func ReadRootReciprocalsOf(msg *capnp.Message) (ReciprocalsOf, error) {
	root, err := msg.RootPtr()
	return ReciprocalsOf{root.Struct()}, err
}

func (s ReciprocalsOf) String() string {
	str, _ := text.Marshal(0xdc5fdcc147a27ed9, s.Struct)
	return str
}

func (s ReciprocalsOf) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ReciprocalsOf) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ReciprocalsOf) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ReciprocalsOf) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ReciprocalsOf) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s ReciprocalsOf) HasObject() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ReciprocalsOf) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s ReciprocalsOf) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// ReciprocalsOf_List is a list of ReciprocalsOf.
type ReciprocalsOf_List struct{ capnp.List }

// NewReciprocalsOf creates a new list of ReciprocalsOf.
func NewReciprocalsOf_List(s *capnp.Segment, sz int32) (ReciprocalsOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ReciprocalsOf_List{l}, err
}

func (s ReciprocalsOf_List) At(i int) ReciprocalsOf { return ReciprocalsOf{s.List.Struct(i)} }

func (s ReciprocalsOf_List) Set(i int, v ReciprocalsOf) error { return s.List.SetStruct(i, v.Struct) }

func (s ReciprocalsOf_List) String() string {
	str, _ := text.MarshalList(0xdc5fdcc147a27ed9, s.List)
	return str
}

// ReciprocalsOf_Promise is a wrapper for a ReciprocalsOf promised by a client call.
type ReciprocalsOf_Promise struct{ *capnp.Pipeline }

func (p ReciprocalsOf_Promise) Struct() (ReciprocalsOf, error) {
	s, err := p.Pipeline.Struct()
	return ReciprocalsOf{s}, err
}

func (p ReciprocalsOf_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Relate struct{ capnp.Struct }

// Relate_TypeID is the unique identifier for the type Relate.
const Relate_TypeID = 0xa9c6a69d1e155cd4

func NewRelate(s *capnp.Segment) (Relate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Relate{st}, err
}

func NewRootRelate(s *capnp.Segment) (Relate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Relate{st}, err
}

func ReadRootRelate(msg *capnp.Message) (Relate, error) {
	root, err := msg.RootPtr()
	return Relate{root.Struct()}, err
}

func (s Relate) String() string {
	str, _ := text.Marshal(0xa9c6a69d1e155cd4, s.Struct)
	return str
}

func (s Relate) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(0)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s Relate) HasObject() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Relate) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s Relate) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Relate) ToObject() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s Relate) HasToObject() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Relate) SetToObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewToObject sets the toObject field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s Relate) NewToObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Relate) Str() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Relate) HasStr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Relate) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Relate) SetStr(v string) error {
	return s.Struct.SetText(2, v)
}

// Relate_List is a list of Relate.
type Relate_List struct{ capnp.List }

// NewRelate creates a new list of Relate.
func NewRelate_List(s *capnp.Segment, sz int32) (Relate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Relate_List{l}, err
}

func (s Relate_List) At(i int) Relate { return Relate{s.List.Struct(i)} }

func (s Relate_List) Set(i int, v Relate) error { return s.List.SetStruct(i, v.Struct) }

func (s Relate_List) String() string {
	str, _ := text.MarshalList(0xa9c6a69d1e155cd4, s.List)
	return str
}

// Relate_Promise is a wrapper for a Relate promised by a client call.
type Relate_Promise struct{ *capnp.Pipeline }

func (p Relate_Promise) Struct() (Relate, error) {
	s, err := p.Pipeline.Struct()
	return Relate{s}, err
}

func (p Relate_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Relate_Promise) ToObject() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Relation struct{ capnp.Struct }

// Relation_TypeID is the unique identifier for the type Relation.
const Relation_TypeID = 0xd538f638d7af42fb

func NewRelation(s *capnp.Segment) (Relation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Relation{st}, err
}

func NewRootRelation(s *capnp.Segment) (Relation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Relation{st}, err
}

func ReadRootRelation(msg *capnp.Message) (Relation, error) {
	root, err := msg.RootPtr()
	return Relation{root.Struct()}, err
}

func (s Relation) String() string {
	str, _ := text.Marshal(0xd538f638d7af42fb, s.Struct)
	return str
}

func (s Relation) At() (reader.Pos, error) {
	p, err := s.Struct.Ptr(0)
	return reader.Pos{Struct: p.Struct()}, err
}

func (s Relation) HasAt() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Relation) SetAt(v reader.Pos) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAt sets the at field to a newly
// allocated reader.Pos struct, preferring placement in s's segment.
func (s Relation) NewAt() (reader.Pos, error) {
	ss, err := reader.NewPos(s.Struct.Segment())
	if err != nil {
		return reader.Pos{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Relation) Str() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Relation) HasStr() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Relation) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Relation) SetStr(v string) error {
	return s.Struct.SetText(1, v)
}

// Relation_List is a list of Relation.
type Relation_List struct{ capnp.List }

// NewRelation creates a new list of Relation.
func NewRelation_List(s *capnp.Segment, sz int32) (Relation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Relation_List{l}, err
}

func (s Relation_List) At(i int) Relation { return Relation{s.List.Struct(i)} }

func (s Relation_List) Set(i int, v Relation) error { return s.List.SetStruct(i, v.Struct) }

func (s Relation_List) String() string {
	str, _ := text.MarshalList(0xd538f638d7af42fb, s.List)
	return str
}

// Relation_Promise is a wrapper for a Relation promised by a client call.
type Relation_Promise struct{ *capnp.Pipeline }

func (p Relation_Promise) Struct() (Relation, error) {
	s, err := p.Pipeline.Struct()
	return Relation{s}, err
}

func (p Relation_Promise) At() reader.Pos_Promise {
	return reader.Pos_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type RelativeOf struct{ capnp.Struct }

// RelativeOf_TypeID is the unique identifier for the type RelativeOf.
const RelativeOf_TypeID = 0xa11a8c0eb0d49e5c

func NewRelativeOf(s *capnp.Segment) (RelativeOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RelativeOf{st}, err
}

func NewRootRelativeOf(s *capnp.Segment) (RelativeOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RelativeOf{st}, err
}

func ReadRootRelativeOf(msg *capnp.Message) (RelativeOf, error) {
	root, err := msg.RootPtr()
	return RelativeOf{root.Struct()}, err
}

func (s RelativeOf) String() string {
	str, _ := text.Marshal(0xa11a8c0eb0d49e5c, s.Struct)
	return str
}

func (s RelativeOf) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RelativeOf) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RelativeOf) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RelativeOf) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RelativeOf) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s RelativeOf) HasObject() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RelativeOf) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s RelativeOf) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// RelativeOf_List is a list of RelativeOf.
type RelativeOf_List struct{ capnp.List }

// NewRelativeOf creates a new list of RelativeOf.
func NewRelativeOf_List(s *capnp.Segment, sz int32) (RelativeOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RelativeOf_List{l}, err
}

func (s RelativeOf_List) At(i int) RelativeOf { return RelativeOf{s.List.Struct(i)} }

func (s RelativeOf_List) Set(i int, v RelativeOf) error { return s.List.SetStruct(i, v.Struct) }

func (s RelativeOf_List) String() string {
	str, _ := text.MarshalList(0xa11a8c0eb0d49e5c, s.List)
	return str
}

// RelativeOf_Promise is a wrapper for a RelativeOf promised by a client call.
type RelativeOf_Promise struct{ *capnp.Pipeline }

func (p RelativeOf_Promise) Struct() (RelativeOf, error) {
	s, err := p.Pipeline.Struct()
	return RelativeOf{s}, err
}

func (p RelativeOf_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type RelativesOf struct{ capnp.Struct }

// RelativesOf_TypeID is the unique identifier for the type RelativesOf.
const RelativesOf_TypeID = 0xaa48351c4298dcb6

func NewRelativesOf(s *capnp.Segment) (RelativesOf, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RelativesOf{st}, err
}

func NewRootRelativesOf(s *capnp.Segment) (RelativesOf, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RelativesOf{st}, err
}

func ReadRootRelativesOf(msg *capnp.Message) (RelativesOf, error) {
	root, err := msg.RootPtr()
	return RelativesOf{root.Struct()}, err
}

func (s RelativesOf) String() string {
	str, _ := text.Marshal(0xaa48351c4298dcb6, s.Struct)
	return str
}

func (s RelativesOf) Str() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RelativesOf) HasStr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RelativesOf) StrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RelativesOf) SetStr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RelativesOf) Object() (rtx.TextEval, error) {
	p, err := s.Struct.Ptr(1)
	return rtx.TextEval{Struct: p.Struct()}, err
}

func (s RelativesOf) HasObject() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RelativesOf) SetObject(v rtx.TextEval) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewObject sets the object field to a newly
// allocated rtx.TextEval struct, preferring placement in s's segment.
func (s RelativesOf) NewObject() (rtx.TextEval, error) {
	ss, err := rtx.NewTextEval(s.Struct.Segment())
	if err != nil {
		return rtx.TextEval{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// RelativesOf_List is a list of RelativesOf.
type RelativesOf_List struct{ capnp.List }

// NewRelativesOf creates a new list of RelativesOf.
func NewRelativesOf_List(s *capnp.Segment, sz int32) (RelativesOf_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RelativesOf_List{l}, err
}

func (s RelativesOf_List) At(i int) RelativesOf { return RelativesOf{s.List.Struct(i)} }

func (s RelativesOf_List) Set(i int, v RelativesOf) error { return s.List.SetStruct(i, v.Struct) }

func (s RelativesOf_List) String() string {
	str, _ := text.MarshalList(0xaa48351c4298dcb6, s.List)
	return str
}

// RelativesOf_Promise is a wrapper for a RelativesOf promised by a client call.
type RelativesOf_Promise struct{ *capnp.Pipeline }

func (p RelativesOf_Promise) Struct() (RelativesOf, error) {
	s, err := p.Pipeline.Struct()
	return RelativesOf{s}, err
}

func (p RelativesOf_Promise) Object() rtx.TextEval_Promise {
	return rtx.TextEval_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

const schema_80f117e3931e76db = "x\xda\xdc\x95_h\x1cU\x14\xc6\xcf\xb9ww'\x96" +
	"\xc5\xecpS[\xc2\xd2\xbd.>d\xa5]\x1ai\xd9" +
	"\x90\x97v\xdb\x8aZ\x8c\xdb\xbb/R)\xc8t{c" +
	"\xb7\xcc\xce\x0d;\xb3I}\x11_\xdbZ\x11\xd3B)" +
	"\xd6?\x95V\x0c\x96Ji\xa5\xf8\xa6\xa8U\xf0A$" +
	"R\x82A\x1f\xa4\x05\xf1)}(T\x1fFnfv" +
	"v\x92L\xf3\x10\xf5\xc1\xbc\xde\xf98s\xcf\xf7;\xdf" +
	"=\xdbO\x91\xddd8\xbd\x89\x00\x88\xcd\xe9\x8c\x9f\x9f" +
	"\xbb=\xfb\xe3\xd6\x13\xd3`n@\xff\xe7\xc9-\xd3\xbf" +
	"mZx\x1d\xd2\xc4\x000\x17>7\x1f\x18\xe6\x83\x1a" +
	";\x81S\x80\xfe\xa1wg?}\xf4\x8d\xc1\x0f\x12\xa4" +
	"L\x90\x19v\x90\x18\xec \xa9\xb1;D\xabg\x0fm" +
	"\xdcr\xe1\xf27\x1f/SS\xad\xbeBO\xb2\x1b\xd4" +
	"`7h\x8d=\x9e\xba\x0a\xe8\x7f6\x7fnO~\xe7" +
	"\xb33I\xb5K\xe9kl8m\xb0\xe1t\x8d}\x9d" +
	"\xd6\xb5\xff\xdas\xf5\xf6\xc8\xfd\x91\x9f\x92\xd4\xa73\xe7" +
	"\xd9\xd9\x8c\xc1\xcef*l.\xa3\xd5s\xaf]|\xe6" +
	"\x8b\xf9\x97\xe7\x93\xd4\x17\x8c/\xd9%\xc3`\x97\x8c\x1a" +
	"\xdb\xd9\xa7\xd5mi\x97\x1b\xd6\x84\x83\x13\xa3u\xd9h" +
	"N\xb4w\xa9\x86e\xd7\xc6\x0f \x8a,\x12\xff\xd6\xd8" +
	"\xec\x95O\xd4\xc0i\x10y\x82\xd5\xad\xe8_\xfe\xf3\xfe" +
	"]\xe3\xcc\xd4/ \x86\x08VG\xd0\xff\xe3\x87R\xeb" +
	"\xd4G\xc5i\x10;\x08V\x8f\"f\x01L|\xc9\x0f" +
	"\xca\xa9\x06P\xcb\x06\x08N\xeb\xfa\x7f\x96\xd7T\x0e\xa0" +
	"\x1b\x1c\x0e\xe3y\xe2\xd7\xa5\xd7i;.\x7f\xc4;*" +
	"y\xb35a7\xe5\x11\x1eH'%W\xe3\xdc\xe2\x8e" +
	"\xea8|H\x1e/s\xadqU\xa7\xdd\x90\xbc\xe9p" +
	"\x8b+Gn\xf3\xd4\xb6\x96\xe5\xbc\xca\xbb\xe5i\xb9\x04" +
	" \xfah\x0a \x85\x00f\xa9h\x96*\xc2\xa6(\x8e" +
	"\x134\x11\x07P\x9fvF\xcdNA\x9c\xa1(\xde'" +
	"h\xb8^[\xf4-i9G\xb0\x9aG\xdf\xda;\xf7" +
	"\xde\x8b\x1f~\xf7&\x88\xcd\x04\xabCa\x87E\xa3-" +
	"\xa3\xc6\xf6\xf7\x1a\x03\xfd\x9d`\x16p\x97:|L6" +
	"<\x91ZR4E\xb0\x9a\x0bk\x8c\x86\x12\x00\xcc\xf9" +
	"O\xed\xbdy\xc7\xbc\xfb\xedE]!\xb7\x1c\x8d.\xde" +
	"?)\xd7\x0e\xe6\x08voZ\x0f}\x0dn\xfa0*" +
	"\xf5\x1e\x95>\xed\xf8j4<\xab\xfd\x8a\xf4\x82/!" +
	"\x0d\xe5\xc8\x08F\x19\xd7\x1f\x0c\x09\x90Lb(N\xe2" +
	"\x09\x82\xd5\x1dq\x12\xdb\x09V\xf7E\xff\xebVz(" +
	"\x06\x13\xdf\x0epI\xee\xe1\x94Z\xb4\xdd\xc52\x80\xc8" +
	"Fn>=\x0a vS\x14\xcf\xc7\xcc|n\xbf9" +
	"V\x88,&d\x00\x89\xb6\xb8hv*\xe2&E\xf1" +
	"\x15\xe9\x1a\x92\xd0\xab\xa7j\xa1\x11\xb0\x8a]\x83\xd4S" +
	"IV\xfd\xfb\xe8V&\xa10)\xdd\xb5G\xc1\x8e\xe6" +
	">\x8aB\xcf\xf0\xc40\xdc\xeb\x85aC<\x0cn," +
	"\x0d\x96\xcb-n7\xdd\xc5\x1c8VK\xba\xcb\x03\xb2" +
	"\xa8^\xf1Z\x15\x9a\xca)\x95\xd7\xdfkE\x95\xa3\x01" +
	"\xad\xbc#\x8f\x03\xca\xc7\xeex,\xe4\xa1\x1c\xe8\x7f\xc1" +
	"jE\xc1x\xb2\xbf\xd5t\x1bK\x1d\x1a4K\x05\xb1" +
	"\x8f\xa28\x10sh\xach\x8eU\xc4[\x14\xc5;\x04" +
	"\xa9\x15\xf4\xf2\xeb\xad\xeb\xbf\x9f\xdbXY\x08z\xc9\"" +
	"P\xcc\xf9\x8f\x9d,\xde\xbbv=\xff\xfd\x7f?\xb3\xa4" +
	"\xbbX\xf5^uk\xe3\xf0O7\xeb\xe1\xdef5," +
	"{\xf5\xb9\x9dY\xf3j\x0d'[\x8f\xe9\xb2\xe5\xda\xaf" +
	"\x9c\xff\xffr\xfd;\x00\x00\xff\xff\x14\xed\xd6\x02"

func init() {
	schemas.Register(schema_80f117e3931e76db,
		0x93892cd2d4d7d91c,
		0xa11a8c0eb0d49e5c,
		0xa9c6a69d1e155cd4,
		0xaa48351c4298dcb6,
		0xd538f638d7af42fb,
		0xdc5fdcc147a27ed9)
}
