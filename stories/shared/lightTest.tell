Tapestry:
  - Test:dependsOn:do:
      - "vision test"
      - "Kitchenette"
      - - Set:trait:
            - "Kitchen"
            - "unlit"
        - Say: "{if contains_light: .cabinet}ng: The cabinet has light.{else}ok: The cabinet is dark.{end}"
        - Expect output: "ok: The cabinet is dark."
        - Set:trait:
            - "Kitchen"
            - "lit"
        - Say: "{if contains_light: .cabinet}ok: The cabinet has light.{else}ng: The cabinet is dark.{end}"
        - Expect output: "ok: The cabinet has light."
        - Set:trait:
            - "cabinet"
            - "closed"
        - Say: "{if contains_light: .cabinet}ng: The cabinet has light.{else}ok: The cabinet is dark.{end}"
        - Expect output: "ok: The cabinet is dark."
        - Set:trait:
            - "matches"
            - "lit"
        - Say: "{if contains_light: .cabinet}ok: The cabinet has light.{else}ng: The cabinet is dark.{end}"
        - Expect output: "ok: The cabinet has light."
  - Test:dependsOn:withScene:do:
      - "the gloom"
      - "kitchenette"
      - - Declare: "The kitchen is unlit. You are carrying the flashlight. The flashlight is unlit."
        - Define rule:noun:do:
            - "after activating"
            - "flashlight"
            - - Set:trait:
                  - "flashlight"
                  - "lit"
        - Define rule:noun:do:
            - "after deactivating"
            - "flashlight"
            - - Set:trait:
                  - "flashlight"
                  - "unlit"
      - - StartGame actor:quietly:
            - FromText:
                Object:field:
                  - "player"
                  - "pawn"
            - FromBool: true
        - Fabricate input: "look"
        - Expect output:
            - "**Darkness**"
            - "It is pitch dark, and you can't see a thing."
        - Fabricate input: "switch on flashlight"
        - Expect output:
            - "You switch on the flashlight."
            - "**Kitchen**"
            - "Your Aunt Fiona's kitchen..."
