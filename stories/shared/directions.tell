Tapestry:
  - # Every room has a compass. The compass defines connections to other rooms.
    # Every direction is a both a noun, and a field of the compass.
    # New directions are defined with the 'DefineCompass' macro.
    Declare: "Compasses are kinds of records. Directions are kinds of objects."
  - Define kind:fields:
      - "Rooms"
      - - Record: "compass"
  - Define macro:requires:provides:do:
      - "define compass"
      - - # a unique name for this direction. ex. north.
          Text: "direction"
        - # an optional short name. additional names can be added using aliases.
          Text: "short"
        - # directions come in pairs. each should have a unique opposite direction.
          Text: "opposite"
      - - Nothing:
      - - Define nouns:as:
            - List ofText:
                - "@direction"
            - "direction"
        - Define:opposite:
            - "@direction"
            - "@opposite"
        - Define kind:fields:
            - "Compasses"
            - - Text:kind:
                  - "@direction"
                  - "door"
        - If:do:
            - Not:
                Is empty: "@short"
            - - Interpret alias:as:
                  - List ofText:
                      - "@short"
                  - "@direction"
  - Call macro:args:
      - "define_compass"
      - - Arg:from:
            - "direction"
            - FromText: "north"
        - Arg:from:
            - "short"
            - FromText: "n"
        - Arg:from:
            - "opposite"
            - FromText: "south"
  - Call macro:args:
      - "define_compass"
      - - Arg:from:
            - "direction"
            - FromText: "east"
        - Arg:from:
            - "short"
            - FromText: "e"
        - Arg:from:
            - "opposite"
            - FromText: "west"
  - Call macro:args:
      - "define_compass"
      - - Arg:from:
            - "direction"
            - FromText: "south"
        - Arg:from:
            - "short"
            - FromText: "s"
        - Arg:from:
            - "opposite"
            - FromText: "north"
  - Call macro:args:
      - "define_compass"
      - - Arg:from:
            - "direction"
            - FromText: "west"
        - Arg:from:
            - "short"
            - FromText: "w"
        - Arg:from:
            - "opposite"
            - FromText: "east"
  - Call macro:args:
      - "define_compass"
      - - Arg:from:
            - "direction"
            - FromText: "up"
        - Arg:from:
            - "short"
            - FromText: "u"
        - Arg:from:
            - "opposite"
            - FromText: "down"
  - Call macro:args:
      - "define_compass"
      - - Arg:from:
            - "direction"
            - FromText: "down"
        - Arg:from:
            - "short"
            - FromText: "d"
        - Arg:from:
            - "opposite"
            - FromText: "up"
  - Call macro:args:
      - "define_compass"
      - - Arg:from:
            - "direction"
            - FromText: "inside"
        - Arg:from:
            - "short"
            - FromText: "in"
        - Arg:from:
            - "opposite"
            - FromText: "outside"
  - Call macro:args:
      - "define_compass"
      - - Arg:from:
            - "direction"
            - FromText: "outside"
        - Arg:from:
            - "short"
            - FromText: "out"
        - Arg:from:
            - "opposite"
            - FromText: "inside"
  - Declare: "Doors are kinds of opener. Doors are usually fixed in place."
  - Define kind:fields:
      - "Doors"
      - - Text:kind:
            - "destination"
            - "room"
  - # given a room and its door, find the named direction it represents, if any.
    Define pattern:requires:provides:do:
      - "direction through"
      - - Text:kind:
            - "room"
            - "room"
        - Text:kind:
            - "door"
            - "door"
      - - # one of the fields of compass
          Text: "direction"
      - - Repeating across:as:do:
            - FromTextList:
                Fields of: "compasses"
            - "dir"
            - - If:do:
                  - Is:matching:text:
                      - "@door"
                      - "equal_to"
                      - Object:field:dot:
                          - "@room"
                          - "compass"
                          - - AtField: "@dir"
                  - - Set:value:
                        - "@direction"
                        - FromText: "@dir"
                    - Break:
  - # given a room and direction, find the matching door ( if any. )
    Define pattern:requires:provides:do:
      - "door via"
      - - Text:kind:
            - "room"
            - "room"
        - Text:kind:
            - "direction"
            - "direction"
      - - Text:kind:
            - "door"
            - "door"
      - - Set:value:
            - "@door"
            - FromText:
                Object:field:dot:
                  - "@room"
                  - "compass"
                  - - AtField: "@direction"
