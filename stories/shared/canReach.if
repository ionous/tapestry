{
  "Tapestry:": [
    {
      "--": "Determine whether an actor can touch some specific object.",
      "Define pattern:requires:result:provides:withRules:": [
        "can reach",
        [
          {
            "Text:kind:": [
              "actor",
              "actor"
            ]
          },
          {
            "Text:": "action"
          },
          {
            "--": "the target the agent is trying to reach",
            "Text:kind:": [
              "noun",
              "thing"
            ]
          },
          {
            "Bool:": "requires light"
          }
        ],
        {
          "Text:": "response"
        },
        [
          {
            "Text:kind:": [
              "i",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "next",
              "object"
            ]
          },
          {
            "Text:": "dig error"
          },
          {
            "Number:": "lca"
          },
          {
            "Text:": "reach response"
          },
          {
            "Number:": "reach error"
          },
          {
            "TextList:": "path"
          }
        ],
        {
          "PatternRule:do:": [
            true,
            [
              {
                "Set:from:": [
                  "@i",
                  {
                    "FromText:": "@actor"
                  }
                ]
              },
              {
                "Repeating:do:": [
                  {
                    "Not:": {
                      "Is empty:": "@i"
                    }
                  },
                  [
                    {
                      "Comment:": "There's no problem reaching yourself, so start by putting yourself in the list of visited places."
                    },
                    {
                      "Push:into:": [
                        {
                          "FromText:": "@i"
                        },
                        "@path"
                      ]
                    },
                    {
                      "Set:from:": [
                        "@next",
                        {
                          "FromText:": {
                            "ParentOf obj:": {
                              "FromText:": "@i"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "If:do:": [
                        {
                          "Is empty:": "@reach_response"
                        },
                        [
                          {
                            "Comment:": "Reach can only reject pairs. To force the acceptance of some particular source/target pair, reaching itself has to be customized. "
                          },
                          {
                            "If:from:and:do:": [
                              "response",
                              {
                                "FromText:": {
                                  "ReachUp fromObj:intoObj:actor:noun:action:": [
                                    {
                                      "FromText:": "@i"
                                    },
                                    {
                                      "FromText:": "@next"
                                    },
                                    {
                                      "FromText:": "@actor"
                                    },
                                    {
                                      "FromText:": "@noun"
                                    },
                                    {
                                      "FromText:": "@action"
                                    }
                                  ]
                                }
                              },
                              {
                                "Not:": {
                                  "Is empty:": "@response"
                                }
                              },
                              [
                                {
                                  "Set:from:": [
                                    "@reach_error",
                                    {
                                      "FromNumber:": {
                                        "Len:": {
                                          "FromTextList:": "@path"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "Set:from:": [
                                    "@reach_response",
                                    {
                                      "FromText:": "@response"
                                    }
                                  ]
                                },
                                {
                                  "Comment:": [
                                    "This doesn't exit the loop. ",
                                    "It builds a complete hierarchy to help determine if the lca exists and if so, is the lca completely unreachable or merely blocked."
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    },
                    {
                      "Set:from:": [
                        "@i",
                        {
                          "FromText:": "@next"
                        }
                      ]
                    }
                  ]
                ]
              },
              {
                "Comment:": "Simulate digging down from the (yet to be determined) lca by digging up from the target noun (until we find the lca.)"
              },
              {
                "Log:value:": [
                  "note",
                  {
                    "FromTextList:": "@path"
                  }
                ]
              },
              {
                "Set:from:": [
                  "@i",
                  {
                    "FromText:": "@noun"
                  }
                ]
              },
              {
                "Repeating:do:": [
                  {
                    "Not:": {
                      "Is empty:": "@i"
                    }
                  },
                  [
                    {
                      "Set:from:": [
                        "@lca",
                        {
                          "FromNumber:": {
                            "Find:inList:": [
                              {
                                "FromText:": "@i"
                              },
                              {
                                "FromTextList:": "@path"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "If:do:": [
                        {
                          "Cmp:is:num:": [
                            "@lca",
                            "greater_than",
                            0
                          ]
                        },
                        [
                          {
                            "Comment:": "Exit once we've found the lca."
                          },
                          {
                            "Break": true
                          }
                        ]
                      ]
                    },
                    {
                      "Set:from:": [
                        "@next",
                        {
                          "FromText:": {
                            "ParentOf obj:": {
                              "FromText:": "@i"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "If:from:and:do:": [
                        "response",
                        {
                          "FromText:": {
                            "ReachDown fromObj:intoObj:actor:noun:action:": [
                              {
                                "FromText:": "@next"
                              },
                              {
                                "FromText:": "@i"
                              },
                              {
                                "FromText:": "@actor"
                              },
                              {
                                "FromText:": "@noun"
                              },
                              {
                                "FromText:": "@action"
                              }
                            ]
                          }
                        },
                        {
                          "Not:": {
                            "Is empty:": "@response"
                          }
                        },
                        [
                          {
                            "Set:from:": [
                              "@dig_error",
                              {
                                "FromText:": "@response"
                              }
                            ]
                          },
                          {
                            "Comment:": [
                              "To find the outermost dig error keep going, ",
                              "updating the error each time."
                            ]
                          }
                        ]
                      ]
                    },
                    {
                      "Set:from:": [
                        "@i",
                        {
                          "FromText:": "@next"
                        }
                      ]
                    }
                  ]
                ]
              },
              {
                "Comment:": "Return the best response."
              },
              {
                "If:do:else:": [
                  {
                    "Cmp:is:num:": [
                      "@lca",
                      "equal_to",
                      0
                    ]
                  },
                  [
                    {
                      "Comment:": "No lca ever found? That's the most important error."
                    },
                    {
                      "Set:from:": [
                        "@response",
                        {
                          "FromText:": {
                            "Print response:with:": [
                              "can't reach a common ancestor",
                              {
                                "Say:": "{They:.noun|capitalize!} {arent:.noun} available."
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  {
                    "Else if:do:else:": [
                      {
                        "Cmp:is:num:": [
                          "@reach_error",
                          "less_than",
                          "@lca"
                        ]
                      },
                      [
                        {
                          "Comment:": "There is an error reaching up from the actor towards the lca."
                        },
                        {
                          "Set:from:": [
                            "@response",
                            {
                              "FromText:": "@reach_response"
                            }
                          ]
                        }
                      ],
                      {
                        "Else if:do:": [
                          {
                            "Not:": {
                              "Is empty:": "@dig_error"
                            }
                          },
                          [
                            {
                              "Comment:": "There was no error reaching up to the lca, so return any errors digging down to the noun."
                            },
                            {
                              "Set:from:": [
                                "@response",
                                {
                                  "FromText:": "@dig_error"
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      ]
    },
    {
      "Rule for:do:": [
        "before can reach",
        {
          "If:do:": [
            {
              "AllTrue:": [
                "@requires_light",
                {
                  "Object:field:": [
                    "@actor",
                    "is in darkness"
                  ]
                }
              ]
            },
            [
              {
                "Comment:": [
                  "Used to determine whether an action needing light can proceed.",
                  "Returns some response text if the action is blocked.",
                  "Relies on the player's \"is in darkness\" which gets calculated once per turn ( in \"adjusting light.\" )"
                ]
              },
              {
                "Set:from:": [
                  "@response",
                  {
                    "FromText:": {
                      "Print response:with:": [
                        "can't act in the dark",
                        {
                          "Say:": "It is pitch dark, and {we!} can't see a thing."
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Define pattern:requires:result:withRules:": [
        "reach up",
        [
          {
            "Text:kind:": [
              "from obj",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "into obj",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "actor",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "noun",
              "object"
            ]
          },
          {
            "Text:": "action"
          }
        ],
        {
          "Text:": "response"
        },
        []
      ]
    },
    {
      "Extend pattern:withRules:": [
        "reach up",
        [
          {
            "PatternRule:do:": [
              true,
              [
                {
                  "Log:value:": [
                    "note",
                    {
                      "FromText:": {
                        "Say:": "reach up: from:{.from_obj} -> into:{.into_obj}"
                      }
                    }
                  ]
                }
              ]
            ]
          },
          {
            "PatternRule:do:": [
              {
                "KindOf:is:": [
                  "@from_obj",
                  "rooms"
                ]
              },
              [
                {
                  "Set:from:": [
                    "@response",
                    {
                      "FromText:": {
                        "Print response:with:": [
                          "can't reach outside rooms",
                          {
                            "Say:": "{They:.noun|capitalize!} {arent:.noun} available."
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          },
          {
            "PatternRule:do:": [
              {
                "AllTrue:": [
                  {
                    "KindOf:is:": [
                      "@from_obj",
                      "containers"
                    ]
                  },
                  {
                    "Object:field:": [
                      "@from_obj",
                      "closed"
                    ]
                  }
                ]
              },
              [
                {
                  "Set:from:": [
                    "@response",
                    {
                      "FromText:": {
                        "Print response:with:": [
                          "can't reach outside closed containers",
                          {
                            "Say:": "{The: .from_obj|capitalize!} {arent: .from_obj} open."
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "Define pattern:requires:result:withRules:": [
        "reach down",
        [
          {
            "Text:kind:": [
              "from obj",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "into obj",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "actor",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "noun",
              "object"
            ]
          },
          {
            "Text:": "action"
          }
        ],
        {
          "Text:": "response"
        },
        []
      ]
    },
    {
      "Extend pattern:withRules:": [
        "reach down",
        [
          {
            "PatternRule:do:": [
              true,
              [
                {
                  "Log:value:": [
                    "note",
                    {
                      "FromText:": {
                        "Say:": "reach down: from:{.from_obj} -> into:{.into_obj}"
                      }
                    }
                  ]
                }
              ]
            ]
          },
          {
            "PatternRule:do:": [
              {
                "KindOf:is:": [
                  "@into_obj",
                  "rooms"
                ]
              },
              [
                {
                  "Set:from:": [
                    "@response",
                    {
                      "FromText:": {
                        "Print response:with:": [
                          "can't reach inside rooms",
                          {
                            "Say:": "{We:|capitalize!} can't reach into {the: .into_obj}."
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          },
          {
            "PatternRule:do:": [
              {
                "AllTrue:": [
                  {
                    "KindOf:is:": [
                      "@into_obj",
                      "containers"
                    ]
                  },
                  {
                    "Object:field:": [
                      "@into_obj",
                      "closed"
                    ]
                  },
                  {
                    "Not:": {
                      "Cmp:is:txt:": [
                        "@into_obj",
                        "equal_to",
                        "@noun"
                      ]
                    }
                  }
                ]
              },
              [
                {
                  "Set:from:": [
                    "@response",
                    {
                      "FromText:": {
                        "Print response:with:": [
                          "can't reach inside closed containers",
                          {
                            "Say:": "{The: .into_obj|capitalize!} {arent: .into_obj} open."
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    }
  ]
}
