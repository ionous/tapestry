{
  "Story:": [
    {
      "KindOfRelation:cardinality oneToMany:": [
        "whereabouts",
        {
          "OneToMany:kinds:": [
            "object",
            "objects"
          ]
        }
      ]
    },
    {
      "Comment:": "The placement of objects in the game world.  One parent to many children. "
    },
    {
      "--": ""
    },
    {
      "--": [
        "An object indicating the position or ownership of another:",
        "a kitchen with a cook, a cook holding a sack, a sack containing some flour."
      ],
      "Pattern:requires:returns:": [
        "parentOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "Text named:of:": [
              "parent",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Pattern:rules:": [
        "parentOf",
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "parent",
                        {
                          "FromTxt:": {
                            "Reciprocal:object:": [
                              "whereabouts",
                              "@obj"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "PatternRule:hook activity:": [
                {
                  "KindOf:is:": [
                    "@obj",
                    "agents"
                  ]
                },
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "parent",
                        {
                          "FromTxt:": {
                            "Reciprocal:object:": [
                              "whereabouts",
                              {
                                "Get:from:": [
                                  "pawn",
                                  {
                                    "VarFields:": "obj"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "parentsOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "TextList named:": "list"
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "parentsOf",
        {
          "PatternLocals:": [
            {
              "Text named:of:initially:": [
                "it",
                "object",
                "@obj"
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "Repeating:do:": [
                        {
                          "Not:": {
                            "Is empty:": "@it"
                          }
                        },
                        {
                          "Act:": [
                            {
                              "Put:into:": [
                                "@it",
                                {
                                  "IntoTxts:": "list"
                                }
                              ]
                            },
                            {
                              "Let:be:": [
                                "it",
                                {
                                  "FromTxt:": {
                                    "ParentOf obj:": {
                                      "FromTxt:": "@it"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "childrenOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "TextList named:": "kids"
          }
        }
      ]
    },
    {
      "Pattern:rules:": [
        "childrenOf",
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "kids",
                        {
                          "FromTxts:": {
                            "Relatives:object:": [
                              "whereabouts",
                              "@obj"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": "The room in which an object can be found.",
      "Pattern:requires:returns:": [
        "CurrentRoom",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "Text named:of:": [
              "room",
              "room"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "CurrentRoom",
        {
          "PatternLocals:": [
            {
              "Text named:of:initially:": [
                "search",
                "object",
                "@obj"
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "Repeating:do:": [
                        {
                          "Not:": {
                            "Is empty:": "@search"
                          }
                        },
                        {
                          "Act:": [
                            {
                              "If:do:": [
                                {
                                  "KindOf:is:": [
                                    "@search",
                                    "rooms"
                                  ]
                                },
                                {
                                  "Act:": [
                                    {
                                      "Let:be:": [
                                        "room",
                                        {
                                          "FromTxt:": "@search"
                                        }
                                      ]
                                    },
                                    {
                                      "Break": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "Let:be:": [
                                "search",
                                {
                                  "FromTxt:": {
                                    "ParentOf obj:": "@search"
                                  }
                                }
                              ]
                            },
                            {
                              "If:do:": [
                                {
                                  "Cmp:is:txt:": [
                                    "@search",
                                    {
                                      "Equals": []
                                    },
                                    "@obj"
                                  ]
                                },
                                {
                                  "Act:": [
                                    {
                                      "Comment:": "parent cycle detected"
                                    },
                                    {
                                      "Break": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "Finds the innermost object housing two objects.",
        "However, if one object directly encloses the other, it will return that object."
      ],
      "Pattern:requires:returns:": [
        "Common Ancestor",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "object",
                "object"
              ]
            },
            {
              "Text named:of:": [
                "other object",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "Text named:of:": [
              "ancestor",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "Common Ancestor",
        {
          "PatternLocals:": [
            {
              "Text named:of:": [
                "o1",
                "object"
              ]
            },
            {
              "Text named:of:": [
                "o2",
                "object"
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "o1",
                        "@object"
                      ]
                    },
                    {
                      "Comment:": "we search every parent of the second object for every parent of the first object. slow but simple. "
                    },
                    {
                      "Repeating:do:": [
                        {
                          "Is empty:": "@ancestor"
                        },
                        {
                          "Act:": [
                            {
                              "Let:be:": [
                                "o2",
                                "@other object"
                              ]
                            },
                            {
                              "Repeating:do:": [
                                true,
                                {
                                  "Act:": [
                                    {
                                      "If:do:": [
                                        {
                                          "Cmp:is:txt:": [
                                            "@o1",
                                            {
                                              "Equals": []
                                            },
                                            "@o2"
                                          ]
                                        },
                                        {
                                          "Act:": [
                                            {
                                              "Comment:": "success!"
                                            },
                                            {
                                              "Let:be:": [
                                                "ancestor",
                                                "@o2"
                                              ]
                                            },
                                            {
                                              "Break": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "Let:be:": [
                                        "o2",
                                        {
                                          "FromTxt:": {
                                            "ParentOf obj:": "@o2"
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "If:do:else:": [
                                        {
                                          "Cmp:is:txt:": [
                                            "@o2",
                                            {
                                              "Equals": []
                                            },
                                            "@other object"
                                          ]
                                        },
                                        {
                                          "Act:": [
                                            {
                                              "Break": []
                                            }
                                          ]
                                        },
                                        {
                                          "ElseIf:do:": [
                                            {
                                              "Cmp:is:txt:": [
                                                "@o2",
                                                {
                                                  "Equals": []
                                                },
                                                ""
                                              ]
                                            },
                                            {
                                              "Act:": [
                                                {
                                                  "Break": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "Let:be:": [
                                "o1",
                                {
                                  "FromTxt:": {
                                    "ParentOf obj:": "@o1"
                                  }
                                }
                              ]
                            },
                            {
                              "If:do:else:": [
                                {
                                  "Cmp:is:txt:": [
                                    "@o1",
                                    {
                                      "Equals": []
                                    },
                                    "@object"
                                  ]
                                },
                                {
                                  "Act:": [
                                    {
                                      "Comment:": "parent cycle detected"
                                    },
                                    {
                                      "Break": []
                                    }
                                  ]
                                },
                                {
                                  "ElseIf:do:": [
                                    {
                                      "Cmp:is:txt:": [
                                        "@o1",
                                        {
                                          "Equals": []
                                        },
                                        ""
                                      ]
                                    },
                                    {
                                      "Act:": [
                                        {
                                          "Comment:": "out of world"
                                        },
                                        {
                                          "Break": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "ancestorOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            },
            {
              "Text named:of:": [
                "root",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "--": "true if one object acts as the ancestor of another.",
            "Bool named:": "isAncestor"
          }
        }
      ]
    },
    {
      "Comment:": "Returns true if the root is a parent of the object. "
    },
    {
      "Pattern:provides:rules:": [
        "ancestorOf",
        {
          "PatternLocals:": [
            {
              "Text named:of:": [
                "up",
                "object"
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "up",
                        {
                          "FromTxt:": "@obj"
                        }
                      ]
                    },
                    {
                      "Repeating:do:": [
                        true,
                        {
                          "Act:": [
                            {
                              "Comment:": "Step up immediately, indirect implies objects dont hold themselves."
                            },
                            {
                              "Let:be:": [
                                "up",
                                {
                                  "FromTxt:": {
                                    "ParentOf obj:": "@up"
                                  }
                                }
                              ]
                            },
                            {
                              "If:do:else:": [
                                {
                                  "Cmp:is:txt:": [
                                    "@up",
                                    {
                                      "Equals": []
                                    },
                                    "@obj"
                                  ]
                                },
                                {
                                  "Act:": [
                                    {
                                      "Comment:": "parent cycle detected"
                                    },
                                    {
                                      "Break": []
                                    }
                                  ]
                                },
                                {
                                  "ElseIf:do:": [
                                    {
                                      "Cmp:is:txt:": [
                                        "@up",
                                        {
                                          "Equals": []
                                        },
                                        ""
                                      ]
                                    },
                                    {
                                      "Act:": [
                                        {
                                          "Comment:": "out of world"
                                        },
                                        {
                                          "Break": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "If:do:": [
                                {
                                  "Cmp:is:txt:": [
                                    "@up",
                                    {
                                      "Equals": []
                                    },
                                    "@root"
                                  ]
                                },
                                {
                                  "Act:": [
                                    {
                                      "Comment:": "success!"
                                    },
                                    {
                                      "Let:be:": [
                                        "isAncestor",
                                        {
                                          "FromBool:": true
                                        }
                                      ]
                                    },
                                    {
                                      "Break": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "locationOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "Text named:of:": [
              "location",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Comment:": "Return the parent of an object if the parent is a valid enclosure. By default this means a room, a supporter, or a container. "
    },
    {
      "Pattern:provides:rules:": [
        "locationOf",
        {
          "PatternLocals:": [
            {
              "Text named:of:initially:": [
                "parent",
                "object",
                {
                  "ParentOf obj:": "@obj"
                }
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "If:do:": [
                        {
                          "AnyTrue:": [
                            {
                              "KindOf:is:": [
                                "@parent",
                                "containers"
                              ]
                            },
                            {
                              "KindOf:is:": [
                                "@parent",
                                "supporters"
                              ]
                            },
                            {
                              "KindOf:is:": [
                                "@parent",
                                "rooms"
                              ]
                            }
                          ]
                        },
                        {
                          "Act:": [
                            {
                              "Let:be:": [
                                "location",
                                "@parent"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "SupporterOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "Text named:of:": [
              "supporter",
              "supporter"
            ]
          }
        }
      ]
    },
    {
      "Comment:": "Return the parent of an object if the parent is a kind of supporter. "
    },
    {
      "Pattern:provides:rules:": [
        "SupporterOf",
        {
          "PatternLocals:": [
            {
              "Text named:of:initially:": [
                "parent",
                "object",
                {
                  "ParentOf obj:": "@obj"
                }
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "If:do:": [
                        {
                          "KindOf:is:": [
                            "@parent",
                            "supporters"
                          ]
                        },
                        {
                          "Act:": [
                            {
                              "Let:be:": [
                                "supporter",
                                "@parent"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "ContainerOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "Text named:of:": [
              "container",
              "container"
            ]
          }
        }
      ]
    },
    {
      "Comment:": "Return the parent of an object if the parent is a kind of container. "
    },
    {
      "Pattern:provides:rules:": [
        "ContainerOf",
        {
          "PatternLocals:": [
            {
              "Text named:of:initially:": [
                "parent",
                "object",
                {
                  "ParentOf obj:": "@obj"
                }
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "If:do:": [
                        {
                          "KindOf:is:": [
                            "@parent",
                            "containers"
                          ]
                        },
                        {
                          "Act:": [
                            {
                              "Let:be:": [
                                "container",
                                "@parent"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "holderOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "Text named:of:": [
              "owner",
              "actor"
            ]
          }
        }
      ]
    },
    {
      "Comment:": "Return the parent of an object if the parent is wearing or carrying the object. "
    },
    {
      "Pattern:provides:rules:": [
        "holderOf",
        {
          "PatternLocals:": [
            {
              "Text named:of:": [
                "parent",
                "object"
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "parent",
                        {
                          "FromTxt:": {
                            "ParentOf obj:": "@obj"
                          }
                        }
                      ]
                    },
                    {
                      "If:do:": [
                        {
                          "KindOf:is:": [
                            "@parent",
                            "actors"
                          ]
                        },
                        {
                          "Act:": [
                            {
                              "Let:be:": [
                                "owner",
                                "@parent"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "CarrierOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "Text named:of:": [
              "carrier",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Comment:": "Return the parent of an object if the parent is carrying the object. Only actors can carry other objects. "
    },
    {
      "Pattern:provides:rules:": [
        "CarrierOf",
        {
          "PatternLocals:": [
            {
              "Text named:of:": [
                "parent",
                "object"
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "parent",
                        {
                          "FromTxt:": {
                            "ParentOf obj:": "@obj"
                          }
                        }
                      ]
                    },
                    {
                      "If:do:": [
                        {
                          "AllTrue:": [
                            {
                              "KindOf:is:": [
                                "@parent",
                                "actors"
                              ]
                            },
                            {
                              "Get:from:": [
                                "not worn",
                                {
                                  "VarFields:": "obj"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "Act:": [
                            {
                              "Let:be:": [
                                "carrier",
                                "@parent"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "WearerOf",
        {
          "PatternParams:": [
            {
              "Text named:of:": [
                "obj",
                "object"
              ]
            }
          ]
        },
        {
          "PatternResult:": {
            "Text named:of:": [
              "wearer",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Comment:": "Return the parent of an object if the parent is wearing the object.  Only actors can wear other objects. "
    },
    {
      "Pattern:provides:rules:": [
        "WearerOf",
        {
          "PatternLocals:": [
            {
              "Text named:of:": [
                "parent",
                "object"
              ]
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                {
                  "Always": []
                },
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "parent",
                        {
                          "FromTxt:": {
                            "ParentOf obj:": "@obj"
                          }
                        }
                      ]
                    },
                    {
                      "If:do:": [
                        {
                          "AllTrue:": [
                            {
                              "KindOf:is:": [
                                "@parent",
                                "actors"
                              ]
                            },
                            {
                              "Get:from:": [
                                "worn",
                                {
                                  "VarFields:": "obj"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "Act:": [
                            {
                              "Let:be:": [
                                "wearer",
                                "@parent"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
