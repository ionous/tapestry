{
  "Tapestry:": [
    {
      "--": [
        "The relative location of objects in the game world.",
        "One parent (ex. a room) can have many children (ex. a table and chairs)."
      ],
      "KindOfRelation:cardinality oneToMany:": [
        "whereabouts",
        {
          "OneToMany:kinds:": [
            "object",
            "objects"
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "An object indicating the position or ownership of another:",
        "A kitchen encloses the cook, the cook holds a sack, the sack contains some flour."
      ],
      "Pattern:requires:returns:": [
        "parentOf",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "Text:kind:": [
              "parent",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Pattern:rules:": [
        "parentOf",
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "Let:be:": [
                    "parent",
                    {
                      "FromTxt:": {
                        "Reciprocal:object:": [
                          "whereabouts",
                          "@obj"
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          },
          {
            "PatternRule:does:": [
              {
                "KindOf:is:": [
                  "@obj",
                  "agents"
                ]
              },
              [
                {
                  "Let:be:": [
                    "parent",
                    {
                      "FromTxt:": {
                        "Reciprocal:object:": [
                          "whereabouts",
                          {
                            "Get:from:": [
                              "pawn",
                              {
                                "VarFields:": "obj"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "Returns the name of the specified object followed by all of its parents names.",
        "Often used for event handling."
      ],
      "Pattern:requires:returns:": [
        "Capture",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "TextList:": "list"
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "Capture",
        [
          {
            "Text:kind:initially:": [
              "it",
              "object",
              "@obj"
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "Repeating:does:": [
                    {
                      "Not:": {
                        "Is empty:": "@it"
                      }
                    },
                    [
                      {
                        "Put:into:": [
                          "@it",
                          {
                            "IntoTxts:": "list"
                          }
                        ]
                      },
                      {
                        "Let:be:": [
                          "it",
                          {
                            "FromTxt:": {
                              "ParentOf obj:": {
                                "FromTxt:": "@it"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "Pattern:requires:returns:": [
        "childrenOf",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "TextList:": "kids"
          }
        }
      ]
    },
    {
      "Pattern:rules:": [
        "childrenOf",
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "Let:be:": [
                    "kids",
                    {
                      "FromTxts:": {
                        "Relatives:object:": [
                          "whereabouts",
                          "@obj"
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": "The room in which an object can be found.",
      "Pattern:requires:returns:": [
        "CurrentRoom",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "Text:kind:": [
              "room",
              "room"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "CurrentRoom",
        [
          {
            "Text:kind:initially:": [
              "search",
              "object",
              "@obj"
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "Repeating:does:": [
                    {
                      "Not:": {
                        "Is empty:": "@search"
                      }
                    },
                    [
                      {
                        "If:does:": [
                          {
                            "KindOf:is:": [
                              "@search",
                              "rooms"
                            ]
                          },
                          [
                            {
                              "Let:be:": [
                                "room",
                                {
                                  "FromTxt:": "@search"
                                }
                              ]
                            },
                            {
                              "Break": true
                            }
                          ]
                        ]
                      },
                      {
                        "Let:be:": [
                          "search",
                          {
                            "FromTxt:": {
                              "ParentOf obj:": "@search"
                            }
                          }
                        ]
                      },
                      {
                        "If:does:": [
                          {
                            "Cmp:is:txt:": [
                              "@search",
                              {
                                "Equals": true
                              },
                              "@obj"
                            ]
                          },
                          [
                            {
                              "--": "Parent cycle detected",
                              "Break": true
                            }
                          ]
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "Finds the innermost object housing two objects.",
        "However, if one object directly encloses the other, it will return that object."
      ],
      "Pattern:requires:returns:": [
        "Common Ancestor",
        [
          {
            "Text:kind:": [
              "object",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "other object",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "Text:kind:": [
              "ancestor",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "Common Ancestor",
        [
          {
            "Text:kind:": [
              "o1",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "o2",
              "object"
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "Let:be:": [
                    "o1",
                    "@object"
                  ]
                },
                {
                  "--": "We search every parent of the second object for every parent of the first object. Slow but simple.",
                  "Repeating:does:": [
                    {
                      "Is empty:": "@ancestor"
                    },
                    [
                      {
                        "Let:be:": [
                          "o2",
                          "@other object"
                        ]
                      },
                      {
                        "Repeating:does:": [
                          true,
                          [
                            {
                              "If:does:": [
                                {
                                  "Cmp:is:txt:": [
                                    "@o1",
                                    {
                                      "Equals": true
                                    },
                                    "@o2"
                                  ]
                                },
                                [
                                  {
                                    "--": "Success!",
                                    "Let:be:": [
                                      "ancestor",
                                      "@o2"
                                    ]
                                  },
                                  {
                                    "Break": true
                                  }
                                ]
                              ]
                            },
                            {
                              "Let:be:": [
                                "o2",
                                {
                                  "FromTxt:": {
                                    "ParentOf obj:": "@o2"
                                  }
                                }
                              ]
                            },
                            {
                              "If:does:else:": [
                                {
                                  "Cmp:is:txt:": [
                                    "@o2",
                                    {
                                      "Equals": true
                                    },
                                    "@other object"
                                  ]
                                },
                                [
                                  {
                                    "Break": true
                                  }
                                ],
                                {
                                  "ElseIf:does:": [
                                    {
                                      "Cmp:is:txt:": [
                                        "@o2",
                                        {
                                          "Equals": true
                                        },
                                        ""
                                      ]
                                    },
                                    [
                                      {
                                        "Break": true
                                      }
                                    ]
                                  ]
                                }
                              ]
                            }
                          ]
                        ]
                      },
                      {
                        "Let:be:": [
                          "o1",
                          {
                            "FromTxt:": {
                              "ParentOf obj:": "@o1"
                            }
                          }
                        ]
                      },
                      {
                        "If:does:else:": [
                          {
                            "Cmp:is:txt:": [
                              "@o1",
                              {
                                "Equals": true
                              },
                              "@object"
                            ]
                          },
                          [
                            {
                              "--": "parent cycle detected",
                              "Break": true
                            }
                          ],
                          {
                            "ElseIf:does:": [
                              {
                                "Cmp:is:txt:": [
                                  "@o1",
                                  {
                                    "Equals": true
                                  },
                                  ""
                                ]
                              },
                              [
                                {
                                  "--": "out of world",
                                  "Break": true
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": "Returns true if the root is a parent of the object.",
      "Pattern:requires:returns:": [
        "ancestorOf",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "root",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "--": "true if one object acts as the ancestor of another.",
            "Bool:": "isAncestor"
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "ancestorOf",
        [
          {
            "Text:kind:": [
              "up",
              "object"
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "Let:be:": [
                    "up",
                    {
                      "FromTxt:": "@obj"
                    }
                  ]
                },
                {
                  "Repeating:does:": [
                    true,
                    [
                      {
                        "--": "Step up immediately, indirect implies objects dont hold themselves.",
                        "Let:be:": [
                          "up",
                          {
                            "FromTxt:": {
                              "ParentOf obj:": "@up"
                            }
                          }
                        ]
                      },
                      {
                        "If:does:else:": [
                          {
                            "Cmp:is:txt:": [
                              "@up",
                              {
                                "Equals": true
                              },
                              "@obj"
                            ]
                          },
                          [
                            {
                              "--": "parent cycle detected",
                              "Break": true
                            }
                          ],
                          {
                            "ElseIf:does:": [
                              {
                                "Cmp:is:txt:": [
                                  "@up",
                                  {
                                    "Equals": true
                                  },
                                  ""
                                ]
                              },
                              [
                                {
                                  "--": "out of world",
                                  "Break": true
                                }
                              ]
                            ]
                          }
                        ]
                      },
                      {
                        "If:does:": [
                          {
                            "Cmp:is:txt:": [
                              "@up",
                              {
                                "Equals": true
                              },
                              "@root"
                            ]
                          },
                          [
                            {
                              "--": "Success!",
                              "Let:be:": [
                                "isAncestor",
                                {
                                  "FromBool:": true
                                }
                              ]
                            },
                            {
                              "Break": true
                            }
                          ]
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "If the parent of the specified object is a valid enclosure, return its name.",
        "By default this means if the parent is a room, a supporter, or a container."
      ],
      "Pattern:requires:returns:": [
        "locationOf",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "Text:kind:": [
              "location",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "locationOf",
        [
          {
            "Text:kind:initially:": [
              "parent",
              "object",
              {
                "ParentOf obj:": "@obj"
              }
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "If:does:": [
                    {
                      "AnyTrue:": [
                        {
                          "KindOf:is:": [
                            "@parent",
                            "containers"
                          ]
                        },
                        {
                          "KindOf:is:": [
                            "@parent",
                            "supporters"
                          ]
                        },
                        {
                          "KindOf:is:": [
                            "@parent",
                            "rooms"
                          ]
                        }
                      ]
                    },
                    [
                      {
                        "Let:be:": [
                          "location",
                          "@parent"
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": "If the parent of the specified object is a kind of supporter, return its name.",
      "Pattern:requires:returns:": [
        "SupporterOf",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "Text:kind:": [
              "supporter",
              "supporter"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "SupporterOf",
        [
          {
            "Text:kind:initially:": [
              "parent",
              "object",
              {
                "ParentOf obj:": "@obj"
              }
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "If:does:": [
                    {
                      "KindOf:is:": [
                        "@parent",
                        "supporters"
                      ]
                    },
                    [
                      {
                        "Let:be:": [
                          "supporter",
                          "@parent"
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": "If the parent of the specified object is a kind of container, return its name.",
      "Pattern:requires:returns:": [
        "ContainerOf",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "Text:kind:": [
              "container",
              "container"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "ContainerOf",
        [
          {
            "Text:kind:initially:": [
              "parent",
              "object",
              {
                "ParentOf obj:": "@obj"
              }
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "If:does:": [
                    {
                      "KindOf:is:": [
                        "@parent",
                        "containers"
                      ]
                    },
                    [
                      {
                        "Let:be:": [
                          "container",
                          "@parent"
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": "If the parent of the specified object is wearing or carrying the noun, return its name.",
      "Pattern:requires:returns:": [
        "holderOf",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "Text:kind:": [
              "owner",
              "actor"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "holderOf",
        [
          {
            "Text:kind:": [
              "parent",
              "object"
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "Let:be:": [
                    "parent",
                    {
                      "FromTxt:": {
                        "ParentOf obj:": "@obj"
                      }
                    }
                  ]
                },
                {
                  "If:does:": [
                    {
                      "KindOf:is:": [
                        "@parent",
                        "actors"
                      ]
                    },
                    [
                      {
                        "Let:be:": [
                          "owner",
                          "@parent"
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "If the parent of the specified object is carrying the noun, return its name.",
        "Note that only actors can carry other objects."
      ],
      "Pattern:requires:returns:": [
        "CarrierOf",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "Text:kind:": [
              "carrier",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "CarrierOf",
        [
          {
            "Text:kind:": [
              "parent",
              "object"
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "Let:be:": [
                    "parent",
                    {
                      "FromTxt:": {
                        "ParentOf obj:": "@obj"
                      }
                    }
                  ]
                },
                {
                  "If:does:": [
                    {
                      "AllTrue:": [
                        {
                          "KindOf:is:": [
                            "@parent",
                            "actors"
                          ]
                        },
                        {
                          "Get:from:": [
                            "not worn",
                            {
                              "VarFields:": "obj"
                            }
                          ]
                        }
                      ]
                    },
                    [
                      {
                        "Let:be:": [
                          "carrier",
                          "@parent"
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "If the parent of the specified object is wearing the noun, return its name.",
        "Note that only actors can wear other objects."
      ],
      "Pattern:requires:returns:": [
        "WearerOf",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "PatternResult:": {
            "Text:kind:": [
              "wearer",
              "object"
            ]
          }
        }
      ]
    },
    {
      "Pattern:provides:rules:": [
        "WearerOf",
        [
          {
            "Text:kind:": [
              "parent",
              "object"
            ]
          }
        ],
        [
          {
            "PatternRule:does:": [
              {
                "Always": true
              },
              [
                {
                  "Let:be:": [
                    "parent",
                    {
                      "FromTxt:": {
                        "ParentOf obj:": "@obj"
                      }
                    }
                  ]
                },
                {
                  "If:does:": [
                    {
                      "AllTrue:": [
                        {
                          "KindOf:is:": [
                            "@parent",
                            "actors"
                          ]
                        },
                        {
                          "Get:from:": [
                            "worn",
                            {
                              "VarFields:": "obj"
                            }
                          ]
                        }
                      ]
                    },
                    [
                      {
                        "Let:be:": [
                          "wearer",
                          "@parent"
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    }
  ]
}
