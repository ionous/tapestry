{
  "Tapestry:": [
    {
      "--": [
        "The relative location of objects in the game world.",
        "One parent (ex. a room) can have many children (ex. a table and chairs)."
      ],
      "Define relation:cardinality oneToMany:": [
        "whereabouts",
        {
          "OneToMany:kinds:": [
            "object",
            "objects"
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "An object indicating the position or ownership of another:",
        "A kitchen encloses the cook, the cook holds a sack, the sack contains some flour."
      ],
      "Define pattern:requires:provides:do:": [
        "Parent of",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "Text:kind:": [
            "parent",
            "object"
          ]
        },
        {
          "If:do:else:": [
            {
              "KindOf:is:": [
                "@obj",
                "agents"
              ]
            },
            {
              "Set:from:": [
                "@parent",
                {
                  "FromText:": {
                    "Reciprocal:object:": [
                      "whereabouts",
                      {
                        "Object:field:": [
                          "@obj",
                          "pawn"
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            {
              "Finally do:": {
                "Set:from:": [
                  "@parent",
                  {
                    "FromText:": {
                      "Reciprocal:object:": [
                        "whereabouts",
                        "@obj"
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "Returns the name of the specified object followed by all of its parents names.",
        "Often used for event handling."
      ],
      "Define pattern:requires:provides:do:": [
        "Capture",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "TextList:": "list"
        },
        [
          {
            "Repeating:do:": [
              {
                "Not:": {
                  "Is empty:": "@obj"
                }
              },
              [
                {
                  "Push:into:": [
                    {
                      "FromText:": "@obj"
                    },
                    "@list"
                  ]
                },
                {
                  "Set:from:": [
                    "@obj",
                    {
                      "FromText:": {
                        "ParentOf obj:": {
                          "FromText:": "@obj"
                        }
                      }
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "Define pattern:requires:provides:do:": [
        "children of",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "TextList:": "kids"
        },
        {
          "Set:from:": [
            "@kids",
            {
              "FromTextList:": {
                "Relatives:object:": [
                  "whereabouts",
                  "@obj"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": "The room in which an object can be found.",
      "Define pattern:requires:provides:do:": [
        "Current room",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        [
          {
            "Text:kind:": [
              "room",
              "room"
            ]
          },
          {
            "Text:kind:initially:": [
              "search",
              "object",
              "@obj"
            ]
          }
        ],
        {
          "Repeating:do:": [
            {
              "Not:": {
                "Is empty:": "@search"
              }
            },
            [
              {
                "If:do:": [
                  {
                    "KindOf:is:": [
                      "@search",
                      "rooms"
                    ]
                  },
                  [
                    {
                      "Set:from:": [
                        "@room",
                        {
                          "FromText:": "@search"
                        }
                      ]
                    },
                    {
                      "Break": true
                    }
                  ]
                ]
              },
              {
                "Set:from:": [
                  "@search",
                  {
                    "FromText:": {
                      "ParentOf obj:": {
                        "FromText:": "@search"
                      }
                    }
                  }
                ]
              },
              {
                "If:do:": [
                  {
                    "Cmp:is:txt:": [
                      "@search",
                      "equal_to",
                      "@obj"
                    ]
                  },
                  [
                    {
                      "--": "Parent cycle detected",
                      "Break": true
                    }
                  ]
                ]
              }
            ]
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "Finds the innermost object housing two objects.",
        "However, if one object directly encloses the other, it will return that object."
      ],
      "Define pattern:requires:provides:do:": [
        "Common Ancestor",
        [
          {
            "Text:kind:": [
              "object",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "other object",
              "object"
            ]
          }
        ],
        [
          {
            "Text:kind:": [
              "ancestor",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "o1",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "o2",
              "object"
            ]
          }
        ],
        [
          {
            "Set:from:": [
              "@o1",
              {
                "FromText:": "@object"
              }
            ]
          },
          {
            "--": "We search every parent of the second object for every parent of the first object. Slow but simple.",
            "Repeating:do:": [
              {
                "Is empty:": "@ancestor"
              },
              [
                {
                  "Set:from:": [
                    "@o2",
                    {
                      "FromText:": "@other_object"
                    }
                  ]
                },
                {
                  "Repeating:do:": [
                    true,
                    [
                      {
                        "If:do:": [
                          {
                            "Cmp:is:txt:": [
                              "@o1",
                              "equal_to",
                              "@o2"
                            ]
                          },
                          [
                            {
                              "--": "Success!",
                              "Set:from:": [
                                "@ancestor",
                                {
                                  "FromText:": "@o2"
                                }
                              ]
                            },
                            {
                              "Break": true
                            }
                          ]
                        ]
                      },
                      {
                        "Set:from:": [
                          "@o2",
                          {
                            "FromText:": {
                              "ParentOf obj:": {
                                "FromText:": "@o2"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "If:do:else:": [
                          {
                            "Cmp:is:txt:": [
                              "@o2",
                              "equal_to",
                              "@other_object"
                            ]
                          },
                          [
                            {
                              "Break": true
                            }
                          ],
                          {
                            "If:do:": [
                              {
                                "Cmp:is:txt:": [
                                  "@o2",
                                  "equal_to",
                                  ""
                                ]
                              },
                              [
                                {
                                  "Break": true
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  ]
                },
                {
                  "Set:from:": [
                    "@o1",
                    {
                      "FromText:": {
                        "ParentOf obj:": {
                          "FromText:": "@o1"
                        }
                      }
                    }
                  ]
                },
                {
                  "If:do:else:": [
                    {
                      "Cmp:is:txt:": [
                        "@o1",
                        "equal_to",
                        "@object"
                      ]
                    },
                    [
                      {
                        "--": "parent cycle detected",
                        "Break": true
                      }
                    ],
                    {
                      "If:do:": [
                        {
                          "Cmp:is:txt:": [
                            "@o1",
                            "equal_to",
                            ""
                          ]
                        },
                        [
                          {
                            "--": "out of world",
                            "Break": true
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": "Returns true if the root is a parent of the object.",
      "Define pattern:requires:provides:do:": [
        "ancestor of",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          },
          {
            "Text:kind:": [
              "root",
              "object"
            ]
          }
        ],
        [
          {
            "--": "true if one object acts as the ancestor of another.",
            "Bool:": "is ancestor"
          },
          {
            "Text:kind:": [
              "up",
              "object"
            ]
          }
        ],
        [
          {
            "Set:from:": [
              "@up",
              {
                "FromText:": "@obj"
              }
            ]
          },
          {
            "Repeating:do:": [
              true,
              [
                {
                  "--": "Step up immediately, indirect implies objects dont hold themselves.",
                  "Set:from:": [
                    "@up",
                    {
                      "FromText:": {
                        "ParentOf obj:": {
                          "FromText:": "@up"
                        }
                      }
                    }
                  ]
                },
                {
                  "If:do:else:": [
                    {
                      "Cmp:is:txt:": [
                        "@up",
                        "equal_to",
                        "@obj"
                      ]
                    },
                    [
                      {
                        "--": "parent cycle detected",
                        "Break": true
                      }
                    ],
                    {
                      "If:do:": [
                        {
                          "Cmp:is:txt:": [
                            "@up",
                            "equal_to",
                            ""
                          ]
                        },
                        [
                          {
                            "--": "out of world",
                            "Break": true
                          }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "If:do:": [
                    {
                      "Cmp:is:txt:": [
                        "@up",
                        "equal_to",
                        "@root"
                      ]
                    },
                    [
                      {
                        "--": "Success!",
                        "Set:from:": [
                          "@is_ancestor",
                          {
                            "FromBool:": true
                          }
                        ]
                      },
                      {
                        "Break": true
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "If the parent of the specified object is a valid enclosure, return its name.",
        "By default the valid enclosures are a room, a supporter, or a container.",
        "Note: In inform, the only printable phrase is 'holder of'",
        "and that phrase prints the object's world tree parent: room, person, nothing, whatever.",
        "Internally, however, it has functions for 'carrier of', 'wearer of', etc.",
        "and those are exposed through evaluations and relations.",
        "For example: 'is supporting', 'is supported by', 'is held', 'running through things carried by the actor'.",
        "Whether for good or ill, Tapestry has no differentiation between phrases and internal commands."
      ],
      "Define pattern:requires:provides:do:": [
        "location of",
        {
          "Text:kind:": [
            "obj",
            "object"
          ]
        },
        {
          "Text:kind:": [
            "location",
            "object"
          ]
        },
        {
          "If:assuming:do:": [
            {
              "AnyTrue:": [
                {
                  "KindOf:is:": [
                    "@parent",
                    "containers"
                  ]
                },
                {
                  "KindOf:is:": [
                    "@parent",
                    "supporters"
                  ]
                },
                {
                  "KindOf:is:": [
                    "@parent",
                    "rooms"
                  ]
                }
              ]
            },
            {
              "Arg:from:": [
              	"parent",
                {
                  "FromText:": {
                    "ParentOf obj:": {
                      "FromText:": "@obj"
                    }
                  }
                }
              ]
            },
            {
              "Set:from:": [
                "@location",
                {
                  "FromText:": "@parent"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": "If the parent of the specified object is a kind of supporter, return its name.",
      "Define pattern:requires:provides:do:": [
        "Supporter of",
        {
          "Text:kind:": [
            "obj",
            "object"
          ]
        },
        {
          "Text:kind:": [
            "supporter",
            "supporter"
          ]
        },
        {
          "If:assuming:do:": [
            {
              "KindOf:is:": [
                "@parent",
                "supporters"
              ]
            },
            {
              "Arg:from:": [
                "parent",
                {
                  "FromText:": {
                    "ParentOf obj:": {
                      "FromText:": "@obj"
                    }
                  }
                }
              ]
            },
            [
              {
                "Set:from:": [
                  "@supporter",
                  {
                    "FromText:": "@parent"
                  }
                ]
              }
            ]
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": "If the parent of the specified object is a kind of container, return its name.",
      "Define pattern:requires:provides:do:": [
        "Container of",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        [
          {
            "Text:kind:": [
              "container",
              "container"
            ]
          },
          {
            "Text:kind:initially:": [
              "parent",
              "object",
              {
                "ParentOf obj:": {
                  "FromText:": "@obj"
                }
              }
            ]
          }
        ],
        [
          {
            "If:do:": [
              {
                "KindOf:is:": [
                  "@parent",
                  "containers"
                ]
              },
              [
                {
                  "Set:from:": [
                    "@container",
                    {
                      "FromText:": "@parent"
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": "If the parent of the specified object is wearing or carrying the noun, return its name.",
      "Define pattern:requires:provides:do:": [
        "holder of",
        {
          "Text:kind:": [
            "obj",
            "object"
          ]
        },
        {
          "Text:kind:": [
            "owner",
            "actor"
          ]
        },
        [
          {
            "If:assuming:do:": [
              {
                "KindOf:is:": [
                  "@parent",
                  "actors"
                ]
              },
              {
                "Arg:from:": [
                  "parent",
                  {
                    "FromText:": {
                      "ParentOf obj:": {
                        "FromText:": "@obj"
                      }
                    }
                  }
                ]
              },
              [
                {
                  "Set:from:": [
                    "@owner",
                    {
                      "FromText:": "@parent"
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "If the parent of the specified object is carrying the noun, return its name.",
        "Note that only actors can carry other objects."
      ],
      "Define pattern:requires:provides:do:": [
        "Carrier of",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        [
          {
            "Text:kind:": [
              "carrier",
              "actor"
            ]
          },
          {
            "Text:kind:": [
              "parent",
              "object"
            ]
          }
        ],
        [
          {
            "Set:from:": [
              "@parent",
              {
                "FromText:": {
                  "ParentOf obj:": {
                    "FromText:": "@obj"
                  }
                }
              }
            ]
          },
          {
            "If:do:": [
              {
                "AllTrue:": [
                  {
                    "KindOf:is:": [
                      "@parent",
                      "actors"
                    ]
                  },
                  {
                    "Object:field:": [
                      "@obj",
                      "not worn"
                    ]
                  }
                ]
              },
              [
                {
                  "Set:from:": [
                    "@carrier",
                    {
                      "FromText:": "@parent"
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "If the parent of the specified object is wearing the noun, return its name.",
        "Note that only actors can wear other objects."
      ],
      "Define pattern:requires:provides:do:": [
        "Wearer of",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        [
          {
            "Text:kind:": [
              "wearer",
              "actor"
            ]
          },
          {
            "Text:kind:initially:": [
              "parent",
              "object",
              {
                "ParentOf obj:": {
                  "FromText:": "@obj"
                }
              }
            ]
          }
        ],
        {
          "If:do:": [
            {
              "AllTrue:": [
                {
                  "KindOf:is:": [
                    "@parent",
                    "actors"
                  ]
                },
                {
                  "Object:field:": [
                    "@obj",
                    "worn"
                  ]
                }
              ]
            },
            [
              {
                "Set:from:": [
                  "@wearer",
                  {
                    "FromText:": "@parent"
                  }
                ]
              }
            ]
          ]
        }
      ]
    }
  ]
}
