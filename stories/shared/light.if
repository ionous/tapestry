{
  "Tapestry:": [
    {
      "--": [
        "Returns true if light gets stopped when passing from inside an object to outside an object.",
        " Note that \"lit\" objects emit light from all of their surfaces,",
        "so while a closed box might not reveal a flashlight locked inside,",
        "a glowing haunted treasure chest would illuminate its contents and the room it's in."
      ],
      "Define pattern:requires:provides:do:": [
        "fully opaque",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "Bool:": "result"
        },
        [
          {
            "If:do:else:": [
              {
                "KindOf:is:": [
                  "@obj",
                  "rooms"
                ]
              },
              [
                {
                  "Comment:": "a room is the top of line."
                },
                {
                  "Set:from:": [
                    "@result",
                    {
                      "FromBool:": true
                    }
                  ]
                }
              ],
              {
                "If:do:else:": [
                  {
                    "AllTrue:": [
                      {
                        "KindOf:is:": [
                          "@obj",
                          "containers"
                        ]
                      },
                      {
                        "Object:field:": [
                          "@obj",
                          "opaque"
                        ]
                      },
                      {
                        "Object:field:": [
                          "@obj",
                          "closed"
                        ]
                      }
                    ]
                  },
                  [
                    {
                      "Set:from:": [
                        "@result",
                        {
                          "FromBool:": true
                        }
                      ]
                    }
                  ],
                  {
                    "Finally do:": {
                      "Set:from:": [
                        "@result",
                        {
                          "FromBool:": false
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "Define pattern:requires:provides:do:": [
        "transparent of",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        [
          {
            "Text:kind:": [
              "result",
              "object"
            ]
          },
          {
            "Text:kind:initially:": [
              "parent",
              "object",
              {
                "ParentOf obj:": {
                  "FromText:": "@obj"
                }
              }
            ]
          }
        ],
        {
          "--": "normally the parent is just the parent.",
          "Set:from:": [
            "@result",
            {
              "FromText:": "@parent"
            }
          ]
        }
      ]
    },
    {
      "Rule for:do:": [
        "transparent of",
        {
          "If:do:": [
            {
              "FullyOpaque obj:": {
                "FromText:": "@obj"
              }
            },
            [
              {
                "Comment:": "for example: if our object is a closed, opaque, container, dont return anything."
              },
              {
                "Set:from:": [
                  "@result",
                  {
                    "FromText:": ""
                  }
                ]
              }
            ]
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": "Return a list containing the object and all of its transparent parents.",
      "Define pattern:requires:provides:do:": [
        "transparent list",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "TextList:": "list"
        },
        {
          "Repeating:do:": [
            {
              "Not:": {
                "Is empty:": "@obj"
              }
            },
            [
              {
                "Push:into:": [
                  {
                    "FromText:": "@obj"
                  },
                  "@list"
                ]
              },
              {
                "Set:from:": [
                  "@obj",
                  {
                    "FromText:": {
                      "TransparentOf obj:": {
                        "FromText:": "@obj"
                      }
                    }
                  }
                ]
              }
            ]
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "Returns true if the passed spot is illuminated ",
        "( because of its own light, or because of the light of some nearby object. )",
        "This roughly correlates to Inform's \"offers light\" routine."
      ],
      "Define pattern:requires:provides:do:": [
        "contains light",
        [
          {
            "Text:kind:": [
              "spot",
              "object"
            ]
          }
        ],
        [
          {
            "Bool:": "result"
          },
          {
            "TextList:": "queue"
          },
          {
            "Text:": "ceiling"
          }
        ],
        [
          {
            "Comment:": "Determine the ceiling, and add it to the queue for processing."
          },
          {
            "Repeating:do:": [
              {
                "Not:": {
                  "Is empty:": "@spot"
                }
              },
              [
                {
                  "Set:from:": [
                    "@ceiling",
                    {
                      "FromText:": "@spot"
                    }
                  ]
                },
                {
                  "Set:from:": [
                    "@spot",
                    {
                      "FromText:": {
                        "TransparentOf obj:": {
                          "FromText:": "@spot"
                        }
                      }
                    }
                  ]
                }
              ]
            ]
          },
          {
            "Push:into:": [
              {
                "FromText:": "@ceiling"
              },
              "@queue"
            ]
          },
          {
            "Repeating:do:": [
              {
                "Cmp:is:num:": [
                  {
                    "Len:": {
                      "FromTextList:": "@queue"
                    }
                  },
                  "greater_than",
                  0
                ]
              },
              [
                {
                  "Erasing:as:do:": [
                    "@queue",
                    "it",
                    [
                      {
                        "Comment:": "objects which generate light are considered to be bright both inside and out; all of their surfaces aglow."
                      },
                      {
                        "If:do:else:": [
                          {
                            "Object:field:": [
                              "@it",
                              "lit"
                            ]
                          },
                          [
                            {
                              "Set:from:": [
                                "@result",
                                {
                                  "FromBool:": true
                                }
                              ]
                            },
                            {
                              "Break": true
                            }
                          ],
                          {
                            "If:do:": [
                              {
                                "AnyTrue:": [
                                  {
                                    "Cmp:is:txt:": [
                                      "@it",
                                      "equal_to",
                                      "@ceiling"
                                    ]
                                  },
                                  {
                                    "Not:": {
                                      "FullyOpaque obj:": {
                                        "FromText:": "@it"
                                      }
                                    }
                                  }
                                ]
                              },
                              [
                                {
                                  "Comment:": "Any children of our ceiling will be considered for their light contributions, even if the ceiling wouldn't transmit that light outward."
                                },
                                {
                                  "Push:into:": [
                                    {
                                      "FromTextList:": {
                                        "ChildrenOf obj:": {
                                          "FromText:": "@it"
                                        }
                                      }
                                    },
                                    "@queue"
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    }
  ]
}
