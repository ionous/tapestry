{
  "Tapestry:": [
    {
      "Declare:": "Radiance is a kind of aspect."
    },
    {
      "Define traits:as:": [
        [
          "unlit",
          "lit"
        ],
        "radiance"
      ]
    },
    {
      "--": [
        "Radiance determines whether something produces light."
      ],
      "Define kind:fields:": [
        "Things",
        [
          {
            "Aspect:": "radiance"
          }
        ]
      ]
    },
    {
      "Declare:": "Illumination is a kind of aspect."
    },
    {
      "Define traits:as:": [
        [
          "not illuminated",
          "is illuminated"
        ],
        "illumination"
      ]
    },
    {
      "--": [
        "Returns true if light gets stopped when passing from inside an object to outside an object.",
        " Note that \"lit\" objects emit light from all of their surfaces,",
        "so while a closed box might not reveal a flashlight locked inside,",
        "a glowing haunted treasure chest would illuminate its contents and the room it's in."
      ],
      "Define pattern:requires:provides:do:": [
        "fully opaque",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "Bool:": "result"
        },
        [
          {
            "If:do:else:": [
              {
                "KindOf:is:": [
                  "@obj",
                  "rooms"
                ]
              },
              [
                {
                  "Comment:": "a room is the top of line."
                },
                {
                  "Set:value:": [
                    "@result",
                    {
                      "FromBool:": true
                    }
                  ]
                }
              ],
              {
                "If:do:else:": [
                  {
                    "AllTrue:": [
                      {
                        "KindOf:is:": [
                          "@obj",
                          "containers"
                        ]
                      },
                      {
                        "Object:field:": [
                          "@obj",
                          "opaque"
                        ]
                      },
                      {
                        "Object:field:": [
                          "@obj",
                          "closed"
                        ]
                      }
                    ]
                  },
                  [
                    {
                      "Set:value:": [
                        "@result",
                        {
                          "FromBool:": true
                        }
                      ]
                    }
                  ],
                  {
                    "Finally do:": {
                      "Set:value:": [
                        "@result",
                        {
                          "FromBool:": false
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "Define pattern:requires:provides:do:": [
        "transparent of",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        [
          {
            "Text:kind:": [
              "result",
              "object"
            ]
          },
          {
            "Text:kind:initially:": [
              "parent",
              "object",
              {
                "ParentOf obj:": {
                  "FromText:": "@obj"
                }
              }
            ]
          }
        ],
        {
          "--": "normally the parent is just the parent.",
          "Set:value:": [
            "@result",
            {
              "FromText:": "@parent"
            }
          ]
        }
      ]
    },
    {
      "Define rule:do:": [
        "transparent of",
        {
          "If:do:": [
            {
              "FullyOpaque obj:": {
                "FromText:": "@obj"
              }
            },
            [
              {
                "Comment:": "for example: if our object is a closed, opaque, container, dont return anything."
              },
              {
                "Set:value:": [
                  "@result",
                  {
                    "FromText:": ""
                  }
                ]
              }
            ]
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": "Return a list containing the object and all of its transparent parents.",
      "Define pattern:requires:provides:do:": [
        "transparent list",
        [
          {
            "Text:kind:": [
              "obj",
              "object"
            ]
          }
        ],
        {
          "TextList:": "list"
        },
        {
          "Repeating:do:": [
            {
              "Not:": {
                "Is empty:": "@obj"
              }
            },
            [
              {
                "Push:into:": [
                  {
                    "FromText:": "@obj"
                  },
                  "@list"
                ]
              },
              {
                "Set:value:": [
                  "@obj",
                  {
                    "FromText:": {
                      "TransparentOf obj:": {
                        "FromText:": "@obj"
                      }
                    }
                  }
                ]
              }
            ]
          ]
        }
      ]
    },
    {
      "--": ""
    },
    {
      "--": [
        "returns true if the actor is not in darkness."
      ],
      "Define pattern:requires:provides:do:": [
        "Illuminates",
        [
          {
            "Text:kind:": [
              "actor",
              "actor"
            ]
          },
          {
            "Bool:": [
              "refresh"
            ]
          }
        ],
        {
          "Bool:": "result"
        },
        [
          {
            "UpdateLighting actor:refresh:": [
              {
                "FromText:": "@actor"
              },
              {
                "FromBool:": "@refresh"
              }
            ]
          },
          {
            "Set:value:": [
              "@result",
              {
                "FromBool:": {
                  "Object:field:dot:": [
                    "@actor",
                    "lighting",
                    {
                      "AtField:": "is illuminated"
                    }
                  ]
                }
              }
            ]
          }
        ]
      ]
    },
    {
      "Declare:": "A lighting status is a kind of record."
    },
    {
      "Define kind:fields:": [
        "actors",
        {
          "Record:kind:": [
            "lighting",
            "lighting status"
          ]
        }
      ]
    },
    {
      "Define kind:fields:": [
        "lighting status",
        [
          {
            "Number:": "last turn"
          },
          {
            "Aspect:": "illumination"
          }
        ]
      ]
    },
    {
      "--": [
        "ensure an actor's lighting status is up to date."
      ],
      "Define pattern:requires:provides:do:": [
        "update lighting",
        [
          {
            "Text:kind:": [
              "actor",
              "actor"
            ]
          },
          {
            "--": "true if the lighting status needs updating",
            "Bool:": "refresh"
          }
        ],
        {
          "--": "returns nothing",
          "Nothing": true
        },
        [
          {
            "Expect:": {
              "--": [
                "verify we are trying to update the lighting of a valid actor.",
                "( was start game called? )"
              ],
              "Not:": {
                "Is empty:": "@actor"
              }
            }
          },
          {
            "If:do:": [
              {
                "AnyTrue:": [
                  "@refresh",
                  {
                    "Cmp:is:num:": [
                      {
                        "Object:field:": [
                          "story",
                          "turn count"
                        ]
                      },
                      "greater_than",
                      {
                        "Object:field:dot:": [
                          "@actor",
                          "lighting",
                          {
                            "AtField:": "last turn"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              [
                {
                  "Set:value:": [
                    {
                      "Object:field:": [
                        "@actor",
                        "lighting"
                      ]
                    },
                    {
                      "FromRecord:": {
                        "LightingStatus lastTurn:illumination:": [
                          {
                            "FromNumber:": {
                              "Object:field:": [
                                "story",
                                "turn count"
                              ]
                            }
                          },
                          {
                            "--": [
                              "bug: can only specify the 'aspect' which means we have to manually specify the text",
                              "i'm not even sure i like the auto generated aspects, especially in records."
                            ],
                            "FromText:": {
                              "Txt if:then:else:": [
                                {
                                  "ContainsLight object:": {
                                    "FromText:": "@actor"
                                  }
                                },
                                "is illuminated",
                                "not illuminated"
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          }
        ]
      ]
    },
    {
      "--": [
        "Determine whether the passed object is lit.",
        "An object can be lit because it provides its own light, or because some nearby object has light."
      ],
      "Define pattern:requires:provides:do:": [
        "contains light",
        [
          {
            "Text:kind:": [
              "object",
              "object"
            ]
          }
        ],
        [
          {
            "Bool:": "result"
          },
          {
            "TextList:": "queue"
          },
          {
            "Text:": "ceiling"
          }
        ],
        [
          {
            "--": "determine the ceiling.",
            "Repeating:do:": [
              {
                "Not:": {
                  "Is empty:": "@object"
                }
              },
              [
                {
                  "Set:value:": [
                    "@ceiling",
                    {
                      "FromText:": "@object"
                    }
                  ]
                },
                {
                  "Set:value:": [
                    "@object",
                    {
                      "FromText:": {
                        "TransparentOf obj:": {
                          "FromText:": "@object"
                        }
                      }
                    }
                  ]
                }
              ]
            ]
          },
          {
            "--": "add the ceiling for processing.",
            "Push:into:": [
              {
                "FromText:": "@ceiling"
              },
              "@queue"
            ]
          },
          {
            "Repeating:do:": [
              {
                "Cmp:is:num:": [
                  {
                    "Len:": {
                      "FromTextList:": "@queue"
                    }
                  },
                  "greater_than",
                  0
                ]
              },
              [
                {
                  "Erasing:as:do:": [
                    "@queue",
                    "it",
                    [
                      {
                        "Comment:": "objects which generate light are considered to be bright both inside and out; all of their surfaces aglow."
                      },
                      {
                        "If:do:else:": [
                          {
                            "Object:field:": [
                              "@it",
                              "lit"
                            ]
                          },
                          [
                            {
                              "Set:value:": [
                                "@result",
                                {
                                  "FromBool:": true
                                }
                              ]
                            },
                            {
                              "Break": true
                            }
                          ],
                          {
                            "If:do:": [
                              {
                                "AnyTrue:": [
                                  {
                                    "Cmp:is:txt:": [
                                      "@it",
                                      "equal_to",
                                      "@ceiling"
                                    ]
                                  },
                                  {
                                    "Not:": {
                                      "FullyOpaque obj:": {
                                        "FromText:": "@it"
                                      }
                                    }
                                  }
                                ]
                              },
                              [
                                {
                                  "Comment:": "Any children of our ceiling will be considered for their light contributions, even if the ceiling wouldn't transmit that light outward."
                                },
                                {
                                  "Push:into:": [
                                    {
                                      "FromTextList:": {
                                        "ChildrenOf obj:": {
                                          "FromText:": "@it"
                                        }
                                      }
                                    },
                                    "@queue"
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  ]
                }
              ]
            ]
          }
        ]
      ]
    }
  ]
}
