[
  [
    {
      "PatternDecl:name:optvars:patternReturn:": [
        "patterns",
        "fully opaque",
        {
          "PatternVariablesTail:": [
            {
              "VariableDecl:name:type object:": [
                "an",
                "obj",
                {
                  "ObjectType:kind:": [
                    "an",
                    "object"
                  ]
                }
              ]
            }
          ]
        },
        {
          "PatternReturn:": {
            "VariableDecl:name:type primitive:": [
              "a",
              "result",
              "bool"
            ]
          }
        }
      ]
    },
    {
      "Comment:": "Returns true if light gets stopped when passing from inside an object to outside an object. Note that \"lit\" objects emit light from all of their surfaces, so while a closed box might not reveal a flashlight locked inside, a glowing haunted treasure chest would illuminate its contents and the room it's in. "
    },
    {
      "PatternActions:patternRules:": [
        "fully opaque",
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                "Always",
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "result",
                        {
                          "FromBool:": false
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "PatternRule:hook activity:": [
                {
                  "AllTrue:": [
                    {
                      "KindOf:is:": [
                        "@obj",
                        "containers"
                      ]
                    },
                    {
                      "Get obj:trait:": [
                        "@obj",
                        "opaque"
                      ]
                    },
                    {
                      "Get obj:trait:": [
                        "@obj",
                        "closed"
                      ]
                    }
                  ]
                },
                {
                  "Act:": [
                    {
                      "Let:be:": [
                        "result",
                        {
                          "FromBool:": true
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "PatternRule:hook activity:": [
                {
                  "KindOf:is:": [
                    "@obj",
                    "rooms"
                  ]
                },
                {
                  "Act:": [
                    {
                      "Comment:": "a room is the top of line."
                    },
                    {
                      "Let:be:": [
                        "result",
                        {
                          "FromBool:": true
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  [
    {
      "PatternDecl:name:optvars:": [
        "patterns",
        "transparentOf",
        {
          "PatternVariablesTail:": [
            {
              "VariableDecl:name:type object:": [
                "an",
                "obj",
                {
                  "ObjectType:kind:": [
                    "an",
                    "object"
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "PatternActions:patternLocals:patternReturn:patternRules:": [
        "transparentOf",
        {
          "PatternLocals:": [
            {
              "LocalDecl:value:": [
                {
                  "VariableDecl:name:type object:": [
                    "our",
                    "parent",
                    {
                      "ObjectType:kind:": [
                        "an",
                        "object"
                      ]
                    }
                  ]
                },
                {
                  "LocalInit:": {
                    "FromTxt:": {
                      "Determine:arguments:": [
                        "ParentOf",
                        {
                          "Args:": [
                            {
                              "Arg:from:": [
                                "obj",
                                {
                                  "FromTxt:": "@obj"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "PatternReturn:": {
            "VariableDecl:name:type object:": [
              "a",
              "result",
              {
                "ObjectType:kind:": [
                  "an",
                  "object"
                ]
              }
            ]
          }
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                "Always",
                {
                  "Act:": [
                    {
                      "Comment:": "normally the parent is just the parent."
                    },
                    {
                      "Let:be:": [
                        "result",
                        {
                          "FromTxt:": "@parent"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "PatternRule:hook activity:": [
                {
                  "Determine:arguments:": [
                    "fully opaque",
                    {
                      "Args:": [
                        {
                          "Arg:from:": [
                            "obj",
                            "@obj"
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "Act:": [
                    {
                      "Comment:": "for example: if our object is a closed, opaque, container, dont return anything."
                    },
                    {
                      "Let:be:": [
                        "result",
                        {
                          "FromTxt:": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  [
    {
      "PatternDecl:name:optvars:": [
        "patterns",
        "transparentList",
        {
          "PatternVariablesTail:": [
            {
              "VariableDecl:name:type object:": [
                "a",
                "obj",
                {
                  "ObjectType:kind:": [
                    "an",
                    "object"
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Comment:": "Return a list containing the object and all of its transparent parents. "
    },
    {
      "PatternActions:patternReturn:patternRules:": [
        "transparentList",
        {
          "PatternReturn:": {
            "VariableDecl:name:type ext:": [
              "a",
              "list",
              {
                "ExtType textList:": "list"
              }
            ]
          }
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                "Always",
                {
                  "Act:": [
                    {
                      "Repeating:do:": [
                        {
                          "Not:": {
                            "Is empty:": "@obj"
                          }
                        },
                        {
                          "Act:": [
                            {
                              "Put:into:": [
                                "@obj",
                                {
                                  "IntoTxts:": "list"
                                }
                              ]
                            },
                            {
                              "Let:be:": [
                                "obj",
                                {
                                  "FromTxt:": {
                                    "Determine:arguments:": [
                                      "TransparentOf",
                                      {
                                        "Args:": [
                                          {
                                            "Arg:from:": [
                                              "obj",
                                              {
                                                "FromTxt:": "@obj"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  [
    {
      "PatternDecl:name:optvars:patternReturn:": [
        "patterns",
        "contains light",
        {
          "PatternVariablesTail:": [
            {
              "VariableDecl:name:type object:": [
                "a",
                "spot",
                {
                  "ObjectType:kind:": [
                    "an",
                    "object"
                  ]
                }
              ]
            }
          ]
        },
        {
          "PatternReturn:": {
            "VariableDecl:name:type primitive:": [
              "a",
              "result",
              "bool"
            ]
          }
        }
      ]
    },
    {
      "Comment:": "Returns true if the passed spot is illuminated ( because of its own light, or because of the light of some nearby objet. ) This roughly correlates to Inform's \"offers light\" routine."
    },
    {
      "PatternActions:patternLocals:patternRules:": [
        "contains light",
        {
          "PatternLocals:": [
            {
              "LocalDecl:": {
                "VariableDecl:name:type ext:": [
                  "a",
                  "queue",
                  {
                    "ExtType textList:": "list"
                  }
                ]
              }
            },
            {
              "LocalDecl:": {
                "VariableDecl:name:type primitive:": [
                  "a",
                  "ceiling",
                  "text"
                ]
              }
            }
          ]
        },
        {
          "PatternRules:": [
            {
              "PatternRule:hook activity:": [
                "Always",
                {
                  "Act:": [
                    {
                      "Comment:": "Determine the ceiling, and add it to the queue for processing."
                    },
                    {
                      "Repeating:do:": [
                        {
                          "Not:": {
                            "Is empty:": "@spot"
                          }
                        },
                        {
                          "Act:": [
                            {
                              "Let:be:": [
                                "ceiling",
                                "@spot"
                              ]
                            },
                            {
                              "Let:be:": [
                                "spot",
                                {
                                  "FromTxt:": {
                                    "Determine:arguments:": [
                                      "TransparentOf",
                                      {
                                        "Args:": [
                                          {
                                            "Arg:from:": [
                                              "obj",
                                              "@spot"
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "Put:into:": [
                        "@ceiling",
                        {
                          "IntoTxts:": "queue"
                        }
                      ]
                    },
                    {
                      "Repeating:do:": [
                        {
                          "Cmp:is:num:": [
                            {
                              "Len:": "@queue"
                            },
                            "GreaterThan",
                            0
                          ]
                        },
                        {
                          "Act:": [
                            {
                              "Erasing:as:do:": [
                                {
                                  "VarOfTxts:": "queue"
                                },
                                "it",
                                {
                                  "Act:": [
                                    {
                                      "Comment:": "objects which generate light are considered to be bright both inside and out; all of their surfaces aglow."
                                    },
                                    {
                                      "If:do:else:": [
                                        {
                                          "Get obj:trait:": [
                                            "@it",
                                            "lit"
                                          ]
                                        },
                                        {
                                          "Act:": [
                                            {
                                              "Let:be:": [
                                                "result",
                                                {
                                                  "FromBool:": true
                                                }
                                              ]
                                            },
                                            "Break"
                                          ]
                                        },
                                        {
                                          "ElseIf:do:": [
                                            {
                                              "AnyTrue:": [
                                                {
                                                  "Cmp:is:txt:": [
                                                    "@it",
                                                    "Equals",
                                                    "@ceiling"
                                                  ]
                                                },
                                                {
                                                  "Not:": {
                                                    "Determine:arguments:": [
                                                      "fully opaque",
                                                      {
                                                        "Args:": [
                                                          {
                                                            "Arg:from:": [
                                                              "obj",
                                                              "@it"
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "Act:": [
                                                {
                                                  "Comment:": "Any children of our ceiling will be considered for their light contributions, even if the ceiling wouldn't transmit that light outward. "
                                                },
                                                {
                                                  "Put:into:": [
                                                    {
                                                      "FromTxts:": {
                                                        "Determine:arguments:": [
                                                          "childrenOf",
                                                          {
                                                            "Args:": [
                                                              {
                                                                "Arg:from:": [
                                                                  "obj",
                                                                  "@it"
                                                                ]
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "IntoTxts:": "queue"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
]
