{
  "Tapestry:": [
    {
      "--": "State changing alters the state of a noun by changing a trait.",
      "Define action:requires:": [
        "state changing",
        [
          {
            "--": "the noun that wants to change state.",
            "Text:kind:": [
              "noun",
              "thing"
            ]
          },
          {
            "--": "the actor who is causing the state to change.",
            "Text:kind:": [
              "actor",
              "actor"
            ]
          },
          {
            "--": "the state the noun wants to change to.",
            "Text:": "trait"
          },
          {
            "--": "a trait which, if true, can block the noun from changing.",
            "Text:": "guard"
          },
          {
            "--": "some text which describes what's changing.",
            "Text:": "change"
          }
        ]
      ]
    },
    {
      "--": ""
    },
    {
      "--": "Assuming all the rules before now passed, give the noun the desired trait.",
      "Rule for:do:": [
        "state changing",
        {
          "Set:from:": [
            {
              "Object:field:": [
                "@noun",
                "@trait"
              ]
            },
            {
              "FromBool:": true
            }
          ]
        }
      ]
    },
    {
      "--": "Print the results of the change.",
      "Rule for:do:": [
        "report state changing",
        {
          "Say response:with:": [
            "something changed itself",
            "{The: .noun|capitalize!} {are:.noun} {.trait}."
          ]
        }
      ]
    },
    {
      "--": "Print the results of the change.",
      "Rule for:do:": [
        "report state changing",
        {
          "If:do:": [
            {
              "IsPlayer obj:": {
                "FromText:": "@actor"
              }
            },
            {
              "Say response:with:": [
                "the player changed something",
                "{We!|capitalize!} {.change} {the: .noun}."
              ]
            }
          ]
        }
      ]
    },
    {
      "--": "The noun won't change if the 'guard' value is set and the noun has that trait.",
      "Rule for:do:": [
        "instead of state changing",
        {
          "If:do:": [
            {
              "AllTrue:": [
                {
                  "Not:": {
                    "Is empty:": "@guard"
                  }
                },
                {
                  "Not:": {
                    "Object:field:": [
                      "@noun",
                      "@guard"
                    ]
                  }
                }
              ]
            },
            [
              {
                "Say response:with:": [
                  "can't change the unchangeable",
                  "{They: .noun|capitalize!} {arent: .noun} something {we!} can {.change}."
                ]
              }
            ]
          ]
        }
      ]
    },
    {
      "--": "The noun won't change if it already has the desired trait.",
      "Rule for:do:": [
        "instead of state changing",
        {
          "If:do:": [
            {
              "Object:field:": [
                "@noun",
                "@trait"
              ]
            },
            {
              "Say response:with:": [
                "can't change what is",
                "{They: .noun|capitalize!} {are:.noun} already {.trait}."
              ]
            }
          ]
        }
      ]
    }
  ]
}
