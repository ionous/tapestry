Tapestry:
- # 'Cloak of Darkness', originally told by Roger Firth,
  # is a story which has been implemented in many if systems over the years.
  # It contains some essential features used by interactive fiction including: descriptions of rooms,
  # their contents, and connections, darkness and the control of light, scoring, and more.
  Define scene:requires:with:
  - "cloak"
  - - "tapestry"
    - "scoring"
  - - Declare: """
      The title of the story is "The Cloak of Darkness."
      The story has the headline "An example story."
      The story has the max score 2.
      The Foyer of the Opera House is a room. You are in the foyer.
      The description of the Foyer is "You are standing in a spacious hall, splendidly decorated in red and gold,
      with glittering chandeliers overhead. The entrance from the street is to the north,
      and there are doorways south and east."
      The entrance is a scenery door in the lobby.
      North from the foyer is the entrance.
      Through the entrance is the Street.
      """ # "
    - Define rule:noun:do:
        - "instead of traveling"
        - "entrance"
        - - Say: "You've only just arrived and besides the weather outside is terrible."

    - # The Cloakroom
      Declare: """
        The Cloakroom is a room. East from the Foyer is the Cloakroom.
        The Cloakroom has the description "In the Opera's better days the walls of this small room must have been lined with coat hooks.
        Now, only one remains. The exit is a door to the west."

        In the Cloakroom is a scenery supporter called the small brass hook.
        The hook has the description "A brass hook{if children_of: .hook}
        with {children_of: .hook | print_inline_objects!}
        hanging on it{else} screwed into the wall{end}."

        Understand "peg" as the hook.
        Understand "hang [objects] on/onto [objects]" as storing.
        """ # "
    - # The Bar
      Declare: """
        South from the Foyer is the Foyer Bar. The bar is unlit. The scrawled message is scenery in the bar.
        The description of the bar is "The bar, much rougher than you'd have guessed after the opulence of the foyer to the north,
        is completely empty. There seems to be some sort of message scrawled in the sawdust on the floor."

        Neatness is a kind of aspect. The neatnesses are neat, scuffed, and trampled.
        Messages are a kind of thing. Messages have a neatness. The scrawled message is a message.
        Understand "floor" or "sawdust" as the message.
        """ # "
    - Define rule:noun:do:
        - "instead of examining"
        - "message"
        - - Increase:
              Object:field:
                - "story"
                - "score"
          - Say: "The message, {if .message.neat}neatly {end}marked in the sawdust, reads..."
          - EndGame finally:
              FromBool: true
    - # when multiple rules for the same action exist
      # the later rule is considered a refinement.
      # it "overrides" rules described earlier
      # a sort of, i may have said that before but actually...
      Define rule:noun:do:
        - "instead of examining"
        - "message"
        - - If:do:
              - Object:field:
                  - "message"
                  - "trampled"
              - - Say: """
                  The message has been carelessly trampled, making it difficult to read.
                  You can just distinguish the words...
                  """
                - EndGame saying:
                    FromText: "You have lost"
    - Define rule:do:
        - "instead of going"
        - - If:do:
              - AllTrue:
                  - Is:matching:text:
                      - Object:field:
                          - "story"
                          - "location"
                      - "equal_to"
                      - IdOf: "bar"
                  - Object:field:
                      - "bar"
                      - "unlit"
                  - # this is unsatisfying
                    # would love to say 'destination' other than 'foyer'
                    # but destination comes from door, and if there is no door there's no destination.
                    Is:matching:text:
                      - "@direction"
                      - "other_than"
                      - "north"
              - - Set:trait:
                    - "message"
                    - "trampled"
                - Say: "Blundering around in the dark isn't a good idea!"
    - # block actions other than "going" when in the darkened bar:
      Define rule:do:
        - "instead of running action"
        - - If:do:
              - AllTrue:
                  - Is:matching:text:
                      - Object:field:
                          - "story"
                          - "location"
                      - "equal_to"
                      - IdOf: "bar"
                  - Is:matching:text:
                      - "@action"
                      - "other_than"
                      - "going"
                  - Object:field:
                      - "bar"
                      - "unlit"
              - - # increase neatness, clamp so that it doesn't go past 'trampled'
                  Increase:aspect:clamp:
                    - "message"
                    - "neatness"
                    - true
                - Say: "In the dark? You could easily disturb something."
    - # The cloak of darkness.
      Declare: """
      You are wearing a velvet cloak. The description of the cloak is "A handsome cloak made of velvet trimmed with satin.
        Its blackness is so deep that it seems to suck light from the room."
      Understand "dark", "black", or "satin" as the cloak.
      """ # "

    - Define rule:noun:do:
        - "after taking"
        - "cloak"
        - - Set:trait:
              - "bar"
              - "unlit"
    - # FIX: generic way to capture is/not in possession
      # FIX: cant you keep taking/storing the cloak and increasing your score?
      Define rule:noun:do:
        - "after dropping"
        - "cloak"
        - - Set:trait:
              - "bar"
              - "lit"
    - Define rule:noun:do:
        - "after storing"
        - "cloak"
        - - Set:trait:
              - "bar"
              - "lit"
          - Increase:
              Object:field:
                - "story"
                - "score"
    - Define rule:noun:do:
        - "instead of dropping"
        - "cloak"
        - - If:do:
              - Is:matching:text:
                  - Object:field:
                      - "story"
                      - "location"
                  - "other_than"
                  - "cloakroom"
              - - Say: "This isn't the best place to leave such a nice piece of clothing."
    - Define rule:noun:do:
        - "instead of storing"
        - "cloak"
        - - If:do:
              - Is:matching:text:
                  - Object:field:
                      - "story"
                      - "location"
                  - "other_than"
                  - "cloakroom"
              - - Say: "This isn't the best place to leave such a nice piece of clothing."
    - Define test:do:
        - "cloak of dropping"
        - - StartGame actor:quietly:
              - FromText:
                  Object:field:
                    - "player"
                    - "pawn"
              - FromBool: true
          - Fabricate input: "e; take off cloak; drop cloak; w; s; x message"
          - Expect:
              Object:field:
                - "story"
                - "completed"
          - Expect:
              Is:matching:num:
                - Object:field:
                    - "story"
                    - "score"
                - "equal_to"
                - 1
    - Define test:do:
        - "cloak of perfection"
        - - StartGame actor:quietly:
              - FromText:
                  Object:field:
                    - "player"
                    - "pawn"
              - FromBool: true
          - Fabricate input: "e; take off cloak; put cloak on peg; w; s; x message"
          - Expect:
              Object:field:
                - "story"
                - "completed"
          - Expect:
              Is:matching:num:
                - Object:field:
                    - "story"
                    - "score"
                - "equal_to"
                - 2
    - Define test:do:
        - "cloak of failure"
        - - StartGame actor:quietly:
              - FromText:
                  Object:field:
                    - "player"
                    - "pawn"
              - FromBool: true
          - Fabricate input: "s; jump; jump; n; e; take off cloak; drop cloak; w; s; x message"
          - # game should be finished, but not completed.
            Expect:
              Object:field:
                - "story"
                - "concluded"
          - # dropping the cloak shouldn't have earned you any points.
            Expect:
              Is:matching:num:
                - Object:field:
                    - "story"
                    - "score"
                - "equal_to"
                - 0
